[
 {
  "classes": [
   {
    "fields": [],
    "name": "Field",
    "methods": [
     {
      "type": "T",
      "name": "getZero",
      "params": []
     },
     {
      "type": "T",
      "name": "getOne",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math",
  "filename": "Field.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "MathConfigurationException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math",
  "filename": "MathConfigurationException.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FieldElement",
    "methods": [
     {
      "type": "T",
      "name": "add",
      "params": [
       {
        "type": "T",
        "name": "a"
       }
      ]
     },
     {
      "type": "T",
      "name": "subtract",
      "params": [
       {
        "type": "T",
        "name": "a"
       }
      ]
     },
     {
      "type": "T",
      "name": "multiply",
      "params": [
       {
        "type": "T",
        "name": "a"
       }
      ]
     },
     {
      "type": "T",
      "name": "divide",
      "params": [
       {
        "type": "T",
        "name": "a"
       }
      ]
     },
     {
      "type": "Field",
      "name": "getField",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math",
  "filename": "FieldElement.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "maxEvaluations"
     }
    ],
    "name": "MaxEvaluationsExceededException",
    "methods": [
     {
      "type": "int",
      "name": "getMaxEvaluations",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math",
  "filename": "MaxEvaluationsExceededException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "ConvergenceException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math",
  "filename": "ConvergenceException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "DEPRECATION_MESSAGE"
     },
     {
      "type": "Localizable",
      "name": "pattern"
     },
     {
      "type": "Object",
      "name": "arguments"
     }
    ],
    "name": "MathRuntimeException",
    "methods": [
     {
      "type": null,
      "name": "addMessage",
      "params": [
       {
        "type": "Localizable",
        "name": "pat"
       },
       {
        "type": "Object",
        "name": "args"
       }
      ]
     },
     {
      "type": null,
      "name": "setContext",
      "params": [
       {
        "type": "String",
        "name": "key"
       },
       {
        "type": "Object",
        "name": "value"
       }
      ]
     },
     {
      "type": "Object",
      "name": "getContext",
      "params": [
       {
        "type": "String",
        "name": "key"
       }
      ]
     },
     {
      "type": "Set",
      "name": "getContextKeys",
      "params": []
     },
     {
      "type": "String",
      "name": "buildMessage",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       },
       {
        "type": "Localizable",
        "name": "pattern"
       },
       {
        "type": "Object",
        "name": "arguments"
       }
      ]
     },
     {
      "type": "String",
      "name": "getMessage",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "String",
      "name": "getMessage",
      "params": []
     },
     {
      "type": "String",
      "name": "getLocalizedMessage",
      "params": []
     },
     {
      "type": null,
      "name": "printStackTrace",
      "params": []
     },
     {
      "type": null,
      "name": "printStackTrace",
      "params": [
       {
        "type": "PrintStream",
        "name": "out"
       }
      ]
     },
     {
      "type": "ArithmeticException",
      "name": "createArithmeticException",
      "params": [
       {
        "type": "Localizable",
        "name": "pattern"
       },
       {
        "type": "Object",
        "name": "arguments"
       }
      ]
     },
     {
      "type": "ArrayIndexOutOfBoundsException",
      "name": "createArrayIndexOutOfBoundsException",
      "params": [
       {
        "type": "Localizable",
        "name": "pattern"
       },
       {
        "type": "Object",
        "name": "arguments"
       }
      ]
     },
     {
      "type": "EOFException",
      "name": "createEOFException",
      "params": [
       {
        "type": "Localizable",
        "name": "pattern"
       },
       {
        "type": "Object",
        "name": "arguments"
       }
      ]
     },
     {
      "type": "IOException",
      "name": "createIOException",
      "params": [
       {
        "type": "Throwable",
        "name": "rootCause"
       }
      ]
     },
     {
      "type": "IllegalArgumentException",
      "name": "createIllegalArgumentException",
      "params": [
       {
        "type": "Localizable",
        "name": "pattern"
       },
       {
        "type": "Object",
        "name": "arguments"
       }
      ]
     },
     {
      "type": "IllegalArgumentException",
      "name": "createIllegalArgumentException",
      "params": [
       {
        "type": "Throwable",
        "name": "rootCause"
       }
      ]
     },
     {
      "type": "IllegalStateException",
      "name": "createIllegalStateException",
      "params": [
       {
        "type": "Localizable",
        "name": "pattern"
       },
       {
        "type": "Object",
        "name": "arguments"
       }
      ]
     },
     {
      "type": "ConcurrentModificationException",
      "name": "createConcurrentModificationException",
      "params": [
       {
        "type": "Localizable",
        "name": "pattern"
       },
       {
        "type": "Object",
        "name": "arguments"
       }
      ]
     },
     {
      "type": "NoSuchElementException",
      "name": "createNoSuchElementException",
      "params": [
       {
        "type": "Localizable",
        "name": "pattern"
       },
       {
        "type": "Object",
        "name": "arguments"
       }
      ]
     },
     {
      "type": "ParseException",
      "name": "createParseException",
      "params": [
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "Localizable",
        "name": "pattern"
       },
       {
        "type": "Object",
        "name": "arguments"
       }
      ]
     },
     {
      "type": "RuntimeException",
      "name": "createInternalError",
      "params": [
       {
        "type": "Throwable",
        "name": "cause"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math",
  "filename": "MathRuntimeException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "DEPRECATION_MESSAGE"
     },
     {
      "type": "Localizable",
      "name": "pattern"
     },
     {
      "type": "Object",
      "name": "arguments"
     }
    ],
    "name": "MathException",
    "methods": [
     {
      "type": null,
      "name": "addMessage",
      "params": [
       {
        "type": "Localizable",
        "name": "pat"
       },
       {
        "type": "Object",
        "name": "args"
       }
      ]
     },
     {
      "type": null,
      "name": "setContext",
      "params": [
       {
        "type": "String",
        "name": "key"
       },
       {
        "type": "Object",
        "name": "value"
       }
      ]
     },
     {
      "type": "Object",
      "name": "getContext",
      "params": [
       {
        "type": "String",
        "name": "key"
       }
      ]
     },
     {
      "type": "Set",
      "name": "getContextKeys",
      "params": []
     },
     {
      "type": "String",
      "name": "getMessage",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "String",
      "name": "getMessage",
      "params": []
     },
     {
      "type": "String",
      "name": "getLocalizedMessage",
      "params": []
     },
     {
      "type": null,
      "name": "printStackTrace",
      "params": []
     },
     {
      "type": null,
      "name": "printStackTrace",
      "params": [
       {
        "type": "PrintStream",
        "name": "out"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math",
  "filename": "MathException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "String",
      "name": "POW_TRAP"
     }
    ],
    "name": "DfpMath",
    "methods": [
     {
      "type": "Dfp",
      "name": "split",
      "params": [
       {
        "type": "DfpField",
        "name": "field"
       },
       {
        "type": "String",
        "name": "a"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "split",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "splitMult",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       },
       {
        "type": "Dfp",
        "name": "b"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "splitDiv",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       },
       {
        "type": "Dfp",
        "name": "b"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "splitPow",
      "params": [
       {
        "type": "Dfp",
        "name": "base"
       },
       {
        "type": "int",
        "name": "a"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "pow",
      "params": [
       {
        "type": "Dfp",
        "name": "base"
       },
       {
        "type": "int",
        "name": "a"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "exp",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "expInternal",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "log",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "logInternal",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "pow",
      "params": [
       {
        "type": "Dfp",
        "name": "x"
       },
       {
        "type": "Dfp",
        "name": "y"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "sinInternal",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "cosInternal",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "sin",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "cos",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "tan",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "atanInternal",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "atan",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "asin",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "acos",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.dfp",
  "filename": "DfpMath.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "RADIX"
     },
     {
      "type": "int",
      "name": "MIN_EXP"
     },
     {
      "type": "int",
      "name": "MAX_EXP"
     },
     {
      "type": "int",
      "name": "ERR_SCALE"
     },
     {
      "type": "byte",
      "name": "FINITE"
     },
     {
      "type": "byte",
      "name": "INFINITE"
     },
     {
      "type": "byte",
      "name": "SNAN"
     },
     {
      "type": "byte",
      "name": "QNAN"
     },
     {
      "type": "String",
      "name": "NAN_STRING"
     },
     {
      "type": "String",
      "name": "POS_INFINITY_STRING"
     },
     {
      "type": "String",
      "name": "NEG_INFINITY_STRING"
     },
     {
      "type": "String",
      "name": "ADD_TRAP"
     },
     {
      "type": "String",
      "name": "MULTIPLY_TRAP"
     },
     {
      "type": "String",
      "name": "DIVIDE_TRAP"
     },
     {
      "type": "String",
      "name": "SQRT_TRAP"
     },
     {
      "type": "String",
      "name": "ALIGN_TRAP"
     },
     {
      "type": "String",
      "name": "TRUNC_TRAP"
     },
     {
      "type": "String",
      "name": "NEXT_AFTER_TRAP"
     },
     {
      "type": "String",
      "name": "LESS_THAN_TRAP"
     },
     {
      "type": "String",
      "name": "GREATER_THAN_TRAP"
     },
     {
      "type": "String",
      "name": "NEW_INSTANCE_TRAP"
     },
     {
      "type": "int",
      "name": "mant"
     },
     {
      "type": "byte",
      "name": "sign"
     },
     {
      "type": "int",
      "name": "exp"
     },
     {
      "type": "byte",
      "name": "nans"
     },
     {
      "type": "DfpField",
      "name": "field"
     }
    ],
    "name": "Dfp",
    "methods": [
     {
      "type": "Dfp",
      "name": "newInstance",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "newInstance",
      "params": [
       {
        "type": "byte",
        "name": "x"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newInstance",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newInstance",
      "params": [
       {
        "type": "long",
        "name": "x"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newInstance",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newInstance",
      "params": [
       {
        "type": "Dfp",
        "name": "d"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newInstance",
      "params": [
       {
        "type": "String",
        "name": "s"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newInstance",
      "params": [
       {
        "type": "byte",
        "name": "sig"
       },
       {
        "type": "byte",
        "name": "code"
       }
      ]
     },
     {
      "type": "DfpField",
      "name": "getField",
      "params": []
     },
     {
      "type": "int",
      "name": "getRadixDigits",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getZero",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getOne",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getTwo",
      "params": []
     },
     {
      "type": null,
      "name": "shiftLeft",
      "params": []
     },
     {
      "type": null,
      "name": "shiftRight",
      "params": []
     },
     {
      "type": "int",
      "name": "align",
      "params": [
       {
        "type": "int",
        "name": "e"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "lessThan",
      "params": [
       {
        "type": "Dfp",
        "name": "x"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "greaterThan",
      "params": [
       {
        "type": "Dfp",
        "name": "x"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isInfinite",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isNaN",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "boolean",
      "name": "unequal",
      "params": [
       {
        "type": "Dfp",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "compare",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       },
       {
        "type": "Dfp",
        "name": "b"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "rint",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "floor",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "ceil",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "remainder",
      "params": [
       {
        "type": "Dfp",
        "name": "d"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "trunc",
      "params": [
       {
        "type": "DfpField",
        "name": "rmode"
       }
      ]
     },
     {
      "type": "int",
      "name": "intValue",
      "params": []
     },
     {
      "type": "int",
      "name": "log10K",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "power10K",
      "params": [
       {
        "type": "int",
        "name": "e"
       }
      ]
     },
     {
      "type": "int",
      "name": "log10",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "power10",
      "params": [
       {
        "type": "int",
        "name": "e"
       }
      ]
     },
     {
      "type": "int",
      "name": "complement",
      "params": [
       {
        "type": "int",
        "name": "extra"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "add",
      "params": [
       {
        "type": "Dfp",
        "name": "x"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "negate",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "subtract",
      "params": [
       {
        "type": "Dfp",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "round",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "multiply",
      "params": [
       {
        "type": "Dfp",
        "name": "x"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "multiply",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "divide",
      "params": [
       {
        "type": "Dfp",
        "name": "divisor"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "divide",
      "params": [
       {
        "type": "int",
        "name": "divisor"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "sqrt",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": "String",
      "name": "dfp2sci",
      "params": []
     },
     {
      "type": "String",
      "name": "dfp2string",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "dotrap",
      "params": [
       {
        "type": "int",
        "name": "type"
       },
       {
        "type": "String",
        "name": "what"
       },
       {
        "type": "Dfp",
        "name": "oper"
       },
       {
        "type": "Dfp",
        "name": "result"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "trap",
      "params": [
       {
        "type": "int",
        "name": "type"
       },
       {
        "type": "String",
        "name": "what"
       },
       {
        "type": "Dfp",
        "name": "oper"
       },
       {
        "type": "Dfp",
        "name": "def"
       },
       {
        "type": "Dfp",
        "name": "result"
       }
      ]
     },
     {
      "type": "int",
      "name": "classify",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "copysign",
      "params": [
       {
        "type": "Dfp",
        "name": "x"
       },
       {
        "type": "Dfp",
        "name": "y"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "nextAfter",
      "params": [
       {
        "type": "Dfp",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "toDouble",
      "params": []
     },
     {
      "type": "double",
      "name": "toSplitDouble",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.dfp",
  "filename": "Dfp.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DfpDec",
    "methods": [
     {
      "type": "Dfp",
      "name": "newInstance",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "newInstance",
      "params": [
       {
        "type": "byte",
        "name": "x"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newInstance",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newInstance",
      "params": [
       {
        "type": "long",
        "name": "x"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newInstance",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newInstance",
      "params": [
       {
        "type": "Dfp",
        "name": "d"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newInstance",
      "params": [
       {
        "type": "String",
        "name": "s"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newInstance",
      "params": [
       {
        "type": "byte",
        "name": "sign"
       },
       {
        "type": "byte",
        "name": "nans"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDecimalDigits",
      "params": []
     },
     {
      "type": "int",
      "name": "round",
      "params": [
       {
        "type": "int",
        "name": "in"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "nextAfter",
      "params": [
       {
        "type": "Dfp",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.dfp",
  "filename": "DfpDec.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "FLAG_INVALID"
     },
     {
      "type": "int",
      "name": "FLAG_DIV_ZERO"
     },
     {
      "type": "int",
      "name": "FLAG_OVERFLOW"
     },
     {
      "type": "int",
      "name": "FLAG_UNDERFLOW"
     },
     {
      "type": "int",
      "name": "FLAG_INEXACT"
     },
     {
      "type": "String",
      "name": "sqr2String"
     },
     {
      "type": "String",
      "name": "sqr2ReciprocalString"
     },
     {
      "type": "String",
      "name": "sqr3String"
     },
     {
      "type": "String",
      "name": "sqr3ReciprocalString"
     },
     {
      "type": "String",
      "name": "piString"
     },
     {
      "type": "String",
      "name": "eString"
     },
     {
      "type": "String",
      "name": "ln2String"
     },
     {
      "type": "String",
      "name": "ln5String"
     },
     {
      "type": "String",
      "name": "ln10String"
     },
     {
      "type": "int",
      "name": "radixDigits"
     },
     {
      "type": "Dfp",
      "name": "zero"
     },
     {
      "type": "Dfp",
      "name": "one"
     },
     {
      "type": "Dfp",
      "name": "two"
     },
     {
      "type": "Dfp",
      "name": "sqr2"
     },
     {
      "type": "Dfp",
      "name": "sqr2Split"
     },
     {
      "type": "Dfp",
      "name": "sqr2Reciprocal"
     },
     {
      "type": "Dfp",
      "name": "sqr3"
     },
     {
      "type": "Dfp",
      "name": "sqr3Reciprocal"
     },
     {
      "type": "Dfp",
      "name": "pi"
     },
     {
      "type": "Dfp",
      "name": "piSplit"
     },
     {
      "type": "Dfp",
      "name": "e"
     },
     {
      "type": "Dfp",
      "name": "eSplit"
     },
     {
      "type": "Dfp",
      "name": "ln2"
     },
     {
      "type": "Dfp",
      "name": "ln2Split"
     },
     {
      "type": "Dfp",
      "name": "ln5"
     },
     {
      "type": "Dfp",
      "name": "ln5Split"
     },
     {
      "type": "Dfp",
      "name": "ln10"
     },
     {
      "type": "RoundingMode",
      "name": "rMode"
     },
     {
      "type": "int",
      "name": "ieeeFlags"
     }
    ],
    "name": "DfpField",
    "methods": [
     {
      "type": "int",
      "name": "getRadixDigits",
      "params": []
     },
     {
      "type": null,
      "name": "setRoundingMode",
      "params": [
       {
        "type": "RoundingMode",
        "name": "mode"
       }
      ]
     },
     {
      "type": "RoundingMode",
      "name": "getRoundingMode",
      "params": []
     },
     {
      "type": "int",
      "name": "getIEEEFlags",
      "params": []
     },
     {
      "type": null,
      "name": "clearIEEEFlags",
      "params": []
     },
     {
      "type": null,
      "name": "setIEEEFlags",
      "params": [
       {
        "type": "int",
        "name": "flags"
       }
      ]
     },
     {
      "type": null,
      "name": "setIEEEFlagsBits",
      "params": [
       {
        "type": "int",
        "name": "bits"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newDfp",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "newDfp",
      "params": [
       {
        "type": "byte",
        "name": "x"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newDfp",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newDfp",
      "params": [
       {
        "type": "long",
        "name": "x"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newDfp",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newDfp",
      "params": [
       {
        "type": "Dfp",
        "name": "d"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newDfp",
      "params": [
       {
        "type": "String",
        "name": "s"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "newDfp",
      "params": [
       {
        "type": "byte",
        "name": "sign"
       },
       {
        "type": "byte",
        "name": "nans"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "getZero",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getOne",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getTwo",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getSqr2",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getSqr2Split",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getSqr2Reciprocal",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getSqr3",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getSqr3Reciprocal",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getPi",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getPiSplit",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getE",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getESplit",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getLn2",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getLn2Split",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getLn5",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getLn5Split",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "getLn10",
      "params": []
     },
     {
      "type": "Dfp",
      "name": "split",
      "params": [
       {
        "type": "String",
        "name": "a"
       }
      ]
     },
     {
      "type": null,
      "name": "computeStringConstants",
      "params": [
       {
        "type": "int",
        "name": "highPrecisionDecimalDigits"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "computePi",
      "params": [
       {
        "type": "Dfp",
        "name": "one"
       },
       {
        "type": "Dfp",
        "name": "two"
       },
       {
        "type": "Dfp",
        "name": "three"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "computeExp",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       },
       {
        "type": "Dfp",
        "name": "one"
       }
      ]
     },
     {
      "type": "Dfp",
      "name": "computeLn",
      "params": [
       {
        "type": "Dfp",
        "name": "a"
       },
       {
        "type": "Dfp",
        "name": "one"
       },
       {
        "type": "Dfp",
        "name": "two"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.dfp",
  "filename": "DfpField.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "RealTransformer",
    "methods": [
     {
      "type": "double",
      "name": "transform",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "transform",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.transform",
  "filename": "RealTransformer.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FastSineTransformer",
    "methods": [
     {
      "type": "double",
      "name": "transform",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "transform",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "transform2",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "transform2",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform2",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform2",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "fst",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.transform",
  "filename": "FastSineTransformer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "RootsOfUnity",
      "name": "roots"
     }
    ],
    "name": "FastFourierTransformer",
    "methods": [
     {
      "type": "Complex",
      "name": "transform",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "transform",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "transform",
      "params": [
       {
        "type": "Complex",
        "name": "f"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "transform2",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "transform2",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "transform2",
      "params": [
       {
        "type": "Complex",
        "name": "f"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "inversetransform",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "inversetransform",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "inversetransform",
      "params": [
       {
        "type": "Complex",
        "name": "f"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "inversetransform2",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "inversetransform2",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "inversetransform2",
      "params": [
       {
        "type": "Complex",
        "name": "f"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "fft",
      "params": [
       {
        "type": "double",
        "name": "f"
       },
       {
        "type": "boolean",
        "name": "isInverse"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "fft",
      "params": [
       {
        "type": "Complex",
        "name": "data"
       }
      ]
     },
     {
      "type": "double",
      "name": "sample",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "scaleArray",
      "params": [
       {
        "type": "double",
        "name": "f"
       },
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "scaleArray",
      "params": [
       {
        "type": "Complex",
        "name": "f"
       },
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isPowerOf2",
      "params": [
       {
        "type": "long",
        "name": "n"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyDataSet",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyDataSet",
      "params": [
       {
        "type": "Object",
        "name": "o"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyInterval",
      "params": [
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "upper"
       }
      ]
     },
     {
      "type": "Object",
      "name": "mdfft",
      "params": [
       {
        "type": "Object",
        "name": "mdca"
       },
       {
        "type": "boolean",
        "name": "forward"
       }
      ]
     },
     {
      "type": null,
      "name": "mdfft",
      "params": [
       {
        "type": "MultiDimensionalComplexMatrix",
        "name": "mdcm"
       },
       {
        "type": "boolean",
        "name": "forward"
       },
       {
        "type": "int",
        "name": "d"
       },
       {
        "type": "int",
        "name": "subVector"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.transform",
  "filename": "FastFourierTransformer.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FastCosineTransformer",
    "methods": [
     {
      "type": "double",
      "name": "transform",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "transform",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "transform2",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "transform2",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform2",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform2",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "fct",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.transform",
  "filename": "FastCosineTransformer.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FastHadamardTransformer",
    "methods": [
     {
      "type": "double",
      "name": "transform",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "transform",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "int",
      "name": "transform",
      "params": [
       {
        "type": "int",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "fht",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "fht",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.transform",
  "filename": "FastHadamardTransformer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "numeratorDegreesOfFreedom"
     },
     {
      "type": "double",
      "name": "denominatorDegreesOfFreedom"
     },
     {
      "type": "double",
      "name": "solverAbsoluteAccuracy"
     }
    ],
    "name": "FDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "density",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getNumeratorDegreesOfFreedom",
      "params": []
     },
     {
      "type": "double",
      "name": "getDenominatorDegreesOfFreedom",
      "params": []
     },
     {
      "type": "double",
      "name": "getSolverAbsoluteAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportLowerBound",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportUpperBound",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalMean",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalVariance",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportLowerBoundInclusive",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportUpperBoundInclusive",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "FDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "GammaDistribution",
      "name": "gamma"
     },
     {
      "type": "double",
      "name": "solverAbsoluteAccuracy"
     }
    ],
    "name": "ChiSquaredDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "getDegreesOfFreedom",
      "params": []
     },
     {
      "type": "double",
      "name": "density",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getSolverAbsoluteAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportLowerBound",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportUpperBound",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalMean",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalVariance",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportLowerBoundInclusive",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportUpperBoundInclusive",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "ChiSquaredDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FDistribution",
    "methods": [
     {
      "type": "double",
      "name": "getNumeratorDegreesOfFreedom",
      "params": []
     },
     {
      "type": "double",
      "name": "getDenominatorDegreesOfFreedom",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "FDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "NormalDistribution",
    "methods": [
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "NormalDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "BetaDistribution",
    "methods": [
     {
      "type": "double",
      "name": "getAlpha",
      "params": []
     },
     {
      "type": "double",
      "name": "getBeta",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "BetaDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Distribution",
    "methods": [
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x0"
       },
       {
        "type": "double",
        "name": "x1"
       }
      ]
     },
     {
      "type": "double",
      "name": "getNumericalMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getNumericalVariance",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportLowerBoundInclusive",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportUpperBoundInclusive",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportConnected",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "Distribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "numberOfSuccesses"
     },
     {
      "type": "double",
      "name": "probabilityOfSuccess"
     }
    ],
    "name": "PascalDistributionImpl",
    "methods": [
     {
      "type": "int",
      "name": "getNumberOfSuccesses",
      "params": []
     },
     {
      "type": "double",
      "name": "getProbabilityOfSuccess",
      "params": []
     },
     {
      "type": "int",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "probability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getSupportLowerBound",
      "params": []
     },
     {
      "type": "int",
      "name": "getSupportUpperBound",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalMean",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalVariance",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportUpperBoundInclusive",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "PascalDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "WeibullDistribution",
    "methods": [
     {
      "type": "double",
      "name": "getShape",
      "params": []
     },
     {
      "type": "double",
      "name": "getScale",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "WeibullDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "n"
     }
    ],
    "name": "KolmogorovSmirnovDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "cdf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "cdfExact",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "cdf",
      "params": [
       {
        "type": "double",
        "name": "d"
       },
       {
        "type": "boolean",
        "name": "exact"
       }
      ]
     },
     {
      "type": "double",
      "name": "exactK",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "roundedK",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "createH",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "KolmogorovSmirnovDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "KolmogorovSmirnovDistribution",
    "methods": [
     {
      "type": "double",
      "name": "cdf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "KolmogorovSmirnovDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ContinuousDistribution",
    "methods": [
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "density",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": null,
      "name": "reseedRandomGenerator",
      "params": [
       {
        "type": "long",
        "name": "seed"
       }
      ]
     },
     {
      "type": "double",
      "name": "sample",
      "params": []
     },
     {
      "type": "double",
      "name": "sample",
      "params": [
       {
        "type": "int",
        "name": "sampleSize"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "ContinuousDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "alpha"
     },
     {
      "type": "double",
      "name": "beta"
     },
     {
      "type": "double",
      "name": "solverAbsoluteAccuracy"
     }
    ],
    "name": "GammaDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getAlpha",
      "params": []
     },
     {
      "type": "double",
      "name": "getBeta",
      "params": []
     },
     {
      "type": "double",
      "name": "density",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getSolverAbsoluteAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportLowerBound",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportUpperBound",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalMean",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalVariance",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportLowerBoundInclusive",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportUpperBoundInclusive",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "GammaDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "RandomDataImpl",
      "name": "randomData"
     }
    ],
    "name": "AbstractIntegerDistribution",
    "methods": [
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x0"
       },
       {
        "type": "double",
        "name": "x1"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "probability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x0"
       },
       {
        "type": "int",
        "name": "x1"
       }
      ]
     },
     {
      "type": "int",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": null,
      "name": "reseedRandomGenerator",
      "params": [
       {
        "type": "long",
        "name": "seed"
       }
      ]
     },
     {
      "type": "int",
      "name": "sample",
      "params": []
     },
     {
      "type": "int",
      "name": "sample",
      "params": [
       {
        "type": "int",
        "name": "sampleSize"
       }
      ]
     },
     {
      "type": "double",
      "name": "checkedCumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "argument"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getSupportLowerBound",
      "params": []
     },
     {
      "type": "int",
      "name": "getSupportUpperBound",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportLowerBoundInclusive",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportUpperBoundInclusive",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "AbstractIntegerDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "SOLVER_DEFAULT_ABSOLUTE_ACCURACY"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "RandomDataImpl",
      "name": "randomData"
     },
     {
      "type": "double",
      "name": "solverAbsoluteAccuracy"
     }
    ],
    "name": "AbstractContinuousDistribution",
    "methods": [
     {
      "type": "double",
      "name": "density",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": null,
      "name": "reseedRandomGenerator",
      "params": [
       {
        "type": "long",
        "name": "seed"
       }
      ]
     },
     {
      "type": "double",
      "name": "sample",
      "params": []
     },
     {
      "type": "double",
      "name": "sample",
      "params": [
       {
        "type": "int",
        "name": "sampleSize"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getSolverAbsoluteAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportLowerBound",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportUpperBound",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "AbstractContinuousDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "mean"
     },
     {
      "type": "double",
      "name": "solverAbsoluteAccuracy"
     }
    ],
    "name": "ExponentialDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "density",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "sample",
      "params": []
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getSolverAbsoluteAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportLowerBound",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportUpperBound",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalMean",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalVariance",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportLowerBoundInclusive",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportUpperBoundInclusive",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "ExponentialDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "numberOfSuccesses"
     },
     {
      "type": "int",
      "name": "populationSize"
     },
     {
      "type": "int",
      "name": "sampleSize"
     }
    ],
    "name": "HypergeometricDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomain",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "m"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getLowerDomain",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "m"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "int",
      "name": "getNumberOfSuccesses",
      "params": []
     },
     {
      "type": "int",
      "name": "getPopulationSize",
      "params": []
     },
     {
      "type": "int",
      "name": "getSampleSize",
      "params": []
     },
     {
      "type": "int",
      "name": "getUpperDomain",
      "params": [
       {
        "type": "int",
        "name": "m"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "double",
      "name": "probability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "probability",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "m"
       },
       {
        "type": "int",
        "name": "k"
       },
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "upperCumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "innerCumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x0"
       },
       {
        "type": "int",
        "name": "x1"
       },
       {
        "type": "int",
        "name": "dx"
       },
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "m"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "int",
      "name": "getSupportLowerBound",
      "params": []
     },
     {
      "type": "int",
      "name": "getSupportUpperBound",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalMean",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalVariance",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "HypergeometricDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "HypergeometricDistribution",
    "methods": [
     {
      "type": "int",
      "name": "getNumberOfSuccesses",
      "params": []
     },
     {
      "type": "int",
      "name": "getPopulationSize",
      "params": []
     },
     {
      "type": "int",
      "name": "getSampleSize",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "HypergeometricDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "PoissonDistribution",
    "methods": [
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "normalApproximateProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "PoissonDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "numberOfElements"
     },
     {
      "type": "double",
      "name": "exponent"
     }
    ],
    "name": "ZipfDistributionImpl",
    "methods": [
     {
      "type": "int",
      "name": "getNumberOfElements",
      "params": []
     },
     {
      "type": "double",
      "name": "getExponent",
      "params": []
     },
     {
      "type": "double",
      "name": "probability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "generalizedHarmonic",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "double",
        "name": "m"
       }
      ]
     },
     {
      "type": "int",
      "name": "getSupportLowerBound",
      "params": []
     },
     {
      "type": "int",
      "name": "getSupportUpperBound",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalMean",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalVariance",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "ZipfDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "degreesOfFreedom"
     },
     {
      "type": "double",
      "name": "solverAbsoluteAccuracy"
     }
    ],
    "name": "TDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "getDegreesOfFreedom",
      "params": []
     },
     {
      "type": "double",
      "name": "density",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getSolverAbsoluteAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportLowerBound",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportUpperBound",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalMean",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalVariance",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportLowerBoundInclusive",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportUpperBoundInclusive",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "TDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "IntegerDistribution",
    "methods": [
     {
      "type": "double",
      "name": "probability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x0"
       },
       {
        "type": "int",
        "name": "x1"
       }
      ]
     },
     {
      "type": "int",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": null,
      "name": "reseedRandomGenerator",
      "params": [
       {
        "type": "long",
        "name": "seed"
       }
      ]
     },
     {
      "type": "int",
      "name": "sample",
      "params": []
     },
     {
      "type": "int",
      "name": "sample",
      "params": [
       {
        "type": "int",
        "name": "sampleSize"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "IntegerDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "GammaDistribution",
    "methods": [
     {
      "type": "double",
      "name": "getAlpha",
      "params": []
     },
     {
      "type": "double",
      "name": "getBeta",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "GammaDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "PascalDistribution",
    "methods": [
     {
      "type": "int",
      "name": "getNumberOfSuccesses",
      "params": []
     },
     {
      "type": "double",
      "name": "getProbabilityOfSuccess",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "PascalDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "HALF_LOG_2_PI"
     },
     {
      "type": "double",
      "name": "EXACT_STIRLING_ERRORS"
     }
    ],
    "name": "SaddlePointExpansion",
    "methods": [
     {
      "type": "double",
      "name": "getStirlingError",
      "params": [
       {
        "type": "double",
        "name": "z"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDeviancePart",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "mu"
       }
      ]
     },
     {
      "type": "double",
      "name": "logBinomialProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       },
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "double",
        "name": "p"
       },
       {
        "type": "double",
        "name": "q"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "SaddlePointExpansion.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "TDistribution",
    "methods": [
     {
      "type": "double",
      "name": "getDegreesOfFreedom",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "TDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "median"
     },
     {
      "type": "double",
      "name": "scale"
     },
     {
      "type": "double",
      "name": "solverAbsoluteAccuracy"
     }
    ],
    "name": "CauchyDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "getMedian",
      "params": []
     },
     {
      "type": "double",
      "name": "getScale",
      "params": []
     },
     {
      "type": "double",
      "name": "density",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getSolverAbsoluteAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportLowerBound",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportUpperBound",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalMean",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalVariance",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportLowerBoundInclusive",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportUpperBoundInclusive",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "CauchyDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "numericalMean"
     },
     {
      "type": "boolean",
      "name": "numericalMeanIsCalculated"
     },
     {
      "type": "double",
      "name": "numericalVariance"
     },
     {
      "type": "boolean",
      "name": "numericalVarianceIsCalculated"
     }
    ],
    "name": "AbstractDistribution",
    "methods": [
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x0"
       },
       {
        "type": "double",
        "name": "x1"
       }
      ]
     },
     {
      "type": "double",
      "name": "calculateNumericalMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getNumericalMean",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "getNumericalVariance",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportLowerBoundInclusive",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportUpperBoundInclusive",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportConnected",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "AbstractDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "DEFAULT_MAX_ITERATIONS"
     },
     {
      "type": "double",
      "name": "DEFAULT_EPSILON"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "NormalDistribution",
      "name": "normal"
     },
     {
      "type": "double",
      "name": "mean"
     },
     {
      "type": "int",
      "name": "maxIterations"
     },
     {
      "type": "double",
      "name": "epsilon"
     }
    ],
    "name": "PoissonDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "probability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "normalApproximateProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "sample",
      "params": []
     },
     {
      "type": "int",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getSupportLowerBound",
      "params": []
     },
     {
      "type": "int",
      "name": "getSupportUpperBound",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalMean",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalVariance",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportUpperBoundInclusive",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "PoissonDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "shape"
     },
     {
      "type": "double",
      "name": "scale"
     },
     {
      "type": "double",
      "name": "solverAbsoluteAccuracy"
     }
    ],
    "name": "WeibullDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "getShape",
      "params": []
     },
     {
      "type": "double",
      "name": "getScale",
      "params": []
     },
     {
      "type": "double",
      "name": "density",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getSolverAbsoluteAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportLowerBound",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportUpperBound",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalMean",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalVariance",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportLowerBoundInclusive",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportUpperBoundInclusive",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "WeibullDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "SQRT2PI"
     },
     {
      "type": "double",
      "name": "mean"
     },
     {
      "type": "double",
      "name": "standardDeviation"
     },
     {
      "type": "double",
      "name": "solverAbsoluteAccuracy"
     }
    ],
    "name": "NormalDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "double",
      "name": "density",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "getSolverAbsoluteAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "sample",
      "params": []
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getSupportLowerBound",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportUpperBound",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalMean",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalVariance",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportLowerBoundInclusive",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportUpperBoundInclusive",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "NormalDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ZipfDistribution",
    "methods": [
     {
      "type": "int",
      "name": "getNumberOfElements",
      "params": []
     },
     {
      "type": "double",
      "name": "getExponent",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "ZipfDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "numberOfTrials"
     },
     {
      "type": "double",
      "name": "probabilityOfSuccess"
     }
    ],
    "name": "BinomialDistributionImpl",
    "methods": [
     {
      "type": "int",
      "name": "getNumberOfTrials",
      "params": []
     },
     {
      "type": "double",
      "name": "getProbabilityOfSuccess",
      "params": []
     },
     {
      "type": "int",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "probability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getSupportLowerBound",
      "params": []
     },
     {
      "type": "int",
      "name": "getSupportUpperBound",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalMean",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalVariance",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "BinomialDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ChiSquaredDistribution",
    "methods": [
     {
      "type": "double",
      "name": "getDegreesOfFreedom",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "ChiSquaredDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ExponentialDistribution",
    "methods": [
     {
      "type": "double",
      "name": "getMean",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "ExponentialDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_INVERSE_ABSOLUTE_ACCURACY"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "alpha"
     },
     {
      "type": "double",
      "name": "beta"
     },
     {
      "type": "double",
      "name": "z"
     },
     {
      "type": "double",
      "name": "solverAbsoluteAccuracy"
     }
    ],
    "name": "BetaDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "getAlpha",
      "params": []
     },
     {
      "type": "double",
      "name": "getBeta",
      "params": []
     },
     {
      "type": null,
      "name": "recomputeZ",
      "params": []
     },
     {
      "type": "double",
      "name": "density",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x0"
       },
       {
        "type": "double",
        "name": "x1"
       }
      ]
     },
     {
      "type": "double",
      "name": "getSolverAbsoluteAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportLowerBound",
      "params": []
     },
     {
      "type": "double",
      "name": "getSupportUpperBound",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalMean",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateNumericalVariance",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportLowerBoundInclusive",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSupportUpperBoundInclusive",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "BetaDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "BinomialDistribution",
    "methods": [
     {
      "type": "int",
      "name": "getNumberOfTrials",
      "params": []
     },
     {
      "type": "double",
      "name": "getProbabilityOfSuccess",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "BinomialDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "CauchyDistribution",
    "methods": [
     {
      "type": "double",
      "name": "getMedian",
      "params": []
     },
     {
      "type": "double",
      "name": "getScale",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "CauchyDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DiscreteDistribution",
    "methods": [
     {
      "type": "double",
      "name": "probability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "DiscreteDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "SQRT3"
     },
     {
      "type": "RandomGenerator",
      "name": "generator"
     }
    ],
    "name": "UniformRandomGenerator",
    "methods": [
     {
      "type": "double",
      "name": "nextNormalizedDouble",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "UniformRandomGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "NormalizedRandomGenerator",
    "methods": [
     {
      "type": "double",
      "name": "nextNormalizedDouble",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "NormalizedRandomGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "K"
     },
     {
      "type": "int",
      "name": "M1"
     },
     {
      "type": "int",
      "name": "M2"
     },
     {
      "type": "int",
      "name": "M3"
     }
    ],
    "name": "Well19937a",
    "methods": [
     {
      "type": "int",
      "name": "next",
      "params": [
       {
        "type": "int",
        "name": "bits"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "Well19937a.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "EmpiricalDistribution",
    "methods": [
     {
      "type": null,
      "name": "load",
      "params": [
       {
        "type": "double",
        "name": "dataArray"
       }
      ]
     },
     {
      "type": null,
      "name": "load",
      "params": [
       {
        "type": "File",
        "name": "file"
       }
      ]
     },
     {
      "type": null,
      "name": "load",
      "params": [
       {
        "type": "URL",
        "name": "url"
       }
      ]
     },
     {
      "type": "double",
      "name": "getNextValue",
      "params": []
     },
     {
      "type": "StatisticalSummary",
      "name": "getSampleStats",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isLoaded",
      "params": []
     },
     {
      "type": "int",
      "name": "getBinCount",
      "params": []
     },
     {
      "type": "List",
      "name": "getBinStats",
      "params": []
     },
     {
      "type": "double",
      "name": "getUpperBounds",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "EmpiricalDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "K"
     },
     {
      "type": "int",
      "name": "M1"
     },
     {
      "type": "int",
      "name": "M2"
     },
     {
      "type": "int",
      "name": "M3"
     }
    ],
    "name": "Well44497a",
    "methods": [
     {
      "type": "int",
      "name": "next",
      "params": [
       {
        "type": "int",
        "name": "bits"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "Well44497a.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "RandomData",
    "methods": [
     {
      "type": "String",
      "name": "nextHexString",
      "params": [
       {
        "type": "int",
        "name": "len"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextInt",
      "params": [
       {
        "type": "int",
        "name": "lower"
       },
       {
        "type": "int",
        "name": "upper"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextLong",
      "params": [
       {
        "type": "long",
        "name": "lower"
       },
       {
        "type": "long",
        "name": "upper"
       }
      ]
     },
     {
      "type": "String",
      "name": "nextSecureHexString",
      "params": [
       {
        "type": "int",
        "name": "len"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextSecureInt",
      "params": [
       {
        "type": "int",
        "name": "lower"
       },
       {
        "type": "int",
        "name": "upper"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextSecureLong",
      "params": [
       {
        "type": "long",
        "name": "lower"
       },
       {
        "type": "long",
        "name": "upper"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextPoisson",
      "params": [
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextGaussian",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "sigma"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextExponential",
      "params": [
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextUniform",
      "params": [
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "upper"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextPermutation",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "Object",
      "name": "nextSample",
      "params": [
       {
        "type": "Collection",
        "name": "c"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "RandomData.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "index"
     },
     {
      "type": "int",
      "name": "v"
     },
     {
      "type": "int",
      "name": "iRm1"
     },
     {
      "type": "int",
      "name": "iRm2"
     },
     {
      "type": "int",
      "name": "i1"
     },
     {
      "type": "int",
      "name": "i2"
     },
     {
      "type": "int",
      "name": "i3"
     }
    ],
    "name": "AbstractWell",
    "methods": [
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "int",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "int",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "long",
        "name": "seed"
       }
      ]
     },
     {
      "type": "int",
      "name": "next",
      "params": [
       {
        "type": "int",
        "name": "bits"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "AbstractWell.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "RandomGenerator",
      "name": "rand"
     },
     {
      "type": "int",
      "name": "dimension"
     }
    ],
    "name": "UnitSphereRandomVectorGenerator",
    "methods": [
     {
      "type": "double",
      "name": "nextVector",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "UnitSphereRandomVectorGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "RandomGenerator",
      "name": "generator"
     }
    ],
    "name": "GaussianRandomGenerator",
    "methods": [
     {
      "type": "double",
      "name": "nextNormalizedDouble",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "GaussianRandomGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "RandomGenerator",
    "methods": [
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "int",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "int",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "long",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "nextBytes",
      "params": [
       {
        "type": "byte",
        "name": "bytes"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextInt",
      "params": []
     },
     {
      "type": "int",
      "name": "nextInt",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextLong",
      "params": []
     },
     {
      "type": "boolean",
      "name": "nextBoolean",
      "params": []
     },
     {
      "type": "float",
      "name": "nextFloat",
      "params": []
     },
     {
      "type": "double",
      "name": "nextDouble",
      "params": []
     },
     {
      "type": "double",
      "name": "nextGaussian",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "RandomGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "K"
     },
     {
      "type": "int",
      "name": "M1"
     },
     {
      "type": "int",
      "name": "M2"
     },
     {
      "type": "int",
      "name": "M3"
     }
    ],
    "name": "Well19937c",
    "methods": [
     {
      "type": "int",
      "name": "next",
      "params": [
       {
        "type": "int",
        "name": "bits"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "Well19937c.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "K"
     },
     {
      "type": "int",
      "name": "M1"
     },
     {
      "type": "int",
      "name": "M2"
     },
     {
      "type": "int",
      "name": "M3"
     }
    ],
    "name": "Well44497b",
    "methods": [
     {
      "type": "int",
      "name": "next",
      "params": [
       {
        "type": "int",
        "name": "bits"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "Well44497b.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "RandomVectorGenerator",
    "methods": [
     {
      "type": "double",
      "name": "nextVector",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "RandomVectorGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "nextGaussian"
     }
    ],
    "name": "BitsStreamGenerator",
    "methods": [
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "int",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "int",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "long",
        "name": "seed"
       }
      ]
     },
     {
      "type": "int",
      "name": "next",
      "params": [
       {
        "type": "int",
        "name": "bits"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "nextBoolean",
      "params": []
     },
     {
      "type": null,
      "name": "nextBytes",
      "params": [
       {
        "type": "byte",
        "name": "bytes"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextDouble",
      "params": []
     },
     {
      "type": "float",
      "name": "nextFloat",
      "params": []
     },
     {
      "type": "double",
      "name": "nextGaussian",
      "params": []
     },
     {
      "type": "int",
      "name": "nextInt",
      "params": []
     },
     {
      "type": "int",
      "name": "nextInt",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextLong",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "BitsStreamGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "RandomGenerator",
      "name": "randomGenerator"
     }
    ],
    "name": "RandomAdaptor",
    "methods": [
     {
      "type": "Random",
      "name": "createAdaptor",
      "params": [
       {
        "type": "RandomGenerator",
        "name": "randomGenerator"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "nextBoolean",
      "params": []
     },
     {
      "type": null,
      "name": "nextBytes",
      "params": [
       {
        "type": "byte",
        "name": "bytes"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextDouble",
      "params": []
     },
     {
      "type": "float",
      "name": "nextFloat",
      "params": []
     },
     {
      "type": "double",
      "name": "nextGaussian",
      "params": []
     },
     {
      "type": "int",
      "name": "nextInt",
      "params": []
     },
     {
      "type": "int",
      "name": "nextInt",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextLong",
      "params": []
     },
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "int",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "int",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "long",
        "name": "seed"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "RandomAdaptor.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "RandomGenerator",
      "name": "rand"
     },
     {
      "type": "SecureRandom",
      "name": "secRand"
     }
    ],
    "name": "RandomDataImpl",
    "methods": [
     {
      "type": "String",
      "name": "nextHexString",
      "params": [
       {
        "type": "int",
        "name": "len"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextInt",
      "params": [
       {
        "type": "int",
        "name": "lower"
       },
       {
        "type": "int",
        "name": "upper"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextLong",
      "params": [
       {
        "type": "long",
        "name": "lower"
       },
       {
        "type": "long",
        "name": "upper"
       }
      ]
     },
     {
      "type": "String",
      "name": "nextSecureHexString",
      "params": [
       {
        "type": "int",
        "name": "len"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextSecureInt",
      "params": [
       {
        "type": "int",
        "name": "lower"
       },
       {
        "type": "int",
        "name": "upper"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextSecureLong",
      "params": [
       {
        "type": "long",
        "name": "lower"
       },
       {
        "type": "long",
        "name": "upper"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextPoisson",
      "params": [
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextGaussian",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "sigma"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextExponential",
      "params": [
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextUniform",
      "params": [
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "upper"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextBeta",
      "params": [
       {
        "type": "double",
        "name": "alpha"
       },
       {
        "type": "double",
        "name": "beta"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextBinomial",
      "params": [
       {
        "type": "int",
        "name": "numberOfTrials"
       },
       {
        "type": "double",
        "name": "probabilityOfSuccess"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextCauchy",
      "params": [
       {
        "type": "double",
        "name": "median"
       },
       {
        "type": "double",
        "name": "scale"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextChiSquare",
      "params": [
       {
        "type": "double",
        "name": "df"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextF",
      "params": [
       {
        "type": "double",
        "name": "numeratorDf"
       },
       {
        "type": "double",
        "name": "denominatorDf"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextGamma",
      "params": [
       {
        "type": "double",
        "name": "shape"
       },
       {
        "type": "double",
        "name": "scale"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextHypergeometric",
      "params": [
       {
        "type": "int",
        "name": "populationSize"
       },
       {
        "type": "int",
        "name": "numberOfSuccesses"
       },
       {
        "type": "int",
        "name": "sampleSize"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextPascal",
      "params": [
       {
        "type": "int",
        "name": "r"
       },
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextT",
      "params": [
       {
        "type": "double",
        "name": "df"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextWeibull",
      "params": [
       {
        "type": "double",
        "name": "shape"
       },
       {
        "type": "double",
        "name": "scale"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextZipf",
      "params": [
       {
        "type": "int",
        "name": "numberOfElements"
       },
       {
        "type": "double",
        "name": "exponent"
       }
      ]
     },
     {
      "type": "RandomGenerator",
      "name": "getRan",
      "params": []
     },
     {
      "type": "SecureRandom",
      "name": "getSecRan",
      "params": []
     },
     {
      "type": null,
      "name": "reSeed",
      "params": [
       {
        "type": "long",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "reSeedSecure",
      "params": []
     },
     {
      "type": null,
      "name": "reSeedSecure",
      "params": [
       {
        "type": "long",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "reSeed",
      "params": []
     },
     {
      "type": null,
      "name": "setSecureAlgorithm",
      "params": [
       {
        "type": "String",
        "name": "algorithm"
       },
       {
        "type": "String",
        "name": "provider"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextPermutation",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "Object",
      "name": "nextSample",
      "params": [
       {
        "type": "Collection",
        "name": "c"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextInversionDeviate",
      "params": [
       {
        "type": "ContinuousDistribution",
        "name": "distribution"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextInversionDeviate",
      "params": [
       {
        "type": "IntegerDistribution",
        "name": "distribution"
       }
      ]
     },
     {
      "type": null,
      "name": "shuffle",
      "params": [
       {
        "type": "int",
        "name": "list"
       },
       {
        "type": "int",
        "name": "end"
       }
      ]
     },
     {
      "type": "int",
      "name": "getNatural",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "RandomDataImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "N"
     },
     {
      "type": "int",
      "name": "M"
     },
     {
      "type": "int",
      "name": "MAG01"
     },
     {
      "type": "int",
      "name": "mt"
     },
     {
      "type": "int",
      "name": "mti"
     }
    ],
    "name": "MersenneTwister",
    "methods": [
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "int",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "int",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "long",
        "name": "seed"
       }
      ]
     },
     {
      "type": "int",
      "name": "next",
      "params": [
       {
        "type": "int",
        "name": "bits"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "MersenneTwister.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "K"
     },
     {
      "type": "int",
      "name": "M1"
     },
     {
      "type": "int",
      "name": "M2"
     },
     {
      "type": "int",
      "name": "M3"
     }
    ],
    "name": "Well1024a",
    "methods": [
     {
      "type": "int",
      "name": "next",
      "params": [
       {
        "type": "int",
        "name": "bits"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "Well1024a.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "DIGEST_MODE"
     },
     {
      "type": "int",
      "name": "REPLAY_MODE"
     },
     {
      "type": "int",
      "name": "UNIFORM_MODE"
     },
     {
      "type": "int",
      "name": "EXPONENTIAL_MODE"
     },
     {
      "type": "int",
      "name": "GAUSSIAN_MODE"
     },
     {
      "type": "int",
      "name": "CONSTANT_MODE"
     },
     {
      "type": "int",
      "name": "mode"
     },
     {
      "type": "URL",
      "name": "valuesFileURL"
     },
     {
      "type": "double",
      "name": "mu"
     },
     {
      "type": "double",
      "name": "sigma"
     },
     {
      "type": "EmpiricalDistribution",
      "name": "empiricalDistribution"
     },
     {
      "type": "BufferedReader",
      "name": "filePointer"
     },
     {
      "type": "RandomData",
      "name": "randomData"
     }
    ],
    "name": "ValueServer",
    "methods": [
     {
      "type": "double",
      "name": "getNext",
      "params": []
     },
     {
      "type": null,
      "name": "fill",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "fill",
      "params": [
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": null,
      "name": "computeDistribution",
      "params": []
     },
     {
      "type": null,
      "name": "computeDistribution",
      "params": [
       {
        "type": "int",
        "name": "binCount"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMode",
      "params": []
     },
     {
      "type": null,
      "name": "setMode",
      "params": [
       {
        "type": "int",
        "name": "mode"
       }
      ]
     },
     {
      "type": "URL",
      "name": "getValuesFileURL",
      "params": []
     },
     {
      "type": null,
      "name": "setValuesFileURL",
      "params": [
       {
        "type": "String",
        "name": "url"
       }
      ]
     },
     {
      "type": null,
      "name": "setValuesFileURL",
      "params": [
       {
        "type": "URL",
        "name": "url"
       }
      ]
     },
     {
      "type": "EmpiricalDistribution",
      "name": "getEmpiricalDistribution",
      "params": []
     },
     {
      "type": null,
      "name": "resetReplayFile",
      "params": []
     },
     {
      "type": null,
      "name": "closeReplayFile",
      "params": []
     },
     {
      "type": "double",
      "name": "getMu",
      "params": []
     },
     {
      "type": null,
      "name": "setMu",
      "params": [
       {
        "type": "double",
        "name": "mu"
       }
      ]
     },
     {
      "type": "double",
      "name": "getSigma",
      "params": []
     },
     {
      "type": null,
      "name": "setSigma",
      "params": [
       {
        "type": "double",
        "name": "sigma"
       }
      ]
     },
     {
      "type": "double",
      "name": "getNextDigest",
      "params": []
     },
     {
      "type": "double",
      "name": "getNextReplay",
      "params": []
     },
     {
      "type": "double",
      "name": "getNextUniform",
      "params": []
     },
     {
      "type": "double",
      "name": "getNextExponential",
      "params": []
     },
     {
      "type": "double",
      "name": "getNextGaussian",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "ValueServer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "JDKRandomGenerator",
    "methods": [
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "int",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "int",
        "name": "seed"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "JDKRandomGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "NormalizedRandomGenerator",
      "name": "generator"
     },
     {
      "type": "double",
      "name": "mean"
     },
     {
      "type": "double",
      "name": "standardDeviation"
     }
    ],
    "name": "UncorrelatedRandomVectorGenerator",
    "methods": [
     {
      "type": "double",
      "name": "nextVector",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "UncorrelatedRandomVectorGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "mean"
     },
     {
      "type": "NormalizedRandomGenerator",
      "name": "generator"
     },
     {
      "type": "double",
      "name": "normalized"
     },
     {
      "type": "RealMatrix",
      "name": "root"
     },
     {
      "type": "int",
      "name": "rank"
     }
    ],
    "name": "CorrelatedRandomVectorGenerator",
    "methods": [
     {
      "type": "NormalizedRandomGenerator",
      "name": "getGenerator",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getRootMatrix",
      "params": []
     },
     {
      "type": "int",
      "name": "getRank",
      "params": []
     },
     {
      "type": null,
      "name": "decompose",
      "params": [
       {
        "type": "RealMatrix",
        "name": "covariance"
       },
       {
        "type": "double",
        "name": "small"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextVector",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "CorrelatedRandomVectorGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "List",
      "name": "binStats"
     },
     {
      "type": "SummaryStatistics",
      "name": "sampleStats"
     },
     {
      "type": "double",
      "name": "max"
     },
     {
      "type": "double",
      "name": "min"
     },
     {
      "type": "double",
      "name": "delta"
     },
     {
      "type": "int",
      "name": "binCount"
     },
     {
      "type": "boolean",
      "name": "loaded"
     },
     {
      "type": "double",
      "name": "upperBounds"
     },
     {
      "type": "RandomData",
      "name": "randomData"
     }
    ],
    "name": "EmpiricalDistributionImpl",
    "methods": [
     {
      "type": null,
      "name": "load",
      "params": [
       {
        "type": "double",
        "name": "in"
       }
      ]
     },
     {
      "type": null,
      "name": "load",
      "params": [
       {
        "type": "URL",
        "name": "url"
       }
      ]
     },
     {
      "type": null,
      "name": "load",
      "params": [
       {
        "type": "File",
        "name": "file"
       }
      ]
     },
     {
      "type": null,
      "name": "fillBinStats",
      "params": [
       {
        "type": "Object",
        "name": "in"
       }
      ]
     },
     {
      "type": "int",
      "name": "findBin",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "double",
      "name": "getNextValue",
      "params": []
     },
     {
      "type": "StatisticalSummary",
      "name": "getSampleStats",
      "params": []
     },
     {
      "type": "int",
      "name": "getBinCount",
      "params": []
     },
     {
      "type": "List",
      "name": "getBinStats",
      "params": []
     },
     {
      "type": "double",
      "name": "getUpperBounds",
      "params": []
     },
     {
      "type": "double",
      "name": "getGeneratorUpperBounds",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isLoaded",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "EmpiricalDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "cachedNormalDeviate"
     }
    ],
    "name": "AbstractRandomGenerator",
    "methods": [
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "int",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "int",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "long",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "nextBytes",
      "params": [
       {
        "type": "byte",
        "name": "bytes"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextInt",
      "params": []
     },
     {
      "type": "int",
      "name": "nextInt",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextLong",
      "params": []
     },
     {
      "type": "boolean",
      "name": "nextBoolean",
      "params": []
     },
     {
      "type": "float",
      "name": "nextFloat",
      "params": []
     },
     {
      "type": "double",
      "name": "nextDouble",
      "params": []
     },
     {
      "type": "double",
      "name": "nextGaussian",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "AbstractRandomGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "K"
     },
     {
      "type": "int",
      "name": "M1"
     },
     {
      "type": "int",
      "name": "M2"
     },
     {
      "type": "int",
      "name": "M3"
     }
    ],
    "name": "Well512a",
    "methods": [
     {
      "type": "int",
      "name": "next",
      "params": [
       {
        "type": "int",
        "name": "bits"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "Well512a.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "List",
      "name": "representation"
     }
    ],
    "name": "AbstractListChromosome",
    "methods": [
     {
      "type": null,
      "name": "checkValidity",
      "params": [
       {
        "type": "List",
        "name": "chromosomeRepresentation"
       }
      ]
     },
     {
      "type": "List",
      "name": "getRepresentation",
      "params": []
     },
     {
      "type": "int",
      "name": "getLength",
      "params": []
     },
     {
      "type": "AbstractListChromosome",
      "name": "newFixedLengthChromosome",
      "params": [
       {
        "type": "List",
        "name": "chromosomeRepresentation"
       }
      ]
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "AbstractListChromosome.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Chromosome",
      "name": "first"
     },
     {
      "type": "Chromosome",
      "name": "second"
     }
    ],
    "name": "ChromosomePair",
    "methods": [
     {
      "type": "Chromosome",
      "name": "getFirst",
      "params": []
     },
     {
      "type": "Chromosome",
      "name": "getSecond",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "ChromosomePair.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Fitness",
    "methods": [
     {
      "type": "double",
      "name": "fitness",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "Fitness.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Population",
    "methods": [
     {
      "type": "int",
      "name": "getPopulationSize",
      "params": []
     },
     {
      "type": "int",
      "name": "getPopulationLimit",
      "params": []
     },
     {
      "type": "Population",
      "name": "nextGeneration",
      "params": []
     },
     {
      "type": null,
      "name": "addChromosome",
      "params": [
       {
        "type": "Chromosome",
        "name": "chromosome"
       }
      ]
     },
     {
      "type": "Chromosome",
      "name": "getFittestChromosome",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "Population.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "BinaryChromosome",
    "methods": [
     {
      "type": null,
      "name": "checkValidity",
      "params": [
       {
        "type": "List",
        "name": "chromosomeRepresentation"
       }
      ]
     },
     {
      "type": "List",
      "name": "randomBinaryRepresentation",
      "params": [
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isSame",
      "params": [
       {
        "type": "Chromosome",
        "name": "another"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "BinaryChromosome.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "arity"
     }
    ],
    "name": "TournamentSelection",
    "methods": [
     {
      "type": "ChromosomePair",
      "name": "select",
      "params": [
       {
        "type": "Population",
        "name": "population"
       }
      ]
     },
     {
      "type": "Chromosome",
      "name": "tournament",
      "params": [
       {
        "type": "ListPopulation",
        "name": "population"
       }
      ]
     },
     {
      "type": "int",
      "name": "getArity",
      "params": []
     },
     {
      "type": null,
      "name": "setArity",
      "params": [
       {
        "type": "int",
        "name": "arity"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "TournamentSelection.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "elitismRate"
     }
    ],
    "name": "ElitisticListPopulation",
    "methods": [
     {
      "type": "Population",
      "name": "nextGeneration",
      "params": []
     },
     {
      "type": null,
      "name": "setElitismRate",
      "params": [
       {
        "type": "double",
        "name": "elitismRate"
       }
      ]
     },
     {
      "type": "double",
      "name": "getElitismRate",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "ElitisticListPopulation.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "numGenerations"
     },
     {
      "type": "int",
      "name": "maxGenerations"
     }
    ],
    "name": "FixedGenerationCount",
    "methods": [
     {
      "type": "boolean",
      "name": "isSatisfied",
      "params": [
       {
        "type": "Population",
        "name": "population"
       }
      ]
     },
     {
      "type": "int",
      "name": "getNumGenerations",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "FixedGenerationCount.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "StoppingCondition",
    "methods": [
     {
      "type": "boolean",
      "name": "isSatisfied",
      "params": [
       {
        "type": "Population",
        "name": "population"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "StoppingCondition.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "PermutationChromosome",
    "methods": [
     {
      "type": "List",
      "name": "decode",
      "params": [
       {
        "type": "List",
        "name": "sequence"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "PermutationChromosome.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "InvalidRepresentationException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "InvalidRepresentationException.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "RandomKeyMutation",
    "methods": [
     {
      "type": "Chromosome",
      "name": "mutate",
      "params": [
       {
        "type": "Chromosome",
        "name": "original"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "RandomKeyMutation.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "OnePointCrossover",
    "methods": [
     {
      "type": "ChromosomePair",
      "name": "crossover",
      "params": [
       {
        "type": "Chromosome",
        "name": "first"
       },
       {
        "type": "Chromosome",
        "name": "second"
       }
      ]
     },
     {
      "type": "ChromosomePair",
      "name": "crossover",
      "params": [
       {
        "type": "AbstractListChromosome",
        "name": "first"
       },
       {
        "type": "AbstractListChromosome",
        "name": "second"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "OnePointCrossover.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "RandomGenerator",
      "name": "randomGenerator"
     },
     {
      "type": "CrossoverPolicy",
      "name": "crossoverPolicy"
     },
     {
      "type": "double",
      "name": "crossoverRate"
     },
     {
      "type": "MutationPolicy",
      "name": "mutationPolicy"
     },
     {
      "type": "double",
      "name": "mutationRate"
     },
     {
      "type": "SelectionPolicy",
      "name": "selectionPolicy"
     },
     {
      "type": "int",
      "name": "generationsEvolved"
     }
    ],
    "name": "GeneticAlgorithm",
    "methods": [
     {
      "type": null,
      "name": "setRandomGenerator",
      "params": [
       {
        "type": "RandomGenerator",
        "name": "random"
       }
      ]
     },
     {
      "type": "RandomGenerator",
      "name": "getRandomGenerator",
      "params": []
     },
     {
      "type": "Population",
      "name": "evolve",
      "params": [
       {
        "type": "Population",
        "name": "initial"
       },
       {
        "type": "StoppingCondition",
        "name": "condition"
       }
      ]
     },
     {
      "type": "Population",
      "name": "nextGeneration",
      "params": [
       {
        "type": "Population",
        "name": "current"
       }
      ]
     },
     {
      "type": "CrossoverPolicy",
      "name": "getCrossoverPolicy",
      "params": []
     },
     {
      "type": "double",
      "name": "getCrossoverRate",
      "params": []
     },
     {
      "type": "MutationPolicy",
      "name": "getMutationPolicy",
      "params": []
     },
     {
      "type": "double",
      "name": "getMutationRate",
      "params": []
     },
     {
      "type": "SelectionPolicy",
      "name": "getSelectionPolicy",
      "params": []
     },
     {
      "type": "int",
      "name": "getGenerationsEvolved",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "GeneticAlgorithm.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "fitness"
     }
    ],
    "name": "Chromosome",
    "methods": [
     {
      "type": "double",
      "name": "getFitness",
      "params": []
     },
     {
      "type": "int",
      "name": "compareTo",
      "params": [
       {
        "type": "Chromosome",
        "name": "another"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isSame",
      "params": [
       {
        "type": "Chromosome",
        "name": "another"
       }
      ]
     },
     {
      "type": "Chromosome",
      "name": "findSameChromosome",
      "params": [
       {
        "type": "Population",
        "name": "population"
       }
      ]
     },
     {
      "type": null,
      "name": "searchForFitnessUpdate",
      "params": [
       {
        "type": "Population",
        "name": "population"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "Chromosome.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "MutationPolicy",
    "methods": [
     {
      "type": "Chromosome",
      "name": "mutate",
      "params": [
       {
        "type": "Chromosome",
        "name": "original"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "MutationPolicy.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "CrossoverPolicy",
    "methods": [
     {
      "type": "ChromosomePair",
      "name": "crossover",
      "params": [
       {
        "type": "Chromosome",
        "name": "first"
       },
       {
        "type": "Chromosome",
        "name": "second"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "CrossoverPolicy.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "BinaryMutation",
    "methods": [
     {
      "type": "Chromosome",
      "name": "mutate",
      "params": [
       {
        "type": "Chromosome",
        "name": "original"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "BinaryMutation.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "SelectionPolicy",
    "methods": [
     {
      "type": "ChromosomePair",
      "name": "select",
      "params": [
       {
        "type": "Population",
        "name": "population"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "SelectionPolicy.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "List",
      "name": "sortedRepresentation"
     },
     {
      "type": "List",
      "name": "baseSeqPermutation"
     }
    ],
    "name": "RandomKey",
    "methods": [
     {
      "type": "List",
      "name": "decode",
      "params": [
       {
        "type": "List",
        "name": "sequence"
       }
      ]
     },
     {
      "type": "List",
      "name": "decodeGeneric",
      "params": [
       {
        "type": "List",
        "name": "sequence"
       },
       {
        "type": "List",
        "name": "representation"
       },
       {
        "type": "List",
        "name": "sortedRepr"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isSame",
      "params": [
       {
        "type": "Chromosome",
        "name": "another"
       }
      ]
     },
     {
      "type": null,
      "name": "checkValidity",
      "params": [
       {
        "type": "java",
        "name": "chromosomeRepresentation"
       }
      ]
     },
     {
      "type": "List",
      "name": "randomPermutation",
      "params": [
       {
        "type": "int",
        "name": "l"
       }
      ]
     },
     {
      "type": "List",
      "name": "identityPermutation",
      "params": [
       {
        "type": "int",
        "name": "l"
       }
      ]
     },
     {
      "type": "List",
      "name": "comparatorPermutation",
      "params": [
       {
        "type": "List",
        "name": "data"
       },
       {
        "type": "Comparator",
        "name": "comparator"
       }
      ]
     },
     {
      "type": "List",
      "name": "inducedPermutation",
      "params": [
       {
        "type": "List",
        "name": "originalData"
       },
       {
        "type": "List",
        "name": "permutedData"
       }
      ]
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": "List",
      "name": "baseSequence",
      "params": [
       {
        "type": "int",
        "name": "l"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "RandomKey.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "List",
      "name": "chromosomes"
     },
     {
      "type": "int",
      "name": "populationLimit"
     }
    ],
    "name": "ListPopulation",
    "methods": [
     {
      "type": null,
      "name": "setChromosomes",
      "params": [
       {
        "type": "List",
        "name": "chromosomes"
       }
      ]
     },
     {
      "type": "List",
      "name": "getChromosomes",
      "params": []
     },
     {
      "type": null,
      "name": "addChromosome",
      "params": [
       {
        "type": "Chromosome",
        "name": "chromosome"
       }
      ]
     },
     {
      "type": "Chromosome",
      "name": "getFittestChromosome",
      "params": []
     },
     {
      "type": "int",
      "name": "getPopulationLimit",
      "params": []
     },
     {
      "type": null,
      "name": "setPopulationLimit",
      "params": [
       {
        "type": "int",
        "name": "populationLimit"
       }
      ]
     },
     {
      "type": "int",
      "name": "getPopulationSize",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": "Iterator",
      "name": "iterator",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "ListPopulation.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_EPSILON"
     }
    ],
    "name": "Beta",
    "methods": [
     {
      "type": "double",
      "name": "regularizedBeta",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       }
      ]
     },
     {
      "type": "double",
      "name": "regularizedBeta",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       },
       {
        "type": "double",
        "name": "epsilon"
       }
      ]
     },
     {
      "type": "double",
      "name": "regularizedBeta",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       },
       {
        "type": "int",
        "name": "maxIterations"
       }
      ]
     },
     {
      "type": "double",
      "name": "regularizedBeta",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       },
       {
        "type": "double",
        "name": "epsilon"
       },
       {
        "type": "int",
        "name": "maxIterations"
       }
      ]
     },
     {
      "type": "double",
      "name": "logBeta",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       }
      ]
     },
     {
      "type": "double",
      "name": "logBeta",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       },
       {
        "type": "double",
        "name": "epsilon"
       },
       {
        "type": "int",
        "name": "maxIterations"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.special",
  "filename": "Beta.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "GAMMA"
     },
     {
      "type": "double",
      "name": "DEFAULT_EPSILON"
     },
     {
      "type": "double",
      "name": "LANCZOS"
     },
     {
      "type": "double",
      "name": "HALF_LOG_2_PI"
     },
     {
      "type": "double",
      "name": "C_LIMIT"
     },
     {
      "type": "double",
      "name": "S_LIMIT"
     }
    ],
    "name": "Gamma",
    "methods": [
     {
      "type": "double",
      "name": "logGamma",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "regularizedGammaP",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "regularizedGammaP",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "epsilon"
       },
       {
        "type": "int",
        "name": "maxIterations"
       }
      ]
     },
     {
      "type": "double",
      "name": "regularizedGammaQ",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "regularizedGammaQ",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "epsilon"
       },
       {
        "type": "int",
        "name": "maxIterations"
       }
      ]
     },
     {
      "type": "double",
      "name": "digamma",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "trigamma",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.special",
  "filename": "Gamma.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Erf",
    "methods": [
     {
      "type": "double",
      "name": "erf",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "erfc",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.special",
  "filename": "Erf.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Rotation",
      "name": "IDENTITY"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "q0"
     },
     {
      "type": "double",
      "name": "q1"
     },
     {
      "type": "double",
      "name": "q2"
     },
     {
      "type": "double",
      "name": "q3"
     }
    ],
    "name": "Rotation",
    "methods": [
     {
      "type": "Rotation",
      "name": "revert",
      "params": []
     },
     {
      "type": "double",
      "name": "getQ0",
      "params": []
     },
     {
      "type": "double",
      "name": "getQ1",
      "params": []
     },
     {
      "type": "double",
      "name": "getQ2",
      "params": []
     },
     {
      "type": "double",
      "name": "getQ3",
      "params": []
     },
     {
      "type": "Vector3D",
      "name": "getAxis",
      "params": []
     },
     {
      "type": "double",
      "name": "getAngle",
      "params": []
     },
     {
      "type": "double",
      "name": "getAngles",
      "params": [
       {
        "type": "RotationOrder",
        "name": "order"
       }
      ]
     },
     {
      "type": "double",
      "name": "getMatrix",
      "params": []
     },
     {
      "type": "Vector3D",
      "name": "applyTo",
      "params": [
       {
        "type": "Vector3D",
        "name": "u"
       }
      ]
     },
     {
      "type": "Vector3D",
      "name": "applyInverseTo",
      "params": [
       {
        "type": "Vector3D",
        "name": "u"
       }
      ]
     },
     {
      "type": "Rotation",
      "name": "applyTo",
      "params": [
       {
        "type": "Rotation",
        "name": "r"
       }
      ]
     },
     {
      "type": "Rotation",
      "name": "applyInverseTo",
      "params": [
       {
        "type": "Rotation",
        "name": "r"
       }
      ]
     },
     {
      "type": "double",
      "name": "orthogonalizeMatrix",
      "params": [
       {
        "type": "double",
        "name": "m"
       },
       {
        "type": "double",
        "name": "threshold"
       }
      ]
     },
     {
      "type": "double",
      "name": "distance",
      "params": [
       {
        "type": "Rotation",
        "name": "r1"
       },
       {
        "type": "Rotation",
        "name": "r2"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.geometry",
  "filename": "Rotation.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "CardanEulerSingularityException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.geometry",
  "filename": "CardanEulerSingularityException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Vector3D",
      "name": "ZERO"
     },
     {
      "type": "Vector3D",
      "name": "PLUS_I"
     },
     {
      "type": "Vector3D",
      "name": "MINUS_I"
     },
     {
      "type": "Vector3D",
      "name": "PLUS_J"
     },
     {
      "type": "Vector3D",
      "name": "MINUS_J"
     },
     {
      "type": "Vector3D",
      "name": "PLUS_K"
     },
     {
      "type": "Vector3D",
      "name": "MINUS_K"
     },
     {
      "type": "Vector3D",
      "name": "NaN"
     },
     {
      "type": "Vector3D",
      "name": "POSITIVE_INFINITY"
     },
     {
      "type": "Vector3D",
      "name": "NEGATIVE_INFINITY"
     },
     {
      "type": "Vector3DFormat",
      "name": "DEFAULT_FORMAT"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "x"
     },
     {
      "type": "double",
      "name": "y"
     },
     {
      "type": "double",
      "name": "z"
     }
    ],
    "name": "Vector3D",
    "methods": [
     {
      "type": "double",
      "name": "getX",
      "params": []
     },
     {
      "type": "double",
      "name": "getY",
      "params": []
     },
     {
      "type": "double",
      "name": "getZ",
      "params": []
     },
     {
      "type": "double",
      "name": "getNorm1",
      "params": []
     },
     {
      "type": "double",
      "name": "getNorm",
      "params": []
     },
     {
      "type": "double",
      "name": "getNormSq",
      "params": []
     },
     {
      "type": "double",
      "name": "getNormInf",
      "params": []
     },
     {
      "type": "double",
      "name": "getAlpha",
      "params": []
     },
     {
      "type": "double",
      "name": "getDelta",
      "params": []
     },
     {
      "type": "Vector3D",
      "name": "add",
      "params": [
       {
        "type": "Vector3D",
        "name": "v"
       }
      ]
     },
     {
      "type": "Vector3D",
      "name": "add",
      "params": [
       {
        "type": "double",
        "name": "factor"
       },
       {
        "type": "Vector3D",
        "name": "v"
       }
      ]
     },
     {
      "type": "Vector3D",
      "name": "subtract",
      "params": [
       {
        "type": "Vector3D",
        "name": "v"
       }
      ]
     },
     {
      "type": "Vector3D",
      "name": "subtract",
      "params": [
       {
        "type": "double",
        "name": "factor"
       },
       {
        "type": "Vector3D",
        "name": "v"
       }
      ]
     },
     {
      "type": "Vector3D",
      "name": "normalize",
      "params": []
     },
     {
      "type": "Vector3D",
      "name": "orthogonal",
      "params": []
     },
     {
      "type": "double",
      "name": "angle",
      "params": [
       {
        "type": "Vector3D",
        "name": "v1"
       },
       {
        "type": "Vector3D",
        "name": "v2"
       }
      ]
     },
     {
      "type": "Vector3D",
      "name": "negate",
      "params": []
     },
     {
      "type": "Vector3D",
      "name": "scalarMultiply",
      "params": [
       {
        "type": "double",
        "name": "a"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isNaN",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isInfinite",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "double",
      "name": "dotProduct",
      "params": [
       {
        "type": "Vector3D",
        "name": "v1"
       },
       {
        "type": "Vector3D",
        "name": "v2"
       }
      ]
     },
     {
      "type": "Vector3D",
      "name": "crossProduct",
      "params": [
       {
        "type": "Vector3D",
        "name": "v1"
       },
       {
        "type": "Vector3D",
        "name": "v2"
       }
      ]
     },
     {
      "type": "double",
      "name": "distance1",
      "params": [
       {
        "type": "Vector3D",
        "name": "v1"
       },
       {
        "type": "Vector3D",
        "name": "v2"
       }
      ]
     },
     {
      "type": "double",
      "name": "distance",
      "params": [
       {
        "type": "Vector3D",
        "name": "v1"
       },
       {
        "type": "Vector3D",
        "name": "v2"
       }
      ]
     },
     {
      "type": "double",
      "name": "distanceInf",
      "params": [
       {
        "type": "Vector3D",
        "name": "v1"
       },
       {
        "type": "Vector3D",
        "name": "v2"
       }
      ]
     },
     {
      "type": "double",
      "name": "distanceSq",
      "params": [
       {
        "type": "Vector3D",
        "name": "v1"
       },
       {
        "type": "Vector3D",
        "name": "v2"
       }
      ]
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.geometry",
  "filename": "Vector3D.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "DEFAULT_PREFIX"
     },
     {
      "type": "String",
      "name": "DEFAULT_SUFFIX"
     },
     {
      "type": "String",
      "name": "DEFAULT_SEPARATOR"
     },
     {
      "type": "String",
      "name": "prefix"
     },
     {
      "type": "String",
      "name": "suffix"
     },
     {
      "type": "String",
      "name": "separator"
     },
     {
      "type": "String",
      "name": "trimmedPrefix"
     },
     {
      "type": "String",
      "name": "trimmedSuffix"
     },
     {
      "type": "String",
      "name": "trimmedSeparator"
     },
     {
      "type": "NumberFormat",
      "name": "format"
     }
    ],
    "name": "Vector3DFormat",
    "methods": [
     {
      "type": "Locale",
      "name": "getAvailableLocales",
      "params": []
     },
     {
      "type": "String",
      "name": "getPrefix",
      "params": []
     },
     {
      "type": "String",
      "name": "getSuffix",
      "params": []
     },
     {
      "type": "String",
      "name": "getSeparator",
      "params": []
     },
     {
      "type": "NumberFormat",
      "name": "getFormat",
      "params": []
     },
     {
      "type": "Vector3DFormat",
      "name": "getInstance",
      "params": []
     },
     {
      "type": "Vector3DFormat",
      "name": "getInstance",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "String",
      "name": "format",
      "params": [
       {
        "type": "Vector3D",
        "name": "v"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "Vector3D",
        "name": "vector"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "Vector3D",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       }
      ]
     },
     {
      "type": "Vector3D",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.geometry",
  "filename": "Vector3DFormat.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "RotationOrder",
      "name": "XYZ"
     },
     {
      "type": "RotationOrder",
      "name": "XZY"
     },
     {
      "type": "RotationOrder",
      "name": "YXZ"
     },
     {
      "type": "RotationOrder",
      "name": "YZX"
     },
     {
      "type": "RotationOrder",
      "name": "ZXY"
     },
     {
      "type": "RotationOrder",
      "name": "ZYX"
     },
     {
      "type": "RotationOrder",
      "name": "XYX"
     },
     {
      "type": "RotationOrder",
      "name": "XZX"
     },
     {
      "type": "RotationOrder",
      "name": "YXY"
     },
     {
      "type": "RotationOrder",
      "name": "YZY"
     },
     {
      "type": "RotationOrder",
      "name": "ZXZ"
     },
     {
      "type": "RotationOrder",
      "name": "ZYZ"
     },
     {
      "type": "String",
      "name": "name"
     },
     {
      "type": "Vector3D",
      "name": "a1"
     },
     {
      "type": "Vector3D",
      "name": "a2"
     },
     {
      "type": "Vector3D",
      "name": "a3"
     }
    ],
    "name": "RotationOrder",
    "methods": [
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": "Vector3D",
      "name": "getA1",
      "params": []
     },
     {
      "type": "Vector3D",
      "name": "getA2",
      "params": []
     },
     {
      "type": "Vector3D",
      "name": "getA3",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.geometry",
  "filename": "RotationOrder.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "NotARotationMatrixException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.geometry",
  "filename": "NotARotationMatrixException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "qrt"
     },
     {
      "type": "double",
      "name": "rDiag"
     },
     {
      "type": "RealMatrix",
      "name": "cachedQ"
     },
     {
      "type": "RealMatrix",
      "name": "cachedQT"
     },
     {
      "type": "RealMatrix",
      "name": "cachedR"
     },
     {
      "type": "RealMatrix",
      "name": "cachedH"
     }
    ],
    "name": "QRDecompositionImpl",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "getR",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getQ",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getQT",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getH",
      "params": []
     },
     {
      "type": "DecompositionSolver",
      "name": "getSolver",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "QRDecompositionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "CholeskyDecomposition",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "getL",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getLT",
      "params": []
     },
     {
      "type": "double",
      "name": "getDeterminant",
      "params": []
     },
     {
      "type": "DecompositionSolver",
      "name": "getSolver",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "CholeskyDecomposition.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FieldVector",
    "methods": [
     {
      "type": "Field",
      "name": "getField",
      "params": []
     },
     {
      "type": "FieldVector",
      "name": "copy",
      "params": []
     },
     {
      "type": "FieldVector",
      "name": "add",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "add",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "subtract",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "subtract",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapAdd",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapAddToSelf",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapSubtract",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapSubtractToSelf",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapMultiply",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapMultiplyToSelf",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapDivide",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapDivideToSelf",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapInv",
      "params": []
     },
     {
      "type": "FieldVector",
      "name": "mapInvToSelf",
      "params": []
     },
     {
      "type": "FieldVector",
      "name": "ebeMultiply",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "ebeMultiply",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "ebeDivide",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "ebeDivide",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "getData",
      "params": []
     },
     {
      "type": "T",
      "name": "dotProduct",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "dotProduct",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "projection",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "projection",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "outerProduct",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "outerProduct",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": null,
      "name": "setEntry",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "T",
        "name": "value"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": "FieldVector",
      "name": "append",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "append",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "append",
      "params": [
       {
        "type": "T",
        "name": "a"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "getSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "set",
      "params": [
       {
        "type": "T",
        "name": "value"
       }
      ]
     },
     {
      "type": "T",
      "name": "toArray",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "FieldVector.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Field",
      "name": "field"
     }
    ],
    "name": "AbstractFieldMatrix",
    "methods": [
     {
      "type": "Field",
      "name": "extractField",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "Field",
      "name": "extractField",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "T",
      "name": "buildArray",
      "params": [
       {
        "type": "Field",
        "name": "field"
       },
       {
        "type": "int",
        "name": "rows"
       },
       {
        "type": "int",
        "name": "columns"
       }
      ]
     },
     {
      "type": "T",
      "name": "buildArray",
      "params": [
       {
        "type": "Field",
        "name": "field"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "Field",
      "name": "getField",
      "params": []
     },
     {
      "type": "FieldMatrix",
      "name": "createMatrix",
      "params": [
       {
        "type": "int",
        "name": "rowDimension"
       },
       {
        "type": "int",
        "name": "columnDimension"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "copy",
      "params": []
     },
     {
      "type": "FieldMatrix",
      "name": "add",
      "params": [
       {
        "type": "FieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "subtract",
      "params": [
       {
        "type": "FieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "scalarAdd",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "scalarMultiply",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "multiply",
      "params": [
       {
        "type": "FieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "preMultiply",
      "params": [
       {
        "type": "FieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "power",
      "params": [
       {
        "type": "int",
        "name": "p"
       }
      ]
     },
     {
      "type": "T",
      "name": "getData",
      "params": []
     },
     {
      "type": "FieldMatrix",
      "name": "getSubMatrix",
      "params": [
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "getSubMatrix",
      "params": [
       {
        "type": "int",
        "name": "selectedRows"
       },
       {
        "type": "int",
        "name": "selectedColumns"
       }
      ]
     },
     {
      "type": null,
      "name": "copySubMatrix",
      "params": [
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       },
       {
        "type": "T",
        "name": "destination"
       }
      ]
     },
     {
      "type": null,
      "name": "copySubMatrix",
      "params": [
       {
        "type": "int",
        "name": "selectedRows"
       },
       {
        "type": "int",
        "name": "selectedColumns"
       },
       {
        "type": "T",
        "name": "destination"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubMatrix",
      "params": [
       {
        "type": "T",
        "name": "subMatrix"
       },
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "getRowMatrix",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "setRowMatrix",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "FieldMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "getColumnMatrix",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumnMatrix",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "FieldMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "getRowVector",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "setRowVector",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "FieldVector",
        "name": "vector"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "getColumnVector",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumnVector",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "FieldVector",
        "name": "vector"
       }
      ]
     },
     {
      "type": "T",
      "name": "getRow",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "setRow",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "T",
        "name": "array"
       }
      ]
     },
     {
      "type": "T",
      "name": "getColumn",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumn",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "array"
       }
      ]
     },
     {
      "type": "T",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "addToEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "increment"
       }
      ]
     },
     {
      "type": null,
      "name": "multiplyEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "factor"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "transpose",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSquare",
      "params": []
     },
     {
      "type": "int",
      "name": "getRowDimension",
      "params": []
     },
     {
      "type": "int",
      "name": "getColumnDimension",
      "params": []
     },
     {
      "type": "T",
      "name": "getTrace",
      "params": []
     },
     {
      "type": "T",
      "name": "operate",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "operate",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "preMultiply",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "preMultiply",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "object"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": null,
      "name": "checkRowIndex",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "checkColumnIndex",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "checkSubMatrixIndex",
      "params": [
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": null,
      "name": "checkSubMatrixIndex",
      "params": [
       {
        "type": "int",
        "name": "selectedRows"
       },
       {
        "type": "int",
        "name": "selectedColumns"
       }
      ]
     },
     {
      "type": null,
      "name": "checkAdditionCompatible",
      "params": [
       {
        "type": "FieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": null,
      "name": "checkSubtractionCompatible",
      "params": [
       {
        "type": "FieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": null,
      "name": "checkMultiplicationCompatible",
      "params": [
       {
        "type": "FieldMatrix",
        "name": "m"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "AbstractFieldMatrix.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DecompositionSolver",
    "methods": [
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "b"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "solve",
      "params": [
       {
        "type": "RealVector",
        "name": "b"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "solve",
      "params": [
       {
        "type": "RealMatrix",
        "name": "b"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isNonSingular",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getInverse",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "DecompositionSolver.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DefaultRealMatrixPreservingVisitor",
    "methods": [
     {
      "type": null,
      "name": "start",
      "params": [
       {
        "type": "int",
        "name": "rows"
       },
       {
        "type": "int",
        "name": "columns"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": null,
      "name": "visit",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "double",
      "name": "end",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "DefaultRealMatrixPreservingVisitor.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "m"
     },
     {
      "type": "int",
      "name": "n"
     },
     {
      "type": "EigenDecomposition",
      "name": "eigenDecomposition"
     },
     {
      "type": "double",
      "name": "singularValues"
     },
     {
      "type": "RealMatrix",
      "name": "cachedU"
     },
     {
      "type": "RealMatrix",
      "name": "cachedUt"
     },
     {
      "type": "RealMatrix",
      "name": "cachedS"
     },
     {
      "type": "RealMatrix",
      "name": "cachedV"
     },
     {
      "type": "RealMatrix",
      "name": "cachedVt"
     }
    ],
    "name": "SingularValueDecompositionImpl",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "getU",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getUT",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getS",
      "params": []
     },
     {
      "type": "double",
      "name": "getSingularValues",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getV",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getVT",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getCovariance",
      "params": [
       {
        "type": "double",
        "name": "minSingularValue"
       }
      ]
     },
     {
      "type": "double",
      "name": "getNorm",
      "params": []
     },
     {
      "type": "double",
      "name": "getConditionNumber",
      "params": []
     },
     {
      "type": "int",
      "name": "getRank",
      "params": []
     },
     {
      "type": "DecompositionSolver",
      "name": "getSolver",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "SingularValueDecompositionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "householderVectors"
     },
     {
      "type": "double",
      "name": "main"
     },
     {
      "type": "double",
      "name": "secondary"
     },
     {
      "type": "RealMatrix",
      "name": "cachedQ"
     },
     {
      "type": "RealMatrix",
      "name": "cachedQt"
     },
     {
      "type": "RealMatrix",
      "name": "cachedT"
     }
    ],
    "name": "TriDiagonalTransformer",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "getQ",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getQT",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getT",
      "params": []
     },
     {
      "type": "double",
      "name": "getHouseholderVectorsRef",
      "params": []
     },
     {
      "type": "double",
      "name": "getMainDiagonalRef",
      "params": []
     },
     {
      "type": "double",
      "name": "getSecondaryDiagonalRef",
      "params": []
     },
     {
      "type": null,
      "name": "transform",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "TriDiagonalTransformer.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FieldMatrix",
    "methods": [
     {
      "type": "Field",
      "name": "getField",
      "params": []
     },
     {
      "type": "FieldMatrix",
      "name": "createMatrix",
      "params": [
       {
        "type": "int",
        "name": "rowDimension"
       },
       {
        "type": "int",
        "name": "columnDimension"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "copy",
      "params": []
     },
     {
      "type": "FieldMatrix",
      "name": "add",
      "params": [
       {
        "type": "FieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "subtract",
      "params": [
       {
        "type": "FieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "scalarAdd",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "scalarMultiply",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "multiply",
      "params": [
       {
        "type": "FieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "preMultiply",
      "params": [
       {
        "type": "FieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "power",
      "params": [
       {
        "type": "int",
        "name": "p"
       }
      ]
     },
     {
      "type": "T",
      "name": "getData",
      "params": []
     },
     {
      "type": "FieldMatrix",
      "name": "getSubMatrix",
      "params": [
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "getSubMatrix",
      "params": [
       {
        "type": "int",
        "name": "selectedRows"
       },
       {
        "type": "int",
        "name": "selectedColumns"
       }
      ]
     },
     {
      "type": null,
      "name": "copySubMatrix",
      "params": [
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       },
       {
        "type": "T",
        "name": "destination"
       }
      ]
     },
     {
      "type": null,
      "name": "copySubMatrix",
      "params": [
       {
        "type": "int",
        "name": "selectedRows"
       },
       {
        "type": "int",
        "name": "selectedColumns"
       },
       {
        "type": "T",
        "name": "destination"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubMatrix",
      "params": [
       {
        "type": "T",
        "name": "subMatrix"
       },
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "getRowMatrix",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "setRowMatrix",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "FieldMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "getColumnMatrix",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumnMatrix",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "FieldMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "getRowVector",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "setRowVector",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "FieldVector",
        "name": "vector"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "getColumnVector",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumnVector",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "FieldVector",
        "name": "vector"
       }
      ]
     },
     {
      "type": "T",
      "name": "getRow",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "setRow",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "T",
        "name": "array"
       }
      ]
     },
     {
      "type": "T",
      "name": "getColumn",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumn",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "array"
       }
      ]
     },
     {
      "type": "T",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "addToEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "increment"
       }
      ]
     },
     {
      "type": null,
      "name": "multiplyEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "factor"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "transpose",
      "params": []
     },
     {
      "type": "T",
      "name": "getTrace",
      "params": []
     },
     {
      "type": "T",
      "name": "operate",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "operate",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "preMultiply",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "preMultiply",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "FieldMatrix.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "NonSquareMatrixException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "NonSquareMatrixException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "householderVectors"
     },
     {
      "type": "double",
      "name": "main"
     },
     {
      "type": "double",
      "name": "secondary"
     },
     {
      "type": "RealMatrix",
      "name": "cachedU"
     },
     {
      "type": "RealMatrix",
      "name": "cachedB"
     },
     {
      "type": "RealMatrix",
      "name": "cachedV"
     }
    ],
    "name": "BiDiagonalTransformer",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "getU",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getB",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getV",
      "params": []
     },
     {
      "type": "double",
      "name": "getHouseholderVectorsRef",
      "params": []
     },
     {
      "type": "double",
      "name": "getMainDiagonalRef",
      "params": []
     },
     {
      "type": "double",
      "name": "getSecondaryDiagonalRef",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isUpperBiDiagonal",
      "params": []
     },
     {
      "type": null,
      "name": "transformToUpperBiDiagonal",
      "params": []
     },
     {
      "type": null,
      "name": "transformToLowerBiDiagonal",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "BiDiagonalTransformer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "index"
     },
     {
      "type": "double",
      "name": "threshold"
     }
    ],
    "name": "NonPositiveDefiniteMatrixException",
    "methods": [
     {
      "type": "int",
      "name": "getRow",
      "params": []
     },
     {
      "type": "int",
      "name": "getColumn",
      "params": []
     },
     {
      "type": "double",
      "name": "getThreshold",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "NonPositiveDefiniteMatrixException.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "SparseRealMatrix",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "SparseRealMatrix.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "AbstractRealMatrix",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "createMatrix",
      "params": [
       {
        "type": "int",
        "name": "rowDimension"
       },
       {
        "type": "int",
        "name": "columnDimension"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "copy",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "add",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "subtract",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "scalarAdd",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "scalarMultiply",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "multiply",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "preMultiply",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "power",
      "params": [
       {
        "type": "int",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getData",
      "params": []
     },
     {
      "type": "double",
      "name": "getNorm",
      "params": []
     },
     {
      "type": "double",
      "name": "getFrobeniusNorm",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getSubMatrix",
      "params": [
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "getSubMatrix",
      "params": [
       {
        "type": "int",
        "name": "selectedRows"
       },
       {
        "type": "int",
        "name": "selectedColumns"
       }
      ]
     },
     {
      "type": null,
      "name": "copySubMatrix",
      "params": [
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       },
       {
        "type": "double",
        "name": "destination"
       }
      ]
     },
     {
      "type": null,
      "name": "copySubMatrix",
      "params": [
       {
        "type": "int",
        "name": "selectedRows"
       },
       {
        "type": "int",
        "name": "selectedColumns"
       },
       {
        "type": "double",
        "name": "destination"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubMatrix",
      "params": [
       {
        "type": "double",
        "name": "subMatrix"
       },
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "getRowMatrix",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "setRowMatrix",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "RealMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "getColumnMatrix",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumnMatrix",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "RealMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "getRowVector",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "setRowVector",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "RealVector",
        "name": "vector"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "getColumnVector",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumnVector",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "RealVector",
        "name": "vector"
       }
      ]
     },
     {
      "type": "double",
      "name": "getRow",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "setRow",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "double",
        "name": "array"
       }
      ]
     },
     {
      "type": "double",
      "name": "getColumn",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumn",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "array"
       }
      ]
     },
     {
      "type": "double",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "addToEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "increment"
       }
      ]
     },
     {
      "type": null,
      "name": "multiplyEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "factor"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "transpose",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSquare",
      "params": []
     },
     {
      "type": "int",
      "name": "getRowDimension",
      "params": []
     },
     {
      "type": "int",
      "name": "getColumnDimension",
      "params": []
     },
     {
      "type": "double",
      "name": "getTrace",
      "params": []
     },
     {
      "type": "double",
      "name": "operate",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "operate",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "preMultiply",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "preMultiply",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "object"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "AbstractRealMatrix.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "LUDecomposition",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "getL",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getU",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getP",
      "params": []
     },
     {
      "type": "int",
      "name": "getPivot",
      "params": []
     },
     {
      "type": "double",
      "name": "getDeterminant",
      "params": []
     },
     {
      "type": "DecompositionSolver",
      "name": "getSolver",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "LUDecomposition.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "BLOCK_SIZE"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "T",
      "name": "blocks"
     },
     {
      "type": "int",
      "name": "rows"
     },
     {
      "type": "int",
      "name": "columns"
     },
     {
      "type": "int",
      "name": "blockRows"
     },
     {
      "type": "int",
      "name": "blockColumns"
     }
    ],
    "name": "BlockFieldMatrix",
    "methods": [
     {
      "type": "T",
      "name": "toBlocksLayout",
      "params": [
       {
        "type": "T",
        "name": "rawData"
       }
      ]
     },
     {
      "type": "T",
      "name": "createBlocksLayout",
      "params": [
       {
        "type": "Field",
        "name": "field"
       },
       {
        "type": "int",
        "name": "rows"
       },
       {
        "type": "int",
        "name": "columns"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "createMatrix",
      "params": [
       {
        "type": "int",
        "name": "rowDimension"
       },
       {
        "type": "int",
        "name": "columnDimension"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "copy",
      "params": []
     },
     {
      "type": "FieldMatrix",
      "name": "add",
      "params": [
       {
        "type": "FieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "BlockFieldMatrix",
      "name": "add",
      "params": [
       {
        "type": "BlockFieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "subtract",
      "params": [
       {
        "type": "FieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "BlockFieldMatrix",
      "name": "subtract",
      "params": [
       {
        "type": "BlockFieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "scalarAdd",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "scalarMultiply",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "multiply",
      "params": [
       {
        "type": "FieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "BlockFieldMatrix",
      "name": "multiply",
      "params": [
       {
        "type": "BlockFieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "T",
      "name": "getData",
      "params": []
     },
     {
      "type": "FieldMatrix",
      "name": "getSubMatrix",
      "params": [
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": null,
      "name": "copyBlockPart",
      "params": [
       {
        "type": "T",
        "name": "srcBlock"
       },
       {
        "type": "int",
        "name": "srcWidth"
       },
       {
        "type": "int",
        "name": "srcStartRow"
       },
       {
        "type": "int",
        "name": "srcEndRow"
       },
       {
        "type": "int",
        "name": "srcStartColumn"
       },
       {
        "type": "int",
        "name": "srcEndColumn"
       },
       {
        "type": "T",
        "name": "dstBlock"
       },
       {
        "type": "int",
        "name": "dstWidth"
       },
       {
        "type": "int",
        "name": "dstStartRow"
       },
       {
        "type": "int",
        "name": "dstStartColumn"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubMatrix",
      "params": [
       {
        "type": "T",
        "name": "subMatrix"
       },
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "getRowMatrix",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "setRowMatrix",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "FieldMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": null,
      "name": "setRowMatrix",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "BlockFieldMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "getColumnMatrix",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumnMatrix",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "FieldMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumnMatrix",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "BlockFieldMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "getRowVector",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "setRowVector",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "FieldVector",
        "name": "vector"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "getColumnVector",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumnVector",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "FieldVector",
        "name": "vector"
       }
      ]
     },
     {
      "type": "T",
      "name": "getRow",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "setRow",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "T",
        "name": "array"
       }
      ]
     },
     {
      "type": "T",
      "name": "getColumn",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumn",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "array"
       }
      ]
     },
     {
      "type": "T",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "addToEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "increment"
       }
      ]
     },
     {
      "type": null,
      "name": "multiplyEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "factor"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "transpose",
      "params": []
     },
     {
      "type": "int",
      "name": "getRowDimension",
      "params": []
     },
     {
      "type": "int",
      "name": "getColumnDimension",
      "params": []
     },
     {
      "type": "T",
      "name": "operate",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "preMultiply",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "int",
      "name": "blockHeight",
      "params": [
       {
        "type": "int",
        "name": "blockRow"
       }
      ]
     },
     {
      "type": "int",
      "name": "blockWidth",
      "params": [
       {
        "type": "int",
        "name": "blockColumn"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "BlockFieldMatrix.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "RealMatrix",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "createMatrix",
      "params": [
       {
        "type": "int",
        "name": "rowDimension"
       },
       {
        "type": "int",
        "name": "columnDimension"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "copy",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "add",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "subtract",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "scalarAdd",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "scalarMultiply",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "multiply",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "preMultiply",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "power",
      "params": [
       {
        "type": "int",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getData",
      "params": []
     },
     {
      "type": "double",
      "name": "getNorm",
      "params": []
     },
     {
      "type": "double",
      "name": "getFrobeniusNorm",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getSubMatrix",
      "params": [
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "getSubMatrix",
      "params": [
       {
        "type": "int",
        "name": "selectedRows"
       },
       {
        "type": "int",
        "name": "selectedColumns"
       }
      ]
     },
     {
      "type": null,
      "name": "copySubMatrix",
      "params": [
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       },
       {
        "type": "double",
        "name": "destination"
       }
      ]
     },
     {
      "type": null,
      "name": "copySubMatrix",
      "params": [
       {
        "type": "int",
        "name": "selectedRows"
       },
       {
        "type": "int",
        "name": "selectedColumns"
       },
       {
        "type": "double",
        "name": "destination"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubMatrix",
      "params": [
       {
        "type": "double",
        "name": "subMatrix"
       },
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "getRowMatrix",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "setRowMatrix",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "RealMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "getColumnMatrix",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumnMatrix",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "RealMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "getRowVector",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "setRowVector",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "RealVector",
        "name": "vector"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "getColumnVector",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumnVector",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "RealVector",
        "name": "vector"
       }
      ]
     },
     {
      "type": "double",
      "name": "getRow",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "setRow",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "double",
        "name": "array"
       }
      ]
     },
     {
      "type": "double",
      "name": "getColumn",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumn",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "array"
       }
      ]
     },
     {
      "type": "double",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "addToEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "increment"
       }
      ]
     },
     {
      "type": null,
      "name": "multiplyEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "factor"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "transpose",
      "params": []
     },
     {
      "type": "double",
      "name": "getTrace",
      "params": []
     },
     {
      "type": "double",
      "name": "operate",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "operate",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "preMultiply",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "preMultiply",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "RealMatrix.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "OpenIntToFieldHashMap",
      "name": "entries"
     },
     {
      "type": "int",
      "name": "rows"
     },
     {
      "type": "int",
      "name": "columns"
     }
    ],
    "name": "SparseFieldMatrix",
    "methods": [
     {
      "type": null,
      "name": "addToEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "increment"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "copy",
      "params": []
     },
     {
      "type": "FieldMatrix",
      "name": "createMatrix",
      "params": [
       {
        "type": "int",
        "name": "rowDimension"
       },
       {
        "type": "int",
        "name": "columnDimension"
       }
      ]
     },
     {
      "type": "int",
      "name": "getColumnDimension",
      "params": []
     },
     {
      "type": "T",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "int",
      "name": "getRowDimension",
      "params": []
     },
     {
      "type": null,
      "name": "multiplyEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "factor"
       }
      ]
     },
     {
      "type": null,
      "name": "setEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "value"
       }
      ]
     },
     {
      "type": "int",
      "name": "computeKey",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "SparseFieldMatrix.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FieldDecompositionSolver",
    "methods": [
     {
      "type": "T",
      "name": "solve",
      "params": [
       {
        "type": "T",
        "name": "b"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "solve",
      "params": [
       {
        "type": "FieldVector",
        "name": "b"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "solve",
      "params": [
       {
        "type": "FieldMatrix",
        "name": "b"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isNonSingular",
      "params": []
     },
     {
      "type": "FieldMatrix",
      "name": "getInverse",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "FieldDecompositionSolver.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "MatrixUtils",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "createRealMatrix",
      "params": [
       {
        "type": "int",
        "name": "rows"
       },
       {
        "type": "int",
        "name": "columns"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "createFieldMatrix",
      "params": [
       {
        "type": "Field",
        "name": "field"
       },
       {
        "type": "int",
        "name": "rows"
       },
       {
        "type": "int",
        "name": "columns"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "createRealMatrix",
      "params": [
       {
        "type": "double",
        "name": "data"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "createFieldMatrix",
      "params": [
       {
        "type": "T",
        "name": "data"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "createRealIdentityMatrix",
      "params": [
       {
        "type": "int",
        "name": "dimension"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "createFieldIdentityMatrix",
      "params": [
       {
        "type": "Field",
        "name": "field"
       },
       {
        "type": "int",
        "name": "dimension"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "createRealDiagonalMatrix",
      "params": [
       {
        "type": "double",
        "name": "diagonal"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "createFieldDiagonalMatrix",
      "params": [
       {
        "type": "T",
        "name": "diagonal"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "createRealVector",
      "params": [
       {
        "type": "double",
        "name": "data"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "createFieldVector",
      "params": [
       {
        "type": "T",
        "name": "data"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "createRowRealMatrix",
      "params": [
       {
        "type": "double",
        "name": "rowData"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "createRowFieldMatrix",
      "params": [
       {
        "type": "T",
        "name": "rowData"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "createColumnRealMatrix",
      "params": [
       {
        "type": "double",
        "name": "columnData"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "createColumnFieldMatrix",
      "params": [
       {
        "type": "T",
        "name": "columnData"
       }
      ]
     },
     {
      "type": null,
      "name": "checkMatrixIndex",
      "params": [
       {
        "type": "AnyMatrix",
        "name": "m"
       },
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "checkRowIndex",
      "params": [
       {
        "type": "AnyMatrix",
        "name": "m"
       },
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "checkColumnIndex",
      "params": [
       {
        "type": "AnyMatrix",
        "name": "m"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "checkSubMatrixIndex",
      "params": [
       {
        "type": "AnyMatrix",
        "name": "m"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": null,
      "name": "checkSubMatrixIndex",
      "params": [
       {
        "type": "AnyMatrix",
        "name": "m"
       },
       {
        "type": "int",
        "name": "selectedRows"
       },
       {
        "type": "int",
        "name": "selectedColumns"
       }
      ]
     },
     {
      "type": null,
      "name": "checkAdditionCompatible",
      "params": [
       {
        "type": "AnyMatrix",
        "name": "left"
       },
       {
        "type": "AnyMatrix",
        "name": "right"
       }
      ]
     },
     {
      "type": null,
      "name": "checkSubtractionCompatible",
      "params": [
       {
        "type": "AnyMatrix",
        "name": "left"
       },
       {
        "type": "AnyMatrix",
        "name": "right"
       }
      ]
     },
     {
      "type": null,
      "name": "checkMultiplicationCompatible",
      "params": [
       {
        "type": "AnyMatrix",
        "name": "left"
       },
       {
        "type": "AnyMatrix",
        "name": "right"
       }
      ]
     },
     {
      "type": "Array2DRowRealMatrix",
      "name": "fractionMatrixToRealMatrix",
      "params": [
       {
        "type": "FieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "Array2DRowRealMatrix",
      "name": "bigFractionMatrixToRealMatrix",
      "params": [
       {
        "type": "FieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": null,
      "name": "serializeRealVector",
      "params": [
       {
        "type": "RealVector",
        "name": "vector"
       },
       {
        "type": "ObjectOutputStream",
        "name": "oos"
       }
      ]
     },
     {
      "type": null,
      "name": "deserializeRealVector",
      "params": [
       {
        "type": "Object",
        "name": "instance"
       },
       {
        "type": "String",
        "name": "fieldName"
       },
       {
        "type": "ObjectInputStream",
        "name": "ois"
       }
      ]
     },
     {
      "type": null,
      "name": "serializeRealMatrix",
      "params": [
       {
        "type": "RealMatrix",
        "name": "matrix"
       },
       {
        "type": "ObjectOutputStream",
        "name": "oos"
       }
      ]
     },
     {
      "type": null,
      "name": "deserializeRealMatrix",
      "params": [
       {
        "type": "Object",
        "name": "instance"
       },
       {
        "type": "String",
        "name": "fieldName"
       },
       {
        "type": "ObjectInputStream",
        "name": "ois"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "MatrixUtils.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "AnyMatrix",
    "methods": [
     {
      "type": "boolean",
      "name": "isSquare",
      "params": []
     },
     {
      "type": "int",
      "name": "getRowDimension",
      "params": []
     },
     {
      "type": "int",
      "name": "getColumnDimension",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "AnyMatrix.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "RealVector",
    "methods": [
     {
      "type": "RealVector",
      "name": "mapToSelf",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "function"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "map",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "function"
       }
      ]
     },
     {
      "type": "Iterator",
      "name": "iterator",
      "params": []
     },
     {
      "type": "Iterator",
      "name": "sparseIterator",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "copy",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "add",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "add",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "subtract",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "subtract",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapAdd",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapAddToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapSubtract",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapSubtractToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapMultiply",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapMultiplyToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapDivide",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapDivideToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "ebeMultiply",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "ebeMultiply",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "ebeDivide",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "ebeDivide",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getData",
      "params": []
     },
     {
      "type": "double",
      "name": "dotProduct",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "dotProduct",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "cosine",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "cosine",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getNorm",
      "params": []
     },
     {
      "type": "double",
      "name": "getL1Norm",
      "params": []
     },
     {
      "type": "double",
      "name": "getLInfNorm",
      "params": []
     },
     {
      "type": "double",
      "name": "getDistance",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDistance",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getL1Distance",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getL1Distance",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getLInfDistance",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getLInfDistance",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "unitVector",
      "params": []
     },
     {
      "type": null,
      "name": "unitize",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "projection",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "projection",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "outerProduct",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "outerProduct",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": null,
      "name": "setEntry",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "append",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "append",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "append",
      "params": [
       {
        "type": "double",
        "name": "a"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "getSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "set",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "double",
      "name": "toArray",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isNaN",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isInfinite",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "RealVector.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "T",
      "name": "data"
     }
    ],
    "name": "Array2DRowFieldMatrix",
    "methods": [
     {
      "type": "FieldMatrix",
      "name": "createMatrix",
      "params": [
       {
        "type": "int",
        "name": "rowDimension"
       },
       {
        "type": "int",
        "name": "columnDimension"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "copy",
      "params": []
     },
     {
      "type": "Array2DRowFieldMatrix",
      "name": "add",
      "params": [
       {
        "type": "Array2DRowFieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "Array2DRowFieldMatrix",
      "name": "subtract",
      "params": [
       {
        "type": "Array2DRowFieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "Array2DRowFieldMatrix",
      "name": "multiply",
      "params": [
       {
        "type": "Array2DRowFieldMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "T",
      "name": "getData",
      "params": []
     },
     {
      "type": "T",
      "name": "getDataRef",
      "params": []
     },
     {
      "type": null,
      "name": "setSubMatrix",
      "params": [
       {
        "type": "T",
        "name": "subMatrix"
       },
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "T",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "addToEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "increment"
       }
      ]
     },
     {
      "type": null,
      "name": "multiplyEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "factor"
       }
      ]
     },
     {
      "type": "int",
      "name": "getRowDimension",
      "params": []
     },
     {
      "type": "int",
      "name": "getColumnDimension",
      "params": []
     },
     {
      "type": "T",
      "name": "operate",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "preMultiply",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "FieldMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "FieldMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "copyOut",
      "params": []
     },
     {
      "type": null,
      "name": "copyIn",
      "params": [
       {
        "type": "T",
        "name": "in"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "Array2DRowFieldMatrix.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "rows"
     },
     {
      "type": "int",
      "name": "columns"
     },
     {
      "type": "OpenIntToDoubleHashMap",
      "name": "entries"
     }
    ],
    "name": "OpenMapRealMatrix",
    "methods": [
     {
      "type": "OpenMapRealMatrix",
      "name": "copy",
      "params": []
     },
     {
      "type": "OpenMapRealMatrix",
      "name": "createMatrix",
      "params": [
       {
        "type": "int",
        "name": "rowDimension"
       },
       {
        "type": "int",
        "name": "columnDimension"
       }
      ]
     },
     {
      "type": "int",
      "name": "getColumnDimension",
      "params": []
     },
     {
      "type": "OpenMapRealMatrix",
      "name": "add",
      "params": [
       {
        "type": "OpenMapRealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "OpenMapRealMatrix",
      "name": "subtract",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "OpenMapRealMatrix",
      "name": "subtract",
      "params": [
       {
        "type": "OpenMapRealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "multiply",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "OpenMapRealMatrix",
      "name": "multiply",
      "params": [
       {
        "type": "OpenMapRealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "double",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "int",
      "name": "getRowDimension",
      "params": []
     },
     {
      "type": null,
      "name": "setEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "addToEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "increment"
       }
      ]
     },
     {
      "type": null,
      "name": "multiplyEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "factor"
       }
      ]
     },
     {
      "type": "int",
      "name": "computeKey",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "OpenMapRealMatrix.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "SingularValueDecomposition",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "getU",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getUT",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getS",
      "params": []
     },
     {
      "type": "double",
      "name": "getSingularValues",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getV",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getVT",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getCovariance",
      "params": [
       {
        "type": "double",
        "name": "minSingularValue"
       }
      ]
     },
     {
      "type": "double",
      "name": "getNorm",
      "params": []
     },
     {
      "type": "double",
      "name": "getConditionNumber",
      "params": []
     },
     {
      "type": "int",
      "name": "getRank",
      "params": []
     },
     {
      "type": "DecompositionSolver",
      "name": "getSolver",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "SingularValueDecomposition.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "MatrixDimensionMismatchException",
    "methods": [
     {
      "type": "int",
      "name": "getWrongRowDimension",
      "params": []
     },
     {
      "type": "int",
      "name": "getExpectedRowDimension",
      "params": []
     },
     {
      "type": "int",
      "name": "getWrongColumnDimension",
      "params": []
     },
     {
      "type": "int",
      "name": "getExpectedColumnDimension",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "MatrixDimensionMismatchException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "DEFAULT_PREFIX"
     },
     {
      "type": "String",
      "name": "DEFAULT_SUFFIX"
     },
     {
      "type": "String",
      "name": "DEFAULT_SEPARATOR"
     },
     {
      "type": "String",
      "name": "prefix"
     },
     {
      "type": "String",
      "name": "suffix"
     },
     {
      "type": "String",
      "name": "separator"
     },
     {
      "type": "String",
      "name": "trimmedPrefix"
     },
     {
      "type": "String",
      "name": "trimmedSuffix"
     },
     {
      "type": "String",
      "name": "trimmedSeparator"
     },
     {
      "type": "NumberFormat",
      "name": "format"
     }
    ],
    "name": "RealVectorFormat",
    "methods": [
     {
      "type": "Locale",
      "name": "getAvailableLocales",
      "params": []
     },
     {
      "type": "String",
      "name": "getPrefix",
      "params": []
     },
     {
      "type": "String",
      "name": "getSuffix",
      "params": []
     },
     {
      "type": "String",
      "name": "getSeparator",
      "params": []
     },
     {
      "type": "NumberFormat",
      "name": "getFormat",
      "params": []
     },
     {
      "type": "RealVectorFormat",
      "name": "getInstance",
      "params": []
     },
     {
      "type": "RealVectorFormat",
      "name": "getInstance",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "String",
      "name": "format",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "RealVector",
        "name": "vector"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "ArrayRealVector",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       }
      ]
     },
     {
      "type": "ArrayRealVector",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "RealVectorFormat.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "RealMatrixPreservingVisitor",
    "methods": [
     {
      "type": null,
      "name": "start",
      "params": [
       {
        "type": "int",
        "name": "rows"
       },
       {
        "type": "int",
        "name": "columns"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": null,
      "name": "visit",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "double",
      "name": "end",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "RealMatrixPreservingVisitor.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DefaultRealMatrixChangingVisitor",
    "methods": [
     {
      "type": null,
      "name": "start",
      "params": [
       {
        "type": "int",
        "name": "rows"
       },
       {
        "type": "int",
        "name": "columns"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "visit",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "double",
      "name": "end",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "DefaultRealMatrixChangingVisitor.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "SingularMatrixException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "SingularMatrixException.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FieldMatrixChangingVisitor",
    "methods": [
     {
      "type": null,
      "name": "start",
      "params": [
       {
        "type": "int",
        "name": "rows"
       },
       {
        "type": "int",
        "name": "columns"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "visit",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "value"
       }
      ]
     },
     {
      "type": "T",
      "name": "end",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "FieldMatrixChangingVisitor.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "T",
      "name": "zero"
     }
    ],
    "name": "DefaultFieldMatrixChangingVisitor",
    "methods": [
     {
      "type": null,
      "name": "start",
      "params": [
       {
        "type": "int",
        "name": "rows"
       },
       {
        "type": "int",
        "name": "columns"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "T",
      "name": "visit",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "value"
       }
      ]
     },
     {
      "type": "T",
      "name": "end",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "DefaultFieldMatrixChangingVisitor.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FieldMatrixPreservingVisitor",
    "methods": [
     {
      "type": null,
      "name": "start",
      "params": [
       {
        "type": "int",
        "name": "rows"
       },
       {
        "type": "int",
        "name": "columns"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": null,
      "name": "visit",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "value"
       }
      ]
     },
     {
      "type": "T",
      "name": "end",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "FieldMatrixPreservingVisitor.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Field",
      "name": "field"
     },
     {
      "type": "T",
      "name": "lu"
     },
     {
      "type": "int",
      "name": "pivot"
     },
     {
      "type": "boolean",
      "name": "even"
     },
     {
      "type": "boolean",
      "name": "singular"
     },
     {
      "type": "FieldMatrix",
      "name": "cachedL"
     },
     {
      "type": "FieldMatrix",
      "name": "cachedU"
     },
     {
      "type": "FieldMatrix",
      "name": "cachedP"
     }
    ],
    "name": "FieldLUDecompositionImpl",
    "methods": [
     {
      "type": "FieldMatrix",
      "name": "getL",
      "params": []
     },
     {
      "type": "FieldMatrix",
      "name": "getU",
      "params": []
     },
     {
      "type": "FieldMatrix",
      "name": "getP",
      "params": []
     },
     {
      "type": "int",
      "name": "getPivot",
      "params": []
     },
     {
      "type": "T",
      "name": "getDeterminant",
      "params": []
     },
     {
      "type": "FieldDecompositionSolver",
      "name": "getSolver",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "FieldLUDecompositionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "BLOCK_SIZE"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "blocks"
     },
     {
      "type": "int",
      "name": "rows"
     },
     {
      "type": "int",
      "name": "columns"
     },
     {
      "type": "int",
      "name": "blockRows"
     },
     {
      "type": "int",
      "name": "blockColumns"
     }
    ],
    "name": "BlockRealMatrix",
    "methods": [
     {
      "type": "double",
      "name": "toBlocksLayout",
      "params": [
       {
        "type": "double",
        "name": "rawData"
       }
      ]
     },
     {
      "type": "double",
      "name": "createBlocksLayout",
      "params": [
       {
        "type": "int",
        "name": "rows"
       },
       {
        "type": "int",
        "name": "columns"
       }
      ]
     },
     {
      "type": "BlockRealMatrix",
      "name": "createMatrix",
      "params": [
       {
        "type": "int",
        "name": "rowDimension"
       },
       {
        "type": "int",
        "name": "columnDimension"
       }
      ]
     },
     {
      "type": "BlockRealMatrix",
      "name": "copy",
      "params": []
     },
     {
      "type": "BlockRealMatrix",
      "name": "add",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "BlockRealMatrix",
      "name": "add",
      "params": [
       {
        "type": "BlockRealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "BlockRealMatrix",
      "name": "subtract",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "BlockRealMatrix",
      "name": "subtract",
      "params": [
       {
        "type": "BlockRealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "BlockRealMatrix",
      "name": "scalarAdd",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "scalarMultiply",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "BlockRealMatrix",
      "name": "multiply",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "BlockRealMatrix",
      "name": "multiply",
      "params": [
       {
        "type": "BlockRealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "double",
      "name": "getData",
      "params": []
     },
     {
      "type": "double",
      "name": "getNorm",
      "params": []
     },
     {
      "type": "double",
      "name": "getFrobeniusNorm",
      "params": []
     },
     {
      "type": "BlockRealMatrix",
      "name": "getSubMatrix",
      "params": [
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": null,
      "name": "copyBlockPart",
      "params": [
       {
        "type": "double",
        "name": "srcBlock"
       },
       {
        "type": "int",
        "name": "srcWidth"
       },
       {
        "type": "int",
        "name": "srcStartRow"
       },
       {
        "type": "int",
        "name": "srcEndRow"
       },
       {
        "type": "int",
        "name": "srcStartColumn"
       },
       {
        "type": "int",
        "name": "srcEndColumn"
       },
       {
        "type": "double",
        "name": "dstBlock"
       },
       {
        "type": "int",
        "name": "dstWidth"
       },
       {
        "type": "int",
        "name": "dstStartRow"
       },
       {
        "type": "int",
        "name": "dstStartColumn"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubMatrix",
      "params": [
       {
        "type": "double",
        "name": "subMatrix"
       },
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "BlockRealMatrix",
      "name": "getRowMatrix",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "setRowMatrix",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "RealMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": null,
      "name": "setRowMatrix",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "BlockRealMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": "BlockRealMatrix",
      "name": "getColumnMatrix",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumnMatrix",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "RealMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumnMatrix",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "BlockRealMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "getRowVector",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "setRowVector",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "RealVector",
        "name": "vector"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "getColumnVector",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumnVector",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "RealVector",
        "name": "vector"
       }
      ]
     },
     {
      "type": "double",
      "name": "getRow",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": null,
      "name": "setRow",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "double",
        "name": "array"
       }
      ]
     },
     {
      "type": "double",
      "name": "getColumn",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setColumn",
      "params": [
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "array"
       }
      ]
     },
     {
      "type": "double",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "addToEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "increment"
       }
      ]
     },
     {
      "type": null,
      "name": "multiplyEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "factor"
       }
      ]
     },
     {
      "type": "BlockRealMatrix",
      "name": "transpose",
      "params": []
     },
     {
      "type": "int",
      "name": "getRowDimension",
      "params": []
     },
     {
      "type": "int",
      "name": "getColumnDimension",
      "params": []
     },
     {
      "type": "double",
      "name": "operate",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "preMultiply",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInOptimizedOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "int",
      "name": "blockHeight",
      "params": [
       {
        "type": "int",
        "name": "blockRow"
       }
      ]
     },
     {
      "type": "int",
      "name": "blockWidth",
      "params": [
       {
        "type": "int",
        "name": "blockColumn"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "BlockRealMatrix.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "RealVectorFormat",
      "name": "DEFAULT_FORMAT"
     },
     {
      "type": "double",
      "name": "data"
     }
    ],
    "name": "ArrayRealVector",
    "methods": [
     {
      "type": "ArrayRealVector",
      "name": "copy",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "add",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "add",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "ArrayRealVector",
      "name": "add",
      "params": [
       {
        "type": "ArrayRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "subtract",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "subtract",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "ArrayRealVector",
      "name": "subtract",
      "params": [
       {
        "type": "ArrayRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "ArrayRealVector",
      "name": "map",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "function"
       }
      ]
     },
     {
      "type": "ArrayRealVector",
      "name": "mapToSelf",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "function"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapAddToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapSubtractToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapMultiplyToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapDivideToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "ebeMultiply",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "ebeMultiply",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "ArrayRealVector",
      "name": "ebeMultiply",
      "params": [
       {
        "type": "ArrayRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "ebeDivide",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "ebeDivide",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "ArrayRealVector",
      "name": "ebeDivide",
      "params": [
       {
        "type": "ArrayRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getData",
      "params": []
     },
     {
      "type": "double",
      "name": "getDataRef",
      "params": []
     },
     {
      "type": "double",
      "name": "dotProduct",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "dotProduct",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "dotProduct",
      "params": [
       {
        "type": "ArrayRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getNorm",
      "params": []
     },
     {
      "type": "double",
      "name": "getL1Norm",
      "params": []
     },
     {
      "type": "double",
      "name": "getLInfNorm",
      "params": []
     },
     {
      "type": "double",
      "name": "getDistance",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDistance",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDistance",
      "params": [
       {
        "type": "ArrayRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getL1Distance",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getL1Distance",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getL1Distance",
      "params": [
       {
        "type": "ArrayRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getLInfDistance",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getLInfDistance",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getLInfDistance",
      "params": [
       {
        "type": "ArrayRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "unitVector",
      "params": []
     },
     {
      "type": null,
      "name": "unitize",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "projection",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "projection",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "ArrayRealVector",
      "name": "projection",
      "params": [
       {
        "type": "ArrayRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "outerProduct",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "outerProduct",
      "params": [
       {
        "type": "ArrayRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "outerProduct",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "append",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "ArrayRealVector",
      "name": "append",
      "params": [
       {
        "type": "ArrayRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "append",
      "params": [
       {
        "type": "double",
        "name": "in"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "append",
      "params": [
       {
        "type": "double",
        "name": "in"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "getSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": null,
      "name": "setEntry",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "set",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "ArrayRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "set",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "double",
      "name": "toArray",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": null,
      "name": "checkVectorDimensions",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "checkVectorDimensions",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isNaN",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isInfinite",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "ArrayRealVector.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "data"
     }
    ],
    "name": "Array2DRowRealMatrix",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "createMatrix",
      "params": [
       {
        "type": "int",
        "name": "rowDimension"
       },
       {
        "type": "int",
        "name": "columnDimension"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "copy",
      "params": []
     },
     {
      "type": "Array2DRowRealMatrix",
      "name": "add",
      "params": [
       {
        "type": "Array2DRowRealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "Array2DRowRealMatrix",
      "name": "subtract",
      "params": [
       {
        "type": "Array2DRowRealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "Array2DRowRealMatrix",
      "name": "multiply",
      "params": [
       {
        "type": "Array2DRowRealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "double",
      "name": "getData",
      "params": []
     },
     {
      "type": "double",
      "name": "getDataRef",
      "params": []
     },
     {
      "type": null,
      "name": "setSubMatrix",
      "params": [
       {
        "type": "double",
        "name": "subMatrix"
       },
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "double",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "addToEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "increment"
       }
      ]
     },
     {
      "type": null,
      "name": "multiplyEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "factor"
       }
      ]
     },
     {
      "type": "int",
      "name": "getRowDimension",
      "params": []
     },
     {
      "type": "int",
      "name": "getColumnDimension",
      "params": []
     },
     {
      "type": "double",
      "name": "operate",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "preMultiply",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInRowOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "RealMatrixChangingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "walkInColumnOrder",
      "params": [
       {
        "type": "RealMatrixPreservingVisitor",
        "name": "visitor"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "copyOut",
      "params": []
     },
     {
      "type": null,
      "name": "copyIn",
      "params": [
       {
        "type": "double",
        "name": "in"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "Array2DRowRealMatrix.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_TOO_SMALL"
     },
     {
      "type": "double",
      "name": "lu"
     },
     {
      "type": "int",
      "name": "pivot"
     },
     {
      "type": "boolean",
      "name": "even"
     },
     {
      "type": "boolean",
      "name": "singular"
     },
     {
      "type": "RealMatrix",
      "name": "cachedL"
     },
     {
      "type": "RealMatrix",
      "name": "cachedU"
     },
     {
      "type": "RealMatrix",
      "name": "cachedP"
     }
    ],
    "name": "LUDecompositionImpl",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "getL",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getU",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getP",
      "params": []
     },
     {
      "type": "int",
      "name": "getPivot",
      "params": []
     },
     {
      "type": "double",
      "name": "getDeterminant",
      "params": []
     },
     {
      "type": "DecompositionSolver",
      "name": "getSolver",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "LUDecompositionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FieldLUDecomposition",
    "methods": [
     {
      "type": "FieldMatrix",
      "name": "getL",
      "params": []
     },
     {
      "type": "FieldMatrix",
      "name": "getU",
      "params": []
     },
     {
      "type": "FieldMatrix",
      "name": "getP",
      "params": []
     },
     {
      "type": "int",
      "name": "getPivot",
      "params": []
     },
     {
      "type": "T",
      "name": "getDeterminant",
      "params": []
     },
     {
      "type": "FieldDecompositionSolver",
      "name": "getSolver",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "FieldLUDecomposition.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "Field",
      "name": "field"
     },
     {
      "type": "OpenIntToFieldHashMap",
      "name": "entries"
     },
     {
      "type": "int",
      "name": "virtualSize"
     }
    ],
    "name": "SparseFieldVector",
    "methods": [
     {
      "type": "OpenIntToFieldHashMap",
      "name": "getEntries",
      "params": []
     },
     {
      "type": "FieldVector",
      "name": "add",
      "params": [
       {
        "type": "SparseFieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "add",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "append",
      "params": [
       {
        "type": "SparseFieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "append",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "append",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "append",
      "params": [
       {
        "type": "T",
        "name": "a"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "copy",
      "params": []
     },
     {
      "type": "T",
      "name": "dotProduct",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "dotProduct",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "ebeDivide",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "ebeDivide",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "ebeMultiply",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "ebeMultiply",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "getData",
      "params": []
     },
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": "T",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "Field",
      "name": "getField",
      "params": []
     },
     {
      "type": "FieldVector",
      "name": "getSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapAdd",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapAddToSelf",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapDivide",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapDivideToSelf",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapInv",
      "params": []
     },
     {
      "type": "FieldVector",
      "name": "mapInvToSelf",
      "params": []
     },
     {
      "type": "FieldVector",
      "name": "mapMultiply",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapMultiplyToSelf",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapSubtract",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapSubtractToSelf",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "outerProduct",
      "params": [
       {
        "type": "SparseFieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "outerProduct",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "outerProduct",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "projection",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "projection",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "set",
      "params": [
       {
        "type": "T",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "setEntry",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "T",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "SparseFieldVector",
      "name": "subtract",
      "params": [
       {
        "type": "SparseFieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "subtract",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "subtract",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "toArray",
      "params": []
     },
     {
      "type": null,
      "name": "checkIndex",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": null,
      "name": "checkVectorDimensions",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "add",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "buildArray",
      "params": [
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "obj"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "SparseFieldVector.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "T",
      "name": "zero"
     }
    ],
    "name": "DefaultFieldMatrixPreservingVisitor",
    "methods": [
     {
      "type": null,
      "name": "start",
      "params": [
       {
        "type": "int",
        "name": "rows"
       },
       {
        "type": "int",
        "name": "columns"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": null,
      "name": "visit",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "T",
        "name": "value"
       }
      ]
     },
     {
      "type": "T",
      "name": "end",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "DefaultFieldMatrixPreservingVisitor.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "RealMatrixChangingVisitor",
    "methods": [
     {
      "type": null,
      "name": "start",
      "params": [
       {
        "type": "int",
        "name": "rows"
       },
       {
        "type": "int",
        "name": "columns"
       },
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "double",
      "name": "visit",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "double",
      "name": "end",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "RealMatrixChangingVisitor.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "byte",
      "name": "maxIter"
     },
     {
      "type": "double",
      "name": "main"
     },
     {
      "type": "double",
      "name": "secondary"
     },
     {
      "type": "TriDiagonalTransformer",
      "name": "transformer"
     },
     {
      "type": "double",
      "name": "realEigenvalues"
     },
     {
      "type": "double",
      "name": "imagEigenvalues"
     },
     {
      "type": "ArrayRealVector",
      "name": "eigenvectors"
     },
     {
      "type": "RealMatrix",
      "name": "cachedV"
     },
     {
      "type": "RealMatrix",
      "name": "cachedD"
     },
     {
      "type": "RealMatrix",
      "name": "cachedVt"
     }
    ],
    "name": "EigenDecompositionImpl",
    "methods": [
     {
      "type": "boolean",
      "name": "isSymmetric",
      "params": [
       {
        "type": "RealMatrix",
        "name": "matrix"
       },
       {
        "type": "boolean",
        "name": "raiseException"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "getV",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getD",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getVT",
      "params": []
     },
     {
      "type": "double",
      "name": "getRealEigenvalues",
      "params": []
     },
     {
      "type": "double",
      "name": "getRealEigenvalue",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "double",
      "name": "getImagEigenvalues",
      "params": []
     },
     {
      "type": "double",
      "name": "getImagEigenvalue",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "getEigenvector",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDeterminant",
      "params": []
     },
     {
      "type": "DecompositionSolver",
      "name": "getSolver",
      "params": []
     },
     {
      "type": null,
      "name": "transformToTridiagonal",
      "params": [
       {
        "type": "RealMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": null,
      "name": "findEigenVectors",
      "params": [
       {
        "type": "double",
        "name": "householderMatrix"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "EigenDecompositionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "T",
      "name": "data"
     },
     {
      "type": "Field",
      "name": "field"
     }
    ],
    "name": "ArrayFieldVector",
    "methods": [
     {
      "type": "T",
      "name": "buildArray",
      "params": [
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "Field",
      "name": "getField",
      "params": []
     },
     {
      "type": "FieldVector",
      "name": "copy",
      "params": []
     },
     {
      "type": "FieldVector",
      "name": "add",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "add",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "ArrayFieldVector",
      "name": "add",
      "params": [
       {
        "type": "ArrayFieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "subtract",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "subtract",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "ArrayFieldVector",
      "name": "subtract",
      "params": [
       {
        "type": "ArrayFieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapAdd",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapAddToSelf",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapSubtract",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapSubtractToSelf",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapMultiply",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapMultiplyToSelf",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapDivide",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapDivideToSelf",
      "params": [
       {
        "type": "T",
        "name": "d"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "mapInv",
      "params": []
     },
     {
      "type": "FieldVector",
      "name": "mapInvToSelf",
      "params": []
     },
     {
      "type": "FieldVector",
      "name": "ebeMultiply",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "ebeMultiply",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "ArrayFieldVector",
      "name": "ebeMultiply",
      "params": [
       {
        "type": "ArrayFieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "ebeDivide",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "ebeDivide",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "ArrayFieldVector",
      "name": "ebeDivide",
      "params": [
       {
        "type": "ArrayFieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "getData",
      "params": []
     },
     {
      "type": "T",
      "name": "getDataRef",
      "params": []
     },
     {
      "type": "T",
      "name": "dotProduct",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "dotProduct",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "dotProduct",
      "params": [
       {
        "type": "ArrayFieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "projection",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "projection",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "ArrayFieldVector",
      "name": "projection",
      "params": [
       {
        "type": "ArrayFieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "outerProduct",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "outerProduct",
      "params": [
       {
        "type": "ArrayFieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldMatrix",
      "name": "outerProduct",
      "params": [
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": "T",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": "FieldVector",
      "name": "append",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "ArrayFieldVector",
      "name": "append",
      "params": [
       {
        "type": "ArrayFieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "append",
      "params": [
       {
        "type": "T",
        "name": "in"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "append",
      "params": [
       {
        "type": "T",
        "name": "in"
       }
      ]
     },
     {
      "type": "FieldVector",
      "name": "getSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": null,
      "name": "setEntry",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "T",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "T",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "set",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "ArrayFieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "set",
      "params": [
       {
        "type": "T",
        "name": "value"
       }
      ]
     },
     {
      "type": "T",
      "name": "toArray",
      "params": []
     },
     {
      "type": null,
      "name": "checkVectorDimensions",
      "params": [
       {
        "type": "FieldVector",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "checkVectorDimensions",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": null,
      "name": "checkIndex",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "ArrayFieldVector.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "row"
     },
     {
      "type": "int",
      "name": "column"
     },
     {
      "type": "double",
      "name": "threshold"
     }
    ],
    "name": "NonSymmetricMatrixException",
    "methods": [
     {
      "type": "int",
      "name": "getRow",
      "params": []
     },
     {
      "type": "int",
      "name": "getColumn",
      "params": []
     },
     {
      "type": "double",
      "name": "getThreshold",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "NonSymmetricMatrixException.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "EigenDecomposition",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "getV",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getD",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getVT",
      "params": []
     },
     {
      "type": "double",
      "name": "getRealEigenvalues",
      "params": []
     },
     {
      "type": "double",
      "name": "getRealEigenvalue",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "double",
      "name": "getImagEigenvalues",
      "params": []
     },
     {
      "type": "double",
      "name": "getImagEigenvalue",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "getEigenvector",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDeterminant",
      "params": []
     },
     {
      "type": "DecompositionSolver",
      "name": "getSolver",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "EigenDecomposition.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "AbstractRealVector",
    "methods": [
     {
      "type": null,
      "name": "checkVectorDimensions",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "checkVectorDimensions",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": null,
      "name": "checkIndex",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "add",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "add",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "subtract",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "subtract",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapAdd",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapAddToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "AbstractRealVector",
      "name": "copy",
      "params": []
     },
     {
      "type": "double",
      "name": "dotProduct",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "dotProduct",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "cosine",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "cosine",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "ebeDivide",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "ebeMultiply",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDistance",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getNorm",
      "params": []
     },
     {
      "type": "double",
      "name": "getL1Norm",
      "params": []
     },
     {
      "type": "double",
      "name": "getLInfNorm",
      "params": []
     },
     {
      "type": "double",
      "name": "getDistance",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getL1Distance",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getL1Distance",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getLInfDistance",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getLInfDistance",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMinIndex",
      "params": []
     },
     {
      "type": "double",
      "name": "getMinValue",
      "params": []
     },
     {
      "type": "int",
      "name": "getMaxIndex",
      "params": []
     },
     {
      "type": "double",
      "name": "getMaxValue",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapMultiply",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapMultiplyToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapSubtract",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapSubtractToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapDivide",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapDivideToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "outerProduct",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "outerProduct",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "projection",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "set",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "double",
      "name": "toArray",
      "params": []
     },
     {
      "type": "double",
      "name": "getData",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "unitVector",
      "params": []
     },
     {
      "type": null,
      "name": "unitize",
      "params": []
     },
     {
      "type": "Iterator",
      "name": "sparseIterator",
      "params": []
     },
     {
      "type": "Iterator",
      "name": "iterator",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "map",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "function"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapToSelf",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "function"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "AbstractRealVector.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "SparseRealVector",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "SparseRealVector.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "QRDecomposition",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "getR",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getQ",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getQT",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getH",
      "params": []
     },
     {
      "type": "DecompositionSolver",
      "name": "getSolver",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "QRDecomposition.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_ZERO_TOLERANCE"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "OpenIntToDoubleHashMap",
      "name": "entries"
     },
     {
      "type": "int",
      "name": "virtualSize"
     },
     {
      "type": "double",
      "name": "epsilon"
     }
    ],
    "name": "OpenMapRealVector",
    "methods": [
     {
      "type": "OpenIntToDoubleHashMap",
      "name": "getEntries",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isDefaultValue",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "add",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "OpenMapRealVector",
      "name": "add",
      "params": [
       {
        "type": "OpenMapRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "OpenMapRealVector",
      "name": "append",
      "params": [
       {
        "type": "OpenMapRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "OpenMapRealVector",
      "name": "append",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "OpenMapRealVector",
      "name": "append",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "OpenMapRealVector",
      "name": "append",
      "params": [
       {
        "type": "double",
        "name": "a"
       }
      ]
     },
     {
      "type": "OpenMapRealVector",
      "name": "copy",
      "params": []
     },
     {
      "type": "double",
      "name": "dotProduct",
      "params": [
       {
        "type": "OpenMapRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "dotProduct",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "OpenMapRealVector",
      "name": "ebeDivide",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "OpenMapRealVector",
      "name": "ebeDivide",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "OpenMapRealVector",
      "name": "ebeMultiply",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "OpenMapRealVector",
      "name": "ebeMultiply",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "OpenMapRealVector",
      "name": "getSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "getData",
      "params": []
     },
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": "double",
      "name": "getDistance",
      "params": [
       {
        "type": "OpenMapRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDistance",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDistance",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "double",
      "name": "getL1Distance",
      "params": [
       {
        "type": "OpenMapRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getL1Distance",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getL1Distance",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getLInfDistance",
      "params": [
       {
        "type": "OpenMapRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getLInfDistance",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getLInfDistance",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isInfinite",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isNaN",
      "params": []
     },
     {
      "type": "OpenMapRealVector",
      "name": "mapAdd",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "OpenMapRealVector",
      "name": "mapAddToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "outerProduct",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "projection",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "OpenMapRealVector",
      "name": "projection",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "setEntry",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubVector",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "set",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "OpenMapRealVector",
      "name": "subtract",
      "params": [
       {
        "type": "OpenMapRealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "OpenMapRealVector",
      "name": "subtract",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "OpenMapRealVector",
      "name": "subtract",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "OpenMapRealVector",
      "name": "unitVector",
      "params": []
     },
     {
      "type": null,
      "name": "unitize",
      "params": []
     },
     {
      "type": "double",
      "name": "toArray",
      "params": []
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "obj"
       }
      ]
     },
     {
      "type": "double",
      "name": "getSparsity",
      "params": []
     },
     {
      "type": "java",
      "name": "sparseIterator",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "OpenMapRealVector.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD"
     },
     {
      "type": "double",
      "name": "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD"
     },
     {
      "type": "double",
      "name": "lTData"
     },
     {
      "type": "RealMatrix",
      "name": "cachedL"
     },
     {
      "type": "RealMatrix",
      "name": "cachedLT"
     }
    ],
    "name": "CholeskyDecompositionImpl",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "getL",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getLT",
      "params": []
     },
     {
      "type": "double",
      "name": "getDeterminant",
      "params": []
     },
     {
      "type": "DecompositionSolver",
      "name": "getSolver",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "CholeskyDecompositionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "byte",
      "name": "FREE"
     },
     {
      "type": "byte",
      "name": "FULL"
     },
     {
      "type": "byte",
      "name": "REMOVED"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "float",
      "name": "LOAD_FACTOR"
     },
     {
      "type": "int",
      "name": "DEFAULT_EXPECTED_SIZE"
     },
     {
      "type": "int",
      "name": "RESIZE_MULTIPLIER"
     },
     {
      "type": "int",
      "name": "PERTURB_SHIFT"
     },
     {
      "type": "int",
      "name": "keys"
     },
     {
      "type": "double",
      "name": "values"
     },
     {
      "type": "byte",
      "name": "states"
     },
     {
      "type": "double",
      "name": "missingEntries"
     },
     {
      "type": "int",
      "name": "size"
     },
     {
      "type": "int",
      "name": "mask"
     },
     {
      "type": "int",
      "name": "count"
     }
    ],
    "name": "OpenIntToDoubleHashMap",
    "methods": [
     {
      "type": "int",
      "name": "computeCapacity",
      "params": [
       {
        "type": "int",
        "name": "expectedSize"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextPowerOfTwo",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "double",
      "name": "get",
      "params": [
       {
        "type": "int",
        "name": "key"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "containsKey",
      "params": [
       {
        "type": "int",
        "name": "key"
       }
      ]
     },
     {
      "type": "Iterator",
      "name": "iterator",
      "params": []
     },
     {
      "type": "int",
      "name": "perturb",
      "params": [
       {
        "type": "int",
        "name": "hash"
       }
      ]
     },
     {
      "type": "int",
      "name": "findInsertionIndex",
      "params": [
       {
        "type": "int",
        "name": "key"
       }
      ]
     },
     {
      "type": "int",
      "name": "findInsertionIndex",
      "params": [
       {
        "type": "int",
        "name": "keys"
       },
       {
        "type": "byte",
        "name": "states"
       },
       {
        "type": "int",
        "name": "key"
       },
       {
        "type": "int",
        "name": "mask"
       }
      ]
     },
     {
      "type": "int",
      "name": "probe",
      "params": [
       {
        "type": "int",
        "name": "perturb"
       },
       {
        "type": "int",
        "name": "j"
       }
      ]
     },
     {
      "type": "int",
      "name": "changeIndexSign",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "int",
      "name": "size",
      "params": []
     },
     {
      "type": "double",
      "name": "remove",
      "params": [
       {
        "type": "int",
        "name": "key"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "containsKey",
      "params": [
       {
        "type": "int",
        "name": "key"
       },
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "double",
      "name": "doRemove",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "double",
      "name": "put",
      "params": [
       {
        "type": "int",
        "name": "key"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "growTable",
      "params": []
     },
     {
      "type": "boolean",
      "name": "shouldGrowTable",
      "params": []
     },
     {
      "type": "int",
      "name": "hashOf",
      "params": [
       {
        "type": "int",
        "name": "key"
       }
      ]
     },
     {
      "type": null,
      "name": "readObject",
      "params": [
       {
        "type": "ObjectInputStream",
        "name": "stream"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "OpenIntToDoubleHashMap.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "PI"
     },
     {
      "type": "double",
      "name": "E"
     },
     {
      "type": "double",
      "name": "EXP_INT_TABLE_A"
     },
     {
      "type": "double",
      "name": "EXP_INT_TABLE_B"
     },
     {
      "type": "double",
      "name": "EXP_FRAC_TABLE_A"
     },
     {
      "type": "double",
      "name": "EXP_FRAC_TABLE_B"
     },
     {
      "type": "double",
      "name": "FACT"
     },
     {
      "type": "double",
      "name": "LN_MANT"
     },
     {
      "type": "double",
      "name": "LN_2_A"
     },
     {
      "type": "double",
      "name": "LN_2_B"
     },
     {
      "type": "double",
      "name": "LN_SPLIT_COEF"
     },
     {
      "type": "double",
      "name": "LN_QUICK_COEF"
     },
     {
      "type": "double",
      "name": "LN_HI_PREC_COEF"
     },
     {
      "type": "double",
      "name": "SINE_TABLE_A"
     },
     {
      "type": "double",
      "name": "SINE_TABLE_B"
     },
     {
      "type": "double",
      "name": "COSINE_TABLE_A"
     },
     {
      "type": "double",
      "name": "COSINE_TABLE_B"
     },
     {
      "type": "double",
      "name": "TANGENT_TABLE_A"
     },
     {
      "type": "double",
      "name": "TANGENT_TABLE_B"
     },
     {
      "type": "long",
      "name": "RECIP_2PI"
     },
     {
      "type": "long",
      "name": "PI_O_4_BITS"
     },
     {
      "type": "double",
      "name": "EIGHTHS"
     },
     {
      "type": "double",
      "name": "CBRTTWO"
     },
     {
      "type": "long",
      "name": "HEX_40000000"
     },
     {
      "type": "long",
      "name": "MASK_30BITS"
     },
     {
      "type": "double",
      "name": "TWO_POWER_52"
     }
    ],
    "name": "FastMath",
    "methods": [
     {
      "type": "double",
      "name": "doubleHighPart",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "sqrt",
      "params": [
       {
        "type": "double",
        "name": "a"
       }
      ]
     },
     {
      "type": "double",
      "name": "cosh",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "sinh",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "tanh",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "acosh",
      "params": [
       {
        "type": "double",
        "name": "a"
       }
      ]
     },
     {
      "type": "double",
      "name": "asinh",
      "params": [
       {
        "type": "double",
        "name": "a"
       }
      ]
     },
     {
      "type": "double",
      "name": "atanh",
      "params": [
       {
        "type": "double",
        "name": "a"
       }
      ]
     },
     {
      "type": "double",
      "name": "signum",
      "params": [
       {
        "type": "double",
        "name": "a"
       }
      ]
     },
     {
      "type": "float",
      "name": "signum",
      "params": [
       {
        "type": "float",
        "name": "a"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextUp",
      "params": [
       {
        "type": "double",
        "name": "a"
       }
      ]
     },
     {
      "type": "float",
      "name": "nextUp",
      "params": [
       {
        "type": "float",
        "name": "a"
       }
      ]
     },
     {
      "type": "double",
      "name": "random",
      "params": []
     },
     {
      "type": "double",
      "name": "exp",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "exp",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "extra"
       },
       {
        "type": "double",
        "name": "hiPrec"
       }
      ]
     },
     {
      "type": "double",
      "name": "expm1",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "expm1",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "hiPrecOut"
       }
      ]
     },
     {
      "type": "double",
      "name": "slowexp",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "result"
       }
      ]
     },
     {
      "type": null,
      "name": "split",
      "params": [
       {
        "type": "double",
        "name": "d"
       },
       {
        "type": "double",
        "name": "split"
       }
      ]
     },
     {
      "type": null,
      "name": "resplit",
      "params": [
       {
        "type": "double",
        "name": "a"
       }
      ]
     },
     {
      "type": null,
      "name": "splitMult",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       },
       {
        "type": "double",
        "name": "ans"
       }
      ]
     },
     {
      "type": null,
      "name": "splitAdd",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       },
       {
        "type": "double",
        "name": "ans"
       }
      ]
     },
     {
      "type": null,
      "name": "splitReciprocal",
      "params": [
       {
        "type": "double",
        "name": "in"
       },
       {
        "type": "double",
        "name": "result"
       }
      ]
     },
     {
      "type": null,
      "name": "quadMult",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       },
       {
        "type": "double",
        "name": "result"
       }
      ]
     },
     {
      "type": "double",
      "name": "expint",
      "params": [
       {
        "type": "int",
        "name": "p"
       },
       {
        "type": "double",
        "name": "result"
       }
      ]
     },
     {
      "type": "double",
      "name": "log",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "log",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "hiPrec"
       }
      ]
     },
     {
      "type": "double",
      "name": "log1p",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "log10",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "pow",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "slowLog",
      "params": [
       {
        "type": "double",
        "name": "xi"
       }
      ]
     },
     {
      "type": "double",
      "name": "slowSin",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "result"
       }
      ]
     },
     {
      "type": "double",
      "name": "slowCos",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "result"
       }
      ]
     },
     {
      "type": null,
      "name": "buildSinCosTables",
      "params": []
     },
     {
      "type": "double",
      "name": "polySine",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "polyCosine",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "sinQ",
      "params": [
       {
        "type": "double",
        "name": "xa"
       },
       {
        "type": "double",
        "name": "xb"
       }
      ]
     },
     {
      "type": "double",
      "name": "cosQ",
      "params": [
       {
        "type": "double",
        "name": "xa"
       },
       {
        "type": "double",
        "name": "xb"
       }
      ]
     },
     {
      "type": "double",
      "name": "tanQ",
      "params": [
       {
        "type": "double",
        "name": "xa"
       },
       {
        "type": "double",
        "name": "xb"
       },
       {
        "type": "boolean",
        "name": "cotanFlag"
       }
      ]
     },
     {
      "type": null,
      "name": "reducePayneHanek",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "result"
       }
      ]
     },
     {
      "type": "double",
      "name": "sin",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cos",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "tan",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "atan",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "atan",
      "params": [
       {
        "type": "double",
        "name": "xa"
       },
       {
        "type": "double",
        "name": "xb"
       },
       {
        "type": "boolean",
        "name": "leftPlane"
       }
      ]
     },
     {
      "type": "double",
      "name": "atan2",
      "params": [
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "asin",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "acos",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cbrt",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "toRadians",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "toDegrees",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "abs",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "long",
      "name": "abs",
      "params": [
       {
        "type": "long",
        "name": "x"
       }
      ]
     },
     {
      "type": "float",
      "name": "abs",
      "params": [
       {
        "type": "float",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "abs",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "ulp",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "float",
      "name": "ulp",
      "params": [
       {
        "type": "float",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "scalb",
      "params": [
       {
        "type": "double",
        "name": "d"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "float",
      "name": "scalb",
      "params": [
       {
        "type": "float",
        "name": "f"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextAfter",
      "params": [
       {
        "type": "double",
        "name": "d"
       },
       {
        "type": "double",
        "name": "direction"
       }
      ]
     },
     {
      "type": "float",
      "name": "nextAfter",
      "params": [
       {
        "type": "float",
        "name": "f"
       },
       {
        "type": "double",
        "name": "direction"
       }
      ]
     },
     {
      "type": "double",
      "name": "floor",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "ceil",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "rint",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "long",
      "name": "round",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "round",
      "params": [
       {
        "type": "float",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "min",
      "params": [
       {
        "type": "int",
        "name": "a"
       },
       {
        "type": "int",
        "name": "b"
       }
      ]
     },
     {
      "type": "long",
      "name": "min",
      "params": [
       {
        "type": "long",
        "name": "a"
       },
       {
        "type": "long",
        "name": "b"
       }
      ]
     },
     {
      "type": "float",
      "name": "min",
      "params": [
       {
        "type": "float",
        "name": "a"
       },
       {
        "type": "float",
        "name": "b"
       }
      ]
     },
     {
      "type": "double",
      "name": "min",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       }
      ]
     },
     {
      "type": "int",
      "name": "max",
      "params": [
       {
        "type": "int",
        "name": "a"
       },
       {
        "type": "int",
        "name": "b"
       }
      ]
     },
     {
      "type": "long",
      "name": "max",
      "params": [
       {
        "type": "long",
        "name": "a"
       },
       {
        "type": "long",
        "name": "b"
       }
      ]
     },
     {
      "type": "float",
      "name": "max",
      "params": [
       {
        "type": "float",
        "name": "a"
       },
       {
        "type": "float",
        "name": "b"
       }
      ]
     },
     {
      "type": "double",
      "name": "max",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       }
      ]
     },
     {
      "type": "double",
      "name": "hypot",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "IEEEremainder",
      "params": [
       {
        "type": "double",
        "name": "dividend"
       },
       {
        "type": "double",
        "name": "divisor"
       }
      ]
     },
     {
      "type": "double",
      "name": "copySign",
      "params": [
       {
        "type": "double",
        "name": "magnitude"
       },
       {
        "type": "double",
        "name": "sign"
       }
      ]
     },
     {
      "type": "float",
      "name": "copySign",
      "params": [
       {
        "type": "float",
        "name": "magnitude"
       },
       {
        "type": "float",
        "name": "sign"
       }
      ]
     },
     {
      "type": "int",
      "name": "getExponent",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "int",
      "name": "getExponent",
      "params": [
       {
        "type": "float",
        "name": "f"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "FastMath.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "dimension"
     },
     {
      "type": "int",
      "name": "uniCounterOffset"
     },
     {
      "type": "int",
      "name": "size"
     },
     {
      "type": "int",
      "name": "totalSize"
     },
     {
      "type": "int",
      "name": "last"
     }
    ],
    "name": "MultidimensionalCounter",
    "methods": [
     {
      "type": "Iterator",
      "name": "iterator",
      "params": []
     },
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": "int",
      "name": "getCounts",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "int",
      "name": "getCount",
      "params": [
       {
        "type": "int",
        "name": "c"
       }
      ]
     },
     {
      "type": "int",
      "name": "getSize",
      "params": []
     },
     {
      "type": "int",
      "name": "getSizes",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "MultidimensionalCounter.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "CompositeFormat",
    "methods": [
     {
      "type": "NumberFormat",
      "name": "getDefaultNumberFormat",
      "params": []
     },
     {
      "type": "NumberFormat",
      "name": "getDefaultNumberFormat",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": null,
      "name": "parseAndIgnoreWhitespace",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "char",
      "name": "parseNextCharacter",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "Number",
      "name": "parseNumber",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "double",
        "name": "value"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "Number",
      "name": "parseNumber",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "NumberFormat",
        "name": "format"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "parseFixedstring",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "String",
        "name": "expected"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "formatDouble",
      "params": [
       {
        "type": "double",
        "name": "value"
       },
       {
        "type": "NumberFormat",
        "name": "format"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "CompositeFormat.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "BigRealField",
    "methods": [
     {
      "type": "BigRealField",
      "name": "getInstance",
      "params": []
     },
     {
      "type": "BigReal",
      "name": "getOne",
      "params": []
     },
     {
      "type": "BigReal",
      "name": "getZero",
      "params": []
     },
     {
      "type": "Object",
      "name": "readResolve",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "BigRealField.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "NumberTransformer",
      "name": "defaultTransformer"
     },
     {
      "type": "Map",
      "name": "map"
     }
    ],
    "name": "TransformerMap",
    "methods": [
     {
      "type": "boolean",
      "name": "containsClass",
      "params": [
       {
        "type": "Class",
        "name": "key"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "containsTransformer",
      "params": [
       {
        "type": "NumberTransformer",
        "name": "value"
       }
      ]
     },
     {
      "type": "NumberTransformer",
      "name": "getTransformer",
      "params": [
       {
        "type": "Class",
        "name": "key"
       }
      ]
     },
     {
      "type": "NumberTransformer",
      "name": "putTransformer",
      "params": [
       {
        "type": "Class",
        "name": "key"
       },
       {
        "type": "NumberTransformer",
        "name": "transformer"
       }
      ]
     },
     {
      "type": "NumberTransformer",
      "name": "removeTransformer",
      "params": [
       {
        "type": "Class",
        "name": "key"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "Set",
      "name": "classes",
      "params": []
     },
     {
      "type": "Collection",
      "name": "transformers",
      "params": []
     },
     {
      "type": "double",
      "name": "transform",
      "params": [
       {
        "type": "Object",
        "name": "o"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "TransformerMap.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_EPSILON"
     }
    ],
    "name": "ContinuedFraction",
    "methods": [
     {
      "type": "double",
      "name": "getA",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "getB",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "epsilon"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "int",
        "name": "maxIterations"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "epsilon"
       },
       {
        "type": "int",
        "name": "maxIterations"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "ContinuedFraction.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "maximalCount"
     },
     {
      "type": "int",
      "name": "count"
     }
    ],
    "name": "Incrementor",
    "methods": [
     {
      "type": null,
      "name": "setMaximalCount",
      "params": [
       {
        "type": "int",
        "name": "max"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMaximalCount",
      "params": []
     },
     {
      "type": "int",
      "name": "getCount",
      "params": []
     },
     {
      "type": null,
      "name": "incrementCount",
      "params": [
       {
        "type": "int",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "incrementCount",
      "params": []
     },
     {
      "type": null,
      "name": "resetCount",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "Incrementor.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DoubleArray",
    "methods": [
     {
      "type": "int",
      "name": "getNumElements",
      "params": []
     },
     {
      "type": "double",
      "name": "getElement",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": null,
      "name": "setElement",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "addElement",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "addElements",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "addElementRolling",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "double",
      "name": "getElements",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "DoubleArray.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "EPSILON"
     },
     {
      "type": "double",
      "name": "SAFE_MIN"
     },
     {
      "type": "double",
      "name": "TWO_PI"
     },
     {
      "type": "byte",
      "name": "NB"
     },
     {
      "type": "short",
      "name": "NS"
     },
     {
      "type": "byte",
      "name": "PB"
     },
     {
      "type": "short",
      "name": "PS"
     },
     {
      "type": "byte",
      "name": "ZB"
     },
     {
      "type": "short",
      "name": "ZS"
     },
     {
      "type": "int",
      "name": "NAN_GAP"
     },
     {
      "type": "long",
      "name": "SGN_MASK"
     },
     {
      "type": "int",
      "name": "SGN_MASK_FLOAT"
     },
     {
      "type": "long",
      "name": "FACTORIALS"
     }
    ],
    "name": "MathUtils",
    "methods": [
     {
      "type": "int",
      "name": "addAndCheck",
      "params": [
       {
        "type": "int",
        "name": "x"
       },
       {
        "type": "int",
        "name": "y"
       }
      ]
     },
     {
      "type": "long",
      "name": "addAndCheck",
      "params": [
       {
        "type": "long",
        "name": "a"
       },
       {
        "type": "long",
        "name": "b"
       }
      ]
     },
     {
      "type": "long",
      "name": "addAndCheck",
      "params": [
       {
        "type": "long",
        "name": "a"
       },
       {
        "type": "long",
        "name": "b"
       },
       {
        "type": "Localizable",
        "name": "pattern"
       }
      ]
     },
     {
      "type": "long",
      "name": "binomialCoefficient",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "double",
      "name": "binomialCoefficientDouble",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "double",
      "name": "binomialCoefficientLog",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": null,
      "name": "checkBinomial",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "int",
      "name": "compareTo",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "eps"
       }
      ]
     },
     {
      "type": "double",
      "name": "cosh",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "float",
        "name": "x"
       },
       {
        "type": "float",
        "name": "y"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equalsIncludingNaN",
      "params": [
       {
        "type": "float",
        "name": "x"
       },
       {
        "type": "float",
        "name": "y"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "float",
        "name": "x"
       },
       {
        "type": "float",
        "name": "y"
       },
       {
        "type": "float",
        "name": "eps"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equalsIncludingNaN",
      "params": [
       {
        "type": "float",
        "name": "x"
       },
       {
        "type": "float",
        "name": "y"
       },
       {
        "type": "float",
        "name": "eps"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "float",
        "name": "x"
       },
       {
        "type": "float",
        "name": "y"
       },
       {
        "type": "int",
        "name": "maxUlps"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equalsIncludingNaN",
      "params": [
       {
        "type": "float",
        "name": "x"
       },
       {
        "type": "float",
        "name": "y"
       },
       {
        "type": "int",
        "name": "maxUlps"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "float",
        "name": "x"
       },
       {
        "type": "float",
        "name": "y"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equalsIncludingNaN",
      "params": [
       {
        "type": "float",
        "name": "x"
       },
       {
        "type": "float",
        "name": "y"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equalsIncludingNaN",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "eps"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equalsIncludingNaN",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "eps"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "int",
        "name": "maxUlps"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equalsIncludingNaN",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "int",
        "name": "maxUlps"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equalsIncludingNaN",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "long",
      "name": "factorial",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "factorialDouble",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "factorialLog",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "int",
      "name": "gcd",
      "params": [
       {
        "type": "int",
        "name": "p"
       },
       {
        "type": "int",
        "name": "q"
       }
      ]
     },
     {
      "type": "long",
      "name": "gcd",
      "params": [
       {
        "type": "long",
        "name": "p"
       },
       {
        "type": "long",
        "name": "q"
       }
      ]
     },
     {
      "type": "int",
      "name": "hash",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "int",
      "name": "hash",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "byte",
      "name": "indicator",
      "params": [
       {
        "type": "byte",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "indicator",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "float",
      "name": "indicator",
      "params": [
       {
        "type": "float",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "indicator",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "long",
      "name": "indicator",
      "params": [
       {
        "type": "long",
        "name": "x"
       }
      ]
     },
     {
      "type": "short",
      "name": "indicator",
      "params": [
       {
        "type": "short",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "lcm",
      "params": [
       {
        "type": "int",
        "name": "a"
       },
       {
        "type": "int",
        "name": "b"
       }
      ]
     },
     {
      "type": "long",
      "name": "lcm",
      "params": [
       {
        "type": "long",
        "name": "a"
       },
       {
        "type": "long",
        "name": "b"
       }
      ]
     },
     {
      "type": "double",
      "name": "log",
      "params": [
       {
        "type": "double",
        "name": "base"
       },
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "mulAndCheck",
      "params": [
       {
        "type": "int",
        "name": "x"
       },
       {
        "type": "int",
        "name": "y"
       }
      ]
     },
     {
      "type": "long",
      "name": "mulAndCheck",
      "params": [
       {
        "type": "long",
        "name": "a"
       },
       {
        "type": "long",
        "name": "b"
       }
      ]
     },
     {
      "type": "double",
      "name": "normalizeAngle",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "center"
       }
      ]
     },
     {
      "type": "double",
      "name": "normalizeArray",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "normalizedSum"
       }
      ]
     },
     {
      "type": "double",
      "name": "round",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "int",
        "name": "scale"
       }
      ]
     },
     {
      "type": "double",
      "name": "round",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "int",
        "name": "scale"
       },
       {
        "type": "int",
        "name": "roundingMethod"
       }
      ]
     },
     {
      "type": "float",
      "name": "round",
      "params": [
       {
        "type": "float",
        "name": "x"
       },
       {
        "type": "int",
        "name": "scale"
       }
      ]
     },
     {
      "type": "float",
      "name": "round",
      "params": [
       {
        "type": "float",
        "name": "x"
       },
       {
        "type": "int",
        "name": "scale"
       },
       {
        "type": "int",
        "name": "roundingMethod"
       }
      ]
     },
     {
      "type": "double",
      "name": "roundUnscaled",
      "params": [
       {
        "type": "double",
        "name": "unscaled"
       },
       {
        "type": "double",
        "name": "sign"
       },
       {
        "type": "int",
        "name": "roundingMethod"
       }
      ]
     },
     {
      "type": "byte",
      "name": "sign",
      "params": [
       {
        "type": "byte",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "sign",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "float",
      "name": "sign",
      "params": [
       {
        "type": "float",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "sign",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "long",
      "name": "sign",
      "params": [
       {
        "type": "long",
        "name": "x"
       }
      ]
     },
     {
      "type": "short",
      "name": "sign",
      "params": [
       {
        "type": "short",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "sinh",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "subAndCheck",
      "params": [
       {
        "type": "int",
        "name": "x"
       },
       {
        "type": "int",
        "name": "y"
       }
      ]
     },
     {
      "type": "long",
      "name": "subAndCheck",
      "params": [
       {
        "type": "long",
        "name": "a"
       },
       {
        "type": "long",
        "name": "b"
       }
      ]
     },
     {
      "type": "int",
      "name": "pow",
      "params": [
       {
        "type": "int",
        "name": "k"
       },
       {
        "type": "int",
        "name": "e"
       }
      ]
     },
     {
      "type": "int",
      "name": "pow",
      "params": [
       {
        "type": "int",
        "name": "k"
       },
       {
        "type": "long",
        "name": "e"
       }
      ]
     },
     {
      "type": "long",
      "name": "pow",
      "params": [
       {
        "type": "long",
        "name": "k"
       },
       {
        "type": "int",
        "name": "e"
       }
      ]
     },
     {
      "type": "long",
      "name": "pow",
      "params": [
       {
        "type": "long",
        "name": "k"
       },
       {
        "type": "long",
        "name": "e"
       }
      ]
     },
     {
      "type": "BigInteger",
      "name": "pow",
      "params": [
       {
        "type": "BigInteger",
        "name": "k"
       },
       {
        "type": "int",
        "name": "e"
       }
      ]
     },
     {
      "type": "BigInteger",
      "name": "pow",
      "params": [
       {
        "type": "BigInteger",
        "name": "k"
       },
       {
        "type": "long",
        "name": "e"
       }
      ]
     },
     {
      "type": "BigInteger",
      "name": "pow",
      "params": [
       {
        "type": "BigInteger",
        "name": "k"
       },
       {
        "type": "BigInteger",
        "name": "e"
       }
      ]
     },
     {
      "type": "double",
      "name": "distance1",
      "params": [
       {
        "type": "double",
        "name": "p1"
       },
       {
        "type": "double",
        "name": "p2"
       }
      ]
     },
     {
      "type": "int",
      "name": "distance1",
      "params": [
       {
        "type": "int",
        "name": "p1"
       },
       {
        "type": "int",
        "name": "p2"
       }
      ]
     },
     {
      "type": "double",
      "name": "distance",
      "params": [
       {
        "type": "double",
        "name": "p1"
       },
       {
        "type": "double",
        "name": "p2"
       }
      ]
     },
     {
      "type": "double",
      "name": "distance",
      "params": [
       {
        "type": "int",
        "name": "p1"
       },
       {
        "type": "int",
        "name": "p2"
       }
      ]
     },
     {
      "type": "double",
      "name": "distanceInf",
      "params": [
       {
        "type": "double",
        "name": "p1"
       },
       {
        "type": "double",
        "name": "p2"
       }
      ]
     },
     {
      "type": "int",
      "name": "distanceInf",
      "params": [
       {
        "type": "int",
        "name": "p1"
       },
       {
        "type": "int",
        "name": "p2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "checkOrder",
      "params": [
       {
        "type": "double",
        "name": "val"
       },
       {
        "type": "OrderDirection",
        "name": "dir"
       },
       {
        "type": "boolean",
        "name": "strict"
       },
       {
        "type": "boolean",
        "name": "abort"
       }
      ]
     },
     {
      "type": null,
      "name": "checkOrder",
      "params": [
       {
        "type": "double",
        "name": "val"
       },
       {
        "type": "OrderDirection",
        "name": "dir"
       },
       {
        "type": "boolean",
        "name": "strict"
       }
      ]
     },
     {
      "type": null,
      "name": "checkOrder",
      "params": [
       {
        "type": "double",
        "name": "val"
       }
      ]
     },
     {
      "type": null,
      "name": "checkFinite",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": null,
      "name": "checkFinite",
      "params": [
       {
        "type": "double",
        "name": "val"
       }
      ]
     },
     {
      "type": "double",
      "name": "safeNorm",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "sortInPlace",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "yList"
       }
      ]
     },
     {
      "type": null,
      "name": "sortInPlace",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "OrderDirection",
        "name": "dir"
       },
       {
        "type": "double",
        "name": "yList"
       }
      ]
     },
     {
      "type": "int",
      "name": "copyOf",
      "params": [
       {
        "type": "int",
        "name": "source"
       }
      ]
     },
     {
      "type": "double",
      "name": "copyOf",
      "params": [
       {
        "type": "double",
        "name": "source"
       }
      ]
     },
     {
      "type": "int",
      "name": "copyOf",
      "params": [
       {
        "type": "int",
        "name": "source"
       },
       {
        "type": "int",
        "name": "len"
       }
      ]
     },
     {
      "type": "double",
      "name": "copyOf",
      "params": [
       {
        "type": "double",
        "name": "source"
       },
       {
        "type": "int",
        "name": "len"
       }
      ]
     },
     {
      "type": null,
      "name": "checkNotNull",
      "params": [
       {
        "type": "Object",
        "name": "o"
       },
       {
        "type": "Localizable",
        "name": "pattern"
       },
       {
        "type": "Object",
        "name": "args"
       }
      ]
     },
     {
      "type": null,
      "name": "checkNotNull",
      "params": [
       {
        "type": "Object",
        "name": "o"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "MathUtils.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "ADDITIVE_MODE"
     },
     {
      "type": "int",
      "name": "MULTIPLICATIVE_MODE"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "float",
      "name": "contractionCriteria"
     },
     {
      "type": "float",
      "name": "expansionFactor"
     },
     {
      "type": "int",
      "name": "expansionMode"
     },
     {
      "type": "int",
      "name": "initialCapacity"
     },
     {
      "type": "double",
      "name": "internalArray"
     },
     {
      "type": "int",
      "name": "numElements"
     },
     {
      "type": "int",
      "name": "startIndex"
     }
    ],
    "name": "ResizableDoubleArray",
    "methods": [
     {
      "type": null,
      "name": "addElement",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "addElements",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "addElementRolling",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "double",
      "name": "substituteMostRecentElement",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "checkContractExpand",
      "params": [
       {
        "type": "float",
        "name": "contraction"
       },
       {
        "type": "float",
        "name": "expansion"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": null,
      "name": "contract",
      "params": []
     },
     {
      "type": null,
      "name": "discardFrontElements",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": null,
      "name": "discardMostRecentElements",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": null,
      "name": "discardExtremeElements",
      "params": [
       {
        "type": "int",
        "name": "i"
       },
       {
        "type": "boolean",
        "name": "front"
       }
      ]
     },
     {
      "type": null,
      "name": "expand",
      "params": []
     },
     {
      "type": null,
      "name": "expandTo",
      "params": [
       {
        "type": "int",
        "name": "size"
       }
      ]
     },
     {
      "type": "float",
      "name": "getContractionCriteria",
      "params": []
     },
     {
      "type": "double",
      "name": "getElement",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "double",
      "name": "getElements",
      "params": []
     },
     {
      "type": "float",
      "name": "getExpansionFactor",
      "params": []
     },
     {
      "type": "int",
      "name": "getExpansionMode",
      "params": []
     },
     {
      "type": "int",
      "name": "getInternalLength",
      "params": []
     },
     {
      "type": "int",
      "name": "getNumElements",
      "params": []
     },
     {
      "type": "double",
      "name": "getInternalValues",
      "params": []
     },
     {
      "type": null,
      "name": "setContractionCriteria",
      "params": [
       {
        "type": "float",
        "name": "contractionCriteria"
       }
      ]
     },
     {
      "type": null,
      "name": "setElement",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "setExpansionFactor",
      "params": [
       {
        "type": "float",
        "name": "expansionFactor"
       }
      ]
     },
     {
      "type": null,
      "name": "setExpansionMode",
      "params": [
       {
        "type": "int",
        "name": "expansionMode"
       }
      ]
     },
     {
      "type": null,
      "name": "setInitialCapacity",
      "params": [
       {
        "type": "int",
        "name": "initialCapacity"
       }
      ]
     },
     {
      "type": null,
      "name": "setNumElements",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "shouldContract",
      "params": []
     },
     {
      "type": "int",
      "name": "start",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "ResizableDoubleArray",
        "name": "source"
       },
       {
        "type": "ResizableDoubleArray",
        "name": "dest"
       }
      ]
     },
     {
      "type": "ResizableDoubleArray",
      "name": "copy",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "object"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "ResizableDoubleArray.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "NumberTransformer",
    "methods": [
     {
      "type": "double",
      "name": "transform",
      "params": [
       {
        "type": "Object",
        "name": "o"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "NumberTransformer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "BigReal",
      "name": "ZERO"
     },
     {
      "type": "BigReal",
      "name": "ONE"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "BigDecimal",
      "name": "d"
     },
     {
      "type": "RoundingMode",
      "name": "roundingMode"
     },
     {
      "type": "int",
      "name": "scale"
     }
    ],
    "name": "BigReal",
    "methods": [
     {
      "type": "RoundingMode",
      "name": "getRoundingMode",
      "params": []
     },
     {
      "type": null,
      "name": "setRoundingMode",
      "params": [
       {
        "type": "RoundingMode",
        "name": "roundingMode"
       }
      ]
     },
     {
      "type": "int",
      "name": "getScale",
      "params": []
     },
     {
      "type": null,
      "name": "setScale",
      "params": [
       {
        "type": "int",
        "name": "scale"
       }
      ]
     },
     {
      "type": "BigReal",
      "name": "add",
      "params": [
       {
        "type": "BigReal",
        "name": "a"
       }
      ]
     },
     {
      "type": "BigReal",
      "name": "subtract",
      "params": [
       {
        "type": "BigReal",
        "name": "a"
       }
      ]
     },
     {
      "type": "BigReal",
      "name": "divide",
      "params": [
       {
        "type": "BigReal",
        "name": "a"
       }
      ]
     },
     {
      "type": "BigReal",
      "name": "multiply",
      "params": [
       {
        "type": "BigReal",
        "name": "a"
       }
      ]
     },
     {
      "type": "int",
      "name": "compareTo",
      "params": [
       {
        "type": "BigReal",
        "name": "a"
       }
      ]
     },
     {
      "type": "double",
      "name": "doubleValue",
      "params": []
     },
     {
      "type": "BigDecimal",
      "name": "bigDecimalValue",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "Field",
      "name": "getField",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "BigReal.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "byte",
      "name": "FREE"
     },
     {
      "type": "byte",
      "name": "FULL"
     },
     {
      "type": "byte",
      "name": "REMOVED"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "float",
      "name": "LOAD_FACTOR"
     },
     {
      "type": "int",
      "name": "DEFAULT_EXPECTED_SIZE"
     },
     {
      "type": "int",
      "name": "RESIZE_MULTIPLIER"
     },
     {
      "type": "int",
      "name": "PERTURB_SHIFT"
     },
     {
      "type": "Field",
      "name": "field"
     },
     {
      "type": "int",
      "name": "keys"
     },
     {
      "type": "T",
      "name": "values"
     },
     {
      "type": "byte",
      "name": "states"
     },
     {
      "type": "T",
      "name": "missingEntries"
     },
     {
      "type": "int",
      "name": "size"
     },
     {
      "type": "int",
      "name": "mask"
     },
     {
      "type": "int",
      "name": "count"
     }
    ],
    "name": "OpenIntToFieldHashMap",
    "methods": [
     {
      "type": "int",
      "name": "computeCapacity",
      "params": [
       {
        "type": "int",
        "name": "expectedSize"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextPowerOfTwo",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "T",
      "name": "get",
      "params": [
       {
        "type": "int",
        "name": "key"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "containsKey",
      "params": [
       {
        "type": "int",
        "name": "key"
       }
      ]
     },
     {
      "type": "Iterator",
      "name": "iterator",
      "params": []
     },
     {
      "type": "int",
      "name": "perturb",
      "params": [
       {
        "type": "int",
        "name": "hash"
       }
      ]
     },
     {
      "type": "int",
      "name": "findInsertionIndex",
      "params": [
       {
        "type": "int",
        "name": "key"
       }
      ]
     },
     {
      "type": "int",
      "name": "findInsertionIndex",
      "params": [
       {
        "type": "int",
        "name": "keys"
       },
       {
        "type": "byte",
        "name": "states"
       },
       {
        "type": "int",
        "name": "key"
       },
       {
        "type": "int",
        "name": "mask"
       }
      ]
     },
     {
      "type": "int",
      "name": "probe",
      "params": [
       {
        "type": "int",
        "name": "perturb"
       },
       {
        "type": "int",
        "name": "j"
       }
      ]
     },
     {
      "type": "int",
      "name": "changeIndexSign",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "int",
      "name": "size",
      "params": []
     },
     {
      "type": "T",
      "name": "remove",
      "params": [
       {
        "type": "int",
        "name": "key"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "containsKey",
      "params": [
       {
        "type": "int",
        "name": "key"
       },
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "T",
      "name": "doRemove",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "T",
      "name": "put",
      "params": [
       {
        "type": "int",
        "name": "key"
       },
       {
        "type": "T",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "growTable",
      "params": []
     },
     {
      "type": "boolean",
      "name": "shouldGrowTable",
      "params": []
     },
     {
      "type": "int",
      "name": "hashOf",
      "params": [
       {
        "type": "int",
        "name": "key"
       }
      ]
     },
     {
      "type": null,
      "name": "readObject",
      "params": [
       {
        "type": "ObjectInputStream",
        "name": "stream"
       }
      ]
     },
     {
      "type": "T",
      "name": "buildArray",
      "params": [
       {
        "type": "int",
        "name": "length"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "OpenIntToFieldHashMap.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "K",
      "name": "key"
     },
     {
      "type": "V",
      "name": "value"
     }
    ],
    "name": "Pair",
    "methods": [
     {
      "type": "K",
      "name": "getKey",
      "params": []
     },
     {
      "type": "V",
      "name": "getValue",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "o"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "Pair.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "DefaultTransformer",
    "methods": [
     {
      "type": "double",
      "name": "transform",
      "params": [
       {
        "type": "Object",
        "name": "o"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "DefaultTransformer.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "MultiStartMultivariateRealOptimizer",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "MultiStartMultivariateRealOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "MultiStartDifferentiableMultivariateVectorialOptimizer",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "MultiStartDifferentiableMultivariateVectorialOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "MultiStartDifferentiableMultivariateRealOptimizer",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "MultiStartDifferentiableMultivariateRealOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "SimpleVectorialValueChecker",
    "methods": [
     {
      "type": "boolean",
      "name": "converged",
      "params": [
       {
        "type": "int",
        "name": "iteration"
       },
       {
        "type": "VectorialPointValuePair",
        "name": "previous"
       },
       {
        "type": "VectorialPointValuePair",
        "name": "current"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "SimpleVectorialValueChecker.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "OptimizationException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "OptimizationException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "point"
     },
     {
      "type": "double",
      "name": "value"
     }
    ],
    "name": "RealPointValuePair",
    "methods": [
     {
      "type": "double",
      "name": "getPoint",
      "params": []
     },
     {
      "type": "double",
      "name": "getPointRef",
      "params": []
     },
     {
      "type": "double",
      "name": "getValue",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "RealPointValuePair.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "GoalType",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "GoalType.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "VectorialConvergenceChecker",
    "methods": [
     {
      "type": "boolean",
      "name": "converged",
      "params": [
       {
        "type": "int",
        "name": "iteration"
       },
       {
        "type": "VectorialPointValuePair",
        "name": "previous"
       },
       {
        "type": "VectorialPointValuePair",
        "name": "current"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "VectorialConvergenceChecker.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "MultivariateRealOptimizer",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "MultivariateRealOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_RELATIVE_THRESHOLD"
     },
     {
      "type": "double",
      "name": "DEFAULT_ABSOLUTE_THRESHOLD"
     },
     {
      "type": "double",
      "name": "relativeThreshold"
     },
     {
      "type": "double",
      "name": "absoluteThreshold"
     }
    ],
    "name": "AbstractConvergenceChecker",
    "methods": [
     {
      "type": "double",
      "name": "getRelativeThreshold",
      "params": []
     },
     {
      "type": "double",
      "name": "getAbsoluteThreshold",
      "params": []
     },
     {
      "type": "boolean",
      "name": "converged",
      "params": [
       {
        "type": "int",
        "name": "iteration"
       },
       {
        "type": "PAIR",
        "name": "previous"
       },
       {
        "type": "PAIR",
        "name": "current"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "AbstractConvergenceChecker.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DifferentiableMultivariateRealOptimizer",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "DifferentiableMultivariateRealOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "SimpleRealPointChecker",
    "methods": [
     {
      "type": "boolean",
      "name": "converged",
      "params": [
       {
        "type": "int",
        "name": "iteration"
       },
       {
        "type": "RealPointValuePair",
        "name": "previous"
       },
       {
        "type": "RealPointValuePair",
        "name": "current"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "SimpleRealPointChecker.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "point"
     },
     {
      "type": "double",
      "name": "value"
     }
    ],
    "name": "VectorialPointValuePair",
    "methods": [
     {
      "type": "double",
      "name": "getPoint",
      "params": []
     },
     {
      "type": "double",
      "name": "getPointRef",
      "params": []
     },
     {
      "type": "double",
      "name": "getValue",
      "params": []
     },
     {
      "type": "double",
      "name": "getValueRef",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "VectorialPointValuePair.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "SimpleScalarValueChecker",
    "methods": [
     {
      "type": "boolean",
      "name": "converged",
      "params": [
       {
        "type": "int",
        "name": "iteration"
       },
       {
        "type": "RealPointValuePair",
        "name": "previous"
       },
       {
        "type": "RealPointValuePair",
        "name": "current"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "SimpleScalarValueChecker.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "MultivariateVectorialFunction",
      "name": "function"
     },
     {
      "type": "double",
      "name": "observations"
     },
     {
      "type": "double",
      "name": "weights"
     },
     {
      "type": "RealMatrix",
      "name": "scale"
     }
    ],
    "name": "LeastSquaresConverter",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "point"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "LeastSquaresConverter.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "BaseOptimizer",
    "methods": [
     {
      "type": "int",
      "name": "getMaxEvaluations",
      "params": []
     },
     {
      "type": "int",
      "name": "getEvaluations",
      "params": []
     },
     {
      "type": null,
      "name": "setConvergenceChecker",
      "params": [
       {
        "type": "ConvergenceChecker",
        "name": "checker"
       }
      ]
     },
     {
      "type": "ConvergenceChecker",
      "name": "getConvergenceChecker",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "BaseOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ConvergenceChecker",
    "methods": [
     {
      "type": "boolean",
      "name": "converged",
      "params": [
       {
        "type": "int",
        "name": "iteration"
       },
       {
        "type": "PAIR",
        "name": "previous"
       },
       {
        "type": "PAIR",
        "name": "current"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "ConvergenceChecker.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "BaseMultivariateVectorialOptimizer",
    "methods": [
     {
      "type": "VectorialPointValuePair",
      "name": "optimize",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "FUNC",
        "name": "f"
       },
       {
        "type": "double",
        "name": "target"
       },
       {
        "type": "double",
        "name": "weight"
       },
       {
        "type": "double",
        "name": "startPoint"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "BaseMultivariateVectorialOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "BaseMultivariateVectorialOptimizer",
      "name": "optimizer"
     },
     {
      "type": "int",
      "name": "maxEvaluations"
     },
     {
      "type": "int",
      "name": "totalEvaluations"
     },
     {
      "type": "int",
      "name": "starts"
     },
     {
      "type": "RandomVectorGenerator",
      "name": "generator"
     },
     {
      "type": "VectorialPointValuePair",
      "name": "optima"
     }
    ],
    "name": "BaseMultiStartMultivariateVectorialOptimizer",
    "methods": [
     {
      "type": "VectorialPointValuePair",
      "name": "getOptima",
      "params": []
     },
     {
      "type": "int",
      "name": "getMaxEvaluations",
      "params": []
     },
     {
      "type": "int",
      "name": "getEvaluations",
      "params": []
     },
     {
      "type": null,
      "name": "setConvergenceChecker",
      "params": [
       {
        "type": "ConvergenceChecker",
        "name": "checker"
       }
      ]
     },
     {
      "type": "ConvergenceChecker",
      "name": "getConvergenceChecker",
      "params": []
     },
     {
      "type": "VectorialPointValuePair",
      "name": "optimize",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "FUNC",
        "name": "f"
       },
       {
        "type": "double",
        "name": "target"
       },
       {
        "type": "double",
        "name": "weights"
       },
       {
        "type": "double",
        "name": "startPoint"
       }
      ]
     },
     {
      "type": null,
      "name": "sortPairs",
      "params": [
       {
        "type": "double",
        "name": "target"
       },
       {
        "type": "double",
        "name": "weights"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "BaseMultiStartMultivariateVectorialOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "SimpleVectorialPointChecker",
    "methods": [
     {
      "type": "boolean",
      "name": "converged",
      "params": [
       {
        "type": "int",
        "name": "iteration"
       },
       {
        "type": "VectorialPointValuePair",
        "name": "previous"
       },
       {
        "type": "VectorialPointValuePair",
        "name": "current"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "SimpleVectorialPointChecker.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DifferentiableMultivariateVectorialOptimizer",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "DifferentiableMultivariateVectorialOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "BaseMultivariateRealOptimizer",
      "name": "optimizer"
     },
     {
      "type": "int",
      "name": "maxEvaluations"
     },
     {
      "type": "int",
      "name": "totalEvaluations"
     },
     {
      "type": "int",
      "name": "starts"
     },
     {
      "type": "RandomVectorGenerator",
      "name": "generator"
     },
     {
      "type": "RealPointValuePair",
      "name": "optima"
     }
    ],
    "name": "BaseMultiStartMultivariateRealOptimizer",
    "methods": [
     {
      "type": "RealPointValuePair",
      "name": "getOptima",
      "params": []
     },
     {
      "type": "int",
      "name": "getMaxEvaluations",
      "params": []
     },
     {
      "type": "int",
      "name": "getEvaluations",
      "params": []
     },
     {
      "type": null,
      "name": "setConvergenceChecker",
      "params": [
       {
        "type": "ConvergenceChecker",
        "name": "checker"
       }
      ]
     },
     {
      "type": "ConvergenceChecker",
      "name": "getConvergenceChecker",
      "params": []
     },
     {
      "type": "RealPointValuePair",
      "name": "optimize",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "FUNC",
        "name": "f"
       },
       {
        "type": "GoalType",
        "name": "goal"
       },
       {
        "type": "double",
        "name": "startPoint"
       }
      ]
     },
     {
      "type": null,
      "name": "sortPairs",
      "params": [
       {
        "type": "GoalType",
        "name": "goal"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "BaseMultiStartMultivariateRealOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "BaseMultivariateRealOptimizer",
    "methods": [
     {
      "type": "RealPointValuePair",
      "name": "optimize",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "FUNC",
        "name": "f"
       },
       {
        "type": "GoalType",
        "name": "goalType"
       },
       {
        "type": "double",
        "name": "startPoint"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "BaseMultivariateRealOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "DifferentiableMultivariateVectorialOptimizer",
      "name": "optimizer"
     },
     {
      "type": "List",
      "name": "observations"
     }
    ],
    "name": "CurveFitter",
    "methods": [
     {
      "type": null,
      "name": "addObservedPoint",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": null,
      "name": "addObservedPoint",
      "params": [
       {
        "type": "double",
        "name": "weight"
       },
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": null,
      "name": "addObservedPoint",
      "params": [
       {
        "type": "WeightedObservedPoint",
        "name": "observed"
       }
      ]
     },
     {
      "type": "WeightedObservedPoint",
      "name": "getObservations",
      "params": []
     },
     {
      "type": null,
      "name": "clearObservations",
      "params": []
     },
     {
      "type": "double",
      "name": "fit",
      "params": [
       {
        "type": "ParametricUnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "initialGuess"
       }
      ]
     },
     {
      "type": "double",
      "name": "fit",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "ParametricUnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "initialGuess"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.fitting",
  "filename": "CurveFitter.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "GaussianFitter",
    "methods": [
     {
      "type": "double",
      "name": "fit",
      "params": [
       {
        "type": "double",
        "name": "initialGuess"
       }
      ]
     },
     {
      "type": "double",
      "name": "fit",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.fitting",
  "filename": "GaussianFitter.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "HarmonicFitter",
    "methods": [
     {
      "type": "double",
      "name": "fit",
      "params": [
       {
        "type": "double",
        "name": "initialGuess"
       }
      ]
     },
     {
      "type": "double",
      "name": "fit",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.fitting",
  "filename": "HarmonicFitter.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "weight"
     },
     {
      "type": "double",
      "name": "x"
     },
     {
      "type": "double",
      "name": "y"
     }
    ],
    "name": "WeightedObservedPoint",
    "methods": [
     {
      "type": "double",
      "name": "getWeight",
      "params": []
     },
     {
      "type": "double",
      "name": "getX",
      "params": []
     },
     {
      "type": "double",
      "name": "getY",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.fitting",
  "filename": "WeightedObservedPoint.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "degree"
     }
    ],
    "name": "PolynomialFitter",
    "methods": [
     {
      "type": "double",
      "name": "fit",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.fitting",
  "filename": "PolynomialFitter.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_EPSILON"
     },
     {
      "type": "double",
      "name": "epsilon"
     }
    ],
    "name": "SimplexSolver",
    "methods": [
     {
      "type": "Integer",
      "name": "getPivotColumn",
      "params": [
       {
        "type": "SimplexTableau",
        "name": "tableau"
       }
      ]
     },
     {
      "type": "Integer",
      "name": "getPivotRow",
      "params": [
       {
        "type": "SimplexTableau",
        "name": "tableau"
       },
       {
        "type": "int",
        "name": "col"
       }
      ]
     },
     {
      "type": null,
      "name": "doIteration",
      "params": [
       {
        "type": "SimplexTableau",
        "name": "tableau"
       }
      ]
     },
     {
      "type": null,
      "name": "solvePhase1",
      "params": [
       {
        "type": "SimplexTableau",
        "name": "tableau"
       }
      ]
     },
     {
      "type": "RealPointValuePair",
      "name": "doOptimize",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.linear",
  "filename": "SimplexSolver.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "LinearOptimizer",
    "methods": [
     {
      "type": null,
      "name": "setMaxIterations",
      "params": [
       {
        "type": "int",
        "name": "maxIterations"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMaxIterations",
      "params": []
     },
     {
      "type": "int",
      "name": "getIterations",
      "params": []
     },
     {
      "type": "RealPointValuePair",
      "name": "optimize",
      "params": [
       {
        "type": "LinearObjectiveFunction",
        "name": "f"
       },
       {
        "type": "Collection",
        "name": "constraints"
       },
       {
        "type": "GoalType",
        "name": "goalType"
       },
       {
        "type": "boolean",
        "name": "restrictToNonNegative"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.linear",
  "filename": "LinearOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "UnboundedSolutionException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.optimization.linear",
  "filename": "UnboundedSolutionException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "RealVector",
      "name": "coefficients"
     },
     {
      "type": "Relationship",
      "name": "relationship"
     },
     {
      "type": "double",
      "name": "value"
     }
    ],
    "name": "LinearConstraint",
    "methods": [
     {
      "type": "RealVector",
      "name": "getCoefficients",
      "params": []
     },
     {
      "type": "Relationship",
      "name": "getRelationship",
      "params": []
     },
     {
      "type": "double",
      "name": "getValue",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": null,
      "name": "writeObject",
      "params": [
       {
        "type": "ObjectOutputStream",
        "name": "oos"
       }
      ]
     },
     {
      "type": null,
      "name": "readObject",
      "params": [
       {
        "type": "ObjectInputStream",
        "name": "ois"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.linear",
  "filename": "LinearConstraint.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "RealVector",
      "name": "coefficients"
     },
     {
      "type": "double",
      "name": "constantTerm"
     }
    ],
    "name": "LinearObjectiveFunction",
    "methods": [
     {
      "type": "RealVector",
      "name": "getCoefficients",
      "params": []
     },
     {
      "type": "double",
      "name": "getConstantTerm",
      "params": []
     },
     {
      "type": "double",
      "name": "getValue",
      "params": [
       {
        "type": "double",
        "name": "point"
       }
      ]
     },
     {
      "type": "double",
      "name": "getValue",
      "params": [
       {
        "type": "RealVector",
        "name": "point"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": null,
      "name": "writeObject",
      "params": [
       {
        "type": "ObjectOutputStream",
        "name": "oos"
       }
      ]
     },
     {
      "type": null,
      "name": "readObject",
      "params": [
       {
        "type": "ObjectInputStream",
        "name": "ois"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.linear",
  "filename": "LinearObjectiveFunction.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "DEFAULT_MAX_ITERATIONS"
     },
     {
      "type": "LinearObjectiveFunction",
      "name": "function"
     },
     {
      "type": "Collection",
      "name": "linearConstraints"
     },
     {
      "type": "GoalType",
      "name": "goal"
     },
     {
      "type": "boolean",
      "name": "nonNegative"
     },
     {
      "type": "int",
      "name": "maxIterations"
     },
     {
      "type": "int",
      "name": "iterations"
     }
    ],
    "name": "AbstractLinearOptimizer",
    "methods": [
     {
      "type": null,
      "name": "setMaxIterations",
      "params": [
       {
        "type": "int",
        "name": "maxIterations"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMaxIterations",
      "params": []
     },
     {
      "type": "int",
      "name": "getIterations",
      "params": []
     },
     {
      "type": null,
      "name": "incrementIterationsCounter",
      "params": []
     },
     {
      "type": "RealPointValuePair",
      "name": "optimize",
      "params": [
       {
        "type": "LinearObjectiveFunction",
        "name": "f"
       },
       {
        "type": "Collection",
        "name": "constraints"
       },
       {
        "type": "GoalType",
        "name": "goalType"
       },
       {
        "type": "boolean",
        "name": "restrictToNonNegative"
       }
      ]
     },
     {
      "type": "RealPointValuePair",
      "name": "doOptimize",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.linear",
  "filename": "AbstractLinearOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "String",
      "name": "NEGATIVE_VAR_COLUMN_LABEL"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "LinearObjectiveFunction",
      "name": "f"
     },
     {
      "type": "List",
      "name": "constraints"
     },
     {
      "type": "boolean",
      "name": "restrictToNonNegative"
     },
     {
      "type": "List",
      "name": "columnLabels"
     },
     {
      "type": "RealMatrix",
      "name": "tableau"
     },
     {
      "type": "int",
      "name": "numDecisionVariables"
     },
     {
      "type": "int",
      "name": "numSlackVariables"
     },
     {
      "type": "int",
      "name": "numArtificialVariables"
     },
     {
      "type": "double",
      "name": "epsilon"
     }
    ],
    "name": "SimplexTableau",
    "methods": [
     {
      "type": null,
      "name": "initializeColumnLabels",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "createTableau",
      "params": [
       {
        "type": "boolean",
        "name": "maximize"
       }
      ]
     },
     {
      "type": "List",
      "name": "normalizeConstraints",
      "params": [
       {
        "type": "Collection",
        "name": "originalConstraints"
       }
      ]
     },
     {
      "type": "LinearConstraint",
      "name": "normalize",
      "params": [
       {
        "type": "LinearConstraint",
        "name": "constraint"
       }
      ]
     },
     {
      "type": "int",
      "name": "getNumObjectiveFunctions",
      "params": []
     },
     {
      "type": "int",
      "name": "getConstraintTypeCounts",
      "params": [
       {
        "type": "Relationship",
        "name": "relationship"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInvertedCoeffiecientSum",
      "params": [
       {
        "type": "RealVector",
        "name": "coefficients"
       }
      ]
     },
     {
      "type": "Integer",
      "name": "getBasicRow",
      "params": [
       {
        "type": "int",
        "name": "col"
       }
      ]
     },
     {
      "type": null,
      "name": "dropPhase1Objective",
      "params": []
     },
     {
      "type": null,
      "name": "copyArray",
      "params": [
       {
        "type": "double",
        "name": "src"
       },
       {
        "type": "double",
        "name": "dest"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isOptimal",
      "params": []
     },
     {
      "type": "RealPointValuePair",
      "name": "getSolution",
      "params": []
     },
     {
      "type": null,
      "name": "divideRow",
      "params": [
       {
        "type": "int",
        "name": "dividendRow"
       },
       {
        "type": "double",
        "name": "divisor"
       }
      ]
     },
     {
      "type": null,
      "name": "subtractRow",
      "params": [
       {
        "type": "int",
        "name": "minuendRow"
       },
       {
        "type": "int",
        "name": "subtrahendRow"
       },
       {
        "type": "double",
        "name": "multiple"
       }
      ]
     },
     {
      "type": "int",
      "name": "getWidth",
      "params": []
     },
     {
      "type": "int",
      "name": "getHeight",
      "params": []
     },
     {
      "type": "double",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": null,
      "name": "setEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "int",
      "name": "getSlackVariableOffset",
      "params": []
     },
     {
      "type": "int",
      "name": "getArtificialVariableOffset",
      "params": []
     },
     {
      "type": "int",
      "name": "getRhsOffset",
      "params": []
     },
     {
      "type": "int",
      "name": "getNumDecisionVariables",
      "params": []
     },
     {
      "type": "int",
      "name": "getOriginalNumDecisionVariables",
      "params": []
     },
     {
      "type": "int",
      "name": "getNumSlackVariables",
      "params": []
     },
     {
      "type": "int",
      "name": "getNumArtificialVariables",
      "params": []
     },
     {
      "type": "double",
      "name": "getData",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": null,
      "name": "writeObject",
      "params": [
       {
        "type": "ObjectOutputStream",
        "name": "oos"
       }
      ]
     },
     {
      "type": null,
      "name": "readObject",
      "params": [
       {
        "type": "ObjectInputStream",
        "name": "ois"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.linear",
  "filename": "SimplexTableau.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "String",
      "name": "stringValue"
     }
    ],
    "name": "Relationship",
    "methods": [
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": "Relationship",
      "name": "oppositeRelationship",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.linear",
  "filename": "Relationship.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "NoFeasibleSolutionException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.optimization.linear",
  "filename": "NoFeasibleSolutionException.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "BaseUnivariateRealOptimizer",
    "methods": [
     {
      "type": "UnivariateRealPointValuePair",
      "name": "optimize",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "FUNC",
        "name": "f"
       },
       {
        "type": "GoalType",
        "name": "goalType"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": "UnivariateRealPointValuePair",
      "name": "optimize",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "FUNC",
        "name": "f"
       },
       {
        "type": "GoalType",
        "name": "goalType"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "double",
        "name": "startValue"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.univariate",
  "filename": "BaseUnivariateRealOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "ConvergenceChecker",
      "name": "checker"
     },
     {
      "type": "Incrementor",
      "name": "evaluations"
     },
     {
      "type": "GoalType",
      "name": "goal"
     },
     {
      "type": "double",
      "name": "searchMin"
     },
     {
      "type": "double",
      "name": "searchMax"
     },
     {
      "type": "double",
      "name": "searchStart"
     },
     {
      "type": "UnivariateRealFunction",
      "name": "function"
     }
    ],
    "name": "AbstractUnivariateRealOptimizer",
    "methods": [
     {
      "type": "int",
      "name": "getMaxEvaluations",
      "params": []
     },
     {
      "type": "int",
      "name": "getEvaluations",
      "params": []
     },
     {
      "type": "GoalType",
      "name": "getGoalType",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getStartValue",
      "params": []
     },
     {
      "type": "double",
      "name": "computeObjectiveValue",
      "params": [
       {
        "type": "double",
        "name": "point"
       }
      ]
     },
     {
      "type": "UnivariateRealPointValuePair",
      "name": "optimize",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "GoalType",
        "name": "goalType"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "double",
        "name": "startValue"
       }
      ]
     },
     {
      "type": "UnivariateRealPointValuePair",
      "name": "optimize",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "GoalType",
        "name": "goalType"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": null,
      "name": "setConvergenceChecker",
      "params": [
       {
        "type": "ConvergenceChecker",
        "name": "c"
       }
      ]
     },
     {
      "type": "ConvergenceChecker",
      "name": "getConvergenceChecker",
      "params": []
     },
     {
      "type": "UnivariateRealPointValuePair",
      "name": "doOptimize",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.univariate",
  "filename": "AbstractUnivariateRealOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "EPS_MIN"
     },
     {
      "type": "double",
      "name": "GOLD"
     },
     {
      "type": "double",
      "name": "growLimit"
     },
     {
      "type": "Incrementor",
      "name": "evaluations"
     },
     {
      "type": "double",
      "name": "lo"
     },
     {
      "type": "double",
      "name": "hi"
     },
     {
      "type": "double",
      "name": "mid"
     },
     {
      "type": "double",
      "name": "fLo"
     },
     {
      "type": "double",
      "name": "fHi"
     },
     {
      "type": "double",
      "name": "fMid"
     }
    ],
    "name": "BracketFinder",
    "methods": [
     {
      "type": null,
      "name": "search",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "func"
       },
       {
        "type": "GoalType",
        "name": "goal"
       },
       {
        "type": "double",
        "name": "xA"
       },
       {
        "type": "double",
        "name": "xB"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMaxEvaluations",
      "params": []
     },
     {
      "type": "int",
      "name": "getEvaluations",
      "params": []
     },
     {
      "type": "double",
      "name": "getLo",
      "params": []
     },
     {
      "type": "double",
      "name": "getFLo",
      "params": []
     },
     {
      "type": "double",
      "name": "getHi",
      "params": []
     },
     {
      "type": "double",
      "name": "getFHi",
      "params": []
     },
     {
      "type": "double",
      "name": "getMid",
      "params": []
     },
     {
      "type": "double",
      "name": "getFMid",
      "params": []
     },
     {
      "type": "double",
      "name": "eval",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.univariate",
  "filename": "BracketFinder.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "UnivariateRealOptimizer",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.optimization.univariate",
  "filename": "UnivariateRealOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "point"
     },
     {
      "type": "double",
      "name": "value"
     }
    ],
    "name": "UnivariateRealPointValuePair",
    "methods": [
     {
      "type": "double",
      "name": "getPoint",
      "params": []
     },
     {
      "type": "double",
      "name": "getValue",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.univariate",
  "filename": "UnivariateRealPointValuePair.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "BaseUnivariateRealOptimizer",
      "name": "optimizer"
     },
     {
      "type": "int",
      "name": "maxEvaluations"
     },
     {
      "type": "int",
      "name": "totalEvaluations"
     },
     {
      "type": "int",
      "name": "starts"
     },
     {
      "type": "RandomGenerator",
      "name": "generator"
     },
     {
      "type": "UnivariateRealPointValuePair",
      "name": "optima"
     }
    ],
    "name": "MultiStartUnivariateRealOptimizer",
    "methods": [
     {
      "type": null,
      "name": "setConvergenceChecker",
      "params": [
       {
        "type": "ConvergenceChecker",
        "name": "checker"
       }
      ]
     },
     {
      "type": "ConvergenceChecker",
      "name": "getConvergenceChecker",
      "params": []
     },
     {
      "type": "int",
      "name": "getMaxEvaluations",
      "params": []
     },
     {
      "type": "int",
      "name": "getEvaluations",
      "params": []
     },
     {
      "type": "UnivariateRealPointValuePair",
      "name": "getOptima",
      "params": []
     },
     {
      "type": "UnivariateRealPointValuePair",
      "name": "optimize",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "FUNC",
        "name": "f"
       },
       {
        "type": "GoalType",
        "name": "goal"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": "UnivariateRealPointValuePair",
      "name": "optimize",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "FUNC",
        "name": "f"
       },
       {
        "type": "GoalType",
        "name": "goal"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "double",
        "name": "startValue"
       }
      ]
     },
     {
      "type": null,
      "name": "sortPairs",
      "params": [
       {
        "type": "GoalType",
        "name": "goal"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.univariate",
  "filename": "MultiStartUnivariateRealOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "GOLDEN_SECTION"
     },
     {
      "type": "double",
      "name": "MIN_RELATIVE_TOLERANCE"
     },
     {
      "type": "double",
      "name": "relativeThreshold"
     },
     {
      "type": "double",
      "name": "absoluteThreshold"
     }
    ],
    "name": "BrentOptimizer",
    "methods": [
     {
      "type": "UnivariateRealPointValuePair",
      "name": "doOptimize",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.univariate",
  "filename": "BrentOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Incrementor",
      "name": "evaluations"
     },
     {
      "type": "ConvergenceChecker",
      "name": "checker"
     },
     {
      "type": "GoalType",
      "name": "goal"
     },
     {
      "type": "double",
      "name": "start"
     },
     {
      "type": "MultivariateRealFunction",
      "name": "function"
     }
    ],
    "name": "BaseAbstractScalarOptimizer",
    "methods": [
     {
      "type": "int",
      "name": "getMaxEvaluations",
      "params": []
     },
     {
      "type": "int",
      "name": "getEvaluations",
      "params": []
     },
     {
      "type": null,
      "name": "setConvergenceChecker",
      "params": [
       {
        "type": "ConvergenceChecker",
        "name": "convergenceChecker"
       }
      ]
     },
     {
      "type": "ConvergenceChecker",
      "name": "getConvergenceChecker",
      "params": []
     },
     {
      "type": "double",
      "name": "computeObjectiveValue",
      "params": [
       {
        "type": "double",
        "name": "point"
       }
      ]
     },
     {
      "type": "RealPointValuePair",
      "name": "optimize",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "FUNC",
        "name": "f"
       },
       {
        "type": "GoalType",
        "name": "goalType"
       },
       {
        "type": "double",
        "name": "startPoint"
       }
      ]
     },
     {
      "type": "GoalType",
      "name": "getGoalType",
      "params": []
     },
     {
      "type": "double",
      "name": "getStartPoint",
      "params": []
     },
     {
      "type": "RealPointValuePair",
      "name": "doOptimize",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.direct",
  "filename": "BaseAbstractScalarOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Incrementor",
      "name": "evaluations"
     },
     {
      "type": "ConvergenceChecker",
      "name": "checker"
     },
     {
      "type": "double",
      "name": "target"
     },
     {
      "type": "double",
      "name": "weight"
     },
     {
      "type": "double",
      "name": "start"
     },
     {
      "type": "MultivariateVectorialFunction",
      "name": "function"
     }
    ],
    "name": "BaseAbstractVectorialOptimizer",
    "methods": [
     {
      "type": "int",
      "name": "getMaxEvaluations",
      "params": []
     },
     {
      "type": "int",
      "name": "getEvaluations",
      "params": []
     },
     {
      "type": null,
      "name": "setConvergenceChecker",
      "params": [
       {
        "type": "ConvergenceChecker",
        "name": "convergenceChecker"
       }
      ]
     },
     {
      "type": "ConvergenceChecker",
      "name": "getConvergenceChecker",
      "params": []
     },
     {
      "type": "double",
      "name": "computeObjectiveValue",
      "params": [
       {
        "type": "double",
        "name": "point"
       }
      ]
     },
     {
      "type": "VectorialPointValuePair",
      "name": "optimize",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "FUNC",
        "name": "f"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "w"
       },
       {
        "type": "double",
        "name": "startPoint"
       }
      ]
     },
     {
      "type": "double",
      "name": "getStartPoint",
      "params": []
     },
     {
      "type": "VectorialPointValuePair",
      "name": "doOptimize",
      "params": []
     },
     {
      "type": "double",
      "name": "getTargetRef",
      "params": []
     },
     {
      "type": "double",
      "name": "getWeightRef",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.direct",
  "filename": "BaseAbstractVectorialOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "DEFAULT_CHECKFEASABLECOUNT"
     },
     {
      "type": "double",
      "name": "DEFAULT_STOPFITNESS"
     },
     {
      "type": "boolean",
      "name": "DEFAULT_ISACTIVECMA"
     },
     {
      "type": "int",
      "name": "DEFAULT_MAXITERATIONS"
     },
     {
      "type": "int",
      "name": "DEFAULT_DIAGONALONLY"
     },
     {
      "type": "RandomGenerator",
      "name": "DEFAULT_RANDOMGENERATOR"
     },
     {
      "type": "int",
      "name": "lambda"
     },
     {
      "type": "boolean",
      "name": "isActiveCMA"
     },
     {
      "type": "int",
      "name": "checkFeasableCount"
     },
     {
      "type": "double",
      "name": "boundaries"
     },
     {
      "type": "double",
      "name": "inputSigma"
     },
     {
      "type": "int",
      "name": "dimension"
     },
     {
      "type": "int",
      "name": "diagonalOnly"
     },
     {
      "type": "boolean",
      "name": "isMinimize"
     },
     {
      "type": "boolean",
      "name": "generateStatistics"
     },
     {
      "type": "int",
      "name": "maxIterations"
     },
     {
      "type": "double",
      "name": "stopfitness"
     },
     {
      "type": "double",
      "name": "stopTolUpX"
     },
     {
      "type": "double",
      "name": "stopTolX"
     },
     {
      "type": "double",
      "name": "stopTolFun"
     },
     {
      "type": "double",
      "name": "stopTolHistFun"
     },
     {
      "type": "int",
      "name": "mu"
     },
     {
      "type": "double",
      "name": "logMu2"
     },
     {
      "type": "RealMatrix",
      "name": "weights"
     },
     {
      "type": "double",
      "name": "mueff"
     },
     {
      "type": "double",
      "name": "sigma"
     },
     {
      "type": "double",
      "name": "cc"
     },
     {
      "type": "double",
      "name": "cs"
     },
     {
      "type": "double",
      "name": "damps"
     },
     {
      "type": "double",
      "name": "ccov1"
     },
     {
      "type": "double",
      "name": "ccovmu"
     },
     {
      "type": "double",
      "name": "chiN"
     },
     {
      "type": "double",
      "name": "ccov1Sep"
     },
     {
      "type": "double",
      "name": "ccovmuSep"
     },
     {
      "type": "RealMatrix",
      "name": "xmean"
     },
     {
      "type": "RealMatrix",
      "name": "pc"
     },
     {
      "type": "RealMatrix",
      "name": "ps"
     },
     {
      "type": "double",
      "name": "normps"
     },
     {
      "type": "RealMatrix",
      "name": "B"
     },
     {
      "type": "RealMatrix",
      "name": "D"
     },
     {
      "type": "RealMatrix",
      "name": "BD"
     },
     {
      "type": "RealMatrix",
      "name": "diagD"
     },
     {
      "type": "RealMatrix",
      "name": "C"
     },
     {
      "type": "RealMatrix",
      "name": "diagC"
     },
     {
      "type": "int",
      "name": "iterations"
     },
     {
      "type": "double",
      "name": "fitnessHistory"
     },
     {
      "type": "int",
      "name": "historySize"
     },
     {
      "type": "RandomGenerator",
      "name": "random"
     },
     {
      "type": "List",
      "name": "statisticsSigmaHistory"
     },
     {
      "type": "List",
      "name": "statisticsMeanHistory"
     },
     {
      "type": "List",
      "name": "statisticsFitnessHistory"
     },
     {
      "type": "List",
      "name": "statisticsDHistory"
     }
    ],
    "name": "CMAESOptimizer",
    "methods": [
     {
      "type": "List",
      "name": "getStatisticsSigmaHistory",
      "params": []
     },
     {
      "type": "List",
      "name": "getStatisticsMeanHistory",
      "params": []
     },
     {
      "type": "List",
      "name": "getStatisticsFitnessHistory",
      "params": []
     },
     {
      "type": "List",
      "name": "getStatisticsDHistory",
      "params": []
     },
     {
      "type": "RealPointValuePair",
      "name": "doOptimize",
      "params": []
     },
     {
      "type": null,
      "name": "checkParameters",
      "params": []
     },
     {
      "type": null,
      "name": "initializeCMA",
      "params": [
       {
        "type": "double",
        "name": "guess"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "updateEvolutionPaths",
      "params": [
       {
        "type": "RealMatrix",
        "name": "zmean"
       },
       {
        "type": "RealMatrix",
        "name": "xold"
       }
      ]
     },
     {
      "type": null,
      "name": "updateCovarianceDiagonalOnly",
      "params": [
       {
        "type": "boolean",
        "name": "hsig"
       },
       {
        "type": "RealMatrix",
        "name": "bestArz"
       },
       {
        "type": "RealMatrix",
        "name": "xold"
       }
      ]
     },
     {
      "type": null,
      "name": "updateCovariance",
      "params": [
       {
        "type": "boolean",
        "name": "hsig"
       },
       {
        "type": "RealMatrix",
        "name": "bestArx"
       },
       {
        "type": "RealMatrix",
        "name": "arz"
       },
       {
        "type": "int",
        "name": "arindex"
       },
       {
        "type": "RealMatrix",
        "name": "xold"
       }
      ]
     },
     {
      "type": null,
      "name": "updateBD",
      "params": [
       {
        "type": "double",
        "name": "negccov"
       }
      ]
     },
     {
      "type": null,
      "name": "push",
      "params": [
       {
        "type": "double",
        "name": "vals"
       },
       {
        "type": "double",
        "name": "val"
       }
      ]
     },
     {
      "type": "int",
      "name": "sortedIndices",
      "params": [
       {
        "type": "double",
        "name": "doubles"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "log",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "sqrt",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "square",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "times",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       },
       {
        "type": "RealMatrix",
        "name": "n"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "divide",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       },
       {
        "type": "RealMatrix",
        "name": "n"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "selectColumns",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       },
       {
        "type": "int",
        "name": "cols"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "triu",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "double",
      "name": "norm",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "sumRows",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "diag",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": null,
      "name": "copyColumn",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m1"
       },
       {
        "type": "int",
        "name": "col1"
       },
       {
        "type": "RealMatrix",
        "name": "m2"
       },
       {
        "type": "int",
        "name": "col2"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "ones",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "eye",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "zeros",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "repmat",
      "params": [
       {
        "type": "RealMatrix",
        "name": "mat"
       },
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "sequence",
      "params": [
       {
        "type": "double",
        "name": "start"
       },
       {
        "type": "double",
        "name": "end"
       },
       {
        "type": "double",
        "name": "step"
       }
      ]
     },
     {
      "type": "double",
      "name": "max",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "double",
      "name": "min",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "double",
      "name": "max",
      "params": [
       {
        "type": "double",
        "name": "m"
       }
      ]
     },
     {
      "type": "double",
      "name": "min",
      "params": [
       {
        "type": "double",
        "name": "m"
       }
      ]
     },
     {
      "type": "int",
      "name": "inverse",
      "params": [
       {
        "type": "int",
        "name": "indices"
       }
      ]
     },
     {
      "type": "int",
      "name": "reverse",
      "params": [
       {
        "type": "int",
        "name": "indices"
       }
      ]
     },
     {
      "type": "double",
      "name": "randn",
      "params": [
       {
        "type": "int",
        "name": "size"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "randn1",
      "params": [
       {
        "type": "int",
        "name": "size"
       },
       {
        "type": "int",
        "name": "popSize"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.direct",
  "filename": "CMAESOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "MIN_RELATIVE_TOLERANCE"
     },
     {
      "type": "double",
      "name": "relativeThreshold"
     },
     {
      "type": "double",
      "name": "absoluteThreshold"
     },
     {
      "type": "LineSearch",
      "name": "line"
     }
    ],
    "name": "PowellOptimizer",
    "methods": [
     {
      "type": "RealPointValuePair",
      "name": "doOptimize",
      "params": []
     },
     {
      "type": "double",
      "name": "newPointAndDirection",
      "params": [
       {
        "type": "double",
        "name": "p"
       },
       {
        "type": "double",
        "name": "d"
       },
       {
        "type": "double",
        "name": "optimum"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.direct",
  "filename": "PowellOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_KHI"
     },
     {
      "type": "double",
      "name": "DEFAULT_GAMMA"
     },
     {
      "type": "double",
      "name": "khi"
     },
     {
      "type": "double",
      "name": "gamma"
     }
    ],
    "name": "MultiDirectionalSimplex",
    "methods": [
     {
      "type": null,
      "name": "iterate",
      "params": [
       {
        "type": "MultivariateRealFunction",
        "name": "evaluationFunction"
       },
       {
        "type": "Comparator",
        "name": "comparator"
       }
      ]
     },
     {
      "type": "RealPointValuePair",
      "name": "evaluateNewSimplex",
      "params": [
       {
        "type": "MultivariateRealFunction",
        "name": "evaluationFunction"
       },
       {
        "type": "RealPointValuePair",
        "name": "original"
       },
       {
        "type": "double",
        "name": "coeff"
       },
       {
        "type": "Comparator",
        "name": "comparator"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.direct",
  "filename": "MultiDirectionalSimplex.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "AbstractSimplex",
      "name": "simplex"
     }
    ],
    "name": "SimplexOptimizer",
    "methods": [
     {
      "type": null,
      "name": "setSimplex",
      "params": [
       {
        "type": "AbstractSimplex",
        "name": "simplex"
       }
      ]
     },
     {
      "type": "RealPointValuePair",
      "name": "doOptimize",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.direct",
  "filename": "SimplexOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_RHO"
     },
     {
      "type": "double",
      "name": "DEFAULT_KHI"
     },
     {
      "type": "double",
      "name": "DEFAULT_GAMMA"
     },
     {
      "type": "double",
      "name": "DEFAULT_SIGMA"
     },
     {
      "type": "double",
      "name": "rho"
     },
     {
      "type": "double",
      "name": "khi"
     },
     {
      "type": "double",
      "name": "gamma"
     },
     {
      "type": "double",
      "name": "sigma"
     }
    ],
    "name": "NelderMeadSimplex",
    "methods": [
     {
      "type": null,
      "name": "iterate",
      "params": [
       {
        "type": "MultivariateRealFunction",
        "name": "evaluationFunction"
       },
       {
        "type": "Comparator",
        "name": "comparator"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.direct",
  "filename": "NelderMeadSimplex.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "RealPointValuePair",
      "name": "simplex"
     },
     {
      "type": "double",
      "name": "startConfiguration"
     },
     {
      "type": "int",
      "name": "dimension"
     }
    ],
    "name": "AbstractSimplex",
    "methods": [
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": "int",
      "name": "getSize",
      "params": []
     },
     {
      "type": null,
      "name": "iterate",
      "params": [
       {
        "type": "MultivariateRealFunction",
        "name": "evaluationFunction"
       },
       {
        "type": "Comparator",
        "name": "comparator"
       }
      ]
     },
     {
      "type": null,
      "name": "build",
      "params": [
       {
        "type": "double",
        "name": "startPoint"
       }
      ]
     },
     {
      "type": null,
      "name": "evaluate",
      "params": [
       {
        "type": "MultivariateRealFunction",
        "name": "evaluationFunction"
       },
       {
        "type": "Comparator",
        "name": "comparator"
       }
      ]
     },
     {
      "type": null,
      "name": "replaceWorstPoint",
      "params": [
       {
        "type": "RealPointValuePair",
        "name": "pointValuePair"
       },
       {
        "type": "Comparator",
        "name": "comparator"
       }
      ]
     },
     {
      "type": "RealPointValuePair",
      "name": "getPoints",
      "params": []
     },
     {
      "type": "RealPointValuePair",
      "name": "getPoint",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": null,
      "name": "setPoint",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "RealPointValuePair",
        "name": "point"
       }
      ]
     },
     {
      "type": null,
      "name": "setPoints",
      "params": [
       {
        "type": "RealPointValuePair",
        "name": "points"
       }
      ]
     },
     {
      "type": "double",
      "name": "createHypercubeSteps",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "double",
        "name": "sideLength"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.direct",
  "filename": "AbstractSimplex.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "boolean",
      "name": "useLU"
     }
    ],
    "name": "GaussNewtonOptimizer",
    "methods": [
     {
      "type": "VectorialPointValuePair",
      "name": "doOptimize",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.general",
  "filename": "GaussNewtonOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ConjugateGradientFormula",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.optimization.general",
  "filename": "ConjugateGradientFormula.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Preconditioner",
    "methods": [
     {
      "type": "double",
      "name": "precondition",
      "params": [
       {
        "type": "double",
        "name": "point"
       },
       {
        "type": "double",
        "name": "r"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.general",
  "filename": "Preconditioner.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "weightedResidualJacobian"
     },
     {
      "type": "int",
      "name": "cols"
     },
     {
      "type": "int",
      "name": "rows"
     },
     {
      "type": "double",
      "name": "point"
     },
     {
      "type": "double",
      "name": "objective"
     },
     {
      "type": "double",
      "name": "residuals"
     },
     {
      "type": "double",
      "name": "weightedResiduals"
     },
     {
      "type": "double",
      "name": "cost"
     },
     {
      "type": "MultivariateMatrixFunction",
      "name": "jF"
     },
     {
      "type": "int",
      "name": "jacobianEvaluations"
     }
    ],
    "name": "AbstractLeastSquaresOptimizer",
    "methods": [
     {
      "type": "int",
      "name": "getJacobianEvaluations",
      "params": []
     },
     {
      "type": null,
      "name": "updateJacobian",
      "params": []
     },
     {
      "type": null,
      "name": "updateResidualsAndCost",
      "params": []
     },
     {
      "type": "double",
      "name": "getRMS",
      "params": []
     },
     {
      "type": "double",
      "name": "getChiSquare",
      "params": []
     },
     {
      "type": "double",
      "name": "getCovariances",
      "params": []
     },
     {
      "type": "double",
      "name": "guessParametersErrors",
      "params": []
     },
     {
      "type": "VectorialPointValuePair",
      "name": "optimize",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "DifferentiableMultivariateVectorialFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "target"
       },
       {
        "type": "double",
        "name": "weights"
       },
       {
        "type": "double",
        "name": "startPoint"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.general",
  "filename": "AbstractLeastSquaresOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "MultivariateVectorialFunction",
      "name": "gradient"
     }
    ],
    "name": "AbstractScalarDifferentiableOptimizer",
    "methods": [
     {
      "type": "double",
      "name": "computeObjectiveGradient",
      "params": [
       {
        "type": "double",
        "name": "evaluationPoint"
       }
      ]
     },
     {
      "type": "RealPointValuePair",
      "name": "optimize",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "DifferentiableMultivariateRealFunction",
        "name": "f"
       },
       {
        "type": "GoalType",
        "name": "goalType"
       },
       {
        "type": "double",
        "name": "startPoint"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.general",
  "filename": "AbstractScalarDifferentiableOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "solvedCols"
     },
     {
      "type": "double",
      "name": "diagR"
     },
     {
      "type": "double",
      "name": "jacNorm"
     },
     {
      "type": "double",
      "name": "beta"
     },
     {
      "type": "int",
      "name": "permutation"
     },
     {
      "type": "int",
      "name": "rank"
     },
     {
      "type": "double",
      "name": "lmPar"
     },
     {
      "type": "double",
      "name": "lmDir"
     },
     {
      "type": "double",
      "name": "initialStepBoundFactor"
     },
     {
      "type": "double",
      "name": "costRelativeTolerance"
     },
     {
      "type": "double",
      "name": "parRelativeTolerance"
     },
     {
      "type": "double",
      "name": "orthoTolerance"
     },
     {
      "type": "double",
      "name": "qrRankingThreshold"
     }
    ],
    "name": "LevenbergMarquardtOptimizer",
    "methods": [
     {
      "type": "VectorialPointValuePair",
      "name": "doOptimize",
      "params": []
     },
     {
      "type": null,
      "name": "determineLMParameter",
      "params": [
       {
        "type": "double",
        "name": "qy"
       },
       {
        "type": "double",
        "name": "delta"
       },
       {
        "type": "double",
        "name": "diag"
       },
       {
        "type": "double",
        "name": "work1"
       },
       {
        "type": "double",
        "name": "work2"
       },
       {
        "type": "double",
        "name": "work3"
       }
      ]
     },
     {
      "type": null,
      "name": "determineLMDirection",
      "params": [
       {
        "type": "double",
        "name": "qy"
       },
       {
        "type": "double",
        "name": "diag"
       },
       {
        "type": "double",
        "name": "lmDiag"
       },
       {
        "type": "double",
        "name": "work"
       }
      ]
     },
     {
      "type": null,
      "name": "qrDecomposition",
      "params": []
     },
     {
      "type": null,
      "name": "qTy",
      "params": [
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.general",
  "filename": "LevenbergMarquardtOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "ConjugateGradientFormula",
      "name": "updateFormula"
     },
     {
      "type": "Preconditioner",
      "name": "preconditioner"
     },
     {
      "type": "UnivariateRealSolver",
      "name": "solver"
     },
     {
      "type": "double",
      "name": "initialStep"
     },
     {
      "type": "double",
      "name": "point"
     }
    ],
    "name": "NonLinearConjugateGradientOptimizer",
    "methods": [
     {
      "type": null,
      "name": "setPreconditioner",
      "params": [
       {
        "type": "Preconditioner",
        "name": "preconditioner"
       }
      ]
     },
     {
      "type": null,
      "name": "setLineSearchSolver",
      "params": [
       {
        "type": "UnivariateRealSolver",
        "name": "lineSearchSolver"
       }
      ]
     },
     {
      "type": null,
      "name": "setInitialStep",
      "params": [
       {
        "type": "double",
        "name": "initialStep"
       }
      ]
     },
     {
      "type": "RealPointValuePair",
      "name": "doOptimize",
      "params": []
     },
     {
      "type": "double",
      "name": "findUpperBound",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "h"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization.general",
  "filename": "NonLinearConjugateGradientOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "FractionField",
    "methods": [
     {
      "type": "FractionField",
      "name": "getInstance",
      "params": []
     },
     {
      "type": "Fraction",
      "name": "getOne",
      "params": []
     },
     {
      "type": "Fraction",
      "name": "getZero",
      "params": []
     },
     {
      "type": "Object",
      "name": "readResolve",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.fraction",
  "filename": "FractionField.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "NumberFormat",
      "name": "denominatorFormat"
     },
     {
      "type": "NumberFormat",
      "name": "numeratorFormat"
     }
    ],
    "name": "AbstractFormat",
    "methods": [
     {
      "type": "NumberFormat",
      "name": "getDefaultNumberFormat",
      "params": []
     },
     {
      "type": "NumberFormat",
      "name": "getDefaultNumberFormat",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "NumberFormat",
      "name": "getDenominatorFormat",
      "params": []
     },
     {
      "type": "NumberFormat",
      "name": "getNumeratorFormat",
      "params": []
     },
     {
      "type": null,
      "name": "setDenominatorFormat",
      "params": [
       {
        "type": "NumberFormat",
        "name": "format"
       }
      ]
     },
     {
      "type": null,
      "name": "setNumeratorFormat",
      "params": [
       {
        "type": "NumberFormat",
        "name": "format"
       }
      ]
     },
     {
      "type": null,
      "name": "parseAndIgnoreWhitespace",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "char",
      "name": "parseNextCharacter",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "double",
        "name": "value"
       },
       {
        "type": "StringBuffer",
        "name": "buffer"
       },
       {
        "type": "FieldPosition",
        "name": "position"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "long",
        "name": "value"
       },
       {
        "type": "StringBuffer",
        "name": "buffer"
       },
       {
        "type": "FieldPosition",
        "name": "position"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.fraction",
  "filename": "AbstractFormat.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Fraction",
      "name": "TWO"
     },
     {
      "type": "Fraction",
      "name": "ONE"
     },
     {
      "type": "Fraction",
      "name": "ZERO"
     },
     {
      "type": "Fraction",
      "name": "FOUR_FIFTHS"
     },
     {
      "type": "Fraction",
      "name": "ONE_FIFTH"
     },
     {
      "type": "Fraction",
      "name": "ONE_HALF"
     },
     {
      "type": "Fraction",
      "name": "ONE_QUARTER"
     },
     {
      "type": "Fraction",
      "name": "ONE_THIRD"
     },
     {
      "type": "Fraction",
      "name": "THREE_FIFTHS"
     },
     {
      "type": "Fraction",
      "name": "THREE_QUARTERS"
     },
     {
      "type": "Fraction",
      "name": "TWO_FIFTHS"
     },
     {
      "type": "Fraction",
      "name": "TWO_QUARTERS"
     },
     {
      "type": "Fraction",
      "name": "TWO_THIRDS"
     },
     {
      "type": "Fraction",
      "name": "MINUS_ONE"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "denominator"
     },
     {
      "type": "int",
      "name": "numerator"
     }
    ],
    "name": "Fraction",
    "methods": [
     {
      "type": "Fraction",
      "name": "abs",
      "params": []
     },
     {
      "type": "int",
      "name": "compareTo",
      "params": [
       {
        "type": "Fraction",
        "name": "object"
       }
      ]
     },
     {
      "type": "double",
      "name": "doubleValue",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ]
     },
     {
      "type": "float",
      "name": "floatValue",
      "params": []
     },
     {
      "type": "int",
      "name": "getDenominator",
      "params": []
     },
     {
      "type": "int",
      "name": "getNumerator",
      "params": []
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "int",
      "name": "intValue",
      "params": []
     },
     {
      "type": "long",
      "name": "longValue",
      "params": []
     },
     {
      "type": "Fraction",
      "name": "negate",
      "params": []
     },
     {
      "type": "Fraction",
      "name": "reciprocal",
      "params": []
     },
     {
      "type": "Fraction",
      "name": "add",
      "params": [
       {
        "type": "Fraction",
        "name": "fraction"
       }
      ]
     },
     {
      "type": "Fraction",
      "name": "add",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "Fraction",
      "name": "subtract",
      "params": [
       {
        "type": "Fraction",
        "name": "fraction"
       }
      ]
     },
     {
      "type": "Fraction",
      "name": "subtract",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "Fraction",
      "name": "addSub",
      "params": [
       {
        "type": "Fraction",
        "name": "fraction"
       },
       {
        "type": "boolean",
        "name": "isAdd"
       }
      ]
     },
     {
      "type": "Fraction",
      "name": "multiply",
      "params": [
       {
        "type": "Fraction",
        "name": "fraction"
       }
      ]
     },
     {
      "type": "Fraction",
      "name": "multiply",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "Fraction",
      "name": "divide",
      "params": [
       {
        "type": "Fraction",
        "name": "fraction"
       }
      ]
     },
     {
      "type": "Fraction",
      "name": "divide",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "Fraction",
      "name": "getReducedFraction",
      "params": [
       {
        "type": "int",
        "name": "numerator"
       },
       {
        "type": "int",
        "name": "denominator"
       }
      ]
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": "FractionField",
      "name": "getField",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.fraction",
  "filename": "Fraction.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "BigFractionField",
    "methods": [
     {
      "type": "BigFractionField",
      "name": "getInstance",
      "params": []
     },
     {
      "type": "BigFraction",
      "name": "getOne",
      "params": []
     },
     {
      "type": "BigFraction",
      "name": "getZero",
      "params": []
     },
     {
      "type": "Object",
      "name": "readResolve",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.fraction",
  "filename": "BigFractionField.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "FractionConversionException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.fraction",
  "filename": "FractionConversionException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "NumberFormat",
      "name": "wholeFormat"
     }
    ],
    "name": "ProperBigFractionFormat",
    "methods": [
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "BigFraction",
        "name": "fraction"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "NumberFormat",
      "name": "getWholeFormat",
      "params": []
     },
     {
      "type": "BigFraction",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": null,
      "name": "setWholeFormat",
      "params": [
       {
        "type": "NumberFormat",
        "name": "format"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.fraction",
  "filename": "ProperBigFractionFormat.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "BigFractionFormat",
    "methods": [
     {
      "type": "Locale",
      "name": "getAvailableLocales",
      "params": []
     },
     {
      "type": "String",
      "name": "formatBigFraction",
      "params": [
       {
        "type": "BigFraction",
        "name": "f"
       }
      ]
     },
     {
      "type": "BigFractionFormat",
      "name": "getImproperInstance",
      "params": []
     },
     {
      "type": "BigFractionFormat",
      "name": "getImproperInstance",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "BigFractionFormat",
      "name": "getProperInstance",
      "params": []
     },
     {
      "type": "BigFractionFormat",
      "name": "getProperInstance",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "BigFraction",
        "name": "BigFraction"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "Object",
        "name": "obj"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "BigInteger",
      "name": "parseNextBigInteger",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.fraction",
  "filename": "BigFractionFormat.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "NumberFormat",
      "name": "wholeFormat"
     }
    ],
    "name": "ProperFractionFormat",
    "methods": [
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "Fraction",
        "name": "fraction"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "NumberFormat",
      "name": "getWholeFormat",
      "params": []
     },
     {
      "type": "Fraction",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": null,
      "name": "setWholeFormat",
      "params": [
       {
        "type": "NumberFormat",
        "name": "format"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.fraction",
  "filename": "ProperFractionFormat.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "FractionFormat",
    "methods": [
     {
      "type": "Locale",
      "name": "getAvailableLocales",
      "params": []
     },
     {
      "type": "String",
      "name": "formatFraction",
      "params": [
       {
        "type": "Fraction",
        "name": "f"
       }
      ]
     },
     {
      "type": "FractionFormat",
      "name": "getImproperInstance",
      "params": []
     },
     {
      "type": "FractionFormat",
      "name": "getImproperInstance",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "FractionFormat",
      "name": "getProperInstance",
      "params": []
     },
     {
      "type": "FractionFormat",
      "name": "getProperInstance",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "NumberFormat",
      "name": "getDefaultNumberFormat",
      "params": []
     },
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "Fraction",
        "name": "fraction"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "Object",
        "name": "obj"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "Fraction",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       }
      ]
     },
     {
      "type": "Fraction",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.fraction",
  "filename": "FractionFormat.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "BigFraction",
      "name": "TWO"
     },
     {
      "type": "BigFraction",
      "name": "ONE"
     },
     {
      "type": "BigFraction",
      "name": "ZERO"
     },
     {
      "type": "BigFraction",
      "name": "MINUS_ONE"
     },
     {
      "type": "BigFraction",
      "name": "FOUR_FIFTHS"
     },
     {
      "type": "BigFraction",
      "name": "ONE_FIFTH"
     },
     {
      "type": "BigFraction",
      "name": "ONE_HALF"
     },
     {
      "type": "BigFraction",
      "name": "ONE_QUARTER"
     },
     {
      "type": "BigFraction",
      "name": "ONE_THIRD"
     },
     {
      "type": "BigFraction",
      "name": "THREE_FIFTHS"
     },
     {
      "type": "BigFraction",
      "name": "THREE_QUARTERS"
     },
     {
      "type": "BigFraction",
      "name": "TWO_FIFTHS"
     },
     {
      "type": "BigFraction",
      "name": "TWO_QUARTERS"
     },
     {
      "type": "BigFraction",
      "name": "TWO_THIRDS"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "BigInteger",
      "name": "ONE_HUNDRED_DOUBLE"
     },
     {
      "type": "BigInteger",
      "name": "numerator"
     },
     {
      "type": "BigInteger",
      "name": "denominator"
     }
    ],
    "name": "BigFraction",
    "methods": [
     {
      "type": "BigFraction",
      "name": "getReducedFraction",
      "params": [
       {
        "type": "int",
        "name": "numerator"
       },
       {
        "type": "int",
        "name": "denominator"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "abs",
      "params": []
     },
     {
      "type": "BigFraction",
      "name": "add",
      "params": [
       {
        "type": "BigInteger",
        "name": "bg"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "add",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "add",
      "params": [
       {
        "type": "long",
        "name": "l"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "add",
      "params": [
       {
        "type": "BigFraction",
        "name": "fraction"
       }
      ]
     },
     {
      "type": "BigDecimal",
      "name": "bigDecimalValue",
      "params": []
     },
     {
      "type": "BigDecimal",
      "name": "bigDecimalValue",
      "params": [
       {
        "type": "int",
        "name": "roundingMode"
       }
      ]
     },
     {
      "type": "BigDecimal",
      "name": "bigDecimalValue",
      "params": [
       {
        "type": "int",
        "name": "scale"
       },
       {
        "type": "int",
        "name": "roundingMode"
       }
      ]
     },
     {
      "type": "int",
      "name": "compareTo",
      "params": [
       {
        "type": "BigFraction",
        "name": "object"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "divide",
      "params": [
       {
        "type": "BigInteger",
        "name": "bg"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "divide",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "divide",
      "params": [
       {
        "type": "long",
        "name": "l"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "divide",
      "params": [
       {
        "type": "BigFraction",
        "name": "fraction"
       }
      ]
     },
     {
      "type": "double",
      "name": "doubleValue",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ]
     },
     {
      "type": "float",
      "name": "floatValue",
      "params": []
     },
     {
      "type": "BigInteger",
      "name": "getDenominator",
      "params": []
     },
     {
      "type": "int",
      "name": "getDenominatorAsInt",
      "params": []
     },
     {
      "type": "long",
      "name": "getDenominatorAsLong",
      "params": []
     },
     {
      "type": "BigInteger",
      "name": "getNumerator",
      "params": []
     },
     {
      "type": "int",
      "name": "getNumeratorAsInt",
      "params": []
     },
     {
      "type": "long",
      "name": "getNumeratorAsLong",
      "params": []
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "int",
      "name": "intValue",
      "params": []
     },
     {
      "type": "long",
      "name": "longValue",
      "params": []
     },
     {
      "type": "BigFraction",
      "name": "multiply",
      "params": [
       {
        "type": "BigInteger",
        "name": "bg"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "multiply",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "multiply",
      "params": [
       {
        "type": "long",
        "name": "l"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "multiply",
      "params": [
       {
        "type": "BigFraction",
        "name": "fraction"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "negate",
      "params": []
     },
     {
      "type": "double",
      "name": "percentageValue",
      "params": []
     },
     {
      "type": "BigFraction",
      "name": "pow",
      "params": [
       {
        "type": "int",
        "name": "exponent"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "pow",
      "params": [
       {
        "type": "long",
        "name": "exponent"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "pow",
      "params": [
       {
        "type": "BigInteger",
        "name": "exponent"
       }
      ]
     },
     {
      "type": "double",
      "name": "pow",
      "params": [
       {
        "type": "double",
        "name": "exponent"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "reciprocal",
      "params": []
     },
     {
      "type": "BigFraction",
      "name": "reduce",
      "params": []
     },
     {
      "type": "BigFraction",
      "name": "subtract",
      "params": [
       {
        "type": "BigInteger",
        "name": "bg"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "subtract",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "subtract",
      "params": [
       {
        "type": "long",
        "name": "l"
       }
      ]
     },
     {
      "type": "BigFraction",
      "name": "subtract",
      "params": [
       {
        "type": "BigFraction",
        "name": "fraction"
       }
      ]
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": "BigFractionField",
      "name": "getField",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.fraction",
  "filename": "BigFraction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "MultivariateVectorialFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "point"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "MultivariateVectorialFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "MultivariateRealFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "point"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "MultivariateRealFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DifferentiableUnivariateVectorialFunction",
    "methods": [
     {
      "type": "UnivariateVectorialFunction",
      "name": "derivative",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "DifferentiableUnivariateVectorialFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DifferentiableUnivariateRealFunction",
    "methods": [
     {
      "type": "UnivariateRealFunction",
      "name": "derivative",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "DifferentiableUnivariateRealFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ParametricUnivariateRealFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "parameters"
       }
      ]
     },
     {
      "type": "double",
      "name": "gradient",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "parameters"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "ParametricUnivariateRealFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "UnivariateRealFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "UnivariateRealFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FunctionUtils",
    "methods": [
     {
      "type": "UnivariateRealFunction",
      "name": "compose",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       }
      ]
     },
     {
      "type": "UnivariateRealFunction",
      "name": "add",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       }
      ]
     },
     {
      "type": "UnivariateRealFunction",
      "name": "multiply",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       }
      ]
     },
     {
      "type": "UnivariateRealFunction",
      "name": "combine",
      "params": [
       {
        "type": "BivariateRealFunction",
        "name": "combiner"
       },
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "UnivariateRealFunction",
        "name": "g"
       }
      ]
     },
     {
      "type": "MultivariateRealFunction",
      "name": "collector",
      "params": [
       {
        "type": "BivariateRealFunction",
        "name": "combiner"
       },
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "initialValue"
       }
      ]
     },
     {
      "type": "MultivariateRealFunction",
      "name": "collector",
      "params": [
       {
        "type": "BivariateRealFunction",
        "name": "combiner"
       },
       {
        "type": "double",
        "name": "initialValue"
       }
      ]
     },
     {
      "type": "UnivariateRealFunction",
      "name": "fix1stArgument",
      "params": [
       {
        "type": "BivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "fixed"
       }
      ]
     },
     {
      "type": "UnivariateRealFunction",
      "name": "fix2ndArgument",
      "params": [
       {
        "type": "BivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "fixed"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "FunctionUtils.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DifferentiableMultivariateVectorialFunction",
    "methods": [
     {
      "type": "MultivariateMatrixFunction",
      "name": "jacobian",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "DifferentiableMultivariateVectorialFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DifferentiableUnivariateMatrixFunction",
    "methods": [
     {
      "type": "UnivariateMatrixFunction",
      "name": "derivative",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "DifferentiableUnivariateMatrixFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DifferentiableMultivariateRealFunction",
    "methods": [
     {
      "type": "MultivariateRealFunction",
      "name": "partialDerivative",
      "params": [
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "MultivariateVectorialFunction",
      "name": "gradient",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "DifferentiableMultivariateRealFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "UnivariateVectorialFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "UnivariateVectorialFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "TrivariateRealFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "z"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "TrivariateRealFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "UnivariateMatrixFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "UnivariateMatrixFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "MultivariateMatrixFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "point"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "MultivariateMatrixFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "BivariateRealFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "BivariateRealFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DifferentiableUnivariateRealSolver",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.analysis.solvers",
  "filename": "DifferentiableUnivariateRealSolver.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "UnivariateRealSolverUtils",
    "methods": [
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "function"
       },
       {
        "type": "double",
        "name": "x0"
       },
       {
        "type": "double",
        "name": "x1"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "function"
       },
       {
        "type": "double",
        "name": "x0"
       },
       {
        "type": "double",
        "name": "x1"
       },
       {
        "type": "double",
        "name": "absoluteAccuracy"
       }
      ]
     },
     {
      "type": "double",
      "name": "bracket",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "function"
       },
       {
        "type": "double",
        "name": "initial"
       },
       {
        "type": "double",
        "name": "lowerBound"
       },
       {
        "type": "double",
        "name": "upperBound"
       }
      ]
     },
     {
      "type": "double",
      "name": "bracket",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "function"
       },
       {
        "type": "double",
        "name": "initial"
       },
       {
        "type": "double",
        "name": "lowerBound"
       },
       {
        "type": "double",
        "name": "upperBound"
       },
       {
        "type": "int",
        "name": "maximumIterations"
       }
      ]
     },
     {
      "type": "double",
      "name": "midpoint",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isBracketing",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "function"
       },
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "upper"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isSequence",
      "params": [
       {
        "type": "double",
        "name": "start"
       },
       {
        "type": "double",
        "name": "mid"
       },
       {
        "type": "double",
        "name": "end"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyInterval",
      "params": [
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "upper"
       }
      ]
     },
     {
      "type": null,
      "name": "verifySequence",
      "params": [
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "initial"
       },
       {
        "type": "double",
        "name": "upper"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyBracketing",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "function"
       },
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "upper"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.solvers",
  "filename": "UnivariateRealSolverUtils.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "DEFAULT_ABSOLUTE_ACCURACY"
     }
    ],
    "name": "BrentSolver",
    "methods": [
     {
      "type": "double",
      "name": "doSolve",
      "params": []
     },
     {
      "type": "double",
      "name": "brent",
      "params": [
       {
        "type": "double",
        "name": "lo"
       },
       {
        "type": "double",
        "name": "hi"
       },
       {
        "type": "double",
        "name": "fLo"
       },
       {
        "type": "double",
        "name": "fHi"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.solvers",
  "filename": "BrentSolver.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_ABSOLUTE_ACCURACY"
     },
     {
      "type": "ComplexSolver",
      "name": "complexSolver"
     }
    ],
    "name": "LaguerreSolver",
    "methods": [
     {
      "type": "double",
      "name": "doSolve",
      "params": []
     },
     {
      "type": "double",
      "name": "laguerre",
      "params": [
       {
        "type": "double",
        "name": "lo"
       },
       {
        "type": "double",
        "name": "hi"
       },
       {
        "type": "double",
        "name": "fLo"
       },
       {
        "type": "double",
        "name": "fHi"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.solvers",
  "filename": "LaguerreSolver.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "DEFAULT_ABSOLUTE_ACCURACY"
     }
    ],
    "name": "MullerSolver2",
    "methods": [
     {
      "type": "double",
      "name": "doSolve",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.solvers",
  "filename": "MullerSolver2.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_ABSOLUTE_ACCURACY"
     }
    ],
    "name": "SecantSolver",
    "methods": [
     {
      "type": "double",
      "name": "doSolve",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.solvers",
  "filename": "SecantSolver.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "UnivariateRealSolver",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.analysis.solvers",
  "filename": "UnivariateRealSolver.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_RELATIVE_ACCURACY"
     },
     {
      "type": "double",
      "name": "DEFAULT_FUNCTION_VALUE_ACCURACY"
     },
     {
      "type": "double",
      "name": "functionValueAccuracy"
     },
     {
      "type": "double",
      "name": "absoluteAccuracy"
     },
     {
      "type": "double",
      "name": "relativeAccuracy"
     },
     {
      "type": "Incrementor",
      "name": "evaluations"
     },
     {
      "type": "double",
      "name": "searchMin"
     },
     {
      "type": "double",
      "name": "searchMax"
     },
     {
      "type": "double",
      "name": "searchStart"
     },
     {
      "type": "FUNC",
      "name": "function"
     }
    ],
    "name": "BaseAbstractUnivariateRealSolver",
    "methods": [
     {
      "type": "int",
      "name": "getMaxEvaluations",
      "params": []
     },
     {
      "type": "int",
      "name": "getEvaluations",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getStartValue",
      "params": []
     },
     {
      "type": "double",
      "name": "getAbsoluteAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "getRelativeAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "getFunctionValueAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "computeObjectiveValue",
      "params": [
       {
        "type": "double",
        "name": "point"
       }
      ]
     },
     {
      "type": null,
      "name": "setup",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "FUNC",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "double",
        "name": "startValue"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "FUNC",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "double",
        "name": "startValue"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "FUNC",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "FUNC",
        "name": "f"
       },
       {
        "type": "double",
        "name": "startValue"
       }
      ]
     },
     {
      "type": "double",
      "name": "doSolve",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isBracketing",
      "params": [
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "upper"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isSequence",
      "params": [
       {
        "type": "double",
        "name": "start"
       },
       {
        "type": "double",
        "name": "mid"
       },
       {
        "type": "double",
        "name": "end"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyInterval",
      "params": [
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "upper"
       }
      ]
     },
     {
      "type": null,
      "name": "verifySequence",
      "params": [
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "initial"
       },
       {
        "type": "double",
        "name": "upper"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyBracketing",
      "params": [
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "upper"
       }
      ]
     },
     {
      "type": null,
      "name": "incrementEvaluationCount",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.solvers",
  "filename": "BaseAbstractUnivariateRealSolver.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "AbstractUnivariateRealSolver",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.analysis.solvers",
  "filename": "AbstractUnivariateRealSolver.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_ABSOLUTE_ACCURACY"
     }
    ],
    "name": "NewtonSolver",
    "methods": [
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "DifferentiableUnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": "double",
      "name": "doSolve",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.solvers",
  "filename": "NewtonSolver.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_ABSOLUTE_ACCURACY"
     }
    ],
    "name": "BisectionSolver",
    "methods": [
     {
      "type": "double",
      "name": "doSolve",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.solvers",
  "filename": "BisectionSolver.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "UnivariateRealFunction",
      "name": "functionDerivative"
     }
    ],
    "name": "AbstractDifferentiableUnivariateRealSolver",
    "methods": [
     {
      "type": "double",
      "name": "computeDerivativeObjectiveValue",
      "params": [
       {
        "type": "double",
        "name": "point"
       }
      ]
     },
     {
      "type": null,
      "name": "setup",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "DifferentiableUnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "double",
        "name": "startValue"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.solvers",
  "filename": "AbstractDifferentiableUnivariateRealSolver.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_ABSOLUTE_ACCURACY"
     }
    ],
    "name": "RiddersSolver",
    "methods": [
     {
      "type": "double",
      "name": "doSolve",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.solvers",
  "filename": "RiddersSolver.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "DEFAULT_ABSOLUTE_ACCURACY"
     }
    ],
    "name": "MullerSolver",
    "methods": [
     {
      "type": "double",
      "name": "doSolve",
      "params": []
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "double",
        "name": "fMin"
       },
       {
        "type": "double",
        "name": "fMax"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.solvers",
  "filename": "MullerSolver.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "PolynomialFunction",
      "name": "polynomialFunction"
     }
    ],
    "name": "AbstractPolynomialSolver",
    "methods": [
     {
      "type": null,
      "name": "setup",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "PolynomialFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "double",
        "name": "startValue"
       }
      ]
     },
     {
      "type": "double",
      "name": "getCoefficients",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.solvers",
  "filename": "AbstractPolynomialSolver.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "PolynomialSolver",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.analysis.solvers",
  "filename": "PolynomialSolver.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "BaseUnivariateRealSolver",
    "methods": [
     {
      "type": "int",
      "name": "getMaxEvaluations",
      "params": []
     },
     {
      "type": "int",
      "name": "getEvaluations",
      "params": []
     },
     {
      "type": "double",
      "name": "getAbsoluteAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "getRelativeAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "getFunctionValueAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "FUNC",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "FUNC",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "double",
        "name": "startValue"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "int",
        "name": "maxEval"
       },
       {
        "type": "FUNC",
        "name": "f"
       },
       {
        "type": "double",
        "name": "startValue"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.solvers",
  "filename": "BaseUnivariateRealSolver.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "coefficients"
     },
     {
      "type": "double",
      "name": "x"
     },
     {
      "type": "double",
      "name": "y"
     },
     {
      "type": "boolean",
      "name": "coefficientsComputed"
     }
    ],
    "name": "PolynomialFunctionLagrangeForm",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "z"
       }
      ]
     },
     {
      "type": "int",
      "name": "degree",
      "params": []
     },
     {
      "type": "double",
      "name": "getInterpolatingPoints",
      "params": []
     },
     {
      "type": "double",
      "name": "getInterpolatingValues",
      "params": []
     },
     {
      "type": "double",
      "name": "getCoefficients",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "z"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluateInternal",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "z"
       }
      ]
     },
     {
      "type": null,
      "name": "computeCoefficients",
      "params": []
     },
     {
      "type": "boolean",
      "name": "verifyInterpolationArray",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "boolean",
        "name": "abort"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.polynomials",
  "filename": "PolynomialFunctionLagrangeForm.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "coefficients"
     },
     {
      "type": "double",
      "name": "c"
     },
     {
      "type": "double",
      "name": "a"
     },
     {
      "type": "boolean",
      "name": "coefficientsComputed"
     }
    ],
    "name": "PolynomialFunctionNewtonForm",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "z"
       }
      ]
     },
     {
      "type": "int",
      "name": "degree",
      "params": []
     },
     {
      "type": "double",
      "name": "getNewtonCoefficients",
      "params": []
     },
     {
      "type": "double",
      "name": "getCenters",
      "params": []
     },
     {
      "type": "double",
      "name": "getCoefficients",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "c"
       },
       {
        "type": "double",
        "name": "z"
       }
      ]
     },
     {
      "type": null,
      "name": "computeCoefficients",
      "params": []
     },
     {
      "type": null,
      "name": "verifyInputArray",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "c"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.polynomials",
  "filename": "PolynomialFunctionNewtonForm.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "coefficients"
     }
    ],
    "name": "PolynomialFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "degree",
      "params": []
     },
     {
      "type": "double",
      "name": "getCoefficients",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "coefficients"
       },
       {
        "type": "double",
        "name": "argument"
       }
      ]
     },
     {
      "type": "PolynomialFunction",
      "name": "add",
      "params": [
       {
        "type": "PolynomialFunction",
        "name": "p"
       }
      ]
     },
     {
      "type": "PolynomialFunction",
      "name": "subtract",
      "params": [
       {
        "type": "PolynomialFunction",
        "name": "p"
       }
      ]
     },
     {
      "type": "PolynomialFunction",
      "name": "negate",
      "params": []
     },
     {
      "type": "PolynomialFunction",
      "name": "multiply",
      "params": [
       {
        "type": "PolynomialFunction",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "differentiate",
      "params": [
       {
        "type": "double",
        "name": "coefficients"
       }
      ]
     },
     {
      "type": "PolynomialFunction",
      "name": "polynomialDerivative",
      "params": []
     },
     {
      "type": "UnivariateRealFunction",
      "name": "derivative",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": [
       {
        "type": "double",
        "name": "coeff"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "obj"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.polynomials",
  "filename": "PolynomialFunction.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "knots"
     },
     {
      "type": "PolynomialFunction",
      "name": "polynomials"
     },
     {
      "type": "int",
      "name": "n"
     }
    ],
    "name": "PolynomialSplineFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "UnivariateRealFunction",
      "name": "derivative",
      "params": []
     },
     {
      "type": "PolynomialSplineFunction",
      "name": "polynomialSplineDerivative",
      "params": []
     },
     {
      "type": "int",
      "name": "getN",
      "params": []
     },
     {
      "type": "PolynomialFunction",
      "name": "getPolynomials",
      "params": []
     },
     {
      "type": "double",
      "name": "getKnots",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.polynomials",
  "filename": "PolynomialSplineFunction.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "ArrayList",
      "name": "CHEBYSHEV_COEFFICIENTS"
     },
     {
      "type": "ArrayList",
      "name": "HERMITE_COEFFICIENTS"
     },
     {
      "type": "ArrayList",
      "name": "LAGUERRE_COEFFICIENTS"
     },
     {
      "type": "ArrayList",
      "name": "LEGENDRE_COEFFICIENTS"
     }
    ],
    "name": "PolynomialsUtils",
    "methods": [
     {
      "type": "PolynomialFunction",
      "name": "createChebyshevPolynomial",
      "params": [
       {
        "type": "int",
        "name": "degree"
       }
      ]
     },
     {
      "type": "PolynomialFunction",
      "name": "createHermitePolynomial",
      "params": [
       {
        "type": "int",
        "name": "degree"
       }
      ]
     },
     {
      "type": "PolynomialFunction",
      "name": "createLaguerrePolynomial",
      "params": [
       {
        "type": "int",
        "name": "degree"
       }
      ]
     },
     {
      "type": "PolynomialFunction",
      "name": "createLegendrePolynomial",
      "params": [
       {
        "type": "int",
        "name": "degree"
       }
      ]
     },
     {
      "type": "PolynomialFunction",
      "name": "buildPolynomial",
      "params": [
       {
        "type": "int",
        "name": "degree"
       },
       {
        "type": "ArrayList",
        "name": "coefficients"
       },
       {
        "type": "RecurrenceCoefficientsGenerator",
        "name": "generator"
       }
      ]
     },
     {
      "type": null,
      "name": "computeUpToDegree",
      "params": [
       {
        "type": "int",
        "name": "degree"
       },
       {
        "type": "int",
        "name": "maxDegree"
       },
       {
        "type": "RecurrenceCoefficientsGenerator",
        "name": "generator"
       },
       {
        "type": "ArrayList",
        "name": "coefficients"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.polynomials",
  "filename": "PolynomialsUtils.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "absoluteAccuracy"
     },
     {
      "type": "double",
      "name": "relativeAccuracy"
     },
     {
      "type": "int",
      "name": "maximalIterationCount"
     },
     {
      "type": "int",
      "name": "minimalIterationCount"
     },
     {
      "type": "int",
      "name": "defaultMinimalIterationCount"
     },
     {
      "type": "int",
      "name": "iterationCount"
     },
     {
      "type": "boolean",
      "name": "resultComputed"
     },
     {
      "type": "double",
      "name": "result"
     }
    ],
    "name": "UnivariateRealIntegratorImpl",
    "methods": [
     {
      "type": null,
      "name": "setMaximalIterationCount",
      "params": [
       {
        "type": "int",
        "name": "count"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMaximalIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "setAbsoluteAccuracy",
      "params": [
       {
        "type": "double",
        "name": "accuracy"
       }
      ]
     },
     {
      "type": "double",
      "name": "getAbsoluteAccuracy",
      "params": []
     },
     {
      "type": null,
      "name": "setRelativeAccuracy",
      "params": [
       {
        "type": "double",
        "name": "accuracy"
       }
      ]
     },
     {
      "type": "double",
      "name": "getRelativeAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": null,
      "name": "setResult",
      "params": [
       {
        "type": "double",
        "name": "newResult"
       },
       {
        "type": "int",
        "name": "newCount"
       }
      ]
     },
     {
      "type": null,
      "name": "clearResult",
      "params": []
     },
     {
      "type": null,
      "name": "setMinimalIterationCount",
      "params": [
       {
        "type": "int",
        "name": "count"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMinimalIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "resetMinimalIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "verifyInterval",
      "params": [
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "upper"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "resetIterationsCounter",
      "params": []
     },
     {
      "type": null,
      "name": "incrementIterationsCounter",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.integration",
  "filename": "UnivariateRealIntegratorImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "RombergIntegrator",
    "methods": [
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyIterationCount",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.integration",
  "filename": "RombergIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "s"
     }
    ],
    "name": "TrapezoidIntegrator",
    "methods": [
     {
      "type": "double",
      "name": "stage",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyIterationCount",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.integration",
  "filename": "TrapezoidIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "SimpsonIntegrator",
    "methods": [
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyIterationCount",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.integration",
  "filename": "SimpsonIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "UnivariateRealIntegrator",
    "methods": [
     {
      "type": null,
      "name": "setMaximalIterationCount",
      "params": [
       {
        "type": "int",
        "name": "count"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMaximalIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "setAbsoluteAccuracy",
      "params": [
       {
        "type": "double",
        "name": "accuracy"
       }
      ]
     },
     {
      "type": "double",
      "name": "getAbsoluteAccuracy",
      "params": []
     },
     {
      "type": null,
      "name": "setRelativeAccuracy",
      "params": [
       {
        "type": "double",
        "name": "accuracy"
       }
      ]
     },
     {
      "type": "double",
      "name": "getRelativeAccuracy",
      "params": []
     },
     {
      "type": null,
      "name": "setMinimalIterationCount",
      "params": [
       {
        "type": "int",
        "name": "count"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMinimalIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "resetMinimalIterationCount",
      "params": []
     },
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.integration",
  "filename": "UnivariateRealIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "ABSCISSAS_2"
     },
     {
      "type": "double",
      "name": "WEIGHTS_2"
     },
     {
      "type": "double",
      "name": "ABSCISSAS_3"
     },
     {
      "type": "double",
      "name": "WEIGHTS_3"
     },
     {
      "type": "double",
      "name": "ABSCISSAS_4"
     },
     {
      "type": "double",
      "name": "WEIGHTS_4"
     },
     {
      "type": "double",
      "name": "ABSCISSAS_5"
     },
     {
      "type": "double",
      "name": "WEIGHTS_5"
     },
     {
      "type": "double",
      "name": "abscissas"
     },
     {
      "type": "double",
      "name": "weights"
     }
    ],
    "name": "LegendreGaussIntegrator",
    "methods": [
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": "double",
      "name": "stage",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.integration",
  "filename": "LegendreGaussIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "NevilleInterpolator",
    "methods": [
     {
      "type": "PolynomialFunctionLagrangeForm",
      "name": "interpolate",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.interpolation",
  "filename": "NevilleInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "PolynomialFitter",
      "name": "xFitter"
     },
     {
      "type": "PolynomialFitter",
      "name": "yFitter"
     }
    ],
    "name": "SmoothingPolynomialBicubicSplineInterpolator",
    "methods": [
     {
      "type": "BicubicSplineInterpolatingFunction",
      "name": "interpolate",
      "params": [
       {
        "type": "double",
        "name": "xval"
       },
       {
        "type": "double",
        "name": "yval"
       },
       {
        "type": "double",
        "name": "fval"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.interpolation",
  "filename": "SmoothingPolynomialBicubicSplineInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "SplineInterpolator",
    "methods": [
     {
      "type": "PolynomialSplineFunction",
      "name": "interpolate",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.interpolation",
  "filename": "SplineInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "MultivariateRealInterpolator",
    "methods": [
     {
      "type": "MultivariateRealFunction",
      "name": "interpolate",
      "params": [
       {
        "type": "double",
        "name": "xval"
       },
       {
        "type": "double",
        "name": "yval"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.interpolation",
  "filename": "MultivariateRealInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "dimension"
     },
     {
      "type": "List",
      "name": "microsphere"
     },
     {
      "type": "double",
      "name": "brightnessExponent"
     },
     {
      "type": "Map",
      "name": "samples"
     }
    ],
    "name": "MicrosphereInterpolatingFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "point"
       }
      ]
     },
     {
      "type": "double",
      "name": "cosAngle",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       },
       {
        "type": "RealVector",
        "name": "w"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.interpolation",
  "filename": "MicrosphereInterpolatingFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "TricubicSplineInterpolator",
    "methods": [
     {
      "type": "TricubicSplineInterpolatingFunction",
      "name": "interpolate",
      "params": [
       {
        "type": "double",
        "name": "xval"
       },
       {
        "type": "double",
        "name": "yval"
       },
       {
        "type": "double",
        "name": "zval"
       },
       {
        "type": "double",
        "name": "fval"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextIndex",
      "params": [
       {
        "type": "int",
        "name": "i"
       },
       {
        "type": "int",
        "name": "max"
       }
      ]
     },
     {
      "type": "int",
      "name": "previousIndex",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.interpolation",
  "filename": "TricubicSplineInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "TrivariateRealGridInterpolator",
    "methods": [
     {
      "type": "TrivariateRealFunction",
      "name": "interpolate",
      "params": [
       {
        "type": "double",
        "name": "xval"
       },
       {
        "type": "double",
        "name": "yval"
       },
       {
        "type": "double",
        "name": "zval"
       },
       {
        "type": "double",
        "name": "fval"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.interpolation",
  "filename": "TrivariateRealGridInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "AINV"
     },
     {
      "type": "double",
      "name": "xval"
     },
     {
      "type": "double",
      "name": "yval"
     },
     {
      "type": "double",
      "name": "zval"
     },
     {
      "type": "TricubicSplineFunction",
      "name": "splines"
     }
    ],
    "name": "TricubicSplineInterpolatingFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "z"
       }
      ]
     },
     {
      "type": "int",
      "name": "searchIndex",
      "params": [
       {
        "type": "double",
        "name": "c"
       },
       {
        "type": "double",
        "name": "val"
       }
      ]
     },
     {
      "type": "double",
      "name": "computeSplineCoefficients",
      "params": [
       {
        "type": "double",
        "name": "beta"
       }
      ]
     }
    ]
   },
   {
    "fields": [
     {
      "type": "short",
      "name": "N"
     },
     {
      "type": "double",
      "name": "a"
     }
    ],
    "name": "TricubicSplineFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "z"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.interpolation",
  "filename": "TricubicSplineInterpolatingFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "BicubicSplineInterpolator",
    "methods": [
     {
      "type": "BicubicSplineInterpolatingFunction",
      "name": "interpolate",
      "params": [
       {
        "type": "double",
        "name": "xval"
       },
       {
        "type": "double",
        "name": "yval"
       },
       {
        "type": "double",
        "name": "fval"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextIndex",
      "params": [
       {
        "type": "int",
        "name": "i"
       },
       {
        "type": "int",
        "name": "max"
       }
      ]
     },
     {
      "type": "int",
      "name": "previousIndex",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.interpolation",
  "filename": "BicubicSplineInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "DividedDifferenceInterpolator",
    "methods": [
     {
      "type": "PolynomialFunctionNewtonForm",
      "name": "interpolate",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "computeDividedDifference",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.interpolation",
  "filename": "DividedDifferenceInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "BivariateRealGridInterpolator",
    "methods": [
     {
      "type": "BivariateRealFunction",
      "name": "interpolate",
      "params": [
       {
        "type": "double",
        "name": "xval"
       },
       {
        "type": "double",
        "name": "yval"
       },
       {
        "type": "double",
        "name": "fval"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.interpolation",
  "filename": "BivariateRealGridInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "AINV"
     },
     {
      "type": "double",
      "name": "xval"
     },
     {
      "type": "double",
      "name": "yval"
     },
     {
      "type": "BicubicSplineFunction",
      "name": "splines"
     },
     {
      "type": "BivariateRealFunction",
      "name": "partialDerivatives"
     }
    ],
    "name": "BicubicSplineInterpolatingFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "partialDerivativeX",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "partialDerivativeY",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "partialDerivativeXX",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "partialDerivativeYY",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "partialDerivativeXY",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "partialDerivative",
      "params": [
       {
        "type": "int",
        "name": "which"
       },
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": null,
      "name": "computePartialDerivatives",
      "params": []
     },
     {
      "type": "int",
      "name": "searchIndex",
      "params": [
       {
        "type": "double",
        "name": "c"
       },
       {
        "type": "double",
        "name": "val"
       }
      ]
     },
     {
      "type": "double",
      "name": "computeSplineCoefficients",
      "params": [
       {
        "type": "double",
        "name": "beta"
       }
      ]
     }
    ]
   },
   {
    "fields": [
     {
      "type": "short",
      "name": "N"
     },
     {
      "type": "double",
      "name": "a"
     },
     {
      "type": "BivariateRealFunction",
      "name": "partialDerivativeX"
     },
     {
      "type": "BivariateRealFunction",
      "name": "partialDerivativeY"
     },
     {
      "type": "BivariateRealFunction",
      "name": "partialDerivativeXX"
     },
     {
      "type": "BivariateRealFunction",
      "name": "partialDerivativeYY"
     },
     {
      "type": "BivariateRealFunction",
      "name": "partialDerivativeXY"
     }
    ],
    "name": "BicubicSplineFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "apply",
      "params": [
       {
        "type": "double",
        "name": "pX"
       },
       {
        "type": "double",
        "name": "pY"
       },
       {
        "type": "double",
        "name": "coeff"
       }
      ]
     },
     {
      "type": "BivariateRealFunction",
      "name": "partialDerivativeX",
      "params": []
     },
     {
      "type": "BivariateRealFunction",
      "name": "partialDerivativeY",
      "params": []
     },
     {
      "type": "BivariateRealFunction",
      "name": "partialDerivativeXX",
      "params": []
     },
     {
      "type": "BivariateRealFunction",
      "name": "partialDerivativeYY",
      "params": []
     },
     {
      "type": "BivariateRealFunction",
      "name": "partialDerivativeXY",
      "params": []
     },
     {
      "type": null,
      "name": "computePartialDerivatives",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.interpolation",
  "filename": "BicubicSplineInterpolatingFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "UnivariateRealInterpolator",
    "methods": [
     {
      "type": "UnivariateRealFunction",
      "name": "interpolate",
      "params": [
       {
        "type": "double",
        "name": "xval"
       },
       {
        "type": "double",
        "name": "yval"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.interpolation",
  "filename": "UnivariateRealInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "DEFAULT_BANDWIDTH"
     },
     {
      "type": "int",
      "name": "DEFAULT_ROBUSTNESS_ITERS"
     },
     {
      "type": "double",
      "name": "DEFAULT_ACCURACY"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "bandwidth"
     },
     {
      "type": "int",
      "name": "robustnessIters"
     },
     {
      "type": "double",
      "name": "accuracy"
     }
    ],
    "name": "LoessInterpolator",
    "methods": [
     {
      "type": "PolynomialSplineFunction",
      "name": "interpolate",
      "params": [
       {
        "type": "double",
        "name": "xval"
       },
       {
        "type": "double",
        "name": "yval"
       }
      ]
     },
     {
      "type": "double",
      "name": "smooth",
      "params": [
       {
        "type": "double",
        "name": "xval"
       },
       {
        "type": "double",
        "name": "yval"
       },
       {
        "type": "double",
        "name": "weights"
       }
      ]
     },
     {
      "type": "double",
      "name": "smooth",
      "params": [
       {
        "type": "double",
        "name": "xval"
       },
       {
        "type": "double",
        "name": "yval"
       }
      ]
     },
     {
      "type": null,
      "name": "updateBandwidthInterval",
      "params": [
       {
        "type": "double",
        "name": "xval"
       },
       {
        "type": "double",
        "name": "weights"
       },
       {
        "type": "int",
        "name": "i"
       },
       {
        "type": "int",
        "name": "bandwidthInterval"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextNonzero",
      "params": [
       {
        "type": "double",
        "name": "weights"
       },
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "double",
      "name": "tricube",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": null,
      "name": "checkAllFiniteReal",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.interpolation",
  "filename": "LoessInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "DEFAULT_MICROSPHERE_ELEMENTS"
     },
     {
      "type": "int",
      "name": "DEFAULT_BRIGHTNESS_EXPONENT"
     },
     {
      "type": "int",
      "name": "microsphereElements"
     },
     {
      "type": "int",
      "name": "brightnessExponent"
     }
    ],
    "name": "MicrosphereInterpolator",
    "methods": [
     {
      "type": "MultivariateRealFunction",
      "name": "interpolate",
      "params": [
       {
        "type": "double",
        "name": "xval"
       },
       {
        "type": "double",
        "name": "yval"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.interpolation",
  "filename": "MicrosphereInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "LinearInterpolator",
    "methods": [
     {
      "type": "PolynomialSplineFunction",
      "name": "interpolate",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.interpolation",
  "filename": "LinearInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Cosh",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Cosh.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "mean"
     },
     {
      "type": "double",
      "name": "i2s2"
     },
     {
      "type": "double",
      "name": "norm"
     }
    ],
    "name": "Gaussian",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "UnivariateRealFunction",
      "name": "derivative",
      "params": []
     },
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "xMinusMean"
       },
       {
        "type": "double",
        "name": "norm"
       },
       {
        "type": "double",
        "name": "i2s2"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Gaussian.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Identity",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Identity.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Asin",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Asin.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Sinh",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Sinh.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Acos",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Acos.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Cbrt",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Cbrt.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "p"
     }
    ],
    "name": "Power",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Power.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Log1p",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Log1p.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Asinh",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Asinh.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Inverse",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Inverse.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Atan2",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Atan2.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Tan",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Tan.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Atanh",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Atanh.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Max",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Max.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Pow",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Pow.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "a"
     },
     {
      "type": "double",
      "name": "k"
     },
     {
      "type": "double",
      "name": "b"
     },
     {
      "type": "double",
      "name": "oneOverN"
     },
     {
      "type": "double",
      "name": "q"
     },
     {
      "type": "double",
      "name": "m"
     }
    ],
    "name": "Logistic",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "UnivariateRealFunction",
      "name": "derivative",
      "params": []
     },
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "mMinusX"
       },
       {
        "type": "double",
        "name": "k"
       },
       {
        "type": "double",
        "name": "b"
       },
       {
        "type": "double",
        "name": "q"
       },
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "oneOverN"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Logistic.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Minus",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Minus.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Sin",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Sin.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Log",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Log.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Cos",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Cos.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Abs",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Abs.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "lo"
     },
     {
      "type": "double",
      "name": "hi"
     }
    ],
    "name": "Logit",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "UnivariateRealFunction",
      "name": "derivative",
      "params": []
     },
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "lo"
       },
       {
        "type": "double",
        "name": "hi"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Logit.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Exp",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Exp.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Rint",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Rint.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Subtract",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Subtract.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Tanh",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Tanh.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Sqrt",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Sqrt.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Add",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Add.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "amplitude"
     },
     {
      "type": "double",
      "name": "omega"
     },
     {
      "type": "double",
      "name": "phase"
     }
    ],
    "name": "HarmonicOscillator",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "UnivariateRealFunction",
      "name": "derivative",
      "params": []
     },
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "xTimesOmegaPlusPhase"
       },
       {
        "type": "double",
        "name": "amplitude"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "HarmonicOscillator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Divide",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Divide.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "abscissa"
     },
     {
      "type": "double",
      "name": "ordinate"
     }
    ],
    "name": "StepFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "StepFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Acosh",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Acosh.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Multiply",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Multiply.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Expm1",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Expm1.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Log10",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Log10.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Ceil",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Ceil.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Sinc",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Sinc.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "lo"
     },
     {
      "type": "double",
      "name": "hi"
     }
    ],
    "name": "Sigmoid",
    "methods": [
     {
      "type": "UnivariateRealFunction",
      "name": "derivative",
      "params": []
     },
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "lo"
       },
       {
        "type": "double",
        "name": "hi"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Sigmoid.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Floor",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Floor.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "c"
     }
    ],
    "name": "Constant",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Constant.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Min",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Min.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Ulp",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Ulp.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Atan",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Atan.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Signum",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis.function",
  "filename": "Signum.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Complex",
      "name": "I"
     },
     {
      "type": "Complex",
      "name": "NaN"
     },
     {
      "type": "Complex",
      "name": "INF"
     },
     {
      "type": "Complex",
      "name": "ONE"
     },
     {
      "type": "Complex",
      "name": "ZERO"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "imaginary"
     },
     {
      "type": "double",
      "name": "real"
     },
     {
      "type": "boolean",
      "name": "isNaN"
     },
     {
      "type": "boolean",
      "name": "isInfinite"
     }
    ],
    "name": "Complex",
    "methods": [
     {
      "type": "double",
      "name": "abs",
      "params": []
     },
     {
      "type": "Complex",
      "name": "add",
      "params": [
       {
        "type": "Complex",
        "name": "rhs"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "conjugate",
      "params": []
     },
     {
      "type": "Complex",
      "name": "divide",
      "params": [
       {
        "type": "Complex",
        "name": "rhs"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "double",
      "name": "getImaginary",
      "params": []
     },
     {
      "type": "double",
      "name": "getReal",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isNaN",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isInfinite",
      "params": []
     },
     {
      "type": "Complex",
      "name": "multiply",
      "params": [
       {
        "type": "Complex",
        "name": "rhs"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "multiply",
      "params": [
       {
        "type": "double",
        "name": "rhs"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "negate",
      "params": []
     },
     {
      "type": "Complex",
      "name": "subtract",
      "params": [
       {
        "type": "Complex",
        "name": "rhs"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "acos",
      "params": []
     },
     {
      "type": "Complex",
      "name": "asin",
      "params": []
     },
     {
      "type": "Complex",
      "name": "atan",
      "params": []
     },
     {
      "type": "Complex",
      "name": "cos",
      "params": []
     },
     {
      "type": "Complex",
      "name": "cosh",
      "params": []
     },
     {
      "type": "Complex",
      "name": "exp",
      "params": []
     },
     {
      "type": "Complex",
      "name": "log",
      "params": []
     },
     {
      "type": "Complex",
      "name": "pow",
      "params": [
       {
        "type": "Complex",
        "name": "x"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "sin",
      "params": []
     },
     {
      "type": "Complex",
      "name": "sinh",
      "params": []
     },
     {
      "type": "Complex",
      "name": "sqrt",
      "params": []
     },
     {
      "type": "Complex",
      "name": "sqrt1z",
      "params": []
     },
     {
      "type": "Complex",
      "name": "tan",
      "params": []
     },
     {
      "type": "Complex",
      "name": "tanh",
      "params": []
     },
     {
      "type": "double",
      "name": "getArgument",
      "params": []
     },
     {
      "type": "List",
      "name": "nthRoot",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "createComplex",
      "params": [
       {
        "type": "double",
        "name": "realPart"
       },
       {
        "type": "double",
        "name": "imaginaryPart"
       }
      ]
     },
     {
      "type": "Object",
      "name": "readResolve",
      "params": []
     },
     {
      "type": "ComplexField",
      "name": "getField",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.complex",
  "filename": "Complex.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ComplexUtils",
    "methods": [
     {
      "type": "Complex",
      "name": "polar2Complex",
      "params": [
       {
        "type": "double",
        "name": "r"
       },
       {
        "type": "double",
        "name": "theta"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.complex",
  "filename": "ComplexUtils.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "DEFAULT_IMAGINARY_CHARACTER"
     },
     {
      "type": "String",
      "name": "imaginaryCharacter"
     },
     {
      "type": "NumberFormat",
      "name": "imaginaryFormat"
     },
     {
      "type": "NumberFormat",
      "name": "realFormat"
     }
    ],
    "name": "ComplexFormat",
    "methods": [
     {
      "type": "Locale",
      "name": "getAvailableLocales",
      "params": []
     },
     {
      "type": "String",
      "name": "format",
      "params": [
       {
        "type": "Complex",
        "name": "c"
       }
      ]
     },
     {
      "type": "String",
      "name": "format",
      "params": [
       {
        "type": "Double",
        "name": "c"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "Complex",
        "name": "complex"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "Object",
        "name": "obj"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "String",
      "name": "getImaginaryCharacter",
      "params": []
     },
     {
      "type": "NumberFormat",
      "name": "getImaginaryFormat",
      "params": []
     },
     {
      "type": "ComplexFormat",
      "name": "getInstance",
      "params": []
     },
     {
      "type": "ComplexFormat",
      "name": "getInstance",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "ComplexFormat",
      "name": "getInstance",
      "params": [
       {
        "type": "String",
        "name": "imaginaryCharacter"
       },
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "NumberFormat",
      "name": "getRealFormat",
      "params": []
     },
     {
      "type": "Complex",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.complex",
  "filename": "ComplexFormat.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "ComplexField",
    "methods": [
     {
      "type": "ComplexField",
      "name": "getInstance",
      "params": []
     },
     {
      "type": "Complex",
      "name": "getOne",
      "params": []
     },
     {
      "type": "Complex",
      "name": "getZero",
      "params": []
     },
     {
      "type": "Object",
      "name": "readResolve",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.complex",
  "filename": "ComplexField.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "TreeMap",
      "name": "freqTable"
     }
    ],
    "name": "Frequency",
    "methods": [
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "Comparable",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "int",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "long",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "char",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "Iterator",
      "name": "valuesIterator",
      "params": []
     },
     {
      "type": "long",
      "name": "getSumFreq",
      "params": []
     },
     {
      "type": "long",
      "name": "getCount",
      "params": [
       {
        "type": "Comparable",
        "name": "v"
       }
      ]
     },
     {
      "type": "long",
      "name": "getCount",
      "params": [
       {
        "type": "int",
        "name": "v"
       }
      ]
     },
     {
      "type": "long",
      "name": "getCount",
      "params": [
       {
        "type": "long",
        "name": "v"
       }
      ]
     },
     {
      "type": "long",
      "name": "getCount",
      "params": [
       {
        "type": "char",
        "name": "v"
       }
      ]
     },
     {
      "type": "int",
      "name": "getUniqueCount",
      "params": []
     },
     {
      "type": "double",
      "name": "getPct",
      "params": [
       {
        "type": "Comparable",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getPct",
      "params": [
       {
        "type": "int",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getPct",
      "params": [
       {
        "type": "long",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getPct",
      "params": [
       {
        "type": "char",
        "name": "v"
       }
      ]
     },
     {
      "type": "long",
      "name": "getCumFreq",
      "params": [
       {
        "type": "Comparable",
        "name": "v"
       }
      ]
     },
     {
      "type": "long",
      "name": "getCumFreq",
      "params": [
       {
        "type": "int",
        "name": "v"
       }
      ]
     },
     {
      "type": "long",
      "name": "getCumFreq",
      "params": [
       {
        "type": "long",
        "name": "v"
       }
      ]
     },
     {
      "type": "long",
      "name": "getCumFreq",
      "params": [
       {
        "type": "char",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getCumPct",
      "params": [
       {
        "type": "Comparable",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getCumPct",
      "params": [
       {
        "type": "int",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getCumPct",
      "params": [
       {
        "type": "long",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getCumPct",
      "params": [
       {
        "type": "char",
        "name": "v"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "obj"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat",
  "filename": "Frequency.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "UnivariateStatistic",
      "name": "SUM"
     },
     {
      "type": "UnivariateStatistic",
      "name": "SUM_OF_SQUARES"
     },
     {
      "type": "UnivariateStatistic",
      "name": "PRODUCT"
     },
     {
      "type": "UnivariateStatistic",
      "name": "SUM_OF_LOGS"
     },
     {
      "type": "UnivariateStatistic",
      "name": "MIN"
     },
     {
      "type": "UnivariateStatistic",
      "name": "MAX"
     },
     {
      "type": "UnivariateStatistic",
      "name": "MEAN"
     },
     {
      "type": "Variance",
      "name": "VARIANCE"
     },
     {
      "type": "Percentile",
      "name": "PERCENTILE"
     },
     {
      "type": "GeometricMean",
      "name": "GEOMETRIC_MEAN"
     }
    ],
    "name": "StatUtils",
    "methods": [
     {
      "type": "double",
      "name": "sum",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "sum",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "sumSq",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "sumSq",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "product",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "product",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "sumLog",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "sumLog",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "mean",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "mean",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "geometricMean",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "geometricMean",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "variance",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "variance",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "variance",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "mean"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "variance",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "double",
      "name": "max",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "max",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "min",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "min",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "percentile",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "percentile",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       },
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "sumDifference",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "meanDifference",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "varianceDifference",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "meanDifference"
       }
      ]
     },
     {
      "type": "double",
      "name": "normalize",
      "params": [
       {
        "type": "double",
        "name": "sample"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat",
  "filename": "StatUtils.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "StatisticalSummary",
    "methods": [
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getSum",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "StatisticalSummary.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "storedData"
     }
    ],
    "name": "AbstractUnivariateStatistic",
    "methods": [
     {
      "type": null,
      "name": "setData",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "getData",
      "params": []
     },
     {
      "type": "double",
      "name": "getDataRef",
      "params": []
     },
     {
      "type": null,
      "name": "setData",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "copy",
      "params": []
     },
     {
      "type": "boolean",
      "name": "test",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "test",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       },
       {
        "type": "boolean",
        "name": "allowEmpty"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "test",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "weights"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "test",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "weights"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       },
       {
        "type": "boolean",
        "name": "allowEmpty"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "AbstractUnivariateStatistic.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "UnivariateStatistic",
    "methods": [
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "copy",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "UnivariateStatistic.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "SynchronizedDescriptiveStatistics",
    "methods": [
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "apply",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "stat"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "getElement",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "double",
      "name": "getValues",
      "params": []
     },
     {
      "type": "int",
      "name": "getWindowSize",
      "params": []
     },
     {
      "type": null,
      "name": "setWindowSize",
      "params": [
       {
        "type": "int",
        "name": "windowSize"
       }
      ]
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": "SynchronizedDescriptiveStatistics",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "SynchronizedDescriptiveStatistics",
        "name": "source"
       },
       {
        "type": "SynchronizedDescriptiveStatistics",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "SynchronizedDescriptiveStatistics.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "StatisticalMultivariateSummary",
    "methods": [
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getCovariance",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getGeometricMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getSum",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumSq",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumLog",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "StatisticalMultivariateSummary.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "StorelessUnivariateStatistic",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": null,
      "name": "incrementAll",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": null,
      "name": "incrementAll",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "start"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "copy",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "StorelessUnivariateStatistic.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "SummaryStatistics",
      "name": "statisticsPrototype"
     },
     {
      "type": "SummaryStatistics",
      "name": "statistics"
     }
    ],
    "name": "AggregateSummaryStatistics",
    "methods": [
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "double",
      "name": "getSum",
      "params": []
     },
     {
      "type": "double",
      "name": "getVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumOfLogs",
      "params": []
     },
     {
      "type": "double",
      "name": "getGeometricMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumsq",
      "params": []
     },
     {
      "type": "double",
      "name": "getSecondMoment",
      "params": []
     },
     {
      "type": "StatisticalSummary",
      "name": "getSummary",
      "params": []
     },
     {
      "type": "SummaryStatistics",
      "name": "createContributingStatistics",
      "params": []
     },
     {
      "type": "StatisticalSummaryValues",
      "name": "aggregate",
      "params": [
       {
        "type": "Collection",
        "name": "statistics"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "AggregateSummaryStatistics.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "k"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "sumImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "sumSqImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "minImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "maxImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "sumLogImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "geoMeanImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "meanImpl"
     },
     {
      "type": "VectorialCovariance",
      "name": "covarianceImpl"
     }
    ],
    "name": "MultivariateSummaryStatistics",
    "methods": [
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getResults",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "stats"
       }
      ]
     },
     {
      "type": "double",
      "name": "getSum",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumSq",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumLog",
      "params": []
     },
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getCovariance",
      "params": []
     },
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "double",
      "name": "getGeometricMean",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": null,
      "name": "append",
      "params": [
       {
        "type": "StringBuilder",
        "name": "buffer"
       },
       {
        "type": "double",
        "name": "data"
       },
       {
        "type": "String",
        "name": "prefix"
       },
       {
        "type": "String",
        "name": "separator"
       },
       {
        "type": "String",
        "name": "suffix"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "object"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": null,
      "name": "setImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "newImpl"
       },
       {
        "type": "StorelessUnivariateStatistic",
        "name": "oldImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumsqImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumsqImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumsqImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMinImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMinImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "minImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMaxImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMaxImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "maxImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumLogImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumLogImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumLogImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getGeoMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setGeoMeanImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "geoMeanImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMeanImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "meanImpl"
       }
      ]
     },
     {
      "type": null,
      "name": "checkEmpty",
      "params": []
     },
     {
      "type": null,
      "name": "checkDimension",
      "params": [
       {
        "type": "int",
        "name": "dimension"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "MultivariateSummaryStatistics.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "INFINITE_WINDOW"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "SET_QUANTILE_METHOD_NAME"
     },
     {
      "type": "int",
      "name": "windowSize"
     },
     {
      "type": "ResizableDoubleArray",
      "name": "eDA"
     },
     {
      "type": "UnivariateStatistic",
      "name": "meanImpl"
     },
     {
      "type": "UnivariateStatistic",
      "name": "geometricMeanImpl"
     },
     {
      "type": "UnivariateStatistic",
      "name": "kurtosisImpl"
     },
     {
      "type": "UnivariateStatistic",
      "name": "maxImpl"
     },
     {
      "type": "UnivariateStatistic",
      "name": "minImpl"
     },
     {
      "type": "UnivariateStatistic",
      "name": "percentileImpl"
     },
     {
      "type": "UnivariateStatistic",
      "name": "skewnessImpl"
     },
     {
      "type": "UnivariateStatistic",
      "name": "varianceImpl"
     },
     {
      "type": "UnivariateStatistic",
      "name": "sumsqImpl"
     },
     {
      "type": "UnivariateStatistic",
      "name": "sumImpl"
     }
    ],
    "name": "DescriptiveStatistics",
    "methods": [
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "removeMostRecentValue",
      "params": []
     },
     {
      "type": "double",
      "name": "replaceMostRecentValue",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getGeometricMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "double",
      "name": "getSkewness",
      "params": []
     },
     {
      "type": "double",
      "name": "getKurtosis",
      "params": []
     },
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getSum",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumsq",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "int",
      "name": "getWindowSize",
      "params": []
     },
     {
      "type": null,
      "name": "setWindowSize",
      "params": [
       {
        "type": "int",
        "name": "windowSize"
       }
      ]
     },
     {
      "type": "double",
      "name": "getValues",
      "params": []
     },
     {
      "type": "double",
      "name": "getSortedValues",
      "params": []
     },
     {
      "type": "double",
      "name": "getElement",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "double",
      "name": "getPercentile",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": "double",
      "name": "apply",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "stat"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMeanImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "meanImpl"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getGeometricMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setGeometricMeanImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "geometricMeanImpl"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getKurtosisImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setKurtosisImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "kurtosisImpl"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getMaxImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMaxImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "maxImpl"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getMinImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMinImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "minImpl"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getPercentileImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setPercentileImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "percentileImpl"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getSkewnessImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSkewnessImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "skewnessImpl"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getVarianceImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setVarianceImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "varianceImpl"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getSumsqImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumsqImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "sumsqImpl"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getSumImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "sumImpl"
       }
      ]
     },
     {
      "type": "DescriptiveStatistics",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "DescriptiveStatistics",
        "name": "source"
       },
       {
        "type": "DescriptiveStatistics",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "DescriptiveStatistics.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "SecondMoment",
      "name": "secondMoment"
     },
     {
      "type": "Sum",
      "name": "sum"
     },
     {
      "type": "SumOfSquares",
      "name": "sumsq"
     },
     {
      "type": "Min",
      "name": "min"
     },
     {
      "type": "Max",
      "name": "max"
     },
     {
      "type": "SumOfLogs",
      "name": "sumLog"
     },
     {
      "type": "GeometricMean",
      "name": "geoMean"
     },
     {
      "type": "Mean",
      "name": "mean"
     },
     {
      "type": "Variance",
      "name": "variance"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "sumImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "sumsqImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "minImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "maxImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "sumLogImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "geoMeanImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "meanImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "varianceImpl"
     }
    ],
    "name": "SummaryStatistics",
    "methods": [
     {
      "type": "StatisticalSummary",
      "name": "getSummary",
      "params": []
     },
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getSum",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumsq",
      "params": []
     },
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "double",
      "name": "getVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "double",
      "name": "getGeometricMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumOfLogs",
      "params": []
     },
     {
      "type": "double",
      "name": "getSecondMoment",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "object"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumsqImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumsqImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumsqImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMinImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMinImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "minImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMaxImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMaxImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "maxImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumLogImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumLogImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumLogImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getGeoMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setGeoMeanImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "geoMeanImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMeanImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "meanImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getVarianceImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setVarianceImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "varianceImpl"
       }
      ]
     },
     {
      "type": null,
      "name": "checkEmpty",
      "params": []
     },
     {
      "type": "SummaryStatistics",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "SummaryStatistics",
        "name": "source"
       },
       {
        "type": "SummaryStatistics",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "SummaryStatistics.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "SynchronizedMultivariateSummaryStatistics",
    "methods": [
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getSum",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumSq",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumLog",
      "params": []
     },
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getCovariance",
      "params": []
     },
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "double",
      "name": "getGeometricMean",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "object"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumsqImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumsqImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumsqImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMinImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMinImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "minImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMaxImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMaxImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "maxImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumLogImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumLogImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumLogImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getGeoMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setGeoMeanImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "geoMeanImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMeanImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "meanImpl"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "SynchronizedMultivariateSummaryStatistics.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "SynchronizedSummaryStatistics",
    "methods": [
     {
      "type": "StatisticalSummary",
      "name": "getSummary",
      "params": []
     },
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getSum",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumsq",
      "params": []
     },
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "double",
      "name": "getVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "double",
      "name": "getGeometricMean",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "object"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumsqImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumsqImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumsqImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMinImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMinImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "minImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMaxImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMaxImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "maxImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumLogImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumLogImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumLogImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getGeoMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setGeoMeanImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "geoMeanImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMeanImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "meanImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getVarianceImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setVarianceImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "varianceImpl"
       }
      ]
     },
     {
      "type": "SynchronizedSummaryStatistics",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "SynchronizedSummaryStatistics",
        "name": "source"
       },
       {
        "type": "SynchronizedSummaryStatistics",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "SynchronizedSummaryStatistics.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "WeightedEvaluation",
    "methods": [
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "weights"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "weights"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "WeightedEvaluation.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "mean"
     },
     {
      "type": "double",
      "name": "variance"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "double",
      "name": "max"
     },
     {
      "type": "double",
      "name": "min"
     },
     {
      "type": "double",
      "name": "sum"
     }
    ],
    "name": "StatisticalSummaryValues",
    "methods": [
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getSum",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "double",
      "name": "getVariance",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "object"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "StatisticalSummaryValues.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "AbstractStorelessUnivariateStatistic",
    "methods": [
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": null,
      "name": "incrementAll",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": null,
      "name": "incrementAll",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "object"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "AbstractStorelessUnivariateStatistic.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "m3"
     },
     {
      "type": "double",
      "name": "nDevSq"
     }
    ],
    "name": "ThirdMoment",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "ThirdMoment",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "ThirdMoment",
        "name": "source"
       },
       {
        "type": "ThirdMoment",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "ThirdMoment.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "Mean",
      "name": "means"
     }
    ],
    "name": "VectorialMean",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "obj"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "VectorialMean.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "sums"
     },
     {
      "type": "double",
      "name": "productsSums"
     },
     {
      "type": "boolean",
      "name": "isBiasCorrected"
     },
     {
      "type": "long",
      "name": "n"
     }
    ],
    "name": "VectorialCovariance",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "obj"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "VectorialCovariance.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "SecondMoment",
      "name": "moment"
     },
     {
      "type": "boolean",
      "name": "incMoment"
     },
     {
      "type": "boolean",
      "name": "isBiasCorrected"
     }
    ],
    "name": "Variance",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "weights"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "weights"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "mean"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "weights"
       },
       {
        "type": "double",
        "name": "mean"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "weights"
       },
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isBiasCorrected",
      "params": []
     },
     {
      "type": null,
      "name": "setBiasCorrected",
      "params": [
       {
        "type": "boolean",
        "name": "biasCorrected"
       }
      ]
     },
     {
      "type": "Variance",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "Variance",
        "name": "source"
       },
       {
        "type": "Variance",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "Variance.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "m4"
     }
    ],
    "name": "FourthMoment",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "FourthMoment",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "FourthMoment",
        "name": "source"
       },
       {
        "type": "FourthMoment",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "FourthMoment.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "FourthMoment",
      "name": "moment"
     },
     {
      "type": "boolean",
      "name": "incMoment"
     }
    ],
    "name": "Kurtosis",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "Kurtosis",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "Kurtosis",
        "name": "source"
       },
       {
        "type": "Kurtosis",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "Kurtosis.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "ThirdMoment",
      "name": "moment"
     },
     {
      "type": "boolean",
      "name": "incMoment"
     }
    ],
    "name": "Skewness",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "Skewness",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "Skewness",
        "name": "source"
       },
       {
        "type": "Skewness",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "Skewness.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "double",
      "name": "m1"
     },
     {
      "type": "double",
      "name": "dev"
     },
     {
      "type": "double",
      "name": "nDev"
     }
    ],
    "name": "FirstMoment",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "FirstMoment",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "FirstMoment",
        "name": "source"
       },
       {
        "type": "FirstMoment",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "FirstMoment.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "m2"
     }
    ],
    "name": "SecondMoment",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "SecondMoment",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "SecondMoment",
        "name": "source"
       },
       {
        "type": "SecondMoment",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "SecondMoment.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "Variance",
      "name": "variance"
     }
    ],
    "name": "StandardDeviation",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "mean"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isBiasCorrected",
      "params": []
     },
     {
      "type": null,
      "name": "setBiasCorrected",
      "params": [
       {
        "type": "boolean",
        "name": "isBiasCorrected"
       }
      ]
     },
     {
      "type": "StandardDeviation",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "StandardDeviation",
        "name": "source"
       },
       {
        "type": "StandardDeviation",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "StandardDeviation.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "FirstMoment",
      "name": "moment"
     },
     {
      "type": "boolean",
      "name": "incMoment"
     }
    ],
    "name": "Mean",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "weights"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "weights"
       }
      ]
     },
     {
      "type": "Mean",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "Mean",
        "name": "source"
       },
       {
        "type": "Mean",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "Mean.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Direction",
      "name": "UPSIDE_VARIANCE"
     },
     {
      "type": "Direction",
      "name": "DOWNSIDE_VARIANCE"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "boolean",
      "name": "biasCorrected"
     },
     {
      "type": "Direction",
      "name": "varianceDirection"
     }
    ],
    "name": "SemiVariance",
    "methods": [
     {
      "type": "SemiVariance",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "SemiVariance",
        "name": "source"
       },
       {
        "type": "SemiVariance",
        "name": "dest"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "start"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "Direction",
        "name": "direction"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "cutoff"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "cutoff"
       },
       {
        "type": "Direction",
        "name": "direction"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "cutoff"
       },
       {
        "type": "Direction",
        "name": "direction"
       },
       {
        "type": "boolean",
        "name": "corrected"
       },
       {
        "type": "int",
        "name": "start"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isBiasCorrected",
      "params": []
     },
     {
      "type": null,
      "name": "setBiasCorrected",
      "params": [
       {
        "type": "boolean",
        "name": "biasCorrected"
       }
      ]
     },
     {
      "type": "Direction",
      "name": "getVarianceDirection",
      "params": []
     },
     {
      "type": null,
      "name": "setVarianceDirection",
      "params": [
       {
        "type": "Direction",
        "name": "varianceDirection"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "SemiVariance.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "sumOfLogs"
     }
    ],
    "name": "GeometricMean",
    "methods": [
     {
      "type": "GeometricMean",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": null,
      "name": "setSumLogImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumLogImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumLogImpl",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "GeometricMean",
        "name": "source"
       },
       {
        "type": "GeometricMean",
        "name": "dest"
       }
      ]
     },
     {
      "type": null,
      "name": "checkEmpty",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "GeometricMean.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "double",
      "name": "value"
     }
    ],
    "name": "Max",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "Max",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "Max",
        "name": "source"
       },
       {
        "type": "Max",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.rank",
  "filename": "Max.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "Median",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.rank",
  "filename": "Median.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "double",
      "name": "value"
     }
    ],
    "name": "Min",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "Min",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "Min",
        "name": "source"
       },
       {
        "type": "Min",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.rank",
  "filename": "Min.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "MIN_SELECT_SIZE"
     },
     {
      "type": "int",
      "name": "MAX_CACHED_LEVELS"
     },
     {
      "type": "double",
      "name": "quantile"
     },
     {
      "type": "int",
      "name": "cachedPivots"
     }
    ],
    "name": "Percentile",
    "methods": [
     {
      "type": null,
      "name": "setData",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": null,
      "name": "setData",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "start"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       },
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "select",
      "params": [
       {
        "type": "double",
        "name": "work"
       },
       {
        "type": "int",
        "name": "pivotsHeap"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "int",
      "name": "medianOf3",
      "params": [
       {
        "type": "double",
        "name": "work"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "end"
       }
      ]
     },
     {
      "type": "int",
      "name": "partition",
      "params": [
       {
        "type": "double",
        "name": "work"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "end"
       },
       {
        "type": "int",
        "name": "pivot"
       }
      ]
     },
     {
      "type": null,
      "name": "insertionSort",
      "params": [
       {
        "type": "double",
        "name": "work"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "end"
       }
      ]
     },
     {
      "type": "double",
      "name": "getQuantile",
      "params": []
     },
     {
      "type": null,
      "name": "setQuantile",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "Percentile",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "Percentile",
        "name": "source"
       },
       {
        "type": "Percentile",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.rank",
  "filename": "Percentile.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "double",
      "name": "value"
     }
    ],
    "name": "Product",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "weights"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "weights"
       }
      ]
     },
     {
      "type": "Product",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "Product",
        "name": "source"
       },
       {
        "type": "Product",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.summary",
  "filename": "Product.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "double",
      "name": "value"
     }
    ],
    "name": "SumOfSquares",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "SumOfSquares",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "SumOfSquares",
        "name": "source"
       },
       {
        "type": "SumOfSquares",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.summary",
  "filename": "SumOfSquares.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "double",
      "name": "value"
     }
    ],
    "name": "Sum",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "weights"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "weights"
       }
      ]
     },
     {
      "type": "Sum",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "Sum",
        "name": "source"
       },
       {
        "type": "Sum",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.summary",
  "filename": "Sum.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "n"
     },
     {
      "type": "double",
      "name": "value"
     }
    ],
    "name": "SumOfLogs",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "SumOfLogs",
      "name": "copy",
      "params": []
     },
     {
      "type": null,
      "name": "copy",
      "params": [
       {
        "type": "SumOfLogs",
        "name": "source"
       },
       {
        "type": "SumOfLogs",
        "name": "dest"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.summary",
  "filename": "SumOfLogs.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "point"
     }
    ],
    "name": "EuclideanIntegerPoint",
    "methods": [
     {
      "type": "int",
      "name": "getPoint",
      "params": []
     },
     {
      "type": "double",
      "name": "distanceFrom",
      "params": [
       {
        "type": "EuclideanIntegerPoint",
        "name": "p"
       }
      ]
     },
     {
      "type": "EuclideanIntegerPoint",
      "name": "centroidOf",
      "params": [
       {
        "type": "Collection",
        "name": "points"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.clustering",
  "filename": "EuclideanIntegerPoint.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Clusterable",
    "methods": [
     {
      "type": "double",
      "name": "distanceFrom",
      "params": [
       {
        "type": "T",
        "name": "p"
       }
      ]
     },
     {
      "type": "T",
      "name": "centroidOf",
      "params": [
       {
        "type": "Collection",
        "name": "p"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.clustering",
  "filename": "Clusterable.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Random",
      "name": "random"
     },
     {
      "type": "EmptyClusterStrategy",
      "name": "emptyStrategy"
     }
    ],
    "name": "KMeansPlusPlusClusterer",
    "methods": [
     {
      "type": "List",
      "name": "cluster",
      "params": [
       {
        "type": "Collection",
        "name": "points"
       },
       {
        "type": "int",
        "name": "k"
       },
       {
        "type": "int",
        "name": "maxIterations"
       }
      ]
     },
     {
      "type": null,
      "name": "assignPointsToClusters",
      "params": [
       {
        "type": "Collection",
        "name": "clusters"
       },
       {
        "type": "Collection",
        "name": "points"
       }
      ]
     },
     {
      "type": "List",
      "name": "chooseInitialCenters",
      "params": [
       {
        "type": "Collection",
        "name": "points"
       },
       {
        "type": "int",
        "name": "k"
       },
       {
        "type": "Random",
        "name": "random"
       }
      ]
     },
     {
      "type": "T",
      "name": "getPointFromLargestVarianceCluster",
      "params": [
       {
        "type": "Collection",
        "name": "clusters"
       }
      ]
     },
     {
      "type": "T",
      "name": "getPointFromLargestNumberCluster",
      "params": [
       {
        "type": "Collection",
        "name": "clusters"
       }
      ]
     },
     {
      "type": "T",
      "name": "getFarthestPoint",
      "params": [
       {
        "type": "Collection",
        "name": "clusters"
       }
      ]
     },
     {
      "type": "Cluster",
      "name": "getNearestCluster",
      "params": [
       {
        "type": "Collection",
        "name": "clusters"
       },
       {
        "type": "T",
        "name": "point"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.clustering",
  "filename": "KMeansPlusPlusClusterer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "List",
      "name": "points"
     },
     {
      "type": "T",
      "name": "center"
     }
    ],
    "name": "Cluster",
    "methods": [
     {
      "type": null,
      "name": "addPoint",
      "params": [
       {
        "type": "T",
        "name": "point"
       }
      ]
     },
     {
      "type": "List",
      "name": "getPoints",
      "params": []
     },
     {
      "type": "T",
      "name": "getCenter",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.clustering",
  "filename": "Cluster.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "RealMatrix",
      "name": "X"
     },
     {
      "type": "RealVector",
      "name": "Y"
     },
     {
      "type": "boolean",
      "name": "noIntercept"
     }
    ],
    "name": "AbstractMultipleLinearRegression",
    "methods": [
     {
      "type": "boolean",
      "name": "isNoIntercept",
      "params": []
     },
     {
      "type": null,
      "name": "setNoIntercept",
      "params": [
       {
        "type": "boolean",
        "name": "noIntercept"
       }
      ]
     },
     {
      "type": null,
      "name": "newSampleData",
      "params": [
       {
        "type": "double",
        "name": "data"
       },
       {
        "type": "int",
        "name": "nobs"
       },
       {
        "type": "int",
        "name": "nvars"
       }
      ]
     },
     {
      "type": null,
      "name": "newYSampleData",
      "params": [
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": null,
      "name": "newXSampleData",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": null,
      "name": "validateSampleData",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": null,
      "name": "validateCovarianceData",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "covariance"
       }
      ]
     },
     {
      "type": "double",
      "name": "estimateRegressionParameters",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateResiduals",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateRegressionParametersVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateRegressionParametersStandardErrors",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateRegressandVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateErrorVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateRegressionStandardError",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "calculateBeta",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "calculateBetaVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateYVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateErrorVariance",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "calculateResiduals",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.regression",
  "filename": "AbstractMultipleLinearRegression.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "RealMatrix",
      "name": "Omega"
     },
     {
      "type": "RealMatrix",
      "name": "OmegaInverse"
     }
    ],
    "name": "GLSMultipleLinearRegression",
    "methods": [
     {
      "type": null,
      "name": "newSampleData",
      "params": [
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "covariance"
       }
      ]
     },
     {
      "type": null,
      "name": "newCovarianceData",
      "params": [
       {
        "type": "double",
        "name": "omega"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "getOmegaInverse",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "calculateBeta",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "calculateBetaVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateErrorVariance",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.regression",
  "filename": "GLSMultipleLinearRegression.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "TDistribution",
      "name": "distribution"
     },
     {
      "type": "double",
      "name": "sumX"
     },
     {
      "type": "double",
      "name": "sumXX"
     },
     {
      "type": "double",
      "name": "sumY"
     },
     {
      "type": "double",
      "name": "sumYY"
     },
     {
      "type": "double",
      "name": "sumXY"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "double",
      "name": "xbar"
     },
     {
      "type": "double",
      "name": "ybar"
     }
    ],
    "name": "SimpleRegression",
    "methods": [
     {
      "type": null,
      "name": "addData",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": null,
      "name": "removeData",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": null,
      "name": "addData",
      "params": [
       {
        "type": "double",
        "name": "data"
       }
      ]
     },
     {
      "type": null,
      "name": "removeData",
      "params": [
       {
        "type": "double",
        "name": "data"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "predict",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "getIntercept",
      "params": []
     },
     {
      "type": "double",
      "name": "getSlope",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumSquaredErrors",
      "params": []
     },
     {
      "type": "double",
      "name": "getTotalSumSquares",
      "params": []
     },
     {
      "type": "double",
      "name": "getXSumSquares",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumOfCrossProducts",
      "params": []
     },
     {
      "type": "double",
      "name": "getRegressionSumSquares",
      "params": []
     },
     {
      "type": "double",
      "name": "getMeanSquareError",
      "params": []
     },
     {
      "type": "double",
      "name": "getR",
      "params": []
     },
     {
      "type": "double",
      "name": "getRSquare",
      "params": []
     },
     {
      "type": "double",
      "name": "getInterceptStdErr",
      "params": []
     },
     {
      "type": "double",
      "name": "getSlopeStdErr",
      "params": []
     },
     {
      "type": "double",
      "name": "getSlopeConfidenceInterval",
      "params": []
     },
     {
      "type": "double",
      "name": "getSlopeConfidenceInterval",
      "params": [
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "getSignificance",
      "params": []
     },
     {
      "type": "double",
      "name": "getIntercept",
      "params": [
       {
        "type": "double",
        "name": "slope"
       }
      ]
     },
     {
      "type": "double",
      "name": "getRegressionSumSquares",
      "params": [
       {
        "type": "double",
        "name": "slope"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.regression",
  "filename": "SimpleRegression.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "QRDecomposition",
      "name": "qr"
     }
    ],
    "name": "OLSMultipleLinearRegression",
    "methods": [
     {
      "type": null,
      "name": "newSampleData",
      "params": [
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": null,
      "name": "newSampleData",
      "params": [
       {
        "type": "double",
        "name": "data"
       },
       {
        "type": "int",
        "name": "nobs"
       },
       {
        "type": "int",
        "name": "nvars"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "calculateHat",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateTotalSumOfSquares",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateResidualSumOfSquares",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateRSquared",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateAdjustedRSquared",
      "params": []
     },
     {
      "type": null,
      "name": "newXSampleData",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "calculateBeta",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "calculateBetaVariance",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.regression",
  "filename": "OLSMultipleLinearRegression.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "MultipleLinearRegression",
    "methods": [
     {
      "type": "double",
      "name": "estimateRegressionParameters",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateRegressionParametersVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateResiduals",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateRegressandVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateRegressionParametersStandardErrors",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.regression",
  "filename": "MultipleLinearRegression.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "WilcoxonSignedRankTest",
    "methods": [
     {
      "type": "double",
      "name": "wilcoxonSignedRank",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "wilcoxonSignedRankTest",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "boolean",
        "name": "exactPValue"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "WilcoxonSignedRankTest.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "OneWayAnova",
    "methods": [
     {
      "type": "double",
      "name": "anovaFValue",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       }
      ]
     },
     {
      "type": "double",
      "name": "anovaPValue",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "anovaTest",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "OneWayAnova.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "TTest",
      "name": "T_TEST"
     },
     {
      "type": "ChiSquareTest",
      "name": "CHI_SQUARE_TEST"
     },
     {
      "type": "UnknownDistributionChiSquareTest",
      "name": "UNKNOWN_DISTRIBUTION_CHI_SQUARE_TEST"
     },
     {
      "type": "OneWayAnova",
      "name": "ONE_WAY_ANANOVA"
     }
    ],
    "name": "TestUtils",
    "methods": [
     {
      "type": "double",
      "name": "homoscedasticT",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticT",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "double",
      "name": "pairedT",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "pairedTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "pairedTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "observed"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "sample"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "sample"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquare",
      "params": [
       {
        "type": "double",
        "name": "expected"
       },
       {
        "type": "long",
        "name": "observed"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquare",
      "params": [
       {
        "type": "long",
        "name": "counts"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "double",
        "name": "expected"
       },
       {
        "type": "long",
        "name": "observed"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "double",
        "name": "expected"
       },
       {
        "type": "long",
        "name": "observed"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "long",
        "name": "counts"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "long",
        "name": "counts"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareDataSetsComparison",
      "params": [
       {
        "type": "long",
        "name": "observed1"
       },
       {
        "type": "long",
        "name": "observed2"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareTestDataSetsComparison",
      "params": [
       {
        "type": "long",
        "name": "observed1"
       },
       {
        "type": "long",
        "name": "observed2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "chiSquareTestDataSetsComparison",
      "params": [
       {
        "type": "long",
        "name": "observed1"
       },
       {
        "type": "long",
        "name": "observed2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "oneWayAnovaFValue",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       }
      ]
     },
     {
      "type": "double",
      "name": "oneWayAnovaPValue",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "oneWayAnovaTest",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "TestUtils.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "ChiSquaredDistribution",
      "name": "distribution"
     }
    ],
    "name": "ChiSquareTestImpl",
    "methods": [
     {
      "type": "double",
      "name": "chiSquare",
      "params": [
       {
        "type": "double",
        "name": "expected"
       },
       {
        "type": "long",
        "name": "observed"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "double",
        "name": "expected"
       },
       {
        "type": "long",
        "name": "observed"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "double",
        "name": "expected"
       },
       {
        "type": "long",
        "name": "observed"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquare",
      "params": [
       {
        "type": "long",
        "name": "counts"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "long",
        "name": "counts"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "long",
        "name": "counts"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareDataSetsComparison",
      "params": [
       {
        "type": "long",
        "name": "observed1"
       },
       {
        "type": "long",
        "name": "observed2"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareTestDataSetsComparison",
      "params": [
       {
        "type": "long",
        "name": "observed1"
       },
       {
        "type": "long",
        "name": "observed2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "chiSquareTestDataSetsComparison",
      "params": [
       {
        "type": "long",
        "name": "observed1"
       },
       {
        "type": "long",
        "name": "observed2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": null,
      "name": "checkArray",
      "params": [
       {
        "type": "long",
        "name": "in"
       }
      ]
     },
     {
      "type": null,
      "name": "checkRectangular",
      "params": [
       {
        "type": "long",
        "name": "in"
       }
      ]
     },
     {
      "type": null,
      "name": "checkPositive",
      "params": [
       {
        "type": "double",
        "name": "in"
       }
      ]
     },
     {
      "type": null,
      "name": "checkNonNegative",
      "params": [
       {
        "type": "long",
        "name": "in"
       }
      ]
     },
     {
      "type": null,
      "name": "checkNonNegative",
      "params": [
       {
        "type": "long",
        "name": "in"
       }
      ]
     },
     {
      "type": null,
      "name": "setDistribution",
      "params": [
       {
        "type": "ChiSquaredDistribution",
        "name": "value"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "ChiSquareTestImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "UnknownDistributionChiSquareTest",
    "methods": [
     {
      "type": "double",
      "name": "chiSquareDataSetsComparison",
      "params": [
       {
        "type": "long",
        "name": "observed1"
       },
       {
        "type": "long",
        "name": "observed2"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareTestDataSetsComparison",
      "params": [
       {
        "type": "long",
        "name": "observed1"
       },
       {
        "type": "long",
        "name": "observed2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "chiSquareTestDataSetsComparison",
      "params": [
       {
        "type": "long",
        "name": "observed1"
       },
       {
        "type": "long",
        "name": "observed2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "UnknownDistributionChiSquareTest.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "NaturalRanking",
      "name": "naturalRanking"
     }
    ],
    "name": "WilcoxonSignedRankTestImpl",
    "methods": [
     {
      "type": null,
      "name": "ensureDataConformance",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "calculateDifferences",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "calculateAbsoluteDifferences",
      "params": [
       {
        "type": "double",
        "name": "z"
       }
      ]
     },
     {
      "type": "double",
      "name": "wilcoxonSignedRank",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "calculateExactPValue",
      "params": [
       {
        "type": "double",
        "name": "Wmax"
       },
       {
        "type": "int",
        "name": "N"
       }
      ]
     },
     {
      "type": "double",
      "name": "calculateAsymptoticPValue",
      "params": [
       {
        "type": "double",
        "name": "Wmin"
       },
       {
        "type": "int",
        "name": "N"
       }
      ]
     },
     {
      "type": "double",
      "name": "wilcoxonSignedRankTest",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "boolean",
        "name": "exactPValue"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "WilcoxonSignedRankTestImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "OneWayAnovaImpl",
    "methods": [
     {
      "type": "double",
      "name": "anovaFValue",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       }
      ]
     },
     {
      "type": "double",
      "name": "anovaPValue",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "anovaTest",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "AnovaStats",
      "name": "anovaStats",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "OneWayAnovaImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "MannWhitneyUTest",
    "methods": [
     {
      "type": "double",
      "name": "mannWhitneyU",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "mannWhitneyUTest",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "MannWhitneyUTest.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "TTestImpl",
    "methods": [
     {
      "type": "double",
      "name": "pairedT",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "pairedTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "pairedTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "observed"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticT",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticT",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "sample"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "sample"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "df",
      "params": [
       {
        "type": "double",
        "name": "v1"
       },
       {
        "type": "double",
        "name": "v2"
       },
       {
        "type": "double",
        "name": "n1"
       },
       {
        "type": "double",
        "name": "n2"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "m"
       },
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "v"
       },
       {
        "type": "double",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "m1"
       },
       {
        "type": "double",
        "name": "m2"
       },
       {
        "type": "double",
        "name": "v1"
       },
       {
        "type": "double",
        "name": "v2"
       },
       {
        "type": "double",
        "name": "n1"
       },
       {
        "type": "double",
        "name": "n2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticT",
      "params": [
       {
        "type": "double",
        "name": "m1"
       },
       {
        "type": "double",
        "name": "m2"
       },
       {
        "type": "double",
        "name": "v1"
       },
       {
        "type": "double",
        "name": "v2"
       },
       {
        "type": "double",
        "name": "n1"
       },
       {
        "type": "double",
        "name": "n2"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "m"
       },
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "v"
       },
       {
        "type": "double",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "m1"
       },
       {
        "type": "double",
        "name": "m2"
       },
       {
        "type": "double",
        "name": "v1"
       },
       {
        "type": "double",
        "name": "v2"
       },
       {
        "type": "double",
        "name": "n1"
       },
       {
        "type": "double",
        "name": "n2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "double",
        "name": "m1"
       },
       {
        "type": "double",
        "name": "m2"
       },
       {
        "type": "double",
        "name": "v1"
       },
       {
        "type": "double",
        "name": "v2"
       },
       {
        "type": "double",
        "name": "n1"
       },
       {
        "type": "double",
        "name": "n2"
       }
      ]
     },
     {
      "type": null,
      "name": "checkSignificanceLevel",
      "params": [
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": null,
      "name": "checkSampleData",
      "params": [
       {
        "type": "double",
        "name": "data"
       }
      ]
     },
     {
      "type": null,
      "name": "checkSampleData",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "stat"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "TTestImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "TTest",
    "methods": [
     {
      "type": "double",
      "name": "pairedT",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "pairedTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "pairedTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "observed"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticT",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticT",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "sample"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "sample"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "TTest.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ChiSquareTest",
    "methods": [
     {
      "type": "double",
      "name": "chiSquare",
      "params": [
       {
        "type": "double",
        "name": "expected"
       },
       {
        "type": "long",
        "name": "observed"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "double",
        "name": "expected"
       },
       {
        "type": "long",
        "name": "observed"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "double",
        "name": "expected"
       },
       {
        "type": "long",
        "name": "observed"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquare",
      "params": [
       {
        "type": "long",
        "name": "counts"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "long",
        "name": "counts"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "long",
        "name": "counts"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "ChiSquareTest.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "NaturalRanking",
      "name": "naturalRanking"
     }
    ],
    "name": "MannWhitneyUTestImpl",
    "methods": [
     {
      "type": null,
      "name": "ensureDataConformance",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "concatenateSamples",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "mannWhitneyU",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "calculateAsymptoticPValue",
      "params": [
       {
        "type": "double",
        "name": "Umin"
       },
       {
        "type": "int",
        "name": "n1"
       },
       {
        "type": "int",
        "name": "n2"
       }
      ]
     },
     {
      "type": "double",
      "name": "mannWhitneyUTest",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "MannWhitneyUTestImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "RankingAlgorithm",
    "methods": [
     {
      "type": "double",
      "name": "rank",
      "params": [
       {
        "type": "double",
        "name": "data"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.ranking",
  "filename": "RankingAlgorithm.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "NaNStrategy",
      "name": "DEFAULT_NAN_STRATEGY"
     },
     {
      "type": "TiesStrategy",
      "name": "DEFAULT_TIES_STRATEGY"
     },
     {
      "type": "NaNStrategy",
      "name": "nanStrategy"
     },
     {
      "type": "TiesStrategy",
      "name": "tiesStrategy"
     },
     {
      "type": "RandomData",
      "name": "randomData"
     }
    ],
    "name": "NaturalRanking",
    "methods": [
     {
      "type": "NaNStrategy",
      "name": "getNanStrategy",
      "params": []
     },
     {
      "type": "TiesStrategy",
      "name": "getTiesStrategy",
      "params": []
     },
     {
      "type": "double",
      "name": "rank",
      "params": [
       {
        "type": "double",
        "name": "data"
       }
      ]
     },
     {
      "type": "IntDoublePair",
      "name": "removeNaNs",
      "params": [
       {
        "type": "IntDoublePair",
        "name": "ranks"
       }
      ]
     },
     {
      "type": null,
      "name": "recodeNaNs",
      "params": [
       {
        "type": "IntDoublePair",
        "name": "ranks"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "containsNaNs",
      "params": [
       {
        "type": "IntDoublePair",
        "name": "ranks"
       }
      ]
     },
     {
      "type": null,
      "name": "resolveTie",
      "params": [
       {
        "type": "double",
        "name": "ranks"
       },
       {
        "type": "List",
        "name": "tiesTrace"
       }
      ]
     },
     {
      "type": null,
      "name": "fill",
      "params": [
       {
        "type": "double",
        "name": "data"
       },
       {
        "type": "List",
        "name": "tiesTrace"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "restoreNaNs",
      "params": [
       {
        "type": "double",
        "name": "ranks"
       },
       {
        "type": "List",
        "name": "nanPositions"
       }
      ]
     },
     {
      "type": "List",
      "name": "getNanPositions",
      "params": [
       {
        "type": "IntDoublePair",
        "name": "ranks"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.ranking",
  "filename": "NaturalRanking.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "NaNStrategy",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.stat.ranking",
  "filename": "NaNStrategy.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "TiesStrategy",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.stat.ranking",
  "filename": "TiesStrategy.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "RealMatrix",
      "name": "data"
     },
     {
      "type": "RankingAlgorithm",
      "name": "rankingAlgorithm"
     },
     {
      "type": "PearsonsCorrelation",
      "name": "rankCorrelation"
     }
    ],
    "name": "SpearmansCorrelation",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "getCorrelationMatrix",
      "params": []
     },
     {
      "type": "PearsonsCorrelation",
      "name": "getRankCorrelation",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "computeCorrelationMatrix",
      "params": [
       {
        "type": "RealMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "computeCorrelationMatrix",
      "params": [
       {
        "type": "double",
        "name": "matrix"
       }
      ]
     },
     {
      "type": "double",
      "name": "correlation",
      "params": [
       {
        "type": "double",
        "name": "xArray"
       },
       {
        "type": "double",
        "name": "yArray"
       }
      ]
     },
     {
      "type": null,
      "name": "rankTransform",
      "params": [
       {
        "type": "RealMatrix",
        "name": "matrix"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.correlation",
  "filename": "SpearmansCorrelation.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "RealMatrix",
      "name": "correlationMatrix"
     },
     {
      "type": "int",
      "name": "nObs"
     }
    ],
    "name": "PearsonsCorrelation",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "getCorrelationMatrix",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getCorrelationStandardErrors",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getCorrelationPValues",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "computeCorrelationMatrix",
      "params": [
       {
        "type": "RealMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "computeCorrelationMatrix",
      "params": [
       {
        "type": "double",
        "name": "data"
       }
      ]
     },
     {
      "type": "double",
      "name": "correlation",
      "params": [
       {
        "type": "double",
        "name": "xArray"
       },
       {
        "type": "double",
        "name": "yArray"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "covarianceToCorrelation",
      "params": [
       {
        "type": "RealMatrix",
        "name": "covarianceMatrix"
       }
      ]
     },
     {
      "type": null,
      "name": "checkSufficientData",
      "params": [
       {
        "type": "RealMatrix",
        "name": "matrix"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.correlation",
  "filename": "PearsonsCorrelation.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "RealMatrix",
      "name": "covarianceMatrix"
     },
     {
      "type": "int",
      "name": "n"
     }
    ],
    "name": "Covariance",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "getCovarianceMatrix",
      "params": []
     },
     {
      "type": "int",
      "name": "getN",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "computeCovarianceMatrix",
      "params": [
       {
        "type": "RealMatrix",
        "name": "matrix"
       },
       {
        "type": "boolean",
        "name": "biasCorrected"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "computeCovarianceMatrix",
      "params": [
       {
        "type": "RealMatrix",
        "name": "matrix"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "computeCovarianceMatrix",
      "params": [
       {
        "type": "double",
        "name": "data"
       },
       {
        "type": "boolean",
        "name": "biasCorrected"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "computeCovarianceMatrix",
      "params": [
       {
        "type": "double",
        "name": "data"
       }
      ]
     },
     {
      "type": "double",
      "name": "covariance",
      "params": [
       {
        "type": "double",
        "name": "xArray"
       },
       {
        "type": "double",
        "name": "yArray"
       },
       {
        "type": "boolean",
        "name": "biasCorrected"
       }
      ]
     },
     {
      "type": "double",
      "name": "covariance",
      "params": [
       {
        "type": "double",
        "name": "xArray"
       },
       {
        "type": "double",
        "name": "yArray"
       }
      ]
     },
     {
      "type": null,
      "name": "checkSufficientData",
      "params": [
       {
        "type": "RealMatrix",
        "name": "matrix"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.correlation",
  "filename": "Covariance.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FirstOrderIntegrator",
    "methods": [
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "FirstOrderIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ExtendedFirstOrderDifferentialEquations",
    "methods": [
     {
      "type": "int",
      "name": "getMainSetDimension",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "ExtendedFirstOrderDifferentialEquations.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "initialTime"
     },
     {
      "type": "double",
      "name": "finalTime"
     },
     {
      "type": "boolean",
      "name": "forward"
     },
     {
      "type": "int",
      "name": "index"
     },
     {
      "type": "List",
      "name": "steps"
     }
    ],
    "name": "ContinuousOutputModel",
    "methods": [
     {
      "type": null,
      "name": "append",
      "params": [
       {
        "type": "ContinuousOutputModel",
        "name": "model"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "requiresDenseOutput",
      "params": []
     },
     {
      "type": null,
      "name": "reset",
      "params": []
     },
     {
      "type": null,
      "name": "handleStep",
      "params": [
       {
        "type": "StepInterpolator",
        "name": "interpolator"
       },
       {
        "type": "boolean",
        "name": "isLast"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialTime",
      "params": []
     },
     {
      "type": "double",
      "name": "getFinalTime",
      "params": []
     },
     {
      "type": "double",
      "name": "getInterpolatedTime",
      "params": []
     },
     {
      "type": null,
      "name": "setInterpolatedTime",
      "params": [
       {
        "type": "double",
        "name": "time"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInterpolatedState",
      "params": []
     },
     {
      "type": "int",
      "name": "locatePoint",
      "params": [
       {
        "type": "double",
        "name": "time"
       },
       {
        "type": "StepInterpolator",
        "name": "interval"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "ContinuousOutputModel.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Collection",
      "name": "stepHandlers"
     },
     {
      "type": "double",
      "name": "stepStart"
     },
     {
      "type": "double",
      "name": "stepSize"
     },
     {
      "type": "boolean",
      "name": "isLastStep"
     },
     {
      "type": "boolean",
      "name": "resetOccurred"
     },
     {
      "type": "Collection",
      "name": "eventsStates"
     },
     {
      "type": "boolean",
      "name": "statesInitialized"
     },
     {
      "type": "String",
      "name": "name"
     },
     {
      "type": "int",
      "name": "maxEvaluations"
     },
     {
      "type": "int",
      "name": "evaluations"
     },
     {
      "type": "FirstOrderDifferentialEquations",
      "name": "equations"
     }
    ],
    "name": "AbstractIntegrator",
    "methods": [
     {
      "type": "String",
      "name": "getName",
      "params": []
     },
     {
      "type": null,
      "name": "addStepHandler",
      "params": [
       {
        "type": "StepHandler",
        "name": "handler"
       }
      ]
     },
     {
      "type": "Collection",
      "name": "getStepHandlers",
      "params": []
     },
     {
      "type": null,
      "name": "clearStepHandlers",
      "params": []
     },
     {
      "type": null,
      "name": "addEventHandler",
      "params": [
       {
        "type": "EventHandler",
        "name": "handler"
       },
       {
        "type": "double",
        "name": "maxCheckInterval"
       },
       {
        "type": "double",
        "name": "convergence"
       },
       {
        "type": "int",
        "name": "maxIterationCount"
       }
      ]
     },
     {
      "type": "Collection",
      "name": "getEventHandlers",
      "params": []
     },
     {
      "type": null,
      "name": "clearEventHandlers",
      "params": []
     },
     {
      "type": "boolean",
      "name": "requiresDenseOutput",
      "params": []
     },
     {
      "type": "double",
      "name": "getCurrentStepStart",
      "params": []
     },
     {
      "type": "double",
      "name": "getCurrentSignedStepsize",
      "params": []
     },
     {
      "type": null,
      "name": "setMaxEvaluations",
      "params": [
       {
        "type": "int",
        "name": "maxEvaluations"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMaxEvaluations",
      "params": []
     },
     {
      "type": "int",
      "name": "getEvaluations",
      "params": []
     },
     {
      "type": null,
      "name": "resetEvaluations",
      "params": []
     },
     {
      "type": null,
      "name": "setEquations",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       }
      ]
     },
     {
      "type": null,
      "name": "computeDerivatives",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "yDot"
       }
      ]
     },
     {
      "type": null,
      "name": "setStateInitialized",
      "params": [
       {
        "type": "boolean",
        "name": "stateInitialized"
       }
      ]
     },
     {
      "type": "double",
      "name": "acceptStep",
      "params": [
       {
        "type": "AbstractStepInterpolator",
        "name": "interpolator"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "yDot"
       },
       {
        "type": "double",
        "name": "tEnd"
       }
      ]
     },
     {
      "type": null,
      "name": "sanityChecks",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "ode"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "AbstractIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "SecondOrderDifferentialEquations",
    "methods": [
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": null,
      "name": "computeSecondDerivatives",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "yDot"
       },
       {
        "type": "double",
        "name": "yDDot"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "SecondOrderDifferentialEquations.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "SecondOrderIntegrator",
    "methods": [
     {
      "type": null,
      "name": "integrate",
      "params": [
       {
        "type": "SecondOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "yDot0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "yDot"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "SecondOrderIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "SecondOrderDifferentialEquations",
      "name": "equations"
     },
     {
      "type": "int",
      "name": "dimension"
     },
     {
      "type": "double",
      "name": "z"
     },
     {
      "type": "double",
      "name": "zDot"
     },
     {
      "type": "double",
      "name": "zDDot"
     }
    ],
    "name": "FirstOrderConverter",
    "methods": [
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": null,
      "name": "computeDerivatives",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "yDot"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "FirstOrderConverter.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ODEIntegrator",
    "methods": [
     {
      "type": "String",
      "name": "getName",
      "params": []
     },
     {
      "type": null,
      "name": "addStepHandler",
      "params": [
       {
        "type": "StepHandler",
        "name": "handler"
       }
      ]
     },
     {
      "type": "Collection",
      "name": "getStepHandlers",
      "params": []
     },
     {
      "type": null,
      "name": "clearStepHandlers",
      "params": []
     },
     {
      "type": null,
      "name": "addEventHandler",
      "params": [
       {
        "type": "EventHandler",
        "name": "handler"
       },
       {
        "type": "double",
        "name": "maxCheckInterval"
       },
       {
        "type": "double",
        "name": "convergence"
       },
       {
        "type": "int",
        "name": "maxIterationCount"
       }
      ]
     },
     {
      "type": "Collection",
      "name": "getEventHandlers",
      "params": []
     },
     {
      "type": null,
      "name": "clearEventHandlers",
      "params": []
     },
     {
      "type": "double",
      "name": "getCurrentStepStart",
      "params": []
     },
     {
      "type": "double",
      "name": "getCurrentSignedStepsize",
      "params": []
     },
     {
      "type": null,
      "name": "setMaxEvaluations",
      "params": [
       {
        "type": "int",
        "name": "maxEvaluations"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMaxEvaluations",
      "params": []
     },
     {
      "type": "int",
      "name": "getEvaluations",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "ODEIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FirstOrderDifferentialEquations",
    "methods": [
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": null,
      "name": "computeDerivatives",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "yDot"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "FirstOrderDifferentialEquations.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "IntegratorException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "IntegratorException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "scaled"
     },
     {
      "type": "Array2DRowRealMatrix",
      "name": "nordsieck"
     },
     {
      "type": "FirstOrderIntegrator",
      "name": "starter"
     },
     {
      "type": "int",
      "name": "nSteps"
     },
     {
      "type": "double",
      "name": "exp"
     },
     {
      "type": "double",
      "name": "safety"
     },
     {
      "type": "double",
      "name": "minReduction"
     },
     {
      "type": "double",
      "name": "maxGrowth"
     }
    ],
    "name": "MultistepIntegrator",
    "methods": [
     {
      "type": "ODEIntegrator",
      "name": "getStarterIntegrator",
      "params": []
     },
     {
      "type": null,
      "name": "setStarterIntegrator",
      "params": [
       {
        "type": "FirstOrderIntegrator",
        "name": "starterIntegrator"
       }
      ]
     },
     {
      "type": null,
      "name": "start",
      "params": [
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       }
      ]
     },
     {
      "type": "Array2DRowRealMatrix",
      "name": "initializeHighOrderDerivatives",
      "params": [
       {
        "type": "double",
        "name": "first"
       },
       {
        "type": "double",
        "name": "multistep"
       }
      ]
     },
     {
      "type": "double",
      "name": "getMinReduction",
      "params": []
     },
     {
      "type": null,
      "name": "setMinReduction",
      "params": [
       {
        "type": "double",
        "name": "minReduction"
       }
      ]
     },
     {
      "type": "double",
      "name": "getMaxGrowth",
      "params": []
     },
     {
      "type": null,
      "name": "setMaxGrowth",
      "params": [
       {
        "type": "double",
        "name": "maxGrowth"
       }
      ]
     },
     {
      "type": "double",
      "name": "getSafety",
      "params": []
     },
     {
      "type": null,
      "name": "setSafety",
      "params": [
       {
        "type": "double",
        "name": "safety"
       }
      ]
     },
     {
      "type": "double",
      "name": "computeStepGrowShrinkFactor",
      "params": [
       {
        "type": "double",
        "name": "error"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "MultistepIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "EventException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.ode.events",
  "filename": "EventException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "STOP"
     },
     {
      "type": "int",
      "name": "RESET_STATE"
     },
     {
      "type": "int",
      "name": "RESET_DERIVATIVES"
     },
     {
      "type": "int",
      "name": "CONTINUE"
     }
    ],
    "name": "EventHandler",
    "methods": [
     {
      "type": "double",
      "name": "g",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "int",
      "name": "eventOccurred",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "boolean",
        "name": "increasing"
       }
      ]
     },
     {
      "type": null,
      "name": "resetState",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.events",
  "filename": "EventHandler.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "EventHandler",
      "name": "handler"
     },
     {
      "type": "double",
      "name": "maxCheckInterval"
     },
     {
      "type": "double",
      "name": "convergence"
     },
     {
      "type": "int",
      "name": "maxIterationCount"
     },
     {
      "type": "double",
      "name": "t0"
     },
     {
      "type": "double",
      "name": "g0"
     },
     {
      "type": "boolean",
      "name": "g0Positive"
     },
     {
      "type": "boolean",
      "name": "pendingEvent"
     },
     {
      "type": "double",
      "name": "pendingEventTime"
     },
     {
      "type": "double",
      "name": "previousEventTime"
     },
     {
      "type": "boolean",
      "name": "forward"
     },
     {
      "type": "boolean",
      "name": "increasing"
     },
     {
      "type": "int",
      "name": "nextAction"
     }
    ],
    "name": "EventState",
    "methods": [
     {
      "type": "EventHandler",
      "name": "getEventHandler",
      "params": []
     },
     {
      "type": "double",
      "name": "getMaxCheckInterval",
      "params": []
     },
     {
      "type": "double",
      "name": "getConvergence",
      "params": []
     },
     {
      "type": "int",
      "name": "getMaxIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "reinitializeBegin",
      "params": [
       {
        "type": "StepInterpolator",
        "name": "interpolator"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "evaluateStep",
      "params": [
       {
        "type": "StepInterpolator",
        "name": "interpolator"
       }
      ]
     },
     {
      "type": "double",
      "name": "getEventTime",
      "params": []
     },
     {
      "type": null,
      "name": "stepAccepted",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "stop",
      "params": []
     },
     {
      "type": "boolean",
      "name": "reset",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.events",
  "filename": "EventState.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "StepHandler",
    "methods": [
     {
      "type": "boolean",
      "name": "requiresDenseOutput",
      "params": []
     },
     {
      "type": null,
      "name": "reset",
      "params": []
     },
     {
      "type": null,
      "name": "handleStep",
      "params": [
       {
        "type": "StepInterpolator",
        "name": "interpolator"
       },
       {
        "type": "boolean",
        "name": "isLast"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.sampling",
  "filename": "StepHandler.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DummyStepHandler",
    "methods": [
     {
      "type": "DummyStepHandler",
      "name": "getInstance",
      "params": []
     },
     {
      "type": "boolean",
      "name": "requiresDenseOutput",
      "params": []
     },
     {
      "type": null,
      "name": "reset",
      "params": []
     },
     {
      "type": null,
      "name": "handleStep",
      "params": [
       {
        "type": "StepInterpolator",
        "name": "interpolator"
       },
       {
        "type": "boolean",
        "name": "isLast"
       }
      ]
     },
     {
      "type": "Object",
      "name": "readResolve",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.sampling",
  "filename": "DummyStepHandler.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "currentDerivative"
     }
    ],
    "name": "DummyStepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "computeInterpolatedStateAndDerivatives",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     },
     {
      "type": null,
      "name": "writeExternal",
      "params": [
       {
        "type": "ObjectOutput",
        "name": "out"
       }
      ]
     },
     {
      "type": null,
      "name": "readExternal",
      "params": [
       {
        "type": "ObjectInput",
        "name": "in"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.sampling",
  "filename": "DummyStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FixedStepHandler",
    "methods": [
     {
      "type": null,
      "name": "handleStep",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "yDot"
       },
       {
        "type": "boolean",
        "name": "isLast"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.sampling",
  "filename": "FixedStepHandler.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "h"
     },
     {
      "type": "double",
      "name": "currentState"
     },
     {
      "type": "double",
      "name": "interpolatedTime"
     },
     {
      "type": "double",
      "name": "interpolatedState"
     },
     {
      "type": "double",
      "name": "interpolatedDerivatives"
     },
     {
      "type": "double",
      "name": "globalPreviousTime"
     },
     {
      "type": "double",
      "name": "globalCurrentTime"
     },
     {
      "type": "double",
      "name": "softPreviousTime"
     },
     {
      "type": "double",
      "name": "softCurrentTime"
     },
     {
      "type": "boolean",
      "name": "finalized"
     },
     {
      "type": "boolean",
      "name": "forward"
     },
     {
      "type": "boolean",
      "name": "dirtyState"
     }
    ],
    "name": "AbstractStepInterpolator",
    "methods": [
     {
      "type": null,
      "name": "reinitialize",
      "params": [
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "boolean",
        "name": "isForward"
       }
      ]
     },
     {
      "type": "StepInterpolator",
      "name": "copy",
      "params": []
     },
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "shift",
      "params": []
     },
     {
      "type": null,
      "name": "storeTime",
      "params": [
       {
        "type": "double",
        "name": "t"
       }
      ]
     },
     {
      "type": null,
      "name": "setSoftPreviousTime",
      "params": [
       {
        "type": "double",
        "name": "softPreviousTime"
       }
      ]
     },
     {
      "type": null,
      "name": "setSoftCurrentTime",
      "params": [
       {
        "type": "double",
        "name": "softCurrentTime"
       }
      ]
     },
     {
      "type": "double",
      "name": "getGlobalPreviousTime",
      "params": []
     },
     {
      "type": "double",
      "name": "getGlobalCurrentTime",
      "params": []
     },
     {
      "type": "double",
      "name": "getPreviousTime",
      "params": []
     },
     {
      "type": "double",
      "name": "getCurrentTime",
      "params": []
     },
     {
      "type": "double",
      "name": "getInterpolatedTime",
      "params": []
     },
     {
      "type": null,
      "name": "setInterpolatedTime",
      "params": [
       {
        "type": "double",
        "name": "time"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isForward",
      "params": []
     },
     {
      "type": null,
      "name": "computeInterpolatedStateAndDerivatives",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInterpolatedState",
      "params": []
     },
     {
      "type": "double",
      "name": "getInterpolatedDerivatives",
      "params": []
     },
     {
      "type": null,
      "name": "finalizeStep",
      "params": []
     },
     {
      "type": null,
      "name": "doFinalize",
      "params": []
     },
     {
      "type": null,
      "name": "writeExternal",
      "params": [
       {
        "type": "ObjectOutput",
        "name": "out"
       }
      ]
     },
     {
      "type": null,
      "name": "readExternal",
      "params": [
       {
        "type": "ObjectInput",
        "name": "in"
       }
      ]
     },
     {
      "type": null,
      "name": "writeBaseExternal",
      "params": [
       {
        "type": "ObjectOutput",
        "name": "out"
       }
      ]
     },
     {
      "type": "double",
      "name": "readBaseExternal",
      "params": [
       {
        "type": "ObjectInput",
        "name": "in"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.sampling",
  "filename": "AbstractStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "StepInterpolator",
    "methods": [
     {
      "type": "double",
      "name": "getPreviousTime",
      "params": []
     },
     {
      "type": "double",
      "name": "getCurrentTime",
      "params": []
     },
     {
      "type": "double",
      "name": "getInterpolatedTime",
      "params": []
     },
     {
      "type": null,
      "name": "setInterpolatedTime",
      "params": [
       {
        "type": "double",
        "name": "time"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInterpolatedState",
      "params": []
     },
     {
      "type": "double",
      "name": "getInterpolatedDerivatives",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isForward",
      "params": []
     },
     {
      "type": "StepInterpolator",
      "name": "copy",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.sampling",
  "filename": "StepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "h"
     },
     {
      "type": "FixedStepHandler",
      "name": "handler"
     },
     {
      "type": "double",
      "name": "lastTime"
     },
     {
      "type": "double",
      "name": "lastState"
     },
     {
      "type": "double",
      "name": "lastDerivatives"
     },
     {
      "type": "boolean",
      "name": "forward"
     }
    ],
    "name": "StepNormalizer",
    "methods": [
     {
      "type": "boolean",
      "name": "requiresDenseOutput",
      "params": []
     },
     {
      "type": null,
      "name": "reset",
      "params": []
     },
     {
      "type": null,
      "name": "handleStep",
      "params": [
       {
        "type": "StepInterpolator",
        "name": "interpolator"
       },
       {
        "type": "boolean",
        "name": "isLast"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.sampling",
  "filename": "StepNormalizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "stateVariation"
     },
     {
      "type": "double",
      "name": "scalingH"
     },
     {
      "type": "double",
      "name": "referenceTime"
     },
     {
      "type": "double",
      "name": "scaled"
     },
     {
      "type": "Array2DRowRealMatrix",
      "name": "nordsieck"
     }
    ],
    "name": "NordsieckStepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "reinitialize",
      "params": [
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "boolean",
        "name": "forward"
       }
      ]
     },
     {
      "type": null,
      "name": "reinitialize",
      "params": [
       {
        "type": "double",
        "name": "time"
       },
       {
        "type": "double",
        "name": "stepSize"
       },
       {
        "type": "double",
        "name": "scaledDerivative"
       },
       {
        "type": "Array2DRowRealMatrix",
        "name": "nordsieckVector"
       }
      ]
     },
     {
      "type": null,
      "name": "rescale",
      "params": [
       {
        "type": "double",
        "name": "stepSize"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInterpolatedStateVariation",
      "params": []
     },
     {
      "type": null,
      "name": "computeInterpolatedStateAndDerivatives",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     },
     {
      "type": null,
      "name": "writeExternal",
      "params": [
       {
        "type": "ObjectOutput",
        "name": "out"
       }
      ]
     },
     {
      "type": null,
      "name": "readExternal",
      "params": [
       {
        "type": "ObjectInput",
        "name": "in"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.sampling",
  "filename": "NordsieckStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "y0Dot"
     },
     {
      "type": "double",
      "name": "y1"
     },
     {
      "type": "double",
      "name": "y1Dot"
     },
     {
      "type": "double",
      "name": "yMidDots"
     },
     {
      "type": "double",
      "name": "polynoms"
     },
     {
      "type": "double",
      "name": "errfac"
     },
     {
      "type": "int",
      "name": "currentDegree"
     }
    ],
    "name": "GraggBulirschStoerStepInterpolator",
    "methods": [
     {
      "type": null,
      "name": "resetTables",
      "params": [
       {
        "type": "int",
        "name": "maxDegree"
       }
      ]
     },
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "computeCoefficients",
      "params": [
       {
        "type": "int",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "h"
       }
      ]
     },
     {
      "type": "double",
      "name": "estimateError",
      "params": [
       {
        "type": "double",
        "name": "scale"
       }
      ]
     },
     {
      "type": null,
      "name": "computeInterpolatedStateAndDerivatives",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     },
     {
      "type": null,
      "name": "writeExternal",
      "params": [
       {
        "type": "ObjectOutput",
        "name": "out"
       }
      ]
     },
     {
      "type": null,
      "name": "readExternal",
      "params": [
       {
        "type": "ObjectInput",
        "name": "in"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "GraggBulirschStoerStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "B_01"
     },
     {
      "type": "double",
      "name": "B_06"
     },
     {
      "type": "double",
      "name": "B_07"
     },
     {
      "type": "double",
      "name": "B_08"
     },
     {
      "type": "double",
      "name": "B_09"
     },
     {
      "type": "double",
      "name": "B_10"
     },
     {
      "type": "double",
      "name": "B_11"
     },
     {
      "type": "double",
      "name": "B_12"
     },
     {
      "type": "double",
      "name": "C14"
     },
     {
      "type": "double",
      "name": "K14_01"
     },
     {
      "type": "double",
      "name": "K14_06"
     },
     {
      "type": "double",
      "name": "K14_07"
     },
     {
      "type": "double",
      "name": "K14_08"
     },
     {
      "type": "double",
      "name": "K14_09"
     },
     {
      "type": "double",
      "name": "K14_10"
     },
     {
      "type": "double",
      "name": "K14_11"
     },
     {
      "type": "double",
      "name": "K14_12"
     },
     {
      "type": "double",
      "name": "K14_13"
     },
     {
      "type": "double",
      "name": "C15"
     },
     {
      "type": "double",
      "name": "K15_01"
     },
     {
      "type": "double",
      "name": "K15_06"
     },
     {
      "type": "double",
      "name": "K15_07"
     },
     {
      "type": "double",
      "name": "K15_08"
     },
     {
      "type": "double",
      "name": "K15_09"
     },
     {
      "type": "double",
      "name": "K15_10"
     },
     {
      "type": "double",
      "name": "K15_11"
     },
     {
      "type": "double",
      "name": "K15_12"
     },
     {
      "type": "double",
      "name": "K15_13"
     },
     {
      "type": "double",
      "name": "K15_14"
     },
     {
      "type": "double",
      "name": "C16"
     },
     {
      "type": "double",
      "name": "K16_01"
     },
     {
      "type": "double",
      "name": "K16_06"
     },
     {
      "type": "double",
      "name": "K16_07"
     },
     {
      "type": "double",
      "name": "K16_08"
     },
     {
      "type": "double",
      "name": "K16_09"
     },
     {
      "type": "double",
      "name": "K16_10"
     },
     {
      "type": "double",
      "name": "K16_11"
     },
     {
      "type": "double",
      "name": "K16_12"
     },
     {
      "type": "double",
      "name": "K16_13"
     },
     {
      "type": "double",
      "name": "K16_14"
     },
     {
      "type": "double",
      "name": "K16_15"
     },
     {
      "type": "double",
      "name": "D"
     },
     {
      "type": "double",
      "name": "yDotKLast"
     },
     {
      "type": "double",
      "name": "v"
     },
     {
      "type": "boolean",
      "name": "vectorsInitialized"
     }
    ],
    "name": "DormandPrince853StepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "reinitialize",
      "params": [
       {
        "type": "AbstractIntegrator",
        "name": "integrator"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "yDotK"
       },
       {
        "type": "boolean",
        "name": "forward"
       }
      ]
     },
     {
      "type": null,
      "name": "storeTime",
      "params": [
       {
        "type": "double",
        "name": "t"
       }
      ]
     },
     {
      "type": null,
      "name": "computeInterpolatedStateAndDerivatives",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     },
     {
      "type": null,
      "name": "doFinalize",
      "params": []
     },
     {
      "type": null,
      "name": "writeExternal",
      "params": [
       {
        "type": "ObjectOutput",
        "name": "out"
       }
      ]
     },
     {
      "type": null,
      "name": "readExternal",
      "params": [
       {
        "type": "ObjectInput",
        "name": "in"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "DormandPrince853StepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "yDotK"
     },
     {
      "type": "AbstractIntegrator",
      "name": "integrator"
     }
    ],
    "name": "RungeKuttaStepInterpolator",
    "methods": [
     {
      "type": null,
      "name": "reinitialize",
      "params": [
       {
        "type": "AbstractIntegrator",
        "name": "rkIntegrator"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "yDotArray"
       },
       {
        "type": "boolean",
        "name": "forward"
       }
      ]
     },
     {
      "type": null,
      "name": "writeExternal",
      "params": [
       {
        "type": "ObjectOutput",
        "name": "out"
       }
      ]
     },
     {
      "type": null,
      "name": "readExternal",
      "params": [
       {
        "type": "ObjectInput",
        "name": "in"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "RungeKuttaStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "String",
      "name": "METHOD_NAME"
     }
    ],
    "name": "AdamsMoultonIntegrator",
    "methods": [
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "AdamsMoultonIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "scalAbsoluteTolerance"
     },
     {
      "type": "double",
      "name": "scalRelativeTolerance"
     },
     {
      "type": "double",
      "name": "vecAbsoluteTolerance"
     },
     {
      "type": "double",
      "name": "vecRelativeTolerance"
     },
     {
      "type": "int",
      "name": "mainSetDimension"
     },
     {
      "type": "double",
      "name": "initialStep"
     },
     {
      "type": "double",
      "name": "minStep"
     },
     {
      "type": "double",
      "name": "maxStep"
     }
    ],
    "name": "AdaptiveStepsizeIntegrator",
    "methods": [
     {
      "type": null,
      "name": "setInitialStepSize",
      "params": [
       {
        "type": "double",
        "name": "initialStepSize"
       }
      ]
     },
     {
      "type": null,
      "name": "sanityChecks",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "initializeStep",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "boolean",
        "name": "forward"
       },
       {
        "type": "int",
        "name": "order"
       },
       {
        "type": "double",
        "name": "scale"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "yDot0"
       },
       {
        "type": "double",
        "name": "y1"
       },
       {
        "type": "double",
        "name": "yDot1"
       }
      ]
     },
     {
      "type": "double",
      "name": "filterStep",
      "params": [
       {
        "type": "double",
        "name": "h"
       },
       {
        "type": "boolean",
        "name": "forward"
       },
       {
        "type": "boolean",
        "name": "acceptSmall"
       }
      ]
     },
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "getCurrentStepStart",
      "params": []
     },
     {
      "type": null,
      "name": "resetInternalState",
      "params": []
     },
     {
      "type": "double",
      "name": "getMinStep",
      "params": []
     },
     {
      "type": "double",
      "name": "getMaxStep",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "AdaptiveStepsizeIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "A70"
     },
     {
      "type": "double",
      "name": "A72"
     },
     {
      "type": "double",
      "name": "A73"
     },
     {
      "type": "double",
      "name": "A74"
     },
     {
      "type": "double",
      "name": "A75"
     },
     {
      "type": "double",
      "name": "D0"
     },
     {
      "type": "double",
      "name": "D2"
     },
     {
      "type": "double",
      "name": "D3"
     },
     {
      "type": "double",
      "name": "D4"
     },
     {
      "type": "double",
      "name": "D5"
     },
     {
      "type": "double",
      "name": "D6"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "v1"
     },
     {
      "type": "double",
      "name": "v2"
     },
     {
      "type": "double",
      "name": "v3"
     },
     {
      "type": "double",
      "name": "v4"
     },
     {
      "type": "boolean",
      "name": "vectorsInitialized"
     }
    ],
    "name": "DormandPrince54StepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "reinitialize",
      "params": [
       {
        "type": "AbstractIntegrator",
        "name": "integrator"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "yDotK"
       },
       {
        "type": "boolean",
        "name": "forward"
       }
      ]
     },
     {
      "type": null,
      "name": "storeTime",
      "params": [
       {
        "type": "double",
        "name": "t"
       }
      ]
     },
     {
      "type": null,
      "name": "computeInterpolatedStateAndDerivatives",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "DormandPrince54StepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "STATIC_C"
     },
     {
      "type": "double",
      "name": "STATIC_A"
     },
     {
      "type": "double",
      "name": "STATIC_B"
     }
    ],
    "name": "GillIntegrator",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "GillIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "STATIC_C"
     },
     {
      "type": "double",
      "name": "STATIC_A"
     },
     {
      "type": "double",
      "name": "STATIC_B"
     }
    ],
    "name": "ClassicalRungeKuttaIntegrator",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "ClassicalRungeKuttaIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "c"
     },
     {
      "type": "double",
      "name": "a"
     },
     {
      "type": "double",
      "name": "b"
     },
     {
      "type": "RungeKuttaStepInterpolator",
      "name": "prototype"
     },
     {
      "type": "double",
      "name": "step"
     }
    ],
    "name": "RungeKuttaIntegrator",
    "methods": [
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "RungeKuttaIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "String",
      "name": "METHOD_NAME"
     },
     {
      "type": "double",
      "name": "STATIC_C"
     },
     {
      "type": "double",
      "name": "STATIC_A"
     },
     {
      "type": "double",
      "name": "STATIC_B"
     },
     {
      "type": "double",
      "name": "E1_01"
     },
     {
      "type": "double",
      "name": "E1_06"
     },
     {
      "type": "double",
      "name": "E1_07"
     },
     {
      "type": "double",
      "name": "E1_08"
     },
     {
      "type": "double",
      "name": "E1_09"
     },
     {
      "type": "double",
      "name": "E1_10"
     },
     {
      "type": "double",
      "name": "E1_11"
     },
     {
      "type": "double",
      "name": "E1_12"
     },
     {
      "type": "double",
      "name": "E2_01"
     },
     {
      "type": "double",
      "name": "E2_06"
     },
     {
      "type": "double",
      "name": "E2_07"
     },
     {
      "type": "double",
      "name": "E2_08"
     },
     {
      "type": "double",
      "name": "E2_09"
     },
     {
      "type": "double",
      "name": "E2_10"
     },
     {
      "type": "double",
      "name": "E2_11"
     },
     {
      "type": "double",
      "name": "E2_12"
     }
    ],
    "name": "DormandPrince853Integrator",
    "methods": [
     {
      "type": "int",
      "name": "getOrder",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateError",
      "params": [
       {
        "type": "double",
        "name": "yDotK"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "y1"
       },
       {
        "type": "double",
        "name": "h"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "DormandPrince853Integrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "STATIC_C"
     },
     {
      "type": "double",
      "name": "STATIC_A"
     },
     {
      "type": "double",
      "name": "STATIC_B"
     }
    ],
    "name": "MidpointIntegrator",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "MidpointIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "AdamsNordsieckTransformer",
      "name": "transformer"
     }
    ],
    "name": "AdamsIntegrator",
    "methods": [
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "Array2DRowRealMatrix",
      "name": "initializeHighOrderDerivatives",
      "params": [
       {
        "type": "double",
        "name": "first"
       },
       {
        "type": "double",
        "name": "multistep"
       }
      ]
     },
     {
      "type": "Array2DRowRealMatrix",
      "name": "updateHighOrderDerivativesPhase1",
      "params": [
       {
        "type": "Array2DRowRealMatrix",
        "name": "highOrder"
       }
      ]
     },
     {
      "type": null,
      "name": "updateHighOrderDerivativesPhase2",
      "params": [
       {
        "type": "double",
        "name": "start"
       },
       {
        "type": "double",
        "name": "end"
       },
       {
        "type": "Array2DRowRealMatrix",
        "name": "highOrder"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "AdamsIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Map",
      "name": "CACHE"
     },
     {
      "type": "Array2DRowRealMatrix",
      "name": "initialization"
     },
     {
      "type": "Array2DRowRealMatrix",
      "name": "update"
     },
     {
      "type": "double",
      "name": "c1"
     }
    ],
    "name": "AdamsNordsieckTransformer",
    "methods": [
     {
      "type": "AdamsNordsieckTransformer",
      "name": "getInstance",
      "params": [
       {
        "type": "int",
        "name": "nSteps"
       }
      ]
     },
     {
      "type": "int",
      "name": "getNSteps",
      "params": []
     },
     {
      "type": "FieldMatrix",
      "name": "buildP",
      "params": [
       {
        "type": "int",
        "name": "nSteps"
       }
      ]
     },
     {
      "type": "Array2DRowRealMatrix",
      "name": "initializeHighOrderDerivatives",
      "params": [
       {
        "type": "double",
        "name": "first"
       },
       {
        "type": "double",
        "name": "multistep"
       }
      ]
     },
     {
      "type": "Array2DRowRealMatrix",
      "name": "updateHighOrderDerivativesPhase1",
      "params": [
       {
        "type": "Array2DRowRealMatrix",
        "name": "highOrder"
       }
      ]
     },
     {
      "type": null,
      "name": "updateHighOrderDerivativesPhase2",
      "params": [
       {
        "type": "double",
        "name": "start"
       },
       {
        "type": "double",
        "name": "end"
       },
       {
        "type": "Array2DRowRealMatrix",
        "name": "highOrder"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "AdamsNordsieckTransformer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "EulerStepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "computeInterpolatedStateAndDerivatives",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "EulerStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "HighamHall54StepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "computeInterpolatedStateAndDerivatives",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "HighamHall54StepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "ThreeEighthesStepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "computeInterpolatedStateAndDerivatives",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "ThreeEighthesStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "String",
      "name": "METHOD_NAME"
     }
    ],
    "name": "AdamsBashforthIntegrator",
    "methods": [
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "AdamsBashforthIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "STATIC_C"
     },
     {
      "type": "double",
      "name": "STATIC_A"
     },
     {
      "type": "double",
      "name": "STATIC_B"
     }
    ],
    "name": "EulerIntegrator",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "EulerIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "STATIC_C"
     },
     {
      "type": "double",
      "name": "STATIC_A"
     },
     {
      "type": "double",
      "name": "STATIC_B"
     }
    ],
    "name": "ThreeEighthesIntegrator",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "ThreeEighthesIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "ClassicalRungeKuttaStepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "computeInterpolatedStateAndDerivatives",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "ClassicalRungeKuttaStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "String",
      "name": "METHOD_NAME"
     },
     {
      "type": "double",
      "name": "STATIC_C"
     },
     {
      "type": "double",
      "name": "STATIC_A"
     },
     {
      "type": "double",
      "name": "STATIC_B"
     },
     {
      "type": "double",
      "name": "STATIC_E"
     }
    ],
    "name": "HighamHall54Integrator",
    "methods": [
     {
      "type": "int",
      "name": "getOrder",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateError",
      "params": [
       {
        "type": "double",
        "name": "yDotK"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "y1"
       },
       {
        "type": "double",
        "name": "h"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "HighamHall54Integrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "TWO_MINUS_SQRT_2"
     },
     {
      "type": "double",
      "name": "TWO_PLUS_SQRT_2"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "GillStepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "computeInterpolatedStateAndDerivatives",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "GillStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "String",
      "name": "METHOD_NAME"
     },
     {
      "type": "double",
      "name": "STATIC_C"
     },
     {
      "type": "double",
      "name": "STATIC_A"
     },
     {
      "type": "double",
      "name": "STATIC_B"
     },
     {
      "type": "double",
      "name": "E1"
     },
     {
      "type": "double",
      "name": "E3"
     },
     {
      "type": "double",
      "name": "E4"
     },
     {
      "type": "double",
      "name": "E5"
     },
     {
      "type": "double",
      "name": "E6"
     },
     {
      "type": "double",
      "name": "E7"
     }
    ],
    "name": "DormandPrince54Integrator",
    "methods": [
     {
      "type": "int",
      "name": "getOrder",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateError",
      "params": [
       {
        "type": "double",
        "name": "yDotK"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "y1"
       },
       {
        "type": "double",
        "name": "h"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "DormandPrince54Integrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "MidpointStepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "computeInterpolatedStateAndDerivatives",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "MidpointStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "String",
      "name": "METHOD_NAME"
     },
     {
      "type": "int",
      "name": "maxOrder"
     },
     {
      "type": "int",
      "name": "sequence"
     },
     {
      "type": "int",
      "name": "costPerStep"
     },
     {
      "type": "double",
      "name": "costPerTimeUnit"
     },
     {
      "type": "double",
      "name": "optimalStep"
     },
     {
      "type": "double",
      "name": "coeff"
     },
     {
      "type": "boolean",
      "name": "performTest"
     },
     {
      "type": "int",
      "name": "maxChecks"
     },
     {
      "type": "int",
      "name": "maxIter"
     },
     {
      "type": "double",
      "name": "stabilityReduction"
     },
     {
      "type": "double",
      "name": "stepControl1"
     },
     {
      "type": "double",
      "name": "stepControl2"
     },
     {
      "type": "double",
      "name": "stepControl3"
     },
     {
      "type": "double",
      "name": "stepControl4"
     },
     {
      "type": "double",
      "name": "orderControl1"
     },
     {
      "type": "double",
      "name": "orderControl2"
     },
     {
      "type": "boolean",
      "name": "useInterpolationError"
     },
     {
      "type": "int",
      "name": "mudif"
     }
    ],
    "name": "GraggBulirschStoerIntegrator",
    "methods": [
     {
      "type": null,
      "name": "setStabilityCheck",
      "params": [
       {
        "type": "boolean",
        "name": "performStabilityCheck"
       },
       {
        "type": "int",
        "name": "maxNumIter"
       },
       {
        "type": "int",
        "name": "maxNumChecks"
       },
       {
        "type": "double",
        "name": "stepsizeReductionFactor"
       }
      ]
     },
     {
      "type": null,
      "name": "setStepsizeControl",
      "params": [
       {
        "type": "double",
        "name": "control1"
       },
       {
        "type": "double",
        "name": "control2"
       },
       {
        "type": "double",
        "name": "control3"
       },
       {
        "type": "double",
        "name": "control4"
       }
      ]
     },
     {
      "type": null,
      "name": "setOrderControl",
      "params": [
       {
        "type": "int",
        "name": "maximalOrder"
       },
       {
        "type": "double",
        "name": "control1"
       },
       {
        "type": "double",
        "name": "control2"
       }
      ]
     },
     {
      "type": null,
      "name": "addStepHandler",
      "params": [
       {
        "type": "StepHandler",
        "name": "handler"
       }
      ]
     },
     {
      "type": null,
      "name": "addEventHandler",
      "params": [
       {
        "type": "EventHandler",
        "name": "function"
       },
       {
        "type": "double",
        "name": "maxCheckInterval"
       },
       {
        "type": "double",
        "name": "convergence"
       },
       {
        "type": "int",
        "name": "maxIterationCount"
       }
      ]
     },
     {
      "type": null,
      "name": "initializeArrays",
      "params": []
     },
     {
      "type": null,
      "name": "setInterpolationControl",
      "params": [
       {
        "type": "boolean",
        "name": "useInterpolationErrorForControl"
       },
       {
        "type": "int",
        "name": "mudifControlParameter"
       }
      ]
     },
     {
      "type": null,
      "name": "rescale",
      "params": [
       {
        "type": "double",
        "name": "y1"
       },
       {
        "type": "double",
        "name": "y2"
       },
       {
        "type": "double",
        "name": "scale"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tryStep",
      "params": [
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "step"
       },
       {
        "type": "int",
        "name": "k"
       },
       {
        "type": "double",
        "name": "scale"
       },
       {
        "type": "double",
        "name": "f"
       },
       {
        "type": "double",
        "name": "yMiddle"
       },
       {
        "type": "double",
        "name": "yEnd"
       },
       {
        "type": "double",
        "name": "yTmp"
       }
      ]
     },
     {
      "type": null,
      "name": "extrapolate",
      "params": [
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "k"
       },
       {
        "type": "double",
        "name": "diag"
       },
       {
        "type": "double",
        "name": "last"
       }
      ]
     },
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "GraggBulirschStoerIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "boolean",
      "name": "fsal"
     },
     {
      "type": "double",
      "name": "c"
     },
     {
      "type": "double",
      "name": "a"
     },
     {
      "type": "double",
      "name": "b"
     },
     {
      "type": "RungeKuttaStepInterpolator",
      "name": "prototype"
     },
     {
      "type": "double",
      "name": "exp"
     },
     {
      "type": "double",
      "name": "safety"
     },
     {
      "type": "double",
      "name": "minReduction"
     },
     {
      "type": "double",
      "name": "maxGrowth"
     }
    ],
    "name": "EmbeddedRungeKuttaIntegrator",
    "methods": [
     {
      "type": "int",
      "name": "getOrder",
      "params": []
     },
     {
      "type": "double",
      "name": "getSafety",
      "params": []
     },
     {
      "type": null,
      "name": "setSafety",
      "params": [
       {
        "type": "double",
        "name": "safety"
       }
      ]
     },
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "getMinReduction",
      "params": []
     },
     {
      "type": null,
      "name": "setMinReduction",
      "params": [
       {
        "type": "double",
        "name": "minReduction"
       }
      ]
     },
     {
      "type": "double",
      "name": "getMaxGrowth",
      "params": []
     },
     {
      "type": null,
      "name": "setMaxGrowth",
      "params": [
       {
        "type": "double",
        "name": "maxGrowth"
       }
      ]
     },
     {
      "type": "double",
      "name": "estimateError",
      "params": [
       {
        "type": "double",
        "name": "yDotK"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "y1"
       },
       {
        "type": "double",
        "name": "h"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "EmbeddedRungeKuttaIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "MathParseException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "MathParseException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "NoDataException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "NoDataException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "Number",
      "name": "min"
     },
     {
      "type": "boolean",
      "name": "boundIsAllowed"
     }
    ],
    "name": "NumberIsTooSmallException",
    "methods": [
     {
      "type": "boolean",
      "name": "getBoundIsAllowed",
      "params": []
     },
     {
      "type": "Number",
      "name": "getMin",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "NumberIsTooSmallException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "Number",
      "name": "lo"
     },
     {
      "type": "Number",
      "name": "hi"
     }
    ],
    "name": "OutOfRangeException",
    "methods": [
     {
      "type": "Number",
      "name": "getLo",
      "params": []
     },
     {
      "type": "Number",
      "name": "getHi",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "OutOfRangeException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "Number",
      "name": "argument"
     }
    ],
    "name": "MathIllegalNumberException",
    "methods": [
     {
      "type": "Number",
      "name": "getArgument",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "MathIllegalNumberException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "MathUnsupportedOperationException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "MathUnsupportedOperationException.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "MathThrowable",
    "methods": [
     {
      "type": null,
      "name": "addMessage",
      "params": [
       {
        "type": "Localizable",
        "name": "pattern"
       },
       {
        "type": "Object",
        "name": "arguments"
       }
      ]
     },
     {
      "type": null,
      "name": "setContext",
      "params": [
       {
        "type": "String",
        "name": "key"
       },
       {
        "type": "Object",
        "name": "value"
       }
      ]
     },
     {
      "type": "Object",
      "name": "getContext",
      "params": [
       {
        "type": "String",
        "name": "key"
       }
      ]
     },
     {
      "type": "Set",
      "name": "getContextKeys",
      "params": []
     },
     {
      "type": "String",
      "name": "getMessage",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "String",
      "name": "getMessage",
      "params": []
     },
     {
      "type": "String",
      "name": "getLocalizedMessage",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "MathThrowable.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "Number",
      "name": "max"
     },
     {
      "type": "boolean",
      "name": "boundIsAllowed"
     }
    ],
    "name": "NumberIsTooLargeException",
    "methods": [
     {
      "type": "boolean",
      "name": "getBoundIsAllowed",
      "params": []
     },
     {
      "type": "Number",
      "name": "getMax",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "NumberIsTooLargeException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "MathIllegalArgumentException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "MathIllegalArgumentException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "REPORT_URL"
     }
    ],
    "name": "MathInternalError",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "MathInternalError.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "lo"
     },
     {
      "type": "double",
      "name": "hi"
     },
     {
      "type": "double",
      "name": "fLo"
     },
     {
      "type": "double",
      "name": "fHi"
     }
    ],
    "name": "NoBracketingException",
    "methods": [
     {
      "type": "double",
      "name": "getLo",
      "params": []
     },
     {
      "type": "double",
      "name": "getHi",
      "params": []
     },
     {
      "type": "double",
      "name": "getFLo",
      "params": []
     },
     {
      "type": "double",
      "name": "getFHi",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "NoBracketingException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "ZeroException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "ZeroException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "MathArithmeticException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "MathArithmeticException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "NotFiniteNumberException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "NotFiniteNumberException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "MathIllegalStateException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "MathIllegalStateException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "ConvergenceException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "ConvergenceException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "MathUserException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "MathUserException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "List",
      "name": "msgPatterns"
     },
     {
      "type": "List",
      "name": "msgArguments"
     },
     {
      "type": "Map",
      "name": "context"
     }
    ],
    "name": "MathRuntimeException",
    "methods": [
     {
      "type": null,
      "name": "addMessage",
      "params": [
       {
        "type": "Localizable",
        "name": "pattern"
       },
       {
        "type": "Object",
        "name": "arguments"
       }
      ]
     },
     {
      "type": null,
      "name": "setContext",
      "params": [
       {
        "type": "String",
        "name": "key"
       },
       {
        "type": "Object",
        "name": "value"
       }
      ]
     },
     {
      "type": "Object",
      "name": "getContext",
      "params": [
       {
        "type": "String",
        "name": "key"
       }
      ]
     },
     {
      "type": "Set",
      "name": "getContextKeys",
      "params": []
     },
     {
      "type": "String",
      "name": "getMessage",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "String",
      "name": "getMessage",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       },
       {
        "type": "String",
        "name": "separator"
       }
      ]
     },
     {
      "type": "String",
      "name": "getMessage",
      "params": []
     },
     {
      "type": "String",
      "name": "getLocalizedMessage",
      "params": []
     },
     {
      "type": "String",
      "name": "buildMessage",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       },
       {
        "type": "String",
        "name": "separator"
       }
      ]
     },
     {
      "type": null,
      "name": "writeObject",
      "params": [
       {
        "type": "ObjectOutputStream",
        "name": "out"
       }
      ]
     },
     {
      "type": null,
      "name": "readObject",
      "params": [
       {
        "type": "ObjectInputStream",
        "name": "in"
       }
      ]
     },
     {
      "type": null,
      "name": "serializeMessages",
      "params": [
       {
        "type": "ObjectOutputStream",
        "name": "out"
       }
      ]
     },
     {
      "type": null,
      "name": "deSerializeMessages",
      "params": [
       {
        "type": "ObjectInputStream",
        "name": "in"
       }
      ]
     },
     {
      "type": null,
      "name": "serializeContext",
      "params": [
       {
        "type": "ObjectOutputStream",
        "name": "out"
       }
      ]
     },
     {
      "type": null,
      "name": "deSerializeContext",
      "params": [
       {
        "type": "ObjectInputStream",
        "name": "in"
       }
      ]
     },
     {
      "type": "String",
      "name": "nonSerializableReplacement",
      "params": [
       {
        "type": "Object",
        "name": "obj"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "MathRuntimeException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "MathUtils",
      "name": "direction"
     },
     {
      "type": "boolean",
      "name": "strict"
     },
     {
      "type": "int",
      "name": "index"
     },
     {
      "type": "Number",
      "name": "previous"
     }
    ],
    "name": "NonMonotonousSequenceException",
    "methods": [
     {
      "type": "MathUtils",
      "name": "getDirection",
      "params": []
     },
     {
      "type": "boolean",
      "name": "getStrict",
      "params": []
     },
     {
      "type": "int",
      "name": "getIndex",
      "params": []
     },
     {
      "type": "Number",
      "name": "getPrevious",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "NonMonotonousSequenceException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "NotPositiveException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "NotPositiveException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "Integer",
      "name": "wrong"
     },
     {
      "type": "Integer",
      "name": "expected"
     }
    ],
    "name": "MultiDimensionMismatchException",
    "methods": [
     {
      "type": "Integer",
      "name": "getWrongDimensions",
      "params": []
     },
     {
      "type": "Integer",
      "name": "getExpectedDimensions",
      "params": []
     },
     {
      "type": "int",
      "name": "getWrongDimension",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "int",
      "name": "getExpectedDimension",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "MultiDimensionMismatchException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "Number",
      "name": "max"
     }
    ],
    "name": "MaxCountExceededException",
    "methods": [
     {
      "type": "Number",
      "name": "getMax",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "MaxCountExceededException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "NotStrictlyPositiveException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "NotStrictlyPositiveException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "dimension"
     }
    ],
    "name": "DimensionMismatchException",
    "methods": [
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "DimensionMismatchException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "TooManyEvaluationsException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "TooManyEvaluationsException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "NullArgumentException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.exception",
  "filename": "NullArgumentException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "String",
      "name": "sourceFormat"
     }
    ],
    "name": "LocalizedFormats",
    "methods": [
     {
      "type": "String",
      "name": "getSourceString",
      "params": []
     },
     {
      "type": "String",
      "name": "getLocalizedString",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.exception.util",
  "filename": "LocalizedFormats.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "source"
     }
    ],
    "name": "DummyLocalizable",
    "methods": [
     {
      "type": "String",
      "name": "getSourceString",
      "params": []
     },
     {
      "type": "String",
      "name": "getLocalizedString",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.exception.util",
  "filename": "DummyLocalizable.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Localizable",
    "methods": [
     {
      "type": "String",
      "name": "getSourceString",
      "params": []
     },
     {
      "type": "String",
      "name": "getLocalizedString",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.exception.util",
  "filename": "Localizable.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ArgUtils",
    "methods": [
     {
      "type": "Object",
      "name": "flatten",
      "params": [
       {
        "type": "Object",
        "name": "array"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.exception.util",
  "filename": "ArgUtils.java"
 }
]