[
 {
  "filename": "FormatSchema.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "FormatSchema",
    "methods": [
     {
      "params": [],
      "type": "String",
      "name": "getSchemaType"
     }
    ],
    "fields": []
   }
  ]
 },
 {
  "filename": "JsonToken.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "JsonToken",
    "methods": [
     {
      "params": [],
      "type": "int",
      "name": "id"
     },
     {
      "params": [],
      "type": "String",
      "name": "asString"
     },
     {
      "params": [],
      "type": "char",
      "name": "asCharArray"
     },
     {
      "params": [],
      "type": "byte",
      "name": "asByteArray"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isNumeric"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isStructStart"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isStructEnd"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isScalarValue"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isBoolean"
     }
    ],
    "fields": [
     {
      "type": "String",
      "name": "_serialized"
     },
     {
      "type": "char",
      "name": "_serializedChars"
     },
     {
      "type": "byte",
      "name": "_serializedBytes"
     },
     {
      "type": "int",
      "name": "_id"
     },
     {
      "type": "boolean",
      "name": "_isStructStart"
     },
     {
      "type": "boolean",
      "name": "_isStructEnd"
     },
     {
      "type": "boolean",
      "name": "_isNumber"
     },
     {
      "type": "boolean",
      "name": "_isBoolean"
     },
     {
      "type": "boolean",
      "name": "_isScalar"
     }
    ]
   }
  ]
 },
 {
  "filename": "TreeNode.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "TreeNode",
    "methods": [
     {
      "params": [],
      "type": "JsonToken",
      "name": "asToken"
     },
     {
      "params": [],
      "type": "JsonParser",
      "name": "numberType"
     },
     {
      "params": [],
      "type": "int",
      "name": "size"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isValueNode"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isContainerNode"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isMissingNode"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isArray"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isObject"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "fieldName"
       }
      ],
      "type": "TreeNode",
      "name": "get"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ],
      "type": "TreeNode",
      "name": "get"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "fieldName"
       }
      ],
      "type": "TreeNode",
      "name": "path"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ],
      "type": "TreeNode",
      "name": "path"
     },
     {
      "params": [],
      "type": "Iterator",
      "name": "fieldNames"
     },
     {
      "params": [
       {
        "type": "JsonPointer",
        "name": "ptr"
       }
      ],
      "type": "TreeNode",
      "name": "at"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "jsonPointerExpression"
       }
      ],
      "type": "TreeNode",
      "name": "at"
     },
     {
      "params": [],
      "type": "JsonParser",
      "name": "traverse"
     },
     {
      "params": [
       {
        "type": "ObjectCodec",
        "name": "codec"
       }
      ],
      "type": "JsonParser",
      "name": "traverse"
     }
    ],
    "fields": []
   }
  ]
 },
 {
  "filename": "JsonTokenId.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "JsonTokenId",
    "methods": [],
    "fields": [
     {
      "type": "int",
      "name": "ID_NOT_AVAILABLE"
     },
     {
      "type": "int",
      "name": "ID_NO_TOKEN"
     },
     {
      "type": "int",
      "name": "ID_START_OBJECT"
     },
     {
      "type": "int",
      "name": "ID_END_OBJECT"
     },
     {
      "type": "int",
      "name": "ID_START_ARRAY"
     },
     {
      "type": "int",
      "name": "ID_END_ARRAY"
     },
     {
      "type": "int",
      "name": "ID_FIELD_NAME"
     },
     {
      "type": "int",
      "name": "ID_STRING"
     },
     {
      "type": "int",
      "name": "ID_NUMBER_INT"
     },
     {
      "type": "int",
      "name": "ID_NUMBER_FLOAT"
     },
     {
      "type": "int",
      "name": "ID_TRUE"
     },
     {
      "type": "int",
      "name": "ID_FALSE"
     },
     {
      "type": "int",
      "name": "ID_NULL"
     },
     {
      "type": "int",
      "name": "ID_EMBEDDED_OBJECT"
     }
    ]
   }
  ]
 },
 {
  "filename": "Versioned.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "Versioned",
    "methods": [
     {
      "params": [],
      "type": "Version",
      "name": "version"
     }
    ],
    "fields": []
   }
  ]
 },
 {
  "filename": "PrettyPrinter.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "PrettyPrinter",
    "methods": [
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       }
      ],
      "type": null,
      "name": "writeRootValueSeparator"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "gen"
       }
      ],
      "type": null,
      "name": "writeStartObject"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "gen"
       },
       {
        "type": "int",
        "name": "nrOfEntries"
       }
      ],
      "type": null,
      "name": "writeEndObject"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "gen"
       }
      ],
      "type": null,
      "name": "writeObjectEntrySeparator"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "gen"
       }
      ],
      "type": null,
      "name": "writeObjectFieldValueSeparator"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "gen"
       }
      ],
      "type": null,
      "name": "writeStartArray"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "gen"
       },
       {
        "type": "int",
        "name": "nrOfValues"
       }
      ],
      "type": null,
      "name": "writeEndArray"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "gen"
       }
      ],
      "type": null,
      "name": "writeArrayValueSeparator"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "gen"
       }
      ],
      "type": null,
      "name": "beforeArrayValues"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "gen"
       }
      ],
      "type": null,
      "name": "beforeObjectEntries"
     }
    ],
    "fields": []
   }
  ]
 },
 {
  "filename": "FormatFeature.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "FormatFeature",
    "methods": [
     {
      "params": [],
      "type": "boolean",
      "name": "enabledByDefault"
     },
     {
      "params": [],
      "type": "int",
      "name": "getMask"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "flags"
       }
      ],
      "type": "boolean",
      "name": "enabledIn"
     }
    ],
    "fields": []
   }
  ]
 },
 {
  "filename": "ObjectCodec.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "ObjectCodec",
    "methods": [
     {
      "params": [],
      "type": "Version",
      "name": "version"
     },
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "jp"
       },
       {
        "type": "Class",
        "name": "valueType"
       }
      ],
      "type": "T",
      "name": "readValue"
     },
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "jp"
       },
       {
        "type": "TypeReference",
        "name": "valueTypeRef"
       }
      ],
      "type": "T",
      "name": "readValue"
     },
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "jp"
       },
       {
        "type": "ResolvedType",
        "name": "valueType"
       }
      ],
      "type": "T",
      "name": "readValue"
     },
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "jp"
       },
       {
        "type": "Class",
        "name": "valueType"
       }
      ],
      "type": "Iterator",
      "name": "readValues"
     },
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "jp"
       },
       {
        "type": "TypeReference",
        "name": "valueTypeRef"
       }
      ],
      "type": "Iterator",
      "name": "readValues"
     },
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "jp"
       },
       {
        "type": "ResolvedType",
        "name": "valueType"
       }
      ],
      "type": "Iterator",
      "name": "readValues"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jgen"
       },
       {
        "type": "Object",
        "name": "value"
       }
      ],
      "type": null,
      "name": "writeValue"
     },
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "jp"
       }
      ],
      "type": "T",
      "name": "readTree"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       },
       {
        "type": "TreeNode",
        "name": "tree"
       }
      ],
      "type": null,
      "name": "writeTree"
     },
     {
      "params": [],
      "type": "TreeNode",
      "name": "createObjectNode"
     },
     {
      "params": [],
      "type": "TreeNode",
      "name": "createArrayNode"
     },
     {
      "params": [
       {
        "type": "TreeNode",
        "name": "n"
       }
      ],
      "type": "JsonParser",
      "name": "treeAsTokens"
     },
     {
      "params": [
       {
        "type": "TreeNode",
        "name": "n"
       },
       {
        "type": "Class",
        "name": "valueType"
       }
      ],
      "type": "T",
      "name": "treeToValue"
     },
     {
      "params": [],
      "type": "JsonFactory",
      "name": "getJsonFactory"
     },
     {
      "params": [],
      "type": "JsonFactory",
      "name": "getFactory"
     }
    ],
    "fields": []
   }
  ]
 },
 {
  "filename": "Version.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "Version",
    "methods": [
     {
      "params": [],
      "type": "Version",
      "name": "unknownVersion"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isUnknownVersion"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isSnapshot"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isUknownVersion"
     },
     {
      "params": [],
      "type": "int",
      "name": "getMajorVersion"
     },
     {
      "params": [],
      "type": "int",
      "name": "getMinorVersion"
     },
     {
      "params": [],
      "type": "int",
      "name": "getPatchLevel"
     },
     {
      "params": [],
      "type": "String",
      "name": "getGroupId"
     },
     {
      "params": [],
      "type": "String",
      "name": "getArtifactId"
     },
     {
      "params": [],
      "type": "String",
      "name": "toFullString"
     },
     {
      "params": [],
      "type": "String",
      "name": "toString"
     },
     {
      "params": [],
      "type": "int",
      "name": "hashCode"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "o"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [
       {
        "type": "Version",
        "name": "other"
       }
      ],
      "type": "int",
      "name": "compareTo"
     }
    ],
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "Version",
      "name": "UNKNOWN_VERSION"
     },
     {
      "type": "int",
      "name": "_majorVersion"
     },
     {
      "type": "int",
      "name": "_minorVersion"
     },
     {
      "type": "int",
      "name": "_patchLevel"
     },
     {
      "type": "String",
      "name": "_groupId"
     },
     {
      "type": "String",
      "name": "_artifactId"
     },
     {
      "type": "String",
      "name": "_snapshotInfo"
     }
    ]
   }
  ]
 },
 {
  "filename": "JsonProcessingException.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "JsonProcessingException",
    "methods": [
     {
      "params": [],
      "type": "JsonLocation",
      "name": "getLocation"
     },
     {
      "params": [],
      "type": "String",
      "name": "getOriginalMessage"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getProcessor"
     },
     {
      "params": [],
      "type": "String",
      "name": "getMessageSuffix"
     },
     {
      "params": [],
      "type": "String",
      "name": "getMessage"
     },
     {
      "params": [],
      "type": "String",
      "name": "toString"
     }
    ],
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "JsonLocation",
      "name": "_location"
     }
    ]
   }
  ]
 },
 {
  "filename": "TreeCodec.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "TreeCodec",
    "methods": [
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "p"
       }
      ],
      "type": "T",
      "name": "readTree"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "g"
       },
       {
        "type": "TreeNode",
        "name": "tree"
       }
      ],
      "type": null,
      "name": "writeTree"
     },
     {
      "params": [],
      "type": "TreeNode",
      "name": "createArrayNode"
     },
     {
      "params": [],
      "type": "TreeNode",
      "name": "createObjectNode"
     },
     {
      "params": [
       {
        "type": "TreeNode",
        "name": "node"
       }
      ],
      "type": "JsonParser",
      "name": "treeAsTokens"
     }
    ],
    "fields": []
   }
  ]
 },
 {
  "filename": "package-info.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": []
 },
 {
  "filename": "JsonEncoding.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "JsonEncoding",
    "methods": [
     {
      "params": [],
      "type": "String",
      "name": "getJavaName"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isBigEndian"
     },
     {
      "params": [],
      "type": "int",
      "name": "bits"
     }
    ],
    "fields": [
     {
      "type": "String",
      "name": "_javaName"
     },
     {
      "type": "boolean",
      "name": "_bigEndian"
     },
     {
      "type": "int",
      "name": "_bits"
     }
    ]
   }
  ]
 },
 {
  "filename": "JsonFactory.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "JsonFactory",
    "methods": [
     {
      "params": [],
      "type": "JsonFactory",
      "name": "copy"
     },
     {
      "params": [
       {
        "type": "Class",
        "name": "exp"
       }
      ],
      "type": null,
      "name": "_checkInvalidCopy"
     },
     {
      "params": [],
      "type": "Object",
      "name": "readResolve"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "requiresPropertyOrdering"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "canHandleBinaryNatively"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "canUseCharArrays"
     },
     {
      "params": [],
      "type": "Class",
      "name": "getFormatReadFeatureType"
     },
     {
      "params": [],
      "type": "Class",
      "name": "getFormatWriteFeatureType"
     },
     {
      "params": [
       {
        "type": "FormatSchema",
        "name": "schema"
       }
      ],
      "type": "boolean",
      "name": "canUseSchema"
     },
     {
      "params": [],
      "type": "String",
      "name": "getFormatName"
     },
     {
      "params": [
       {
        "type": "InputAccessor",
        "name": "acc"
       }
      ],
      "type": "MatchStrength",
      "name": "hasFormat"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "requiresCustomCodec"
     },
     {
      "params": [
       {
        "type": "InputAccessor",
        "name": "acc"
       }
      ],
      "type": "MatchStrength",
      "name": "hasJSONFormat"
     },
     {
      "params": [],
      "type": "Version",
      "name": "version"
     },
     {
      "params": [
       {
        "type": "JsonFactory",
        "name": "f"
       },
       {
        "type": "boolean",
        "name": "state"
       }
      ],
      "type": "JsonFactory",
      "name": "configure"
     },
     {
      "params": [
       {
        "type": "JsonFactory",
        "name": "f"
       }
      ],
      "type": "JsonFactory",
      "name": "enable"
     },
     {
      "params": [
       {
        "type": "JsonFactory",
        "name": "f"
       }
      ],
      "type": "JsonFactory",
      "name": "disable"
     },
     {
      "params": [
       {
        "type": "JsonFactory",
        "name": "f"
       }
      ],
      "type": "boolean",
      "name": "isEnabled"
     },
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "f"
       },
       {
        "type": "boolean",
        "name": "state"
       }
      ],
      "type": "JsonFactory",
      "name": "configure"
     },
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "f"
       }
      ],
      "type": "JsonFactory",
      "name": "enable"
     },
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "f"
       }
      ],
      "type": "JsonFactory",
      "name": "disable"
     },
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "f"
       }
      ],
      "type": "boolean",
      "name": "isEnabled"
     },
     {
      "params": [],
      "type": "InputDecorator",
      "name": "getInputDecorator"
     },
     {
      "params": [
       {
        "type": "InputDecorator",
        "name": "d"
       }
      ],
      "type": "JsonFactory",
      "name": "setInputDecorator"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "f"
       },
       {
        "type": "boolean",
        "name": "state"
       }
      ],
      "type": "JsonFactory",
      "name": "configure"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "f"
       }
      ],
      "type": "JsonFactory",
      "name": "enable"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "f"
       }
      ],
      "type": "JsonFactory",
      "name": "disable"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "f"
       }
      ],
      "type": "boolean",
      "name": "isEnabled"
     },
     {
      "params": [],
      "type": "CharacterEscapes",
      "name": "getCharacterEscapes"
     },
     {
      "params": [
       {
        "type": "CharacterEscapes",
        "name": "esc"
       }
      ],
      "type": "JsonFactory",
      "name": "setCharacterEscapes"
     },
     {
      "params": [],
      "type": "OutputDecorator",
      "name": "getOutputDecorator"
     },
     {
      "params": [
       {
        "type": "OutputDecorator",
        "name": "d"
       }
      ],
      "type": "JsonFactory",
      "name": "setOutputDecorator"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "sep"
       }
      ],
      "type": "JsonFactory",
      "name": "setRootValueSeparator"
     },
     {
      "params": [],
      "type": "String",
      "name": "getRootValueSeparator"
     },
     {
      "params": [
       {
        "type": "ObjectCodec",
        "name": "oc"
       }
      ],
      "type": "JsonFactory",
      "name": "setCodec"
     },
     {
      "params": [],
      "type": "ObjectCodec",
      "name": "getCodec"
     },
     {
      "params": [
       {
        "type": "File",
        "name": "f"
       }
      ],
      "type": "JsonParser",
      "name": "createParser"
     },
     {
      "params": [
       {
        "type": "URL",
        "name": "url"
       }
      ],
      "type": "JsonParser",
      "name": "createParser"
     },
     {
      "params": [
       {
        "type": "InputStream",
        "name": "in"
       }
      ],
      "type": "JsonParser",
      "name": "createParser"
     },
     {
      "params": [
       {
        "type": "Reader",
        "name": "r"
       }
      ],
      "type": "JsonParser",
      "name": "createParser"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "data"
       }
      ],
      "type": "JsonParser",
      "name": "createParser"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "data"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": "JsonParser",
      "name": "createParser"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "content"
       }
      ],
      "type": "JsonParser",
      "name": "createParser"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "content"
       }
      ],
      "type": "JsonParser",
      "name": "createParser"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "content"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": "JsonParser",
      "name": "createParser"
     },
     {
      "params": [
       {
        "type": "File",
        "name": "f"
       }
      ],
      "type": "JsonParser",
      "name": "createJsonParser"
     },
     {
      "params": [
       {
        "type": "URL",
        "name": "url"
       }
      ],
      "type": "JsonParser",
      "name": "createJsonParser"
     },
     {
      "params": [
       {
        "type": "InputStream",
        "name": "in"
       }
      ],
      "type": "JsonParser",
      "name": "createJsonParser"
     },
     {
      "params": [
       {
        "type": "Reader",
        "name": "r"
       }
      ],
      "type": "JsonParser",
      "name": "createJsonParser"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "data"
       }
      ],
      "type": "JsonParser",
      "name": "createJsonParser"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "data"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": "JsonParser",
      "name": "createJsonParser"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "content"
       }
      ],
      "type": "JsonParser",
      "name": "createJsonParser"
     },
     {
      "params": [
       {
        "type": "OutputStream",
        "name": "out"
       },
       {
        "type": "JsonEncoding",
        "name": "enc"
       }
      ],
      "type": "JsonGenerator",
      "name": "createGenerator"
     },
     {
      "params": [
       {
        "type": "OutputStream",
        "name": "out"
       }
      ],
      "type": "JsonGenerator",
      "name": "createGenerator"
     },
     {
      "params": [
       {
        "type": "Writer",
        "name": "w"
       }
      ],
      "type": "JsonGenerator",
      "name": "createGenerator"
     },
     {
      "params": [
       {
        "type": "File",
        "name": "f"
       },
       {
        "type": "JsonEncoding",
        "name": "enc"
       }
      ],
      "type": "JsonGenerator",
      "name": "createGenerator"
     },
     {
      "params": [
       {
        "type": "OutputStream",
        "name": "out"
       },
       {
        "type": "JsonEncoding",
        "name": "enc"
       }
      ],
      "type": "JsonGenerator",
      "name": "createJsonGenerator"
     },
     {
      "params": [
       {
        "type": "Writer",
        "name": "out"
       }
      ],
      "type": "JsonGenerator",
      "name": "createJsonGenerator"
     },
     {
      "params": [
       {
        "type": "OutputStream",
        "name": "out"
       }
      ],
      "type": "JsonGenerator",
      "name": "createJsonGenerator"
     },
     {
      "params": [
       {
        "type": "InputStream",
        "name": "in"
       },
       {
        "type": "IOContext",
        "name": "ctxt"
       }
      ],
      "type": "JsonParser",
      "name": "_createParser"
     },
     {
      "params": [
       {
        "type": "Reader",
        "name": "r"
       },
       {
        "type": "IOContext",
        "name": "ctxt"
       }
      ],
      "type": "JsonParser",
      "name": "_createParser"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "data"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       },
       {
        "type": "IOContext",
        "name": "ctxt"
       },
       {
        "type": "boolean",
        "name": "recyclable"
       }
      ],
      "type": "JsonParser",
      "name": "_createParser"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "data"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       },
       {
        "type": "IOContext",
        "name": "ctxt"
       }
      ],
      "type": "JsonParser",
      "name": "_createParser"
     },
     {
      "params": [
       {
        "type": "Writer",
        "name": "out"
       },
       {
        "type": "IOContext",
        "name": "ctxt"
       }
      ],
      "type": "JsonGenerator",
      "name": "_createGenerator"
     },
     {
      "params": [
       {
        "type": "OutputStream",
        "name": "out"
       },
       {
        "type": "IOContext",
        "name": "ctxt"
       }
      ],
      "type": "JsonGenerator",
      "name": "_createUTF8Generator"
     },
     {
      "params": [
       {
        "type": "OutputStream",
        "name": "out"
       },
       {
        "type": "JsonEncoding",
        "name": "enc"
       },
       {
        "type": "IOContext",
        "name": "ctxt"
       }
      ],
      "type": "Writer",
      "name": "_createWriter"
     },
     {
      "params": [
       {
        "type": "InputStream",
        "name": "in"
       },
       {
        "type": "IOContext",
        "name": "ctxt"
       }
      ],
      "type": "InputStream",
      "name": "_decorate"
     },
     {
      "params": [
       {
        "type": "Reader",
        "name": "in"
       },
       {
        "type": "IOContext",
        "name": "ctxt"
       }
      ],
      "type": "Reader",
      "name": "_decorate"
     },
     {
      "params": [
       {
        "type": "OutputStream",
        "name": "out"
       },
       {
        "type": "IOContext",
        "name": "ctxt"
       }
      ],
      "type": "OutputStream",
      "name": "_decorate"
     },
     {
      "params": [
       {
        "type": "Writer",
        "name": "out"
       },
       {
        "type": "IOContext",
        "name": "ctxt"
       }
      ],
      "type": "Writer",
      "name": "_decorate"
     },
     {
      "params": [],
      "type": "BufferRecycler",
      "name": "_getBufferRecycler"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "srcRef"
       },
       {
        "type": "boolean",
        "name": "resourceManaged"
       }
      ],
      "type": "IOContext",
      "name": "_createContext"
     },
     {
      "params": [
       {
        "type": "URL",
        "name": "url"
       }
      ],
      "type": "InputStream",
      "name": "_optimizedStreamFromURL"
     }
    ],
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "FORMAT_NAME_JSON"
     },
     {
      "type": "int",
      "name": "DEFAULT_FACTORY_FEATURE_FLAGS"
     },
     {
      "type": "int",
      "name": "DEFAULT_PARSER_FEATURE_FLAGS"
     },
     {
      "type": "int",
      "name": "DEFAULT_GENERATOR_FEATURE_FLAGS"
     },
     {
      "type": "SerializableString",
      "name": "DEFAULT_ROOT_VALUE_SEPARATOR"
     },
     {
      "type": "ThreadLocal",
      "name": "_recyclerRef"
     },
     {
      "type": "CharsToNameCanonicalizer",
      "name": "_rootCharSymbols"
     },
     {
      "type": "ByteQuadsCanonicalizer",
      "name": "_byteSymbolCanonicalizer"
     },
     {
      "type": "ObjectCodec",
      "name": "_objectCodec"
     },
     {
      "type": "int",
      "name": "_factoryFeatures"
     },
     {
      "type": "int",
      "name": "_parserFeatures"
     },
     {
      "type": "int",
      "name": "_generatorFeatures"
     },
     {
      "type": "CharacterEscapes",
      "name": "_characterEscapes"
     },
     {
      "type": "InputDecorator",
      "name": "_inputDecorator"
     },
     {
      "type": "OutputDecorator",
      "name": "_outputDecorator"
     },
     {
      "type": "SerializableString",
      "name": "_rootValueSeparator"
     }
    ]
   }
  ]
 },
 {
  "filename": "JsonParseException.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "JsonParseException",
    "methods": [
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "p"
       }
      ],
      "type": "JsonParseException",
      "name": "withParser"
     },
     {
      "params": [],
      "type": "JsonParser",
      "name": "getProcessor"
     }
    ],
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "JsonParser",
      "name": "_processor"
     }
    ]
   }
  ]
 },
 {
  "filename": "JsonParser.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "JsonParser",
    "methods": [
     {
      "params": [],
      "type": "ObjectCodec",
      "name": "getCodec"
     },
     {
      "params": [
       {
        "type": "ObjectCodec",
        "name": "c"
       }
      ],
      "type": null,
      "name": "setCodec"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getInputSource"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getCurrentValue"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "v"
       }
      ],
      "type": null,
      "name": "setCurrentValue"
     },
     {
      "params": [
       {
        "type": "FormatSchema",
        "name": "schema"
       }
      ],
      "type": null,
      "name": "setSchema"
     },
     {
      "params": [],
      "type": "FormatSchema",
      "name": "getSchema"
     },
     {
      "params": [
       {
        "type": "FormatSchema",
        "name": "schema"
       }
      ],
      "type": "boolean",
      "name": "canUseSchema"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "requiresCustomCodec"
     },
     {
      "params": [],
      "type": "Version",
      "name": "version"
     },
     {
      "params": [],
      "type": null,
      "name": "close"
     },
     {
      "params": [
       {
        "type": "OutputStream",
        "name": "out"
       }
      ],
      "type": "int",
      "name": "releaseBuffered"
     },
     {
      "params": [
       {
        "type": "Writer",
        "name": "w"
       }
      ],
      "type": "int",
      "name": "releaseBuffered"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "JsonParser",
      "name": "enable"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "JsonParser",
      "name": "disable"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       },
       {
        "type": "boolean",
        "name": "state"
       }
      ],
      "type": "JsonParser",
      "name": "configure"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "boolean",
      "name": "isEnabled"
     },
     {
      "params": [],
      "type": "int",
      "name": "getFeatureMask"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "mask"
       }
      ],
      "type": "JsonParser",
      "name": "setFeatureMask"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "values"
       },
       {
        "type": "int",
        "name": "mask"
       }
      ],
      "type": "JsonParser",
      "name": "overrideStdFeatures"
     },
     {
      "params": [],
      "type": "int",
      "name": "getFormatFeatures"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "values"
       },
       {
        "type": "int",
        "name": "mask"
       }
      ],
      "type": "JsonParser",
      "name": "overrideFormatFeatures"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "nextToken"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "nextValue"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "str"
       }
      ],
      "type": "boolean",
      "name": "nextFieldName"
     },
     {
      "params": [],
      "type": "String",
      "name": "nextFieldName"
     },
     {
      "params": [],
      "type": "String",
      "name": "nextTextValue"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "defaultValue"
       }
      ],
      "type": "int",
      "name": "nextIntValue"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "defaultValue"
       }
      ],
      "type": "long",
      "name": "nextLongValue"
     },
     {
      "params": [],
      "type": "Boolean",
      "name": "nextBooleanValue"
     },
     {
      "params": [],
      "type": "JsonParser",
      "name": "skipChildren"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isClosed"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "getCurrentToken"
     },
     {
      "params": [],
      "type": "int",
      "name": "getCurrentTokenId"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "hasCurrentToken"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "id"
       }
      ],
      "type": "boolean",
      "name": "hasTokenId"
     },
     {
      "params": [
       {
        "type": "JsonToken",
        "name": "t"
       }
      ],
      "type": "boolean",
      "name": "hasToken"
     },
     {
      "params": [],
      "type": "String",
      "name": "getCurrentName"
     },
     {
      "params": [],
      "type": "JsonStreamContext",
      "name": "getParsingContext"
     },
     {
      "params": [],
      "type": "JsonLocation",
      "name": "getTokenLocation"
     },
     {
      "params": [],
      "type": "JsonLocation",
      "name": "getCurrentLocation"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isExpectedStartArrayToken"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isExpectedStartObjectToken"
     },
     {
      "params": [],
      "type": null,
      "name": "clearCurrentToken"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "getLastClearedToken"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": null,
      "name": "overrideCurrentName"
     },
     {
      "params": [],
      "type": "String",
      "name": "getText"
     },
     {
      "params": [],
      "type": "char",
      "name": "getTextCharacters"
     },
     {
      "params": [],
      "type": "int",
      "name": "getTextLength"
     },
     {
      "params": [],
      "type": "int",
      "name": "getTextOffset"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "hasTextCharacters"
     },
     {
      "params": [],
      "type": "Number",
      "name": "getNumberValue"
     },
     {
      "params": [],
      "type": "NumberType",
      "name": "getNumberType"
     },
     {
      "params": [],
      "type": "byte",
      "name": "getByteValue"
     },
     {
      "params": [],
      "type": "short",
      "name": "getShortValue"
     },
     {
      "params": [],
      "type": "int",
      "name": "getIntValue"
     },
     {
      "params": [],
      "type": "long",
      "name": "getLongValue"
     },
     {
      "params": [],
      "type": "BigInteger",
      "name": "getBigIntegerValue"
     },
     {
      "params": [],
      "type": "float",
      "name": "getFloatValue"
     },
     {
      "params": [],
      "type": "double",
      "name": "getDoubleValue"
     },
     {
      "params": [],
      "type": "BigDecimal",
      "name": "getDecimalValue"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "getBooleanValue"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getEmbeddedObject"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "bv"
       }
      ],
      "type": "byte",
      "name": "getBinaryValue"
     },
     {
      "params": [],
      "type": "byte",
      "name": "getBinaryValue"
     },
     {
      "params": [
       {
        "type": "OutputStream",
        "name": "out"
       }
      ],
      "type": "int",
      "name": "readBinaryValue"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "bv"
       },
       {
        "type": "OutputStream",
        "name": "out"
       }
      ],
      "type": "int",
      "name": "readBinaryValue"
     },
     {
      "params": [],
      "type": "int",
      "name": "getValueAsInt"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "def"
       }
      ],
      "type": "int",
      "name": "getValueAsInt"
     },
     {
      "params": [],
      "type": "long",
      "name": "getValueAsLong"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "def"
       }
      ],
      "type": "long",
      "name": "getValueAsLong"
     },
     {
      "params": [],
      "type": "double",
      "name": "getValueAsDouble"
     },
     {
      "params": [
       {
        "type": "double",
        "name": "def"
       }
      ],
      "type": "double",
      "name": "getValueAsDouble"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "getValueAsBoolean"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "def"
       }
      ],
      "type": "boolean",
      "name": "getValueAsBoolean"
     },
     {
      "params": [],
      "type": "String",
      "name": "getValueAsString"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "def"
       }
      ],
      "type": "String",
      "name": "getValueAsString"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "canReadObjectId"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "canReadTypeId"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getObjectId"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getTypeId"
     },
     {
      "params": [
       {
        "type": "Class",
        "name": "valueType"
       }
      ],
      "type": "T",
      "name": "readValueAs"
     },
     {
      "params": [
       {
        "type": "TypeReference",
        "name": "valueTypeRef"
       }
      ],
      "type": "T",
      "name": "readValueAs"
     },
     {
      "params": [
       {
        "type": "Class",
        "name": "valueType"
       }
      ],
      "type": "Iterator",
      "name": "readValuesAs"
     },
     {
      "params": [
       {
        "type": "TypeReference",
        "name": "valueTypeRef"
       }
      ],
      "type": "Iterator",
      "name": "readValuesAs"
     },
     {
      "params": [],
      "type": "T",
      "name": "readValueAsTree"
     },
     {
      "params": [],
      "type": "ObjectCodec",
      "name": "_codec"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "msg"
       }
      ],
      "type": "JsonParseException",
      "name": "_constructError"
     },
     {
      "params": [],
      "type": null,
      "name": "_reportUnsupportedOperation"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "MIN_BYTE_I"
     },
     {
      "type": "int",
      "name": "MAX_BYTE_I"
     },
     {
      "type": "int",
      "name": "MIN_SHORT_I"
     },
     {
      "type": "int",
      "name": "MAX_SHORT_I"
     },
     {
      "type": "int",
      "name": "_features"
     }
    ]
   }
  ]
 },
 {
  "filename": "JsonGenerationException.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "JsonGenerationException",
    "methods": [
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "g"
       }
      ],
      "type": "JsonGenerationException",
      "name": "withGenerator"
     },
     {
      "params": [],
      "type": "JsonGenerator",
      "name": "getProcessor"
     }
    ],
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "JsonGenerator",
      "name": "_processor"
     }
    ]
   }
  ]
 },
 {
  "filename": "JsonLocation.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "JsonLocation",
    "methods": [
     {
      "params": [],
      "type": "Object",
      "name": "getSourceRef"
     },
     {
      "params": [],
      "type": "int",
      "name": "getLineNr"
     },
     {
      "params": [],
      "type": "int",
      "name": "getColumnNr"
     },
     {
      "params": [],
      "type": "long",
      "name": "getCharOffset"
     },
     {
      "params": [],
      "type": "long",
      "name": "getByteOffset"
     },
     {
      "params": [],
      "type": "String",
      "name": "toString"
     },
     {
      "params": [],
      "type": "int",
      "name": "hashCode"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ],
      "type": "boolean",
      "name": "equals"
     }
    ],
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "JsonLocation",
      "name": "NA"
     },
     {
      "type": "long",
      "name": "_totalBytes"
     },
     {
      "type": "long",
      "name": "_totalChars"
     },
     {
      "type": "int",
      "name": "_lineNr"
     },
     {
      "type": "int",
      "name": "_columnNr"
     },
     {
      "type": "Object",
      "name": "_sourceRef"
     }
    ]
   }
  ]
 },
 {
  "filename": "JsonGenerator.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "JsonGenerator",
    "methods": [
     {
      "params": [
       {
        "type": "ObjectCodec",
        "name": "oc"
       }
      ],
      "type": "JsonGenerator",
      "name": "setCodec"
     },
     {
      "params": [],
      "type": "ObjectCodec",
      "name": "getCodec"
     },
     {
      "params": [],
      "type": "Version",
      "name": "version"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "JsonGenerator",
      "name": "enable"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "JsonGenerator",
      "name": "disable"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       },
       {
        "type": "boolean",
        "name": "state"
       }
      ],
      "type": "JsonGenerator",
      "name": "configure"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "boolean",
      "name": "isEnabled"
     },
     {
      "params": [],
      "type": "int",
      "name": "getFeatureMask"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "values"
       }
      ],
      "type": "JsonGenerator",
      "name": "setFeatureMask"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "values"
       },
       {
        "type": "int",
        "name": "mask"
       }
      ],
      "type": "JsonGenerator",
      "name": "overrideStdFeatures"
     },
     {
      "params": [],
      "type": "int",
      "name": "getFormatFeatures"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "values"
       },
       {
        "type": "int",
        "name": "mask"
       }
      ],
      "type": "JsonGenerator",
      "name": "overrideFormatFeatures"
     },
     {
      "params": [
       {
        "type": "FormatSchema",
        "name": "schema"
       }
      ],
      "type": null,
      "name": "setSchema"
     },
     {
      "params": [],
      "type": "FormatSchema",
      "name": "getSchema"
     },
     {
      "params": [
       {
        "type": "PrettyPrinter",
        "name": "pp"
       }
      ],
      "type": "JsonGenerator",
      "name": "setPrettyPrinter"
     },
     {
      "params": [],
      "type": "PrettyPrinter",
      "name": "getPrettyPrinter"
     },
     {
      "params": [],
      "type": "JsonGenerator",
      "name": "useDefaultPrettyPrinter"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "charCode"
       }
      ],
      "type": "JsonGenerator",
      "name": "setHighestNonEscapedChar"
     },
     {
      "params": [],
      "type": "int",
      "name": "getHighestEscapedChar"
     },
     {
      "params": [],
      "type": "CharacterEscapes",
      "name": "getCharacterEscapes"
     },
     {
      "params": [
       {
        "type": "CharacterEscapes",
        "name": "esc"
       }
      ],
      "type": "JsonGenerator",
      "name": "setCharacterEscapes"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "sep"
       }
      ],
      "type": "JsonGenerator",
      "name": "setRootValueSeparator"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getOutputTarget"
     },
     {
      "params": [],
      "type": "int",
      "name": "getOutputBuffered"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getCurrentValue"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "v"
       }
      ],
      "type": null,
      "name": "setCurrentValue"
     },
     {
      "params": [
       {
        "type": "FormatSchema",
        "name": "schema"
       }
      ],
      "type": "boolean",
      "name": "canUseSchema"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "canWriteObjectId"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "canWriteTypeId"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "canWriteBinaryNatively"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "canOmitFields"
     },
     {
      "params": [],
      "type": null,
      "name": "writeStartArray"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "size"
       }
      ],
      "type": null,
      "name": "writeStartArray"
     },
     {
      "params": [],
      "type": null,
      "name": "writeEndArray"
     },
     {
      "params": [],
      "type": null,
      "name": "writeStartObject"
     },
     {
      "params": [],
      "type": null,
      "name": "writeEndObject"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": null,
      "name": "writeFieldName"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "name"
       }
      ],
      "type": null,
      "name": "writeFieldName"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeString"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeString"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeString"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "length"
       }
      ],
      "type": null,
      "name": "writeRawUTF8String"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "length"
       }
      ],
      "type": null,
      "name": "writeUTF8String"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "c"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "raw"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeRawValue"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeRawValue"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeRawValue"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "raw"
       }
      ],
      "type": null,
      "name": "writeRawValue"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "bv"
       },
       {
        "type": "byte",
        "name": "data"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeBinary"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "data"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeBinary"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "data"
       }
      ],
      "type": null,
      "name": "writeBinary"
     },
     {
      "params": [
       {
        "type": "InputStream",
        "name": "data"
       },
       {
        "type": "int",
        "name": "dataLength"
       }
      ],
      "type": "int",
      "name": "writeBinary"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "bv"
       },
       {
        "type": "InputStream",
        "name": "data"
       },
       {
        "type": "int",
        "name": "dataLength"
       }
      ],
      "type": "int",
      "name": "writeBinary"
     },
     {
      "params": [
       {
        "type": "short",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "BigInteger",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "float",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "BigDecimal",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "encodedValue"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "state"
       }
      ],
      "type": null,
      "name": "writeBoolean"
     },
     {
      "params": [],
      "type": null,
      "name": "writeNull"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "id"
       }
      ],
      "type": null,
      "name": "writeObjectId"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "id"
       }
      ],
      "type": null,
      "name": "writeObjectRef"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "id"
       }
      ],
      "type": null,
      "name": "writeTypeId"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "pojo"
       }
      ],
      "type": null,
      "name": "writeObject"
     },
     {
      "params": [
       {
        "type": "TreeNode",
        "name": "rootNode"
       }
      ],
      "type": null,
      "name": "writeTree"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "fieldName"
       },
       {
        "type": "String",
        "name": "value"
       }
      ],
      "type": null,
      "name": "writeStringField"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "fieldName"
       },
       {
        "type": "boolean",
        "name": "value"
       }
      ],
      "type": null,
      "name": "writeBooleanField"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "fieldName"
       }
      ],
      "type": null,
      "name": "writeNullField"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "fieldName"
       },
       {
        "type": "int",
        "name": "value"
       }
      ],
      "type": null,
      "name": "writeNumberField"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "fieldName"
       },
       {
        "type": "long",
        "name": "value"
       }
      ],
      "type": null,
      "name": "writeNumberField"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "fieldName"
       },
       {
        "type": "double",
        "name": "value"
       }
      ],
      "type": null,
      "name": "writeNumberField"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "fieldName"
       },
       {
        "type": "float",
        "name": "value"
       }
      ],
      "type": null,
      "name": "writeNumberField"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "fieldName"
       },
       {
        "type": "BigDecimal",
        "name": "value"
       }
      ],
      "type": null,
      "name": "writeNumberField"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "fieldName"
       },
       {
        "type": "byte",
        "name": "data"
       }
      ],
      "type": null,
      "name": "writeBinaryField"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "fieldName"
       }
      ],
      "type": null,
      "name": "writeArrayFieldStart"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "fieldName"
       }
      ],
      "type": null,
      "name": "writeObjectFieldStart"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "fieldName"
       },
       {
        "type": "Object",
        "name": "pojo"
       }
      ],
      "type": null,
      "name": "writeObjectField"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "fieldName"
       }
      ],
      "type": null,
      "name": "writeOmittedField"
     },
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "p"
       }
      ],
      "type": null,
      "name": "copyCurrentEvent"
     },
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "p"
       }
      ],
      "type": null,
      "name": "copyCurrentStructure"
     },
     {
      "params": [],
      "type": "JsonStreamContext",
      "name": "getOutputContext"
     },
     {
      "params": [],
      "type": null,
      "name": "flush"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isClosed"
     },
     {
      "params": [],
      "type": null,
      "name": "close"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "msg"
       }
      ],
      "type": null,
      "name": "_reportError"
     },
     {
      "params": [],
      "type": null,
      "name": "_throwInternal"
     },
     {
      "params": [],
      "type": null,
      "name": "_reportUnsupportedOperation"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "value"
       }
      ],
      "type": null,
      "name": "_writeSimpleObject"
     }
    ],
    "fields": [
     {
      "type": "PrettyPrinter",
      "name": "_cfgPrettyPrinter"
     }
    ]
   }
  ]
 },
 {
  "filename": "JsonPointer.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "JsonPointer",
    "methods": [
     {
      "params": [
       {
        "type": "String",
        "name": "input"
       }
      ],
      "type": "JsonPointer",
      "name": "compile"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "input"
       }
      ],
      "type": "JsonPointer",
      "name": "valueOf"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "matches"
     },
     {
      "params": [],
      "type": "String",
      "name": "getMatchingProperty"
     },
     {
      "params": [],
      "type": "int",
      "name": "getMatchingIndex"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "mayMatchProperty"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "mayMatchElement"
     },
     {
      "params": [],
      "type": "JsonPointer",
      "name": "last"
     },
     {
      "params": [
       {
        "type": "JsonPointer",
        "name": "tail"
       }
      ],
      "type": "JsonPointer",
      "name": "append"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": "boolean",
      "name": "matchesProperty"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": "JsonPointer",
      "name": "matchProperty"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ],
      "type": "boolean",
      "name": "matchesElement"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ],
      "type": "JsonPointer",
      "name": "matchElement"
     },
     {
      "params": [],
      "type": "JsonPointer",
      "name": "tail"
     },
     {
      "params": [],
      "type": "JsonPointer",
      "name": "head"
     },
     {
      "params": [],
      "type": "String",
      "name": "toString"
     },
     {
      "params": [],
      "type": "int",
      "name": "hashCode"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "o"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "str"
       }
      ],
      "type": "int",
      "name": "_parseIndex"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "input"
       }
      ],
      "type": "JsonPointer",
      "name": "_parseTail"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "input"
       },
       {
        "type": "int",
        "name": "i"
       }
      ],
      "type": "JsonPointer",
      "name": "_parseQuotedTail"
     },
     {
      "params": [],
      "type": "JsonPointer",
      "name": "_constructHead"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "suffixLength"
       },
       {
        "type": "JsonPointer",
        "name": "last"
       }
      ],
      "type": "JsonPointer",
      "name": "_constructHead"
     },
     {
      "params": [
       {
        "type": "StringBuilder",
        "name": "sb"
       },
       {
        "type": "char",
        "name": "c"
       }
      ],
      "type": null,
      "name": "_appendEscape"
     }
    ],
    "fields": [
     {
      "type": "JsonPointer",
      "name": "EMPTY"
     },
     {
      "type": "JsonPointer",
      "name": "_nextSegment"
     },
     {
      "type": "JsonPointer",
      "name": "_head"
     },
     {
      "type": "String",
      "name": "_asString"
     },
     {
      "type": "String",
      "name": "_matchingPropertyName"
     },
     {
      "type": "int",
      "name": "_matchingElementIndex"
     }
    ]
   }
  ]
 },
 {
  "filename": "SerializableString.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "SerializableString",
    "methods": [
     {
      "params": [],
      "type": "String",
      "name": "getValue"
     },
     {
      "params": [],
      "type": "int",
      "name": "charLength"
     },
     {
      "params": [],
      "type": "char",
      "name": "asQuotedChars"
     },
     {
      "params": [],
      "type": "byte",
      "name": "asUnquotedUTF8"
     },
     {
      "params": [],
      "type": "byte",
      "name": "asQuotedUTF8"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "buffer"
       },
       {
        "type": "int",
        "name": "offset"
       }
      ],
      "type": "int",
      "name": "appendQuotedUTF8"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "buffer"
       },
       {
        "type": "int",
        "name": "offset"
       }
      ],
      "type": "int",
      "name": "appendQuoted"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "buffer"
       },
       {
        "type": "int",
        "name": "offset"
       }
      ],
      "type": "int",
      "name": "appendUnquotedUTF8"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "buffer"
       },
       {
        "type": "int",
        "name": "offset"
       }
      ],
      "type": "int",
      "name": "appendUnquoted"
     },
     {
      "params": [
       {
        "type": "OutputStream",
        "name": "out"
       }
      ],
      "type": "int",
      "name": "writeQuotedUTF8"
     },
     {
      "params": [
       {
        "type": "OutputStream",
        "name": "out"
       }
      ],
      "type": "int",
      "name": "writeUnquotedUTF8"
     },
     {
      "params": [
       {
        "type": "ByteBuffer",
        "name": "buffer"
       }
      ],
      "type": "int",
      "name": "putQuotedUTF8"
     },
     {
      "params": [
       {
        "type": "ByteBuffer",
        "name": "out"
       }
      ],
      "type": "int",
      "name": "putUnquotedUTF8"
     }
    ],
    "fields": []
   }
  ]
 },
 {
  "filename": "Base64Variants.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "Base64Variants",
    "methods": [
     {
      "params": [],
      "type": "Base64Variant",
      "name": "getDefaultVariant"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": "Base64Variant",
      "name": "valueOf"
     }
    ],
    "fields": [
     {
      "type": "String",
      "name": "STD_BASE64_ALPHABET"
     },
     {
      "type": "Base64Variant",
      "name": "MIME"
     },
     {
      "type": "Base64Variant",
      "name": "MIME_NO_LINEFEEDS"
     },
     {
      "type": "Base64Variant",
      "name": "PEM"
     },
     {
      "type": "Base64Variant",
      "name": "MODIFIED_FOR_URL"
     }
    ]
   }
  ]
 },
 {
  "filename": "Base64Variant.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "Base64Variant",
    "methods": [
     {
      "params": [],
      "type": "Object",
      "name": "readResolve"
     },
     {
      "params": [],
      "type": "String",
      "name": "getName"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "usesPadding"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "c"
       }
      ],
      "type": "boolean",
      "name": "usesPaddingChar"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ch"
       }
      ],
      "type": "boolean",
      "name": "usesPaddingChar"
     },
     {
      "params": [],
      "type": "char",
      "name": "getPaddingChar"
     },
     {
      "params": [],
      "type": "byte",
      "name": "getPaddingByte"
     },
     {
      "params": [],
      "type": "int",
      "name": "getMaxLineLength"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "c"
       }
      ],
      "type": "int",
      "name": "decodeBase64Char"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ch"
       }
      ],
      "type": "int",
      "name": "decodeBase64Char"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "b"
       }
      ],
      "type": "int",
      "name": "decodeBase64Byte"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "value"
       }
      ],
      "type": "char",
      "name": "encodeBase64BitsAsChar"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "b24"
       },
       {
        "type": "char",
        "name": "buffer"
       },
       {
        "type": "int",
        "name": "ptr"
       }
      ],
      "type": "int",
      "name": "encodeBase64Chunk"
     },
     {
      "params": [
       {
        "type": "StringBuilder",
        "name": "sb"
       },
       {
        "type": "int",
        "name": "b24"
       }
      ],
      "type": null,
      "name": "encodeBase64Chunk"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "bits"
       },
       {
        "type": "int",
        "name": "outputBytes"
       },
       {
        "type": "char",
        "name": "buffer"
       },
       {
        "type": "int",
        "name": "outPtr"
       }
      ],
      "type": "int",
      "name": "encodeBase64Partial"
     },
     {
      "params": [
       {
        "type": "StringBuilder",
        "name": "sb"
       },
       {
        "type": "int",
        "name": "bits"
       },
       {
        "type": "int",
        "name": "outputBytes"
       }
      ],
      "type": null,
      "name": "encodeBase64Partial"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "value"
       }
      ],
      "type": "byte",
      "name": "encodeBase64BitsAsByte"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "b24"
       },
       {
        "type": "byte",
        "name": "buffer"
       },
       {
        "type": "int",
        "name": "ptr"
       }
      ],
      "type": "int",
      "name": "encodeBase64Chunk"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "bits"
       },
       {
        "type": "int",
        "name": "outputBytes"
       },
       {
        "type": "byte",
        "name": "buffer"
       },
       {
        "type": "int",
        "name": "outPtr"
       }
      ],
      "type": "int",
      "name": "encodeBase64Partial"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "input"
       }
      ],
      "type": "String",
      "name": "encode"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "input"
       },
       {
        "type": "boolean",
        "name": "addQuotes"
       }
      ],
      "type": "String",
      "name": "encode"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "input"
       }
      ],
      "type": "byte",
      "name": "decode"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "str"
       },
       {
        "type": "ByteArrayBuilder",
        "name": "builder"
       }
      ],
      "type": null,
      "name": "decode"
     },
     {
      "params": [],
      "type": "String",
      "name": "toString"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "o"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [],
      "type": "int",
      "name": "hashCode"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "ch"
       },
       {
        "type": "int",
        "name": "bindex"
       },
       {
        "type": "String",
        "name": "msg"
       }
      ],
      "type": null,
      "name": "_reportInvalidBase64"
     },
     {
      "params": [],
      "type": null,
      "name": "_reportBase64EOF"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "INT_SPACE"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "char",
      "name": "PADDING_CHAR_NONE"
     },
     {
      "type": "int",
      "name": "BASE64_VALUE_INVALID"
     },
     {
      "type": "int",
      "name": "BASE64_VALUE_PADDING"
     },
     {
      "type": "int",
      "name": "_asciiToBase64"
     },
     {
      "type": "char",
      "name": "_base64ToAsciiC"
     },
     {
      "type": "byte",
      "name": "_base64ToAsciiB"
     },
     {
      "type": "String",
      "name": "_name"
     },
     {
      "type": "boolean",
      "name": "_usesPadding"
     },
     {
      "type": "char",
      "name": "_paddingChar"
     },
     {
      "type": "int",
      "name": "_maxLineLength"
     }
    ]
   }
  ]
 },
 {
  "filename": "JsonStreamContext.java",
  "package_name": "com.fasterxml.jackson.core",
  "classes": [
   {
    "name": "JsonStreamContext",
    "methods": [
     {
      "params": [],
      "type": "JsonStreamContext",
      "name": "getParent"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "inArray"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "inRoot"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "inObject"
     },
     {
      "params": [],
      "type": "String",
      "name": "getTypeDesc"
     },
     {
      "params": [],
      "type": "int",
      "name": "getEntryCount"
     },
     {
      "params": [],
      "type": "int",
      "name": "getCurrentIndex"
     },
     {
      "params": [],
      "type": "String",
      "name": "getCurrentName"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getCurrentValue"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "v"
       }
      ],
      "type": null,
      "name": "setCurrentValue"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "TYPE_ROOT"
     },
     {
      "type": "int",
      "name": "TYPE_ARRAY"
     },
     {
      "type": "int",
      "name": "TYPE_OBJECT"
     },
     {
      "type": "int",
      "name": "_type"
     },
     {
      "type": "int",
      "name": "_index"
     }
    ]
   }
  ]
 },
 {
  "filename": "TypeReference.java",
  "package_name": "com.fasterxml.jackson.core.type",
  "classes": [
   {
    "name": "TypeReference",
    "methods": [
     {
      "params": [],
      "type": "Type",
      "name": "getType"
     },
     {
      "params": [
       {
        "type": "TypeReference",
        "name": "o"
       }
      ],
      "type": "int",
      "name": "compareTo"
     }
    ],
    "fields": [
     {
      "type": "Type",
      "name": "_type"
     }
    ]
   }
  ]
 },
 {
  "filename": "package-info.java",
  "package_name": "com.fasterxml.jackson.core.type",
  "classes": []
 },
 {
  "filename": "ResolvedType.java",
  "package_name": "com.fasterxml.jackson.core.type",
  "classes": [
   {
    "name": "ResolvedType",
    "methods": [
     {
      "params": [],
      "type": "Class",
      "name": "getRawClass"
     },
     {
      "params": [
       {
        "type": "Class",
        "name": "clz"
       }
      ],
      "type": "boolean",
      "name": "hasRawClass"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isAbstract"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isConcrete"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isThrowable"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isArrayType"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isEnumType"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isInterface"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isPrimitive"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isFinal"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isContainerType"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isCollectionLikeType"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isReferenceType"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isMapLikeType"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "hasGenericTypes"
     },
     {
      "params": [],
      "type": "Class",
      "name": "getParameterSource"
     },
     {
      "params": [],
      "type": "ResolvedType",
      "name": "getKeyType"
     },
     {
      "params": [],
      "type": "ResolvedType",
      "name": "getContentType"
     },
     {
      "params": [],
      "type": "ResolvedType",
      "name": "getReferencedType"
     },
     {
      "params": [],
      "type": "int",
      "name": "containedTypeCount"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ],
      "type": "ResolvedType",
      "name": "containedType"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ],
      "type": "String",
      "name": "containedTypeName"
     },
     {
      "params": [],
      "type": "String",
      "name": "toCanonical"
     }
    ],
    "fields": []
   }
  ]
 },
 {
  "filename": "Name.java",
  "package_name": "com.fasterxml.jackson.core.sym",
  "classes": [
   {
    "name": "Name",
    "methods": [
     {
      "params": [],
      "type": "String",
      "name": "getName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q1"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q1"
       },
       {
        "type": "int",
        "name": "q2"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q1"
       },
       {
        "type": "int",
        "name": "q2"
       },
       {
        "type": "int",
        "name": "q3"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quads"
       },
       {
        "type": "int",
        "name": "qlen"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [],
      "type": "String",
      "name": "toString"
     },
     {
      "params": [],
      "type": "int",
      "name": "hashCode"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "o"
       }
      ],
      "type": "boolean",
      "name": "equals"
     }
    ],
    "fields": [
     {
      "type": "String",
      "name": "_name"
     },
     {
      "type": "int",
      "name": "_hashCode"
     }
    ]
   }
  ]
 },
 {
  "filename": "ByteQuadsCanonicalizer.java",
  "package_name": "com.fasterxml.jackson.core.sym",
  "classes": [
   {
    "name": "ByteQuadsCanonicalizer",
    "methods": [
     {
      "params": [],
      "type": "ByteQuadsCanonicalizer",
      "name": "createRoot"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "seed"
       }
      ],
      "type": "ByteQuadsCanonicalizer",
      "name": "createRoot"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "flags"
       }
      ],
      "type": "ByteQuadsCanonicalizer",
      "name": "makeChild"
     },
     {
      "params": [],
      "type": null,
      "name": "release"
     },
     {
      "params": [
       {
        "type": "TableInfo",
        "name": "childState"
       }
      ],
      "type": null,
      "name": "mergeChild"
     },
     {
      "params": [],
      "type": "int",
      "name": "size"
     },
     {
      "params": [],
      "type": "int",
      "name": "bucketCount"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "maybeDirty"
     },
     {
      "params": [],
      "type": "int",
      "name": "hashSeed"
     },
     {
      "params": [],
      "type": "int",
      "name": "primaryCount"
     },
     {
      "params": [],
      "type": "int",
      "name": "secondaryCount"
     },
     {
      "params": [],
      "type": "int",
      "name": "tertiaryCount"
     },
     {
      "params": [],
      "type": "int",
      "name": "spilloverCount"
     },
     {
      "params": [],
      "type": "int",
      "name": "totalCount"
     },
     {
      "params": [],
      "type": "String",
      "name": "toString"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q1"
       }
      ],
      "type": "String",
      "name": "findName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q1"
       },
       {
        "type": "int",
        "name": "q2"
       }
      ],
      "type": "String",
      "name": "findName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q1"
       },
       {
        "type": "int",
        "name": "q2"
       },
       {
        "type": "int",
        "name": "q3"
       }
      ],
      "type": "String",
      "name": "findName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q"
       },
       {
        "type": "int",
        "name": "qlen"
       }
      ],
      "type": "String",
      "name": "findName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "hash"
       }
      ],
      "type": "int",
      "name": "_calcOffset"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "origOffset"
       },
       {
        "type": "int",
        "name": "q1"
       }
      ],
      "type": "String",
      "name": "_findSecondary"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "origOffset"
       },
       {
        "type": "int",
        "name": "q1"
       },
       {
        "type": "int",
        "name": "q2"
       }
      ],
      "type": "String",
      "name": "_findSecondary"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "origOffset"
       },
       {
        "type": "int",
        "name": "q1"
       },
       {
        "type": "int",
        "name": "q2"
       },
       {
        "type": "int",
        "name": "q3"
       }
      ],
      "type": "String",
      "name": "_findSecondary"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "origOffset"
       },
       {
        "type": "int",
        "name": "hash"
       },
       {
        "type": "int",
        "name": "q"
       },
       {
        "type": "int",
        "name": "qlen"
       }
      ],
      "type": "String",
      "name": "_findSecondary"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q"
       },
       {
        "type": "int",
        "name": "qlen"
       },
       {
        "type": "int",
        "name": "spillOffset"
       }
      ],
      "type": "boolean",
      "name": "_verifyLongName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q"
       },
       {
        "type": "int",
        "name": "qlen"
       },
       {
        "type": "int",
        "name": "spillOffset"
       }
      ],
      "type": "boolean",
      "name": "_verifyLongName2"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       },
       {
        "type": "int",
        "name": "q1"
       }
      ],
      "type": "String",
      "name": "addName"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       },
       {
        "type": "int",
        "name": "q1"
       },
       {
        "type": "int",
        "name": "q2"
       }
      ],
      "type": "String",
      "name": "addName"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       },
       {
        "type": "int",
        "name": "q1"
       },
       {
        "type": "int",
        "name": "q2"
       },
       {
        "type": "int",
        "name": "q3"
       }
      ],
      "type": "String",
      "name": "addName"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       },
       {
        "type": "int",
        "name": "q"
       },
       {
        "type": "int",
        "name": "qlen"
       }
      ],
      "type": "String",
      "name": "addName"
     },
     {
      "params": [],
      "type": null,
      "name": "_verifyNeedForRehash"
     },
     {
      "params": [],
      "type": null,
      "name": "_verifySharing"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "hash"
       }
      ],
      "type": "int",
      "name": "_findOffsetForAdd"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quads"
       },
       {
        "type": "int",
        "name": "qlen"
       }
      ],
      "type": "int",
      "name": "_appendLongName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q1"
       }
      ],
      "type": "int",
      "name": "calcHash"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q1"
       },
       {
        "type": "int",
        "name": "q2"
       }
      ],
      "type": "int",
      "name": "calcHash"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q1"
       },
       {
        "type": "int",
        "name": "q2"
       },
       {
        "type": "int",
        "name": "q3"
       }
      ],
      "type": "int",
      "name": "calcHash"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q"
       },
       {
        "type": "int",
        "name": "qlen"
       }
      ],
      "type": "int",
      "name": "calcHash"
     },
     {
      "params": [],
      "type": null,
      "name": "rehash"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "fill"
       }
      ],
      "type": null,
      "name": "nukeSymbols"
     },
     {
      "params": [],
      "type": "int",
      "name": "_spilloverStart"
     },
     {
      "params": [],
      "type": null,
      "name": "_reportTooManyCollisions"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "primarySlots"
       }
      ],
      "type": "int",
      "name": "_calcTertiaryShift"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "DEFAULT_T_SIZE"
     },
     {
      "type": "int",
      "name": "MAX_T_SIZE"
     },
     {
      "type": "int",
      "name": "MIN_HASH_SIZE"
     },
     {
      "type": "int",
      "name": "MAX_ENTRIES_FOR_REUSE"
     },
     {
      "type": "ByteQuadsCanonicalizer",
      "name": "_parent"
     },
     {
      "type": "AtomicReference",
      "name": "_tableInfo"
     },
     {
      "type": "int",
      "name": "_seed"
     },
     {
      "type": "boolean",
      "name": "_intern"
     },
     {
      "type": "boolean",
      "name": "_failOnDoS"
     },
     {
      "type": "int",
      "name": "_hashArea"
     },
     {
      "type": "int",
      "name": "_hashSize"
     },
     {
      "type": "int",
      "name": "_secondaryStart"
     },
     {
      "type": "int",
      "name": "_tertiaryStart"
     },
     {
      "type": "int",
      "name": "_tertiaryShift"
     },
     {
      "type": "int",
      "name": "_count"
     },
     {
      "type": "String",
      "name": "_names"
     },
     {
      "type": "int",
      "name": "_spilloverEnd"
     },
     {
      "type": "int",
      "name": "_longNameOffset"
     },
     {
      "type": "boolean",
      "name": "_needRehash"
     },
     {
      "type": "boolean",
      "name": "_hashShared"
     },
     {
      "type": "int",
      "name": "MULT"
     },
     {
      "type": "int",
      "name": "MULT2"
     },
     {
      "type": "int",
      "name": "MULT3"
     }
    ]
   }
  ]
 },
 {
  "filename": "Name2.java",
  "package_name": "com.fasterxml.jackson.core.sym",
  "classes": [
   {
    "name": "Name2",
    "methods": [
     {
      "params": [
       {
        "type": "int",
        "name": "quad"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quad1"
       },
       {
        "type": "int",
        "name": "quad2"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quad1"
       },
       {
        "type": "int",
        "name": "quad2"
       },
       {
        "type": "int",
        "name": "q3"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quads"
       },
       {
        "type": "int",
        "name": "qlen"
       }
      ],
      "type": "boolean",
      "name": "equals"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "q1"
     },
     {
      "type": "int",
      "name": "q2"
     }
    ]
   }
  ]
 },
 {
  "filename": "package-info.java",
  "package_name": "com.fasterxml.jackson.core.sym",
  "classes": []
 },
 {
  "filename": "Name3.java",
  "package_name": "com.fasterxml.jackson.core.sym",
  "classes": [
   {
    "name": "Name3",
    "methods": [
     {
      "params": [
       {
        "type": "int",
        "name": "quad"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quad1"
       },
       {
        "type": "int",
        "name": "quad2"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quad1"
       },
       {
        "type": "int",
        "name": "quad2"
       },
       {
        "type": "int",
        "name": "quad3"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quads"
       },
       {
        "type": "int",
        "name": "qlen"
       }
      ],
      "type": "boolean",
      "name": "equals"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "q1"
     },
     {
      "type": "int",
      "name": "q2"
     },
     {
      "type": "int",
      "name": "q3"
     }
    ]
   }
  ]
 },
 {
  "filename": "NameN.java",
  "package_name": "com.fasterxml.jackson.core.sym",
  "classes": [
   {
    "name": "NameN",
    "methods": [
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       },
       {
        "type": "int",
        "name": "hash"
       },
       {
        "type": "int",
        "name": "q"
       },
       {
        "type": "int",
        "name": "qlen"
       }
      ],
      "type": "NameN",
      "name": "construct"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quad"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quad1"
       },
       {
        "type": "int",
        "name": "quad2"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quad1"
       },
       {
        "type": "int",
        "name": "quad2"
       },
       {
        "type": "int",
        "name": "quad3"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quads"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quads"
       }
      ],
      "type": "boolean",
      "name": "_equals2"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "q1"
     },
     {
      "type": "int",
      "name": "q2"
     },
     {
      "type": "int",
      "name": "q3"
     },
     {
      "type": "int",
      "name": "q4"
     },
     {
      "type": "int",
      "name": "qlen"
     },
     {
      "type": "int",
      "name": "q"
     }
    ]
   }
  ]
 },
 {
  "filename": "Name1.java",
  "package_name": "com.fasterxml.jackson.core.sym",
  "classes": [
   {
    "name": "Name1",
    "methods": [
     {
      "params": [],
      "type": "Name1",
      "name": "getEmptyName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quad"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quad1"
       },
       {
        "type": "int",
        "name": "quad2"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q1"
       },
       {
        "type": "int",
        "name": "q2"
       },
       {
        "type": "int",
        "name": "q3"
       }
      ],
      "type": "boolean",
      "name": "equals"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quads"
       },
       {
        "type": "int",
        "name": "qlen"
       }
      ],
      "type": "boolean",
      "name": "equals"
     }
    ],
    "fields": [
     {
      "type": "Name1",
      "name": "EMPTY"
     },
     {
      "type": "int",
      "name": "q"
     }
    ]
   }
  ]
 },
 {
  "filename": "CharsToNameCanonicalizer.java",
  "package_name": "com.fasterxml.jackson.core.sym",
  "classes": [
   {
    "name": "CharsToNameCanonicalizer",
    "methods": [
     {
      "params": [],
      "type": "CharsToNameCanonicalizer",
      "name": "createRoot"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "hashSeed"
       }
      ],
      "type": "CharsToNameCanonicalizer",
      "name": "createRoot"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "initialSize"
       }
      ],
      "type": null,
      "name": "initTables"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "hashAreaSize"
       }
      ],
      "type": "int",
      "name": "_thresholdSize"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "flags"
       }
      ],
      "type": "CharsToNameCanonicalizer",
      "name": "makeChild"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "seed"
       }
      ],
      "type": "CharsToNameCanonicalizer",
      "name": "makeOrphan"
     },
     {
      "params": [
       {
        "type": "CharsToNameCanonicalizer",
        "name": "child"
       }
      ],
      "type": null,
      "name": "mergeChild"
     },
     {
      "params": [],
      "type": null,
      "name": "release"
     },
     {
      "params": [],
      "type": "int",
      "name": "size"
     },
     {
      "params": [],
      "type": "int",
      "name": "bucketCount"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "maybeDirty"
     },
     {
      "params": [],
      "type": "int",
      "name": "hashSeed"
     },
     {
      "params": [],
      "type": "int",
      "name": "collisionCount"
     },
     {
      "params": [],
      "type": "int",
      "name": "maxCollisionLength"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "buffer"
       },
       {
        "type": "int",
        "name": "start"
       },
       {
        "type": "int",
        "name": "len"
       },
       {
        "type": "int",
        "name": "h"
       }
      ],
      "type": "String",
      "name": "findSymbol"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "buffer"
       },
       {
        "type": "int",
        "name": "start"
       },
       {
        "type": "int",
        "name": "len"
       },
       {
        "type": "Bucket",
        "name": "b"
       }
      ],
      "type": "String",
      "name": "_findSymbol2"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "buffer"
       },
       {
        "type": "int",
        "name": "start"
       },
       {
        "type": "int",
        "name": "len"
       },
       {
        "type": "int",
        "name": "h"
       },
       {
        "type": "int",
        "name": "index"
       }
      ],
      "type": "String",
      "name": "_addSymbol"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "bindex"
       },
       {
        "type": "Bucket",
        "name": "newBucket"
       }
      ],
      "type": null,
      "name": "_handleSpillOverflow"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "rawHash"
       }
      ],
      "type": "int",
      "name": "_hashToIndex"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "buffer"
       },
       {
        "type": "int",
        "name": "start"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": "int",
      "name": "calcHash"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "key"
       }
      ],
      "type": "int",
      "name": "calcHash"
     },
     {
      "params": [],
      "type": null,
      "name": "copyArrays"
     },
     {
      "params": [],
      "type": null,
      "name": "rehash"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "maxLen"
       }
      ],
      "type": null,
      "name": "reportTooManyCollisions"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "HASH_MULT"
     },
     {
      "type": "int",
      "name": "DEFAULT_T_SIZE"
     },
     {
      "type": "int",
      "name": "MAX_T_SIZE"
     },
     {
      "type": "int",
      "name": "MAX_ENTRIES_FOR_REUSE"
     },
     {
      "type": "int",
      "name": "MAX_COLL_CHAIN_LENGTH"
     },
     {
      "type": "CharsToNameCanonicalizer",
      "name": "sBootstrapSymbolTable"
     },
     {
      "type": "CharsToNameCanonicalizer",
      "name": "_parent"
     },
     {
      "type": "int",
      "name": "_hashSeed"
     },
     {
      "type": "int",
      "name": "_flags"
     },
     {
      "type": "boolean",
      "name": "_canonicalize"
     },
     {
      "type": "String",
      "name": "_symbols"
     },
     {
      "type": "Bucket",
      "name": "_buckets"
     },
     {
      "type": "int",
      "name": "_size"
     },
     {
      "type": "int",
      "name": "_sizeThreshold"
     },
     {
      "type": "int",
      "name": "_indexMask"
     },
     {
      "type": "int",
      "name": "_longestCollisionList"
     },
     {
      "type": "boolean",
      "name": "_dirty"
     },
     {
      "type": "BitSet",
      "name": "_overflows"
     }
    ]
   }
  ]
 },
 {
  "filename": "TokenFilter.java",
  "package_name": "com.fasterxml.jackson.core.filter",
  "classes": [
   {
    "name": "TokenFilter",
    "methods": [
     {
      "params": [],
      "type": "TokenFilter",
      "name": "filterStartObject"
     },
     {
      "params": [],
      "type": "TokenFilter",
      "name": "filterStartArray"
     },
     {
      "params": [],
      "type": null,
      "name": "filterFinishObject"
     },
     {
      "params": [],
      "type": null,
      "name": "filterFinishArray"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": "TokenFilter",
      "name": "includeProperty"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ],
      "type": "TokenFilter",
      "name": "includeElement"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ],
      "type": "TokenFilter",
      "name": "includeRootValue"
     },
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "p"
       }
      ],
      "type": "boolean",
      "name": "includeValue"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "value"
       }
      ],
      "type": "boolean",
      "name": "includeBoolean"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "includeNull"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "value"
       }
      ],
      "type": "boolean",
      "name": "includeString"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "v"
       }
      ],
      "type": "boolean",
      "name": "includeNumber"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "v"
       }
      ],
      "type": "boolean",
      "name": "includeNumber"
     },
     {
      "params": [
       {
        "type": "float",
        "name": "v"
       }
      ],
      "type": "boolean",
      "name": "includeNumber"
     },
     {
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ],
      "type": "boolean",
      "name": "includeNumber"
     },
     {
      "params": [
       {
        "type": "BigDecimal",
        "name": "v"
       }
      ],
      "type": "boolean",
      "name": "includeNumber"
     },
     {
      "params": [
       {
        "type": "BigInteger",
        "name": "v"
       }
      ],
      "type": "boolean",
      "name": "includeNumber"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "includeBinary"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "includeRawValue"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "ob"
       }
      ],
      "type": "boolean",
      "name": "includeEmbeddedValue"
     },
     {
      "params": [],
      "type": "String",
      "name": "toString"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "_includeScalar"
     }
    ],
    "fields": [
     {
      "type": "TokenFilter",
      "name": "INCLUDE_ALL"
     }
    ]
   }
  ]
 },
 {
  "filename": "FilteringParserDelegate.java",
  "package_name": "com.fasterxml.jackson.core.filter",
  "classes": [
   {
    "name": "FilteringParserDelegate",
    "methods": [
     {
      "params": [],
      "type": "TokenFilter",
      "name": "getFilter"
     },
     {
      "params": [],
      "type": "int",
      "name": "getMatchCount"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "getCurrentToken"
     },
     {
      "params": [],
      "type": "int",
      "name": "getCurrentTokenId"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "hasCurrentToken"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "id"
       }
      ],
      "type": "boolean",
      "name": "hasTokenId"
     },
     {
      "params": [
       {
        "type": "JsonToken",
        "name": "t"
       }
      ],
      "type": "boolean",
      "name": "hasToken"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isExpectedStartArrayToken"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isExpectedStartObjectToken"
     },
     {
      "params": [],
      "type": "JsonLocation",
      "name": "getCurrentLocation"
     },
     {
      "params": [],
      "type": "JsonStreamContext",
      "name": "getParsingContext"
     },
     {
      "params": [],
      "type": "String",
      "name": "getCurrentName"
     },
     {
      "params": [],
      "type": null,
      "name": "clearCurrentToken"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "getLastClearedToken"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": null,
      "name": "overrideCurrentName"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "nextToken"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "_nextToken2"
     },
     {
      "params": [
       {
        "type": "TokenFilterContext",
        "name": "buffRoot"
       }
      ],
      "type": "JsonToken",
      "name": "_nextTokenWithBuffering"
     },
     {
      "params": [
       {
        "type": "TokenFilterContext",
        "name": "buffRoot"
       }
      ],
      "type": "JsonToken",
      "name": "_nextBuffered"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "nextValue"
     },
     {
      "params": [],
      "type": "JsonParser",
      "name": "skipChildren"
     },
     {
      "params": [],
      "type": "String",
      "name": "getText"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "hasTextCharacters"
     },
     {
      "params": [],
      "type": "char",
      "name": "getTextCharacters"
     },
     {
      "params": [],
      "type": "int",
      "name": "getTextLength"
     },
     {
      "params": [],
      "type": "int",
      "name": "getTextOffset"
     },
     {
      "params": [],
      "type": "BigInteger",
      "name": "getBigIntegerValue"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "getBooleanValue"
     },
     {
      "params": [],
      "type": "byte",
      "name": "getByteValue"
     },
     {
      "params": [],
      "type": "short",
      "name": "getShortValue"
     },
     {
      "params": [],
      "type": "BigDecimal",
      "name": "getDecimalValue"
     },
     {
      "params": [],
      "type": "double",
      "name": "getDoubleValue"
     },
     {
      "params": [],
      "type": "float",
      "name": "getFloatValue"
     },
     {
      "params": [],
      "type": "int",
      "name": "getIntValue"
     },
     {
      "params": [],
      "type": "long",
      "name": "getLongValue"
     },
     {
      "params": [],
      "type": "NumberType",
      "name": "getNumberType"
     },
     {
      "params": [],
      "type": "Number",
      "name": "getNumberValue"
     },
     {
      "params": [],
      "type": "int",
      "name": "getValueAsInt"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "defaultValue"
       }
      ],
      "type": "int",
      "name": "getValueAsInt"
     },
     {
      "params": [],
      "type": "long",
      "name": "getValueAsLong"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "defaultValue"
       }
      ],
      "type": "long",
      "name": "getValueAsLong"
     },
     {
      "params": [],
      "type": "double",
      "name": "getValueAsDouble"
     },
     {
      "params": [
       {
        "type": "double",
        "name": "defaultValue"
       }
      ],
      "type": "double",
      "name": "getValueAsDouble"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "getValueAsBoolean"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "defaultValue"
       }
      ],
      "type": "boolean",
      "name": "getValueAsBoolean"
     },
     {
      "params": [],
      "type": "String",
      "name": "getValueAsString"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "defaultValue"
       }
      ],
      "type": "String",
      "name": "getValueAsString"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getEmbeddedObject"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       }
      ],
      "type": "byte",
      "name": "getBinaryValue"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "OutputStream",
        "name": "out"
       }
      ],
      "type": "int",
      "name": "readBinaryValue"
     },
     {
      "params": [],
      "type": "JsonLocation",
      "name": "getTokenLocation"
     },
     {
      "params": [],
      "type": "JsonStreamContext",
      "name": "_filterContext"
     }
    ],
    "fields": [
     {
      "type": "TokenFilter",
      "name": "rootFilter"
     },
     {
      "type": "boolean",
      "name": "_allowMultipleMatches"
     },
     {
      "type": "boolean",
      "name": "_includePath"
     },
     {
      "type": "boolean",
      "name": "_includeImmediateParent"
     },
     {
      "type": "JsonToken",
      "name": "_currToken"
     },
     {
      "type": "JsonToken",
      "name": "_lastClearedToken"
     },
     {
      "type": "TokenFilterContext",
      "name": "_headContext"
     },
     {
      "type": "TokenFilterContext",
      "name": "_exposedContext"
     },
     {
      "type": "TokenFilter",
      "name": "_itemFilter"
     },
     {
      "type": "int",
      "name": "_matchCount"
     }
    ]
   }
  ]
 },
 {
  "filename": "FilteringGeneratorDelegate.java",
  "package_name": "com.fasterxml.jackson.core.filter",
  "classes": [
   {
    "name": "FilteringGeneratorDelegate",
    "methods": [
     {
      "params": [],
      "type": "TokenFilter",
      "name": "getFilter"
     },
     {
      "params": [],
      "type": "JsonStreamContext",
      "name": "getFilterContext"
     },
     {
      "params": [],
      "type": "int",
      "name": "getMatchCount"
     },
     {
      "params": [],
      "type": "JsonStreamContext",
      "name": "getOutputContext"
     },
     {
      "params": [],
      "type": null,
      "name": "writeStartArray"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "size"
       }
      ],
      "type": null,
      "name": "writeStartArray"
     },
     {
      "params": [],
      "type": null,
      "name": "writeEndArray"
     },
     {
      "params": [],
      "type": null,
      "name": "writeStartObject"
     },
     {
      "params": [],
      "type": null,
      "name": "writeEndObject"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": null,
      "name": "writeFieldName"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "name"
       }
      ],
      "type": null,
      "name": "writeFieldName"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "value"
       }
      ],
      "type": null,
      "name": "writeString"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeString"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "value"
       }
      ],
      "type": null,
      "name": "writeString"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "length"
       }
      ],
      "type": null,
      "name": "writeRawUTF8String"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "length"
       }
      ],
      "type": null,
      "name": "writeUTF8String"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "c"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeRawValue"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeRawValue"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeRawValue"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "byte",
        "name": "data"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeBinary"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "InputStream",
        "name": "data"
       },
       {
        "type": "int",
        "name": "dataLength"
       }
      ],
      "type": "int",
      "name": "writeBinary"
     },
     {
      "params": [
       {
        "type": "short",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "BigInteger",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "float",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "BigDecimal",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "encodedValue"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeBoolean"
     },
     {
      "params": [],
      "type": null,
      "name": "writeNull"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "fieldName"
       }
      ],
      "type": null,
      "name": "writeOmittedField"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "id"
       }
      ],
      "type": null,
      "name": "writeObjectId"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "id"
       }
      ],
      "type": null,
      "name": "writeObjectRef"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "id"
       }
      ],
      "type": null,
      "name": "writeTypeId"
     },
     {
      "params": [],
      "type": null,
      "name": "_checkParentPath"
     },
     {
      "params": [],
      "type": null,
      "name": "_checkPropertyParentPath"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "_checkBinaryWrite"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "_checkRawValueWrite"
     }
    ],
    "fields": [
     {
      "type": "TokenFilter",
      "name": "rootFilter"
     },
     {
      "type": "boolean",
      "name": "_allowMultipleMatches"
     },
     {
      "type": "boolean",
      "name": "_includePath"
     },
     {
      "type": "boolean",
      "name": "_includeImmediateParent"
     },
     {
      "type": "TokenFilterContext",
      "name": "_filterContext"
     },
     {
      "type": "TokenFilter",
      "name": "_itemFilter"
     },
     {
      "type": "int",
      "name": "_matchCount"
     }
    ]
   }
  ]
 },
 {
  "filename": "JsonPointerBasedFilter.java",
  "package_name": "com.fasterxml.jackson.core.filter",
  "classes": [
   {
    "name": "JsonPointerBasedFilter",
    "methods": [
     {
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ],
      "type": "TokenFilter",
      "name": "includeElement"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": "TokenFilter",
      "name": "includeProperty"
     },
     {
      "params": [],
      "type": "TokenFilter",
      "name": "filterStartArray"
     },
     {
      "params": [],
      "type": "TokenFilter",
      "name": "filterStartObject"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "_includeScalar"
     },
     {
      "params": [],
      "type": "String",
      "name": "toString"
     }
    ],
    "fields": [
     {
      "type": "JsonPointer",
      "name": "_pathToMatch"
     }
    ]
   }
  ]
 },
 {
  "filename": "TokenFilterContext.java",
  "package_name": "com.fasterxml.jackson.core.filter",
  "classes": [
   {
    "name": "TokenFilterContext",
    "methods": [
     {
      "params": [
       {
        "type": "int",
        "name": "type"
       },
       {
        "type": "TokenFilter",
        "name": "filter"
       },
       {
        "type": "boolean",
        "name": "startWritten"
       }
      ],
      "type": "TokenFilterContext",
      "name": "reset"
     },
     {
      "params": [
       {
        "type": "TokenFilter",
        "name": "filter"
       }
      ],
      "type": "TokenFilterContext",
      "name": "createRootContext"
     },
     {
      "params": [
       {
        "type": "TokenFilter",
        "name": "filter"
       },
       {
        "type": "boolean",
        "name": "writeStart"
       }
      ],
      "type": "TokenFilterContext",
      "name": "createChildArrayContext"
     },
     {
      "params": [
       {
        "type": "TokenFilter",
        "name": "filter"
       },
       {
        "type": "boolean",
        "name": "writeStart"
       }
      ],
      "type": "TokenFilterContext",
      "name": "createChildObjectContext"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": "TokenFilter",
      "name": "setFieldName"
     },
     {
      "params": [
       {
        "type": "TokenFilter",
        "name": "filter"
       }
      ],
      "type": "TokenFilter",
      "name": "checkValue"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "gen"
       }
      ],
      "type": null,
      "name": "writePath"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "gen"
       }
      ],
      "type": null,
      "name": "writeImmediatePath"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "gen"
       }
      ],
      "type": null,
      "name": "_writePath"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "gen"
       }
      ],
      "type": "TokenFilterContext",
      "name": "closeArray"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "gen"
       }
      ],
      "type": "TokenFilterContext",
      "name": "closeObject"
     },
     {
      "params": [],
      "type": null,
      "name": "skipParentChecks"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getCurrentValue"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "v"
       }
      ],
      "type": null,
      "name": "setCurrentValue"
     },
     {
      "params": [],
      "type": "TokenFilterContext",
      "name": "getParent"
     },
     {
      "params": [],
      "type": "String",
      "name": "getCurrentName"
     },
     {
      "params": [],
      "type": "TokenFilter",
      "name": "getFilter"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isStartHandled"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "nextTokenToRead"
     },
     {
      "params": [
       {
        "type": "TokenFilterContext",
        "name": "parent"
       }
      ],
      "type": "TokenFilterContext",
      "name": "findChildOf"
     },
     {
      "params": [
       {
        "type": "StringBuilder",
        "name": "sb"
       }
      ],
      "type": null,
      "name": "appendDesc"
     },
     {
      "params": [],
      "type": "String",
      "name": "toString"
     }
    ],
    "fields": [
     {
      "type": "TokenFilterContext",
      "name": "_parent"
     },
     {
      "type": "TokenFilterContext",
      "name": "_child"
     },
     {
      "type": "String",
      "name": "_currentName"
     },
     {
      "type": "TokenFilter",
      "name": "_filter"
     },
     {
      "type": "boolean",
      "name": "_startHandled"
     },
     {
      "type": "boolean",
      "name": "_needToHandleName"
     }
    ]
   }
  ]
 },
 {
  "filename": "ReaderBasedJsonParser.java",
  "package_name": "com.fasterxml.jackson.core.json",
  "classes": [
   {
    "name": "ReaderBasedJsonParser",
    "methods": [
     {
      "params": [],
      "type": "ObjectCodec",
      "name": "getCodec"
     },
     {
      "params": [
       {
        "type": "ObjectCodec",
        "name": "c"
       }
      ],
      "type": null,
      "name": "setCodec"
     },
     {
      "params": [
       {
        "type": "Writer",
        "name": "w"
       }
      ],
      "type": "int",
      "name": "releaseBuffered"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getInputSource"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "loadMore"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "eofMsg"
       }
      ],
      "type": "char",
      "name": "getNextChar"
     },
     {
      "params": [],
      "type": null,
      "name": "_closeInput"
     },
     {
      "params": [],
      "type": null,
      "name": "_releaseBuffers"
     },
     {
      "params": [],
      "type": "String",
      "name": "getText"
     },
     {
      "params": [],
      "type": "String",
      "name": "getValueAsString"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "defValue"
       }
      ],
      "type": "String",
      "name": "getValueAsString"
     },
     {
      "params": [
       {
        "type": "JsonToken",
        "name": "t"
       }
      ],
      "type": "String",
      "name": "_getText2"
     },
     {
      "params": [],
      "type": "char",
      "name": "getTextCharacters"
     },
     {
      "params": [],
      "type": "int",
      "name": "getTextLength"
     },
     {
      "params": [],
      "type": "int",
      "name": "getTextOffset"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       }
      ],
      "type": "byte",
      "name": "getBinaryValue"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "OutputStream",
        "name": "out"
       }
      ],
      "type": "int",
      "name": "readBinaryValue"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "OutputStream",
        "name": "out"
       },
       {
        "type": "byte",
        "name": "buffer"
       }
      ],
      "type": "int",
      "name": "_readBinary"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "nextToken"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "_nextAfterName"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "sstr"
       }
      ],
      "type": "boolean",
      "name": "nextFieldName"
     },
     {
      "params": [],
      "type": "String",
      "name": "nextFieldName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ],
      "type": null,
      "name": "_isNextTokenNameYes"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "i"
       },
       {
        "type": "String",
        "name": "nameToMatch"
       }
      ],
      "type": "boolean",
      "name": "_isNextTokenNameMaybe"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ],
      "type": "JsonToken",
      "name": "_nextTokenNotInObject"
     },
     {
      "params": [],
      "type": "String",
      "name": "nextTextValue"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "defaultValue"
       }
      ],
      "type": "int",
      "name": "nextIntValue"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "defaultValue"
       }
      ],
      "type": "long",
      "name": "nextLongValue"
     },
     {
      "params": [],
      "type": "Boolean",
      "name": "nextBooleanValue"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ch"
       }
      ],
      "type": "JsonToken",
      "name": "_parsePosNumber"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ch"
       },
       {
        "type": "int",
        "name": "startPtr"
       },
       {
        "type": "int",
        "name": "ptr"
       },
       {
        "type": "boolean",
        "name": "neg"
       },
       {
        "type": "int",
        "name": "intLen"
       }
      ],
      "type": "JsonToken",
      "name": "_parseFloat"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "_parseNegNumber"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "neg"
       },
       {
        "type": "int",
        "name": "startPtr"
       }
      ],
      "type": "JsonToken",
      "name": "_parseNumber2"
     },
     {
      "params": [],
      "type": "char",
      "name": "_verifyNoLeadingZeroes"
     },
     {
      "params": [],
      "type": "char",
      "name": "_verifyNLZ2"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ch"
       },
       {
        "type": "boolean",
        "name": "negative"
       }
      ],
      "type": "JsonToken",
      "name": "_handleInvalidNumberStart"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ch"
       }
      ],
      "type": null,
      "name": "_verifyRootSpace"
     },
     {
      "params": [],
      "type": "String",
      "name": "_parseName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "startPtr"
       },
       {
        "type": "int",
        "name": "hash"
       },
       {
        "type": "int",
        "name": "endChar"
       }
      ],
      "type": "String",
      "name": "_parseName2"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ],
      "type": "String",
      "name": "_handleOddName"
     },
     {
      "params": [],
      "type": "String",
      "name": "_parseAposName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ],
      "type": "JsonToken",
      "name": "_handleOddValue"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "_handleApos"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "startPtr"
       },
       {
        "type": "int",
        "name": "hash"
       },
       {
        "type": "int",
        "name": "codes"
       }
      ],
      "type": "String",
      "name": "_handleOddName2"
     },
     {
      "params": [],
      "type": null,
      "name": "_finishString"
     },
     {
      "params": [],
      "type": null,
      "name": "_finishString2"
     },
     {
      "params": [],
      "type": null,
      "name": "_skipString"
     },
     {
      "params": [],
      "type": null,
      "name": "_skipCR"
     },
     {
      "params": [],
      "type": "int",
      "name": "_skipColon"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "gotColon"
       }
      ],
      "type": "int",
      "name": "_skipColon2"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ptr"
       }
      ],
      "type": "int",
      "name": "_skipColonFast"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ],
      "type": "int",
      "name": "_skipComma"
     },
     {
      "params": [],
      "type": "int",
      "name": "_skipAfterComma2"
     },
     {
      "params": [],
      "type": "int",
      "name": "_skipWSOrEnd"
     },
     {
      "params": [],
      "type": "int",
      "name": "_skipWSOrEnd2"
     },
     {
      "params": [],
      "type": null,
      "name": "_skipComment"
     },
     {
      "params": [],
      "type": null,
      "name": "_skipCComment"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "_skipYAMLComment"
     },
     {
      "params": [],
      "type": null,
      "name": "_skipLine"
     },
     {
      "params": [],
      "type": "char",
      "name": "_decodeEscaped"
     },
     {
      "params": [],
      "type": null,
      "name": "_matchTrue"
     },
     {
      "params": [],
      "type": null,
      "name": "_matchFalse"
     },
     {
      "params": [],
      "type": null,
      "name": "_matchNull"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "matchStr"
       },
       {
        "type": "int",
        "name": "i"
       }
      ],
      "type": null,
      "name": "_matchToken"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       }
      ],
      "type": "byte",
      "name": "_decodeBase64"
     },
     {
      "params": [],
      "type": "JsonLocation",
      "name": "getTokenLocation"
     },
     {
      "params": [],
      "type": "JsonLocation",
      "name": "getCurrentLocation"
     },
     {
      "params": [],
      "type": null,
      "name": "_updateLocation"
     },
     {
      "params": [],
      "type": null,
      "name": "_updateNameLocation"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "matchedPart"
       }
      ],
      "type": null,
      "name": "_reportInvalidToken"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "matchedPart"
       },
       {
        "type": "String",
        "name": "msg"
       }
      ],
      "type": null,
      "name": "_reportInvalidToken"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "_icLatin1"
     },
     {
      "type": "Reader",
      "name": "_reader"
     },
     {
      "type": "char",
      "name": "_inputBuffer"
     },
     {
      "type": "boolean",
      "name": "_bufferRecyclable"
     },
     {
      "type": "ObjectCodec",
      "name": "_objectCodec"
     },
     {
      "type": "CharsToNameCanonicalizer",
      "name": "_symbols"
     },
     {
      "type": "int",
      "name": "_hashSeed"
     },
     {
      "type": "boolean",
      "name": "_tokenIncomplete"
     },
     {
      "type": "long",
      "name": "_nameStartOffset"
     },
     {
      "type": "int",
      "name": "_nameStartRow"
     },
     {
      "type": "int",
      "name": "_nameStartCol"
     }
    ]
   }
  ]
 },
 {
  "filename": "PackageVersion.java",
  "package_name": "com.fasterxml.jackson.core.json",
  "classes": [
   {
    "name": "PackageVersion",
    "methods": [
     {
      "params": [],
      "type": "Version",
      "name": "version"
     }
    ],
    "fields": [
     {
      "type": "Version",
      "name": "VERSION"
     }
    ]
   }
  ]
 },
 {
  "filename": "package-info.java",
  "package_name": "com.fasterxml.jackson.core.json",
  "classes": []
 },
 {
  "filename": "DupDetector.java",
  "package_name": "com.fasterxml.jackson.core.json",
  "classes": [
   {
    "name": "DupDetector",
    "methods": [
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "p"
       }
      ],
      "type": "DupDetector",
      "name": "rootDetector"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "g"
       }
      ],
      "type": "DupDetector",
      "name": "rootDetector"
     },
     {
      "params": [],
      "type": "DupDetector",
      "name": "child"
     },
     {
      "params": [],
      "type": null,
      "name": "reset"
     },
     {
      "params": [],
      "type": "JsonLocation",
      "name": "findLocation"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getSource"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": "boolean",
      "name": "isDup"
     }
    ],
    "fields": [
     {
      "type": "Object",
      "name": "_source"
     },
     {
      "type": "String",
      "name": "_firstName"
     },
     {
      "type": "String",
      "name": "_secondName"
     },
     {
      "type": "HashSet",
      "name": "_seen"
     }
    ]
   }
  ]
 },
 {
  "filename": "JsonGeneratorImpl.java",
  "package_name": "com.fasterxml.jackson.core.json",
  "classes": [
   {
    "name": "JsonGeneratorImpl",
    "methods": [
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "JsonGenerator",
      "name": "enable"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "JsonGenerator",
      "name": "disable"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "newFeatureFlags"
       },
       {
        "type": "int",
        "name": "changedFeatures"
       }
      ],
      "type": null,
      "name": "_checkStdFeatureChanges"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "charCode"
       }
      ],
      "type": "JsonGenerator",
      "name": "setHighestNonEscapedChar"
     },
     {
      "params": [],
      "type": "int",
      "name": "getHighestEscapedChar"
     },
     {
      "params": [
       {
        "type": "CharacterEscapes",
        "name": "esc"
       }
      ],
      "type": "JsonGenerator",
      "name": "setCharacterEscapes"
     },
     {
      "params": [],
      "type": "CharacterEscapes",
      "name": "getCharacterEscapes"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "sep"
       }
      ],
      "type": "JsonGenerator",
      "name": "setRootValueSeparator"
     },
     {
      "params": [],
      "type": "Version",
      "name": "version"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "fieldName"
       },
       {
        "type": "String",
        "name": "value"
       }
      ],
      "type": null,
      "name": "writeStringField"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "sOutputEscapes"
     },
     {
      "type": "IOContext",
      "name": "_ioContext"
     },
     {
      "type": "int",
      "name": "_outputEscapes"
     },
     {
      "type": "int",
      "name": "_maximumNonEscapedChar"
     },
     {
      "type": "CharacterEscapes",
      "name": "_characterEscapes"
     },
     {
      "type": "SerializableString",
      "name": "_rootValueSeparator"
     },
     {
      "type": "boolean",
      "name": "_cfgUnqNames"
     }
    ]
   }
  ]
 },
 {
  "filename": "ByteSourceJsonBootstrapper.java",
  "package_name": "com.fasterxml.jackson.core.json",
  "classes": [
   {
    "name": "ByteSourceJsonBootstrapper",
    "methods": [
     {
      "params": [],
      "type": "JsonEncoding",
      "name": "detectEncoding"
     },
     {
      "params": [],
      "type": "Reader",
      "name": "constructReader"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "parserFeatures"
       },
       {
        "type": "ObjectCodec",
        "name": "codec"
       },
       {
        "type": "ByteQuadsCanonicalizer",
        "name": "rootByteSymbols"
       },
       {
        "type": "CharsToNameCanonicalizer",
        "name": "rootCharSymbols"
       },
       {
        "type": "int",
        "name": "factoryFeatures"
       }
      ],
      "type": "JsonParser",
      "name": "constructParser"
     },
     {
      "params": [
       {
        "type": "InputAccessor",
        "name": "acc"
       }
      ],
      "type": "MatchStrength",
      "name": "hasJSONFormat"
     },
     {
      "params": [
       {
        "type": "InputAccessor",
        "name": "acc"
       },
       {
        "type": "String",
        "name": "matchStr"
       },
       {
        "type": "MatchStrength",
        "name": "fullMatchStrength"
       }
      ],
      "type": "MatchStrength",
      "name": "tryMatch"
     },
     {
      "params": [
       {
        "type": "InputAccessor",
        "name": "acc"
       }
      ],
      "type": "int",
      "name": "skipSpace"
     },
     {
      "params": [
       {
        "type": "InputAccessor",
        "name": "acc"
       },
       {
        "type": "byte",
        "name": "b"
       }
      ],
      "type": "int",
      "name": "skipSpace"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quad"
       }
      ],
      "type": "boolean",
      "name": "handleBOM"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quad"
       }
      ],
      "type": "boolean",
      "name": "checkUTF32"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "i16"
       }
      ],
      "type": "boolean",
      "name": "checkUTF16"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "type"
       }
      ],
      "type": null,
      "name": "reportWeirdUCS4"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "minimum"
       }
      ],
      "type": "boolean",
      "name": "ensureLoaded"
     }
    ],
    "fields": [
     {
      "type": "byte",
      "name": "UTF8_BOM_1"
     },
     {
      "type": "byte",
      "name": "UTF8_BOM_2"
     },
     {
      "type": "byte",
      "name": "UTF8_BOM_3"
     },
     {
      "type": "IOContext",
      "name": "_context"
     },
     {
      "type": "InputStream",
      "name": "_in"
     },
     {
      "type": "byte",
      "name": "_inputBuffer"
     },
     {
      "type": "int",
      "name": "_inputPtr"
     },
     {
      "type": "int",
      "name": "_inputEnd"
     },
     {
      "type": "boolean",
      "name": "_bufferRecyclable"
     },
     {
      "type": "int",
      "name": "_inputProcessed"
     },
     {
      "type": "boolean",
      "name": "_bigEndian"
     },
     {
      "type": "int",
      "name": "_bytesPerChar"
     }
    ]
   }
  ]
 },
 {
  "filename": "UTF8JsonGenerator.java",
  "package_name": "com.fasterxml.jackson.core.json",
  "classes": [
   {
    "name": "UTF8JsonGenerator",
    "methods": [
     {
      "params": [],
      "type": "Object",
      "name": "getOutputTarget"
     },
     {
      "params": [],
      "type": "int",
      "name": "getOutputBuffered"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": null,
      "name": "writeFieldName"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "name"
       }
      ],
      "type": null,
      "name": "writeFieldName"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "name"
       }
      ],
      "type": null,
      "name": "_writeUnq"
     },
     {
      "params": [],
      "type": null,
      "name": "writeStartArray"
     },
     {
      "params": [],
      "type": null,
      "name": "writeEndArray"
     },
     {
      "params": [],
      "type": null,
      "name": "writeStartObject"
     },
     {
      "params": [],
      "type": null,
      "name": "writeEndObject"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": null,
      "name": "_writePPFieldName"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "name"
       }
      ],
      "type": null,
      "name": "_writePPFieldName"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeString"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeString"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeString"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "length"
       }
      ],
      "type": null,
      "name": "writeRawUTF8String"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeUTF8String"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeRawValue"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "cbuf"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "ch"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "cbuf"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "_writeSegmentedRaw"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "byte",
        "name": "data"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeBinary"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "InputStream",
        "name": "data"
       },
       {
        "type": "int",
        "name": "dataLength"
       }
      ],
      "type": "int",
      "name": "writeBinary"
     },
     {
      "params": [
       {
        "type": "short",
        "name": "s"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "short",
        "name": "s"
       }
      ],
      "type": null,
      "name": "_writeQuotedShort"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ],
      "type": null,
      "name": "_writeQuotedInt"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "l"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "l"
       }
      ],
      "type": null,
      "name": "_writeQuotedLong"
     },
     {
      "params": [
       {
        "type": "BigInteger",
        "name": "value"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "float",
        "name": "f"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "BigDecimal",
        "name": "value"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "encodedValue"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "value"
       }
      ],
      "type": null,
      "name": "_writeQuotedRaw"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "state"
       }
      ],
      "type": null,
      "name": "writeBoolean"
     },
     {
      "params": [],
      "type": null,
      "name": "writeNull"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "typeMsg"
       }
      ],
      "type": null,
      "name": "_verifyValueWrite"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "typeMsg"
       },
       {
        "type": "int",
        "name": "status"
       }
      ],
      "type": null,
      "name": "_verifyPrettyValueWrite"
     },
     {
      "params": [],
      "type": null,
      "name": "flush"
     },
     {
      "params": [],
      "type": null,
      "name": "close"
     },
     {
      "params": [],
      "type": null,
      "name": "_releaseBuffers"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "bytes"
       }
      ],
      "type": null,
      "name": "_writeBytes"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "bytes"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "_writeBytes"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       },
       {
        "type": "boolean",
        "name": "addQuotes"
       }
      ],
      "type": null,
      "name": "_writeStringSegments"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "cbuf"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "totalLen"
       }
      ],
      "type": null,
      "name": "_writeStringSegments"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "totalLen"
       }
      ],
      "type": null,
      "name": "_writeStringSegments"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "cbuf"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "_writeStringSegment"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "_writeStringSegment"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "cbuf"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "end"
       }
      ],
      "type": null,
      "name": "_writeStringSegment2"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "end"
       }
      ],
      "type": null,
      "name": "_writeStringSegment2"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "cbuf"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "end"
       }
      ],
      "type": null,
      "name": "_writeStringSegmentASCII2"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "end"
       }
      ],
      "type": null,
      "name": "_writeStringSegmentASCII2"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "cbuf"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "end"
       }
      ],
      "type": null,
      "name": "_writeCustomStringSegment2"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "end"
       }
      ],
      "type": null,
      "name": "_writeCustomStringSegment2"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "outputBuffer"
       },
       {
        "type": "int",
        "name": "outputPtr"
       },
       {
        "type": "SerializableString",
        "name": "esc"
       },
       {
        "type": "int",
        "name": "remainingChars"
       }
      ],
      "type": "int",
      "name": "_writeCustomEscape"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "outputBuffer"
       },
       {
        "type": "int",
        "name": "outputPtr"
       },
       {
        "type": "int",
        "name": "outputEnd"
       },
       {
        "type": "byte",
        "name": "raw"
       },
       {
        "type": "int",
        "name": "remainingChars"
       }
      ],
      "type": "int",
      "name": "_handleLongCustomEscape"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "utf8"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "totalLen"
       }
      ],
      "type": null,
      "name": "_writeUTF8Segments"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "utf8"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "_writeUTF8Segment"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "utf8"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "_writeUTF8Segment2"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "byte",
        "name": "input"
       },
       {
        "type": "int",
        "name": "inputPtr"
       },
       {
        "type": "int",
        "name": "inputEnd"
       }
      ],
      "type": null,
      "name": "_writeBinary"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "InputStream",
        "name": "data"
       },
       {
        "type": "byte",
        "name": "readBuffer"
       },
       {
        "type": "int",
        "name": "bytesLeft"
       }
      ],
      "type": "int",
      "name": "_writeBinary"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "InputStream",
        "name": "data"
       },
       {
        "type": "byte",
        "name": "readBuffer"
       }
      ],
      "type": "int",
      "name": "_writeBinary"
     },
     {
      "params": [
       {
        "type": "InputStream",
        "name": "in"
       },
       {
        "type": "byte",
        "name": "readBuffer"
       },
       {
        "type": "int",
        "name": "inputPtr"
       },
       {
        "type": "int",
        "name": "inputEnd"
       },
       {
        "type": "int",
        "name": "maxRead"
       }
      ],
      "type": "int",
      "name": "_readMore"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ch"
       },
       {
        "type": "char",
        "name": "cbuf"
       },
       {
        "type": "int",
        "name": "inputOffset"
       },
       {
        "type": "int",
        "name": "inputLen"
       }
      ],
      "type": "int",
      "name": "_outputRawMultiByteChar"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "surr1"
       },
       {
        "type": "int",
        "name": "surr2"
       }
      ],
      "type": null,
      "name": "_outputSurrogates"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ch"
       },
       {
        "type": "int",
        "name": "outputPtr"
       }
      ],
      "type": "int",
      "name": "_outputMultiByteChar"
     },
     {
      "params": [],
      "type": null,
      "name": "_writeNull"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "charToEscape"
       },
       {
        "type": "int",
        "name": "outputPtr"
       }
      ],
      "type": "int",
      "name": "_writeGenericEscape"
     },
     {
      "params": [],
      "type": null,
      "name": "_flushBuffer"
     }
    ],
    "fields": [
     {
      "type": "byte",
      "name": "BYTE_u"
     },
     {
      "type": "byte",
      "name": "BYTE_0"
     },
     {
      "type": "byte",
      "name": "BYTE_LBRACKET"
     },
     {
      "type": "byte",
      "name": "BYTE_RBRACKET"
     },
     {
      "type": "byte",
      "name": "BYTE_LCURLY"
     },
     {
      "type": "byte",
      "name": "BYTE_RCURLY"
     },
     {
      "type": "byte",
      "name": "BYTE_BACKSLASH"
     },
     {
      "type": "byte",
      "name": "BYTE_COMMA"
     },
     {
      "type": "byte",
      "name": "BYTE_COLON"
     },
     {
      "type": "byte",
      "name": "BYTE_QUOTE"
     },
     {
      "type": "int",
      "name": "MAX_BYTES_TO_BUFFER"
     },
     {
      "type": "byte",
      "name": "HEX_CHARS"
     },
     {
      "type": "byte",
      "name": "NULL_BYTES"
     },
     {
      "type": "byte",
      "name": "TRUE_BYTES"
     },
     {
      "type": "byte",
      "name": "FALSE_BYTES"
     },
     {
      "type": "OutputStream",
      "name": "_outputStream"
     },
     {
      "type": "byte",
      "name": "_outputBuffer"
     },
     {
      "type": "int",
      "name": "_outputTail"
     },
     {
      "type": "int",
      "name": "_outputEnd"
     },
     {
      "type": "int",
      "name": "_outputMaxContiguous"
     },
     {
      "type": "char",
      "name": "_charBuffer"
     },
     {
      "type": "int",
      "name": "_charBufferLength"
     },
     {
      "type": "byte",
      "name": "_entityBuffer"
     },
     {
      "type": "boolean",
      "name": "_bufferRecyclable"
     }
    ]
   }
  ]
 },
 {
  "filename": "JsonWriteContext.java",
  "package_name": "com.fasterxml.jackson.core.json",
  "classes": [
   {
    "name": "JsonWriteContext",
    "methods": [
     {
      "params": [
       {
        "type": "int",
        "name": "type"
       }
      ],
      "type": "JsonWriteContext",
      "name": "reset"
     },
     {
      "params": [
       {
        "type": "DupDetector",
        "name": "dups"
       }
      ],
      "type": "JsonWriteContext",
      "name": "withDupDetector"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getCurrentValue"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "v"
       }
      ],
      "type": null,
      "name": "setCurrentValue"
     },
     {
      "params": [],
      "type": "JsonWriteContext",
      "name": "createRootContext"
     },
     {
      "params": [
       {
        "type": "DupDetector",
        "name": "dd"
       }
      ],
      "type": "JsonWriteContext",
      "name": "createRootContext"
     },
     {
      "params": [],
      "type": "JsonWriteContext",
      "name": "createChildArrayContext"
     },
     {
      "params": [],
      "type": "JsonWriteContext",
      "name": "createChildObjectContext"
     },
     {
      "params": [],
      "type": "JsonWriteContext",
      "name": "getParent"
     },
     {
      "params": [],
      "type": "String",
      "name": "getCurrentName"
     },
     {
      "params": [],
      "type": "JsonWriteContext",
      "name": "clearAndGetParent"
     },
     {
      "params": [],
      "type": "DupDetector",
      "name": "getDupDetector"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": "int",
      "name": "writeFieldName"
     },
     {
      "params": [
       {
        "type": "DupDetector",
        "name": "dd"
       },
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": null,
      "name": "_checkDup"
     },
     {
      "params": [],
      "type": "int",
      "name": "writeValue"
     },
     {
      "params": [
       {
        "type": "StringBuilder",
        "name": "sb"
       }
      ],
      "type": null,
      "name": "appendDesc"
     },
     {
      "params": [],
      "type": "String",
      "name": "toString"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "STATUS_OK_AS_IS"
     },
     {
      "type": "int",
      "name": "STATUS_OK_AFTER_COMMA"
     },
     {
      "type": "int",
      "name": "STATUS_OK_AFTER_COLON"
     },
     {
      "type": "int",
      "name": "STATUS_OK_AFTER_SPACE"
     },
     {
      "type": "int",
      "name": "STATUS_EXPECT_VALUE"
     },
     {
      "type": "int",
      "name": "STATUS_EXPECT_NAME"
     },
     {
      "type": "JsonWriteContext",
      "name": "_parent"
     },
     {
      "type": "DupDetector",
      "name": "_dups"
     },
     {
      "type": "JsonWriteContext",
      "name": "_child"
     },
     {
      "type": "String",
      "name": "_currentName"
     },
     {
      "type": "Object",
      "name": "_currentValue"
     },
     {
      "type": "boolean",
      "name": "_gotName"
     }
    ]
   }
  ]
 },
 {
  "filename": "JsonReadContext.java",
  "package_name": "com.fasterxml.jackson.core.json",
  "classes": [
   {
    "name": "JsonReadContext",
    "methods": [
     {
      "params": [
       {
        "type": "int",
        "name": "type"
       },
       {
        "type": "int",
        "name": "lineNr"
       },
       {
        "type": "int",
        "name": "colNr"
       }
      ],
      "type": null,
      "name": "reset"
     },
     {
      "params": [
       {
        "type": "DupDetector",
        "name": "dups"
       }
      ],
      "type": "JsonReadContext",
      "name": "withDupDetector"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getCurrentValue"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "v"
       }
      ],
      "type": null,
      "name": "setCurrentValue"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "lineNr"
       },
       {
        "type": "int",
        "name": "colNr"
       },
       {
        "type": "DupDetector",
        "name": "dups"
       }
      ],
      "type": "JsonReadContext",
      "name": "createRootContext"
     },
     {
      "params": [
       {
        "type": "DupDetector",
        "name": "dups"
       }
      ],
      "type": "JsonReadContext",
      "name": "createRootContext"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "lineNr"
       },
       {
        "type": "int",
        "name": "colNr"
       }
      ],
      "type": "JsonReadContext",
      "name": "createChildArrayContext"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "lineNr"
       },
       {
        "type": "int",
        "name": "colNr"
       }
      ],
      "type": "JsonReadContext",
      "name": "createChildObjectContext"
     },
     {
      "params": [],
      "type": "String",
      "name": "getCurrentName"
     },
     {
      "params": [],
      "type": "JsonReadContext",
      "name": "getParent"
     },
     {
      "params": [],
      "type": "JsonReadContext",
      "name": "clearAndGetParent"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "srcRef"
       }
      ],
      "type": "JsonLocation",
      "name": "getStartLocation"
     },
     {
      "params": [],
      "type": "DupDetector",
      "name": "getDupDetector"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "expectComma"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": null,
      "name": "setCurrentName"
     },
     {
      "params": [
       {
        "type": "DupDetector",
        "name": "dd"
       },
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": null,
      "name": "_checkDup"
     },
     {
      "params": [],
      "type": "String",
      "name": "toString"
     }
    ],
    "fields": [
     {
      "type": "JsonReadContext",
      "name": "_parent"
     },
     {
      "type": "DupDetector",
      "name": "_dups"
     },
     {
      "type": "JsonReadContext",
      "name": "_child"
     },
     {
      "type": "String",
      "name": "_currentName"
     },
     {
      "type": "Object",
      "name": "_currentValue"
     },
     {
      "type": "int",
      "name": "_lineNr"
     },
     {
      "type": "int",
      "name": "_columnNr"
     }
    ]
   }
  ]
 },
 {
  "filename": "UTF8StreamJsonParser.java",
  "package_name": "com.fasterxml.jackson.core.json",
  "classes": [
   {
    "name": "UTF8StreamJsonParser",
    "methods": [
     {
      "params": [],
      "type": "ObjectCodec",
      "name": "getCodec"
     },
     {
      "params": [
       {
        "type": "ObjectCodec",
        "name": "c"
       }
      ],
      "type": null,
      "name": "setCodec"
     },
     {
      "params": [
       {
        "type": "OutputStream",
        "name": "out"
       }
      ],
      "type": "int",
      "name": "releaseBuffered"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getInputSource"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "loadMore"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "minAvailable"
       }
      ],
      "type": "boolean",
      "name": "_loadToHaveAtLeast"
     },
     {
      "params": [],
      "type": null,
      "name": "_closeInput"
     },
     {
      "params": [],
      "type": null,
      "name": "_releaseBuffers"
     },
     {
      "params": [],
      "type": "String",
      "name": "getText"
     },
     {
      "params": [],
      "type": "String",
      "name": "getValueAsString"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "defValue"
       }
      ],
      "type": "String",
      "name": "getValueAsString"
     },
     {
      "params": [],
      "type": "int",
      "name": "getValueAsInt"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "defValue"
       }
      ],
      "type": "int",
      "name": "getValueAsInt"
     },
     {
      "params": [
       {
        "type": "JsonToken",
        "name": "t"
       }
      ],
      "type": "String",
      "name": "_getText2"
     },
     {
      "params": [],
      "type": "char",
      "name": "getTextCharacters"
     },
     {
      "params": [],
      "type": "int",
      "name": "getTextLength"
     },
     {
      "params": [],
      "type": "int",
      "name": "getTextOffset"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       }
      ],
      "type": "byte",
      "name": "getBinaryValue"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "OutputStream",
        "name": "out"
       }
      ],
      "type": "int",
      "name": "readBinaryValue"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "OutputStream",
        "name": "out"
       },
       {
        "type": "byte",
        "name": "buffer"
       }
      ],
      "type": "int",
      "name": "_readBinary"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "nextToken"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ],
      "type": "JsonToken",
      "name": "_nextTokenNotInObject"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "_nextAfterName"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "str"
       }
      ],
      "type": "boolean",
      "name": "nextFieldName"
     },
     {
      "params": [],
      "type": "String",
      "name": "nextFieldName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ptr"
       }
      ],
      "type": "int",
      "name": "_skipColonFast"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ],
      "type": null,
      "name": "_isNextTokenNameYes"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "i"
       },
       {
        "type": "SerializableString",
        "name": "str"
       }
      ],
      "type": "boolean",
      "name": "_isNextTokenNameMaybe"
     },
     {
      "params": [],
      "type": "String",
      "name": "nextTextValue"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "defaultValue"
       }
      ],
      "type": "int",
      "name": "nextIntValue"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "defaultValue"
       }
      ],
      "type": "long",
      "name": "nextLongValue"
     },
     {
      "params": [],
      "type": "Boolean",
      "name": "nextBooleanValue"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "c"
       }
      ],
      "type": "JsonToken",
      "name": "_parsePosNumber"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "_parseNegNumber"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "outBuf"
       },
       {
        "type": "int",
        "name": "outPtr"
       },
       {
        "type": "boolean",
        "name": "negative"
       },
       {
        "type": "int",
        "name": "intPartLength"
       }
      ],
      "type": "JsonToken",
      "name": "_parseNumber2"
     },
     {
      "params": [],
      "type": "int",
      "name": "_verifyNoLeadingZeroes"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "outBuf"
       },
       {
        "type": "int",
        "name": "outPtr"
       },
       {
        "type": "int",
        "name": "c"
       },
       {
        "type": "boolean",
        "name": "negative"
       },
       {
        "type": "int",
        "name": "integerPartLength"
       }
      ],
      "type": "JsonToken",
      "name": "_parseFloat"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ch"
       }
      ],
      "type": null,
      "name": "_verifyRootSpace"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ],
      "type": "String",
      "name": "_parseName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q2"
       }
      ],
      "type": "String",
      "name": "parseMediumName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q3"
       },
       {
        "type": "int",
        "name": "q2"
       }
      ],
      "type": "String",
      "name": "parseMediumName2"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q"
       },
       {
        "type": "int",
        "name": "q2"
       },
       {
        "type": "int",
        "name": "q3"
       }
      ],
      "type": "String",
      "name": "parseLongName"
     },
     {
      "params": [],
      "type": "String",
      "name": "slowParseName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q1"
       },
       {
        "type": "int",
        "name": "ch"
       },
       {
        "type": "int",
        "name": "lastQuadBytes"
       }
      ],
      "type": "String",
      "name": "parseName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q1"
       },
       {
        "type": "int",
        "name": "q2"
       },
       {
        "type": "int",
        "name": "ch"
       },
       {
        "type": "int",
        "name": "lastQuadBytes"
       }
      ],
      "type": "String",
      "name": "parseName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q1"
       },
       {
        "type": "int",
        "name": "q2"
       },
       {
        "type": "int",
        "name": "q3"
       },
       {
        "type": "int",
        "name": "ch"
       },
       {
        "type": "int",
        "name": "lastQuadBytes"
       }
      ],
      "type": "String",
      "name": "parseName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quads"
       },
       {
        "type": "int",
        "name": "qlen"
       },
       {
        "type": "int",
        "name": "currQuad"
       },
       {
        "type": "int",
        "name": "ch"
       },
       {
        "type": "int",
        "name": "currQuadBytes"
       }
      ],
      "type": "String",
      "name": "parseEscapedName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ch"
       }
      ],
      "type": "String",
      "name": "_handleOddName"
     },
     {
      "params": [],
      "type": "String",
      "name": "_parseAposName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q1"
       },
       {
        "type": "int",
        "name": "lastQuadBytes"
       }
      ],
      "type": "String",
      "name": "findName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q1"
       },
       {
        "type": "int",
        "name": "q2"
       },
       {
        "type": "int",
        "name": "lastQuadBytes"
       }
      ],
      "type": "String",
      "name": "findName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q1"
       },
       {
        "type": "int",
        "name": "q2"
       },
       {
        "type": "int",
        "name": "q3"
       },
       {
        "type": "int",
        "name": "lastQuadBytes"
       }
      ],
      "type": "String",
      "name": "findName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quads"
       },
       {
        "type": "int",
        "name": "qlen"
       },
       {
        "type": "int",
        "name": "lastQuad"
       },
       {
        "type": "int",
        "name": "lastQuadBytes"
       }
      ],
      "type": "String",
      "name": "findName"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "quads"
       },
       {
        "type": "int",
        "name": "qlen"
       },
       {
        "type": "int",
        "name": "lastQuadBytes"
       }
      ],
      "type": "String",
      "name": "addName"
     },
     {
      "params": [],
      "type": null,
      "name": "_finishString"
     },
     {
      "params": [],
      "type": "String",
      "name": "_finishAndReturnString"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "outBuf"
       },
       {
        "type": "int",
        "name": "outPtr"
       }
      ],
      "type": null,
      "name": "_finishString2"
     },
     {
      "params": [],
      "type": null,
      "name": "_skipString"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "c"
       }
      ],
      "type": "JsonToken",
      "name": "_handleUnexpectedValue"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "_handleApos"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ch"
       },
       {
        "type": "boolean",
        "name": "neg"
       }
      ],
      "type": "JsonToken",
      "name": "_handleInvalidNumberStart"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "matchStr"
       },
       {
        "type": "int",
        "name": "i"
       }
      ],
      "type": null,
      "name": "_matchToken"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "matchStr"
       },
       {
        "type": "int",
        "name": "i"
       }
      ],
      "type": null,
      "name": "_matchToken2"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "matchStr"
       },
       {
        "type": "int",
        "name": "i"
       },
       {
        "type": "int",
        "name": "ch"
       }
      ],
      "type": null,
      "name": "_checkMatchEnd"
     },
     {
      "params": [],
      "type": "int",
      "name": "_skipWS"
     },
     {
      "params": [],
      "type": "int",
      "name": "_skipWS2"
     },
     {
      "params": [],
      "type": "int",
      "name": "_skipWSOrEnd"
     },
     {
      "params": [],
      "type": "int",
      "name": "_skipWSOrEnd2"
     },
     {
      "params": [],
      "type": "int",
      "name": "_skipColon"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "gotColon"
       }
      ],
      "type": "int",
      "name": "_skipColon2"
     },
     {
      "params": [],
      "type": null,
      "name": "_skipComment"
     },
     {
      "params": [],
      "type": null,
      "name": "_skipCComment"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "_skipYAMLComment"
     },
     {
      "params": [],
      "type": null,
      "name": "_skipLine"
     },
     {
      "params": [],
      "type": "char",
      "name": "_decodeEscaped"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "firstByte"
       }
      ],
      "type": "int",
      "name": "_decodeCharForError"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "c"
       }
      ],
      "type": "int",
      "name": "_decodeUtf8_2"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "c1"
       }
      ],
      "type": "int",
      "name": "_decodeUtf8_3"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "c1"
       }
      ],
      "type": "int",
      "name": "_decodeUtf8_3fast"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "c"
       }
      ],
      "type": "int",
      "name": "_decodeUtf8_4"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "c"
       }
      ],
      "type": null,
      "name": "_skipUtf8_2"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "c"
       }
      ],
      "type": null,
      "name": "_skipUtf8_3"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "c"
       }
      ],
      "type": null,
      "name": "_skipUtf8_4"
     },
     {
      "params": [],
      "type": null,
      "name": "_skipCR"
     },
     {
      "params": [],
      "type": "int",
      "name": "nextByte"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "matchedPart"
       }
      ],
      "type": null,
      "name": "_reportInvalidToken"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "matchedPart"
       },
       {
        "type": "String",
        "name": "msg"
       }
      ],
      "type": null,
      "name": "_reportInvalidToken"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "c"
       }
      ],
      "type": null,
      "name": "_reportInvalidChar"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "mask"
       }
      ],
      "type": null,
      "name": "_reportInvalidInitial"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "mask"
       }
      ],
      "type": null,
      "name": "_reportInvalidOther"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "mask"
       },
       {
        "type": "int",
        "name": "ptr"
       }
      ],
      "type": null,
      "name": "_reportInvalidOther"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "arr"
       },
       {
        "type": "int",
        "name": "more"
       }
      ],
      "type": "int",
      "name": "growArrayBy"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       }
      ],
      "type": "byte",
      "name": "_decodeBase64"
     },
     {
      "params": [],
      "type": "JsonLocation",
      "name": "getTokenLocation"
     },
     {
      "params": [],
      "type": "JsonLocation",
      "name": "getCurrentLocation"
     },
     {
      "params": [],
      "type": null,
      "name": "_updateLocation"
     },
     {
      "params": [],
      "type": null,
      "name": "_updateNameLocation"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "q"
       },
       {
        "type": "int",
        "name": "bytes"
       }
      ],
      "type": "int",
      "name": "pad"
     }
    ],
    "fields": [
     {
      "type": "byte",
      "name": "BYTE_LF"
     },
     {
      "type": "int",
      "name": "_icUTF8"
     },
     {
      "type": "int",
      "name": "_icLatin1"
     },
     {
      "type": "ObjectCodec",
      "name": "_objectCodec"
     },
     {
      "type": "ByteQuadsCanonicalizer",
      "name": "_symbols"
     },
     {
      "type": "int",
      "name": "_quadBuffer"
     },
     {
      "type": "boolean",
      "name": "_tokenIncomplete"
     },
     {
      "type": "int",
      "name": "_quad1"
     },
     {
      "type": "int",
      "name": "_nameStartOffset"
     },
     {
      "type": "int",
      "name": "_nameStartRow"
     },
     {
      "type": "int",
      "name": "_nameStartCol"
     },
     {
      "type": "InputStream",
      "name": "_inputStream"
     },
     {
      "type": "byte",
      "name": "_inputBuffer"
     },
     {
      "type": "boolean",
      "name": "_bufferRecyclable"
     }
    ]
   }
  ]
 },
 {
  "filename": "WriterBasedJsonGenerator.java",
  "package_name": "com.fasterxml.jackson.core.json",
  "classes": [
   {
    "name": "WriterBasedJsonGenerator",
    "methods": [
     {
      "params": [],
      "type": "Object",
      "name": "getOutputTarget"
     },
     {
      "params": [],
      "type": "int",
      "name": "getOutputBuffered"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": null,
      "name": "writeFieldName"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "name"
       }
      ],
      "type": null,
      "name": "writeFieldName"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       },
       {
        "type": "boolean",
        "name": "commaBefore"
       }
      ],
      "type": null,
      "name": "_writeFieldName"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "name"
       },
       {
        "type": "boolean",
        "name": "commaBefore"
       }
      ],
      "type": null,
      "name": "_writeFieldName"
     },
     {
      "params": [],
      "type": null,
      "name": "writeStartArray"
     },
     {
      "params": [],
      "type": null,
      "name": "writeEndArray"
     },
     {
      "params": [],
      "type": null,
      "name": "writeStartObject"
     },
     {
      "params": [],
      "type": null,
      "name": "writeEndObject"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       },
       {
        "type": "boolean",
        "name": "commaBefore"
       }
      ],
      "type": null,
      "name": "_writePPFieldName"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "name"
       },
       {
        "type": "boolean",
        "name": "commaBefore"
       }
      ],
      "type": null,
      "name": "_writePPFieldName"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeString"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeString"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "sstr"
       }
      ],
      "type": null,
      "name": "writeString"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "length"
       }
      ],
      "type": null,
      "name": "writeRawUTF8String"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "length"
       }
      ],
      "type": null,
      "name": "writeUTF8String"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       },
       {
        "type": "int",
        "name": "start"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "c"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeRawLong"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "byte",
        "name": "data"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeBinary"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "InputStream",
        "name": "data"
       },
       {
        "type": "int",
        "name": "dataLength"
       }
      ],
      "type": "int",
      "name": "writeBinary"
     },
     {
      "params": [
       {
        "type": "short",
        "name": "s"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "short",
        "name": "s"
       }
      ],
      "type": null,
      "name": "_writeQuotedShort"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ],
      "type": null,
      "name": "_writeQuotedInt"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "l"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "l"
       }
      ],
      "type": null,
      "name": "_writeQuotedLong"
     },
     {
      "params": [
       {
        "type": "BigInteger",
        "name": "value"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "float",
        "name": "f"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "BigDecimal",
        "name": "value"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "encodedValue"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "value"
       }
      ],
      "type": null,
      "name": "_writeQuotedRaw"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "state"
       }
      ],
      "type": null,
      "name": "writeBoolean"
     },
     {
      "params": [],
      "type": null,
      "name": "writeNull"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "typeMsg"
       }
      ],
      "type": null,
      "name": "_verifyValueWrite"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "typeMsg"
       }
      ],
      "type": null,
      "name": "_verifyPrettyValueWrite"
     },
     {
      "params": [],
      "type": null,
      "name": "flush"
     },
     {
      "params": [],
      "type": null,
      "name": "close"
     },
     {
      "params": [],
      "type": null,
      "name": "_releaseBuffers"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       }
      ],
      "type": null,
      "name": "_writeString"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "_writeString2"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       }
      ],
      "type": null,
      "name": "_writeLongString"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "end"
       }
      ],
      "type": null,
      "name": "_writeSegment"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "_writeString"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "len"
       },
       {
        "type": "int",
        "name": "maxNonEscaped"
       }
      ],
      "type": null,
      "name": "_writeStringASCII"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "end"
       },
       {
        "type": "int",
        "name": "maxNonEscaped"
       }
      ],
      "type": null,
      "name": "_writeSegmentASCII"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       },
       {
        "type": "int",
        "name": "maxNonEscaped"
       }
      ],
      "type": null,
      "name": "_writeStringASCII"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "_writeStringCustom"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "end"
       }
      ],
      "type": null,
      "name": "_writeSegmentCustom"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "_writeStringCustom"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "byte",
        "name": "input"
       },
       {
        "type": "int",
        "name": "inputPtr"
       },
       {
        "type": "int",
        "name": "inputEnd"
       }
      ],
      "type": null,
      "name": "_writeBinary"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "InputStream",
        "name": "data"
       },
       {
        "type": "byte",
        "name": "readBuffer"
       },
       {
        "type": "int",
        "name": "bytesLeft"
       }
      ],
      "type": "int",
      "name": "_writeBinary"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "InputStream",
        "name": "data"
       },
       {
        "type": "byte",
        "name": "readBuffer"
       }
      ],
      "type": "int",
      "name": "_writeBinary"
     },
     {
      "params": [
       {
        "type": "InputStream",
        "name": "in"
       },
       {
        "type": "byte",
        "name": "readBuffer"
       },
       {
        "type": "int",
        "name": "inputPtr"
       },
       {
        "type": "int",
        "name": "inputEnd"
       },
       {
        "type": "int",
        "name": "maxRead"
       }
      ],
      "type": "int",
      "name": "_readMore"
     },
     {
      "params": [],
      "type": null,
      "name": "_writeNull"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "ch"
       },
       {
        "type": "int",
        "name": "escCode"
       }
      ],
      "type": null,
      "name": "_prependOrWriteCharacterEscape"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "buffer"
       },
       {
        "type": "int",
        "name": "ptr"
       },
       {
        "type": "int",
        "name": "end"
       },
       {
        "type": "char",
        "name": "ch"
       },
       {
        "type": "int",
        "name": "escCode"
       }
      ],
      "type": "int",
      "name": "_prependOrWriteCharacterEscape"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "ch"
       },
       {
        "type": "int",
        "name": "escCode"
       }
      ],
      "type": null,
      "name": "_appendCharacterEscape"
     },
     {
      "params": [],
      "type": "char",
      "name": "_allocateEntityBuffer"
     },
     {
      "params": [],
      "type": null,
      "name": "_flushBuffer"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "SHORT_WRITE"
     },
     {
      "type": "char",
      "name": "HEX_CHARS"
     },
     {
      "type": "Writer",
      "name": "_writer"
     },
     {
      "type": "char",
      "name": "_outputBuffer"
     },
     {
      "type": "int",
      "name": "_outputHead"
     },
     {
      "type": "int",
      "name": "_outputTail"
     },
     {
      "type": "int",
      "name": "_outputEnd"
     },
     {
      "type": "char",
      "name": "_entityBuffer"
     },
     {
      "type": "SerializableString",
      "name": "_currentEscape"
     }
    ]
   }
  ]
 },
 {
  "filename": "DataFormatDetector.java",
  "package_name": "com.fasterxml.jackson.core.format",
  "classes": [
   {
    "name": "DataFormatDetector",
    "methods": [
     {
      "params": [
       {
        "type": "MatchStrength",
        "name": "optMatch"
       }
      ],
      "type": "DataFormatDetector",
      "name": "withOptimalMatch"
     },
     {
      "params": [
       {
        "type": "MatchStrength",
        "name": "minMatch"
       }
      ],
      "type": "DataFormatDetector",
      "name": "withMinimalMatch"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "lookaheadBytes"
       }
      ],
      "type": "DataFormatDetector",
      "name": "withMaxInputLookahead"
     },
     {
      "params": [
       {
        "type": "InputStream",
        "name": "in"
       }
      ],
      "type": "DataFormatMatcher",
      "name": "findFormat"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "fullInputData"
       }
      ],
      "type": "DataFormatMatcher",
      "name": "findFormat"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "fullInputData"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": "DataFormatMatcher",
      "name": "findFormat"
     },
     {
      "params": [],
      "type": "String",
      "name": "toString"
     },
     {
      "params": [
       {
        "type": "InputAccessor",
        "name": "acc"
       }
      ],
      "type": "DataFormatMatcher",
      "name": "_findFormat"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "DEFAULT_MAX_INPUT_LOOKAHEAD"
     },
     {
      "type": "JsonFactory",
      "name": "_detectors"
     },
     {
      "type": "MatchStrength",
      "name": "_optimalMatch"
     },
     {
      "type": "MatchStrength",
      "name": "_minimalMatch"
     },
     {
      "type": "int",
      "name": "_maxInputLookahead"
     }
    ]
   }
  ]
 },
 {
  "filename": "DataFormatMatcher.java",
  "package_name": "com.fasterxml.jackson.core.format",
  "classes": [
   {
    "name": "DataFormatMatcher",
    "methods": [
     {
      "params": [],
      "type": "boolean",
      "name": "hasMatch"
     },
     {
      "params": [],
      "type": "MatchStrength",
      "name": "getMatchStrength"
     },
     {
      "params": [],
      "type": "JsonFactory",
      "name": "getMatch"
     },
     {
      "params": [],
      "type": "String",
      "name": "getMatchedFormatName"
     },
     {
      "params": [],
      "type": "JsonParser",
      "name": "createParserWithMatch"
     },
     {
      "params": [],
      "type": "InputStream",
      "name": "getDataStream"
     }
    ],
    "fields": [
     {
      "type": "InputStream",
      "name": "_originalStream"
     },
     {
      "type": "byte",
      "name": "_bufferedData"
     },
     {
      "type": "int",
      "name": "_bufferedStart"
     },
     {
      "type": "int",
      "name": "_bufferedLength"
     },
     {
      "type": "JsonFactory",
      "name": "_match"
     },
     {
      "type": "MatchStrength",
      "name": "_matchStrength"
     }
    ]
   }
  ]
 },
 {
  "filename": "package-info.java",
  "package_name": "com.fasterxml.jackson.core.format",
  "classes": []
 },
 {
  "filename": "InputAccessor.java",
  "package_name": "com.fasterxml.jackson.core.format",
  "classes": [
   {
    "name": "InputAccessor",
    "methods": [
     {
      "params": [],
      "type": "boolean",
      "name": "hasMoreBytes"
     },
     {
      "params": [],
      "type": "byte",
      "name": "nextByte"
     },
     {
      "params": [],
      "type": null,
      "name": "reset"
     }
    ],
    "fields": []
   }
  ]
 },
 {
  "filename": "MatchStrength.java",
  "package_name": "com.fasterxml.jackson.core.format",
  "classes": [
   {
    "name": "MatchStrength",
    "methods": [],
    "fields": []
   }
  ]
 },
 {
  "filename": "DefaultIndenter.java",
  "package_name": "com.fasterxml.jackson.core.util",
  "classes": [
   {
    "name": "DefaultIndenter",
    "methods": [
     {
      "params": [
       {
        "type": "String",
        "name": "lf"
       }
      ],
      "type": "DefaultIndenter",
      "name": "withLinefeed"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "indent"
       }
      ],
      "type": "DefaultIndenter",
      "name": "withIndent"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isInline"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       },
       {
        "type": "int",
        "name": "level"
       }
      ],
      "type": null,
      "name": "writeIndentation"
     },
     {
      "params": [],
      "type": "String",
      "name": "getEol"
     },
     {
      "params": [],
      "type": "String",
      "name": "getIndent"
     }
    ],
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "SYS_LF"
     },
     {
      "type": "DefaultIndenter",
      "name": "SYSTEM_LINEFEED_INSTANCE"
     },
     {
      "type": "int",
      "name": "INDENT_LEVELS"
     },
     {
      "type": "char",
      "name": "indents"
     },
     {
      "type": "int",
      "name": "charsPerLevel"
     },
     {
      "type": "String",
      "name": "eol"
     }
    ]
   }
  ]
 },
 {
  "filename": "TextBuffer.java",
  "package_name": "com.fasterxml.jackson.core.util",
  "classes": [
   {
    "name": "TextBuffer",
    "methods": [
     {
      "params": [],
      "type": null,
      "name": "releaseBuffers"
     },
     {
      "params": [],
      "type": null,
      "name": "resetWithEmpty"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "buf"
       },
       {
        "type": "int",
        "name": "start"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "resetWithShared"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "buf"
       },
       {
        "type": "int",
        "name": "start"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "resetWithCopy"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "value"
       }
      ],
      "type": null,
      "name": "resetWithString"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "needed"
       }
      ],
      "type": "char",
      "name": "buf"
     },
     {
      "params": [],
      "type": null,
      "name": "clearSegments"
     },
     {
      "params": [],
      "type": "int",
      "name": "size"
     },
     {
      "params": [],
      "type": "int",
      "name": "getTextOffset"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "hasTextAsCharacters"
     },
     {
      "params": [],
      "type": "char",
      "name": "getTextBuffer"
     },
     {
      "params": [],
      "type": "String",
      "name": "contentsAsString"
     },
     {
      "params": [],
      "type": "char",
      "name": "contentsAsArray"
     },
     {
      "params": [],
      "type": "BigDecimal",
      "name": "contentsAsDecimal"
     },
     {
      "params": [],
      "type": "double",
      "name": "contentsAsDouble"
     },
     {
      "params": [],
      "type": null,
      "name": "ensureNotShared"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "c"
       }
      ],
      "type": null,
      "name": "append"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "c"
       },
       {
        "type": "int",
        "name": "start"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "append"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "str"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "append"
     },
     {
      "params": [],
      "type": "char",
      "name": "getCurrentSegment"
     },
     {
      "params": [],
      "type": "char",
      "name": "emptyAndGetCurrentSegment"
     },
     {
      "params": [],
      "type": "int",
      "name": "getCurrentSegmentSize"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "setCurrentLength"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": "String",
      "name": "setCurrentAndReturn"
     },
     {
      "params": [],
      "type": "char",
      "name": "finishCurrentSegment"
     },
     {
      "params": [],
      "type": "char",
      "name": "expandCurrentSegment"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "minSize"
       }
      ],
      "type": "char",
      "name": "expandCurrentSegment"
     },
     {
      "params": [],
      "type": "String",
      "name": "toString"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "needExtra"
       }
      ],
      "type": null,
      "name": "unshare"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "minNewSegmentSize"
       }
      ],
      "type": null,
      "name": "expand"
     },
     {
      "params": [],
      "type": "char",
      "name": "resultArray"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": "char",
      "name": "carr"
     }
    ],
    "fields": [
     {
      "type": "char",
      "name": "NO_CHARS"
     },
     {
      "type": "int",
      "name": "MIN_SEGMENT_LEN"
     },
     {
      "type": "int",
      "name": "MAX_SEGMENT_LEN"
     },
     {
      "type": "BufferRecycler",
      "name": "_allocator"
     },
     {
      "type": "char",
      "name": "_inputBuffer"
     },
     {
      "type": "int",
      "name": "_inputStart"
     },
     {
      "type": "int",
      "name": "_inputLen"
     },
     {
      "type": "ArrayList",
      "name": "_segments"
     },
     {
      "type": "boolean",
      "name": "_hasSegments"
     },
     {
      "type": "int",
      "name": "_segmentSize"
     },
     {
      "type": "char",
      "name": "_currentSegment"
     },
     {
      "type": "int",
      "name": "_currentSize"
     },
     {
      "type": "String",
      "name": "_resultString"
     },
     {
      "type": "char",
      "name": "_resultArray"
     }
    ]
   }
  ]
 },
 {
  "filename": "JsonGeneratorDelegate.java",
  "package_name": "com.fasterxml.jackson.core.util",
  "classes": [
   {
    "name": "JsonGeneratorDelegate",
    "methods": [
     {
      "params": [],
      "type": "Object",
      "name": "getCurrentValue"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "v"
       }
      ],
      "type": null,
      "name": "setCurrentValue"
     },
     {
      "params": [],
      "type": "JsonGenerator",
      "name": "getDelegate"
     },
     {
      "params": [],
      "type": "ObjectCodec",
      "name": "getCodec"
     },
     {
      "params": [
       {
        "type": "ObjectCodec",
        "name": "oc"
       }
      ],
      "type": "JsonGenerator",
      "name": "setCodec"
     },
     {
      "params": [
       {
        "type": "FormatSchema",
        "name": "schema"
       }
      ],
      "type": null,
      "name": "setSchema"
     },
     {
      "params": [],
      "type": "FormatSchema",
      "name": "getSchema"
     },
     {
      "params": [],
      "type": "Version",
      "name": "version"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getOutputTarget"
     },
     {
      "params": [],
      "type": "int",
      "name": "getOutputBuffered"
     },
     {
      "params": [
       {
        "type": "FormatSchema",
        "name": "schema"
       }
      ],
      "type": "boolean",
      "name": "canUseSchema"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "canWriteTypeId"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "canWriteObjectId"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "canWriteBinaryNatively"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "canOmitFields"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "JsonGenerator",
      "name": "enable"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "JsonGenerator",
      "name": "disable"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "boolean",
      "name": "isEnabled"
     },
     {
      "params": [],
      "type": "int",
      "name": "getFeatureMask"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "mask"
       }
      ],
      "type": "JsonGenerator",
      "name": "setFeatureMask"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "values"
       },
       {
        "type": "int",
        "name": "mask"
       }
      ],
      "type": "JsonGenerator",
      "name": "overrideStdFeatures"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "values"
       },
       {
        "type": "int",
        "name": "mask"
       }
      ],
      "type": "JsonGenerator",
      "name": "overrideFormatFeatures"
     },
     {
      "params": [
       {
        "type": "PrettyPrinter",
        "name": "pp"
       }
      ],
      "type": "JsonGenerator",
      "name": "setPrettyPrinter"
     },
     {
      "params": [],
      "type": "PrettyPrinter",
      "name": "getPrettyPrinter"
     },
     {
      "params": [],
      "type": "JsonGenerator",
      "name": "useDefaultPrettyPrinter"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "charCode"
       }
      ],
      "type": "JsonGenerator",
      "name": "setHighestNonEscapedChar"
     },
     {
      "params": [],
      "type": "int",
      "name": "getHighestEscapedChar"
     },
     {
      "params": [],
      "type": "CharacterEscapes",
      "name": "getCharacterEscapes"
     },
     {
      "params": [
       {
        "type": "CharacterEscapes",
        "name": "esc"
       }
      ],
      "type": "JsonGenerator",
      "name": "setCharacterEscapes"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "sep"
       }
      ],
      "type": "JsonGenerator",
      "name": "setRootValueSeparator"
     },
     {
      "params": [],
      "type": null,
      "name": "writeStartArray"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "size"
       }
      ],
      "type": null,
      "name": "writeStartArray"
     },
     {
      "params": [],
      "type": null,
      "name": "writeEndArray"
     },
     {
      "params": [],
      "type": null,
      "name": "writeStartObject"
     },
     {
      "params": [],
      "type": null,
      "name": "writeEndObject"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": null,
      "name": "writeFieldName"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "name"
       }
      ],
      "type": null,
      "name": "writeFieldName"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeString"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeString"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeString"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "length"
       }
      ],
      "type": null,
      "name": "writeRawUTF8String"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "length"
       }
      ],
      "type": null,
      "name": "writeUTF8String"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "raw"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "c"
       }
      ],
      "type": null,
      "name": "writeRaw"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeRawValue"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeRawValue"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeRawValue"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "byte",
        "name": "data"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeBinary"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "InputStream",
        "name": "data"
       },
       {
        "type": "int",
        "name": "dataLength"
       }
      ],
      "type": "int",
      "name": "writeBinary"
     },
     {
      "params": [
       {
        "type": "short",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "BigInteger",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "float",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "BigDecimal",
        "name": "v"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "encodedValue"
       }
      ],
      "type": null,
      "name": "writeNumber"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "state"
       }
      ],
      "type": null,
      "name": "writeBoolean"
     },
     {
      "params": [],
      "type": null,
      "name": "writeNull"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "fieldName"
       }
      ],
      "type": null,
      "name": "writeOmittedField"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "id"
       }
      ],
      "type": null,
      "name": "writeObjectId"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "id"
       }
      ],
      "type": null,
      "name": "writeObjectRef"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "id"
       }
      ],
      "type": null,
      "name": "writeTypeId"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "pojo"
       }
      ],
      "type": null,
      "name": "writeObject"
     },
     {
      "params": [
       {
        "type": "TreeNode",
        "name": "rootNode"
       }
      ],
      "type": null,
      "name": "writeTree"
     },
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "jp"
       }
      ],
      "type": null,
      "name": "copyCurrentEvent"
     },
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "jp"
       }
      ],
      "type": null,
      "name": "copyCurrentStructure"
     },
     {
      "params": [],
      "type": "JsonStreamContext",
      "name": "getOutputContext"
     },
     {
      "params": [],
      "type": null,
      "name": "flush"
     },
     {
      "params": [],
      "type": null,
      "name": "close"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isClosed"
     }
    ],
    "fields": [
     {
      "type": "JsonGenerator",
      "name": "delegate"
     },
     {
      "type": "boolean",
      "name": "delegateCopyMethods"
     }
    ]
   }
  ]
 },
 {
  "filename": "MinimalPrettyPrinter.java",
  "package_name": "com.fasterxml.jackson.core.util",
  "classes": [
   {
    "name": "MinimalPrettyPrinter",
    "methods": [
     {
      "params": [
       {
        "type": "String",
        "name": "sep"
       }
      ],
      "type": null,
      "name": "setRootValueSeparator"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       }
      ],
      "type": null,
      "name": "writeRootValueSeparator"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       }
      ],
      "type": null,
      "name": "writeStartObject"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       }
      ],
      "type": null,
      "name": "beforeObjectEntries"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       }
      ],
      "type": null,
      "name": "writeObjectFieldValueSeparator"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       }
      ],
      "type": null,
      "name": "writeObjectEntrySeparator"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       },
       {
        "type": "int",
        "name": "nrOfEntries"
       }
      ],
      "type": null,
      "name": "writeEndObject"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       }
      ],
      "type": null,
      "name": "writeStartArray"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       }
      ],
      "type": null,
      "name": "beforeArrayValues"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       }
      ],
      "type": null,
      "name": "writeArrayValueSeparator"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       },
       {
        "type": "int",
        "name": "nrOfValues"
       }
      ],
      "type": null,
      "name": "writeEndArray"
     }
    ],
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "DEFAULT_ROOT_VALUE_SEPARATOR"
     },
     {
      "type": "String",
      "name": "_rootValueSeparator"
     }
    ]
   }
  ]
 },
 {
  "filename": "Instantiatable.java",
  "package_name": "com.fasterxml.jackson.core.util",
  "classes": [
   {
    "name": "Instantiatable",
    "methods": [
     {
      "params": [],
      "type": "T",
      "name": "createInstance"
     }
    ],
    "fields": []
   }
  ]
 },
 {
  "filename": "InternCache.java",
  "package_name": "com.fasterxml.jackson.core.util",
  "classes": [
   {
    "name": "InternCache",
    "methods": [
     {
      "params": [
       {
        "type": "String",
        "name": "input"
       }
      ],
      "type": "String",
      "name": "intern"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "MAX_ENTRIES"
     },
     {
      "type": "InternCache",
      "name": "instance"
     },
     {
      "type": "Object",
      "name": "lock"
     }
    ]
   }
  ]
 },
 {
  "filename": "VersionUtil.java",
  "package_name": "com.fasterxml.jackson.core.util",
  "classes": [
   {
    "name": "VersionUtil",
    "methods": [
     {
      "params": [],
      "type": "Version",
      "name": "version"
     },
     {
      "params": [
       {
        "type": "Class",
        "name": "cls"
       }
      ],
      "type": "Version",
      "name": "versionFor"
     },
     {
      "params": [
       {
        "type": "Class",
        "name": "cls"
       }
      ],
      "type": "Version",
      "name": "packageVersionFor"
     },
     {
      "params": [
       {
        "type": "ClassLoader",
        "name": "cl"
       },
       {
        "type": "String",
        "name": "groupId"
       },
       {
        "type": "String",
        "name": "artifactId"
       }
      ],
      "type": "Version",
      "name": "mavenVersionFor"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "s"
       },
       {
        "type": "String",
        "name": "groupId"
       },
       {
        "type": "String",
        "name": "artifactId"
       }
      ],
      "type": "Version",
      "name": "parseVersion"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "s"
       }
      ],
      "type": "int",
      "name": "parseVersionPart"
     },
     {
      "params": [
       {
        "type": "Closeable",
        "name": "c"
       }
      ],
      "type": null,
      "name": "_close"
     },
     {
      "params": [],
      "type": null,
      "name": "throwInternal"
     }
    ],
    "fields": [
     {
      "type": "Pattern",
      "name": "V_SEP"
     },
     {
      "type": "Version",
      "name": "_v"
     }
    ]
   }
  ]
 },
 {
  "filename": "ByteArrayBuilder.java",
  "package_name": "com.fasterxml.jackson.core.util",
  "classes": [
   {
    "name": "ByteArrayBuilder",
    "methods": [
     {
      "params": [],
      "type": null,
      "name": "reset"
     },
     {
      "params": [],
      "type": null,
      "name": "release"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ],
      "type": null,
      "name": "append"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "b16"
       }
      ],
      "type": null,
      "name": "appendTwoBytes"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "b24"
       }
      ],
      "type": null,
      "name": "appendThreeBytes"
     },
     {
      "params": [],
      "type": "byte",
      "name": "toByteArray"
     },
     {
      "params": [],
      "type": "byte",
      "name": "resetAndGetFirstSegment"
     },
     {
      "params": [],
      "type": "byte",
      "name": "finishCurrentSegment"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "lastBlockLength"
       }
      ],
      "type": "byte",
      "name": "completeAndCoalesce"
     },
     {
      "params": [],
      "type": "byte",
      "name": "getCurrentSegment"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "setCurrentSegmentLength"
     },
     {
      "params": [],
      "type": "int",
      "name": "getCurrentSegmentLength"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "b"
       }
      ],
      "type": null,
      "name": "write"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "b"
       },
       {
        "type": "int",
        "name": "off"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "write"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "b"
       }
      ],
      "type": null,
      "name": "write"
     },
     {
      "params": [],
      "type": null,
      "name": "close"
     },
     {
      "params": [],
      "type": null,
      "name": "flush"
     },
     {
      "params": [],
      "type": null,
      "name": "_allocMore"
     }
    ],
    "fields": [
     {
      "type": "byte",
      "name": "NO_BYTES"
     },
     {
      "type": "int",
      "name": "INITIAL_BLOCK_SIZE"
     },
     {
      "type": "int",
      "name": "MAX_BLOCK_SIZE"
     },
     {
      "type": "int",
      "name": "DEFAULT_BLOCK_ARRAY_SIZE"
     },
     {
      "type": "BufferRecycler",
      "name": "_bufferRecycler"
     },
     {
      "type": "LinkedList",
      "name": "_pastBlocks"
     },
     {
      "type": "int",
      "name": "_pastLen"
     },
     {
      "type": "byte",
      "name": "_currBlock"
     },
     {
      "type": "int",
      "name": "_currBlockPtr"
     }
    ]
   }
  ]
 },
 {
  "filename": "package-info.java",
  "package_name": "com.fasterxml.jackson.core.util",
  "classes": []
 },
 {
  "filename": "DefaultPrettyPrinter.java",
  "package_name": "com.fasterxml.jackson.core.util",
  "classes": [
   {
    "name": "DefaultPrettyPrinter",
    "methods": [
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "rootSeparator"
       }
      ],
      "type": "DefaultPrettyPrinter",
      "name": "withRootSeparator"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "rootSeparator"
       }
      ],
      "type": "DefaultPrettyPrinter",
      "name": "withRootSeparator"
     },
     {
      "params": [
       {
        "type": "Indenter",
        "name": "i"
       }
      ],
      "type": null,
      "name": "indentArraysWith"
     },
     {
      "params": [
       {
        "type": "Indenter",
        "name": "i"
       }
      ],
      "type": null,
      "name": "indentObjectsWith"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "b"
       }
      ],
      "type": null,
      "name": "spacesInObjectEntries"
     },
     {
      "params": [
       {
        "type": "Indenter",
        "name": "i"
       }
      ],
      "type": "DefaultPrettyPrinter",
      "name": "withArrayIndenter"
     },
     {
      "params": [
       {
        "type": "Indenter",
        "name": "i"
       }
      ],
      "type": "DefaultPrettyPrinter",
      "name": "withObjectIndenter"
     },
     {
      "params": [],
      "type": "DefaultPrettyPrinter",
      "name": "withSpacesInObjectEntries"
     },
     {
      "params": [],
      "type": "DefaultPrettyPrinter",
      "name": "withoutSpacesInObjectEntries"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "state"
       }
      ],
      "type": "DefaultPrettyPrinter",
      "name": "_withSpaces"
     },
     {
      "params": [],
      "type": "DefaultPrettyPrinter",
      "name": "createInstance"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       }
      ],
      "type": null,
      "name": "writeRootValueSeparator"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       }
      ],
      "type": null,
      "name": "writeStartObject"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       }
      ],
      "type": null,
      "name": "beforeObjectEntries"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       }
      ],
      "type": null,
      "name": "writeObjectFieldValueSeparator"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       }
      ],
      "type": null,
      "name": "writeObjectEntrySeparator"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       },
       {
        "type": "int",
        "name": "nrOfEntries"
       }
      ],
      "type": null,
      "name": "writeEndObject"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       }
      ],
      "type": null,
      "name": "writeStartArray"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "jg"
       }
      ],
      "type": null,
      "name": "beforeArrayValues"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "gen"
       }
      ],
      "type": null,
      "name": "writeArrayValueSeparator"
     },
     {
      "params": [
       {
        "type": "JsonGenerator",
        "name": "gen"
       },
       {
        "type": "int",
        "name": "nrOfValues"
       }
      ],
      "type": null,
      "name": "writeEndArray"
     }
    ],
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "SerializedString",
      "name": "DEFAULT_ROOT_VALUE_SEPARATOR"
     },
     {
      "type": "Indenter",
      "name": "_arrayIndenter"
     },
     {
      "type": "Indenter",
      "name": "_objectIndenter"
     },
     {
      "type": "SerializableString",
      "name": "_rootSeparator"
     },
     {
      "type": "boolean",
      "name": "_spacesInObjectEntries"
     },
     {
      "type": "int",
      "name": "_nesting"
     }
    ]
   }
  ]
 },
 {
  "filename": "BufferRecycler.java",
  "package_name": "com.fasterxml.jackson.core.util",
  "classes": [
   {
    "name": "BufferRecycler",
    "methods": [
     {
      "params": [
       {
        "type": "int",
        "name": "ix"
       }
      ],
      "type": "byte",
      "name": "allocByteBuffer"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ix"
       },
       {
        "type": "int",
        "name": "minSize"
       }
      ],
      "type": "byte",
      "name": "allocByteBuffer"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ix"
       },
       {
        "type": "byte",
        "name": "buffer"
       }
      ],
      "type": null,
      "name": "releaseByteBuffer"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ix"
       }
      ],
      "type": "char",
      "name": "allocCharBuffer"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ix"
       },
       {
        "type": "int",
        "name": "minSize"
       }
      ],
      "type": "char",
      "name": "allocCharBuffer"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ix"
       },
       {
        "type": "char",
        "name": "buffer"
       }
      ],
      "type": null,
      "name": "releaseCharBuffer"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ix"
       }
      ],
      "type": "int",
      "name": "byteBufferLength"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ix"
       }
      ],
      "type": "int",
      "name": "charBufferLength"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "size"
       }
      ],
      "type": "byte",
      "name": "balloc"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "size"
       }
      ],
      "type": "char",
      "name": "calloc"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "BYTE_READ_IO_BUFFER"
     },
     {
      "type": "int",
      "name": "BYTE_WRITE_ENCODING_BUFFER"
     },
     {
      "type": "int",
      "name": "BYTE_WRITE_CONCAT_BUFFER"
     },
     {
      "type": "int",
      "name": "BYTE_BASE64_CODEC_BUFFER"
     },
     {
      "type": "int",
      "name": "CHAR_TOKEN_BUFFER"
     },
     {
      "type": "int",
      "name": "CHAR_CONCAT_BUFFER"
     },
     {
      "type": "int",
      "name": "CHAR_TEXT_BUFFER"
     },
     {
      "type": "int",
      "name": "CHAR_NAME_COPY_BUFFER"
     },
     {
      "type": "int",
      "name": "BYTE_BUFFER_LENGTHS"
     },
     {
      "type": "int",
      "name": "CHAR_BUFFER_LENGTHS"
     },
     {
      "type": "byte",
      "name": "_byteBuffers"
     },
     {
      "type": "char",
      "name": "_charBuffers"
     }
    ]
   }
  ]
 },
 {
  "filename": "JsonParserDelegate.java",
  "package_name": "com.fasterxml.jackson.core.util",
  "classes": [
   {
    "name": "JsonParserDelegate",
    "methods": [
     {
      "params": [],
      "type": "Object",
      "name": "getCurrentValue"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "v"
       }
      ],
      "type": null,
      "name": "setCurrentValue"
     },
     {
      "params": [
       {
        "type": "ObjectCodec",
        "name": "c"
       }
      ],
      "type": null,
      "name": "setCodec"
     },
     {
      "params": [],
      "type": "ObjectCodec",
      "name": "getCodec"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "JsonParser",
      "name": "enable"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "JsonParser",
      "name": "disable"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "boolean",
      "name": "isEnabled"
     },
     {
      "params": [],
      "type": "int",
      "name": "getFeatureMask"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "mask"
       }
      ],
      "type": "JsonParser",
      "name": "setFeatureMask"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "values"
       },
       {
        "type": "int",
        "name": "mask"
       }
      ],
      "type": "JsonParser",
      "name": "overrideStdFeatures"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "values"
       },
       {
        "type": "int",
        "name": "mask"
       }
      ],
      "type": "JsonParser",
      "name": "overrideFormatFeatures"
     },
     {
      "params": [],
      "type": "FormatSchema",
      "name": "getSchema"
     },
     {
      "params": [
       {
        "type": "FormatSchema",
        "name": "schema"
       }
      ],
      "type": null,
      "name": "setSchema"
     },
     {
      "params": [
       {
        "type": "FormatSchema",
        "name": "schema"
       }
      ],
      "type": "boolean",
      "name": "canUseSchema"
     },
     {
      "params": [],
      "type": "Version",
      "name": "version"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getInputSource"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "requiresCustomCodec"
     },
     {
      "params": [],
      "type": null,
      "name": "close"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isClosed"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "getCurrentToken"
     },
     {
      "params": [],
      "type": "int",
      "name": "getCurrentTokenId"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "hasCurrentToken"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "id"
       }
      ],
      "type": "boolean",
      "name": "hasTokenId"
     },
     {
      "params": [
       {
        "type": "JsonToken",
        "name": "t"
       }
      ],
      "type": "boolean",
      "name": "hasToken"
     },
     {
      "params": [],
      "type": "String",
      "name": "getCurrentName"
     },
     {
      "params": [],
      "type": "JsonLocation",
      "name": "getCurrentLocation"
     },
     {
      "params": [],
      "type": "JsonStreamContext",
      "name": "getParsingContext"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isExpectedStartArrayToken"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isExpectedStartObjectToken"
     },
     {
      "params": [],
      "type": null,
      "name": "clearCurrentToken"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "getLastClearedToken"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": null,
      "name": "overrideCurrentName"
     },
     {
      "params": [],
      "type": "String",
      "name": "getText"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "hasTextCharacters"
     },
     {
      "params": [],
      "type": "char",
      "name": "getTextCharacters"
     },
     {
      "params": [],
      "type": "int",
      "name": "getTextLength"
     },
     {
      "params": [],
      "type": "int",
      "name": "getTextOffset"
     },
     {
      "params": [],
      "type": "BigInteger",
      "name": "getBigIntegerValue"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "getBooleanValue"
     },
     {
      "params": [],
      "type": "byte",
      "name": "getByteValue"
     },
     {
      "params": [],
      "type": "short",
      "name": "getShortValue"
     },
     {
      "params": [],
      "type": "BigDecimal",
      "name": "getDecimalValue"
     },
     {
      "params": [],
      "type": "double",
      "name": "getDoubleValue"
     },
     {
      "params": [],
      "type": "float",
      "name": "getFloatValue"
     },
     {
      "params": [],
      "type": "int",
      "name": "getIntValue"
     },
     {
      "params": [],
      "type": "long",
      "name": "getLongValue"
     },
     {
      "params": [],
      "type": "NumberType",
      "name": "getNumberType"
     },
     {
      "params": [],
      "type": "Number",
      "name": "getNumberValue"
     },
     {
      "params": [],
      "type": "int",
      "name": "getValueAsInt"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "defaultValue"
       }
      ],
      "type": "int",
      "name": "getValueAsInt"
     },
     {
      "params": [],
      "type": "long",
      "name": "getValueAsLong"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "defaultValue"
       }
      ],
      "type": "long",
      "name": "getValueAsLong"
     },
     {
      "params": [],
      "type": "double",
      "name": "getValueAsDouble"
     },
     {
      "params": [
       {
        "type": "double",
        "name": "defaultValue"
       }
      ],
      "type": "double",
      "name": "getValueAsDouble"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "getValueAsBoolean"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "defaultValue"
       }
      ],
      "type": "boolean",
      "name": "getValueAsBoolean"
     },
     {
      "params": [],
      "type": "String",
      "name": "getValueAsString"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "defaultValue"
       }
      ],
      "type": "String",
      "name": "getValueAsString"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getEmbeddedObject"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       }
      ],
      "type": "byte",
      "name": "getBinaryValue"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "OutputStream",
        "name": "out"
       }
      ],
      "type": "int",
      "name": "readBinaryValue"
     },
     {
      "params": [],
      "type": "JsonLocation",
      "name": "getTokenLocation"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "nextToken"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "nextValue"
     },
     {
      "params": [],
      "type": "JsonParser",
      "name": "skipChildren"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "canReadObjectId"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "canReadTypeId"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getObjectId"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getTypeId"
     }
    ],
    "fields": [
     {
      "type": "JsonParser",
      "name": "delegate"
     }
    ]
   }
  ]
 },
 {
  "filename": "JsonParserSequence.java",
  "package_name": "com.fasterxml.jackson.core.util",
  "classes": [
   {
    "name": "JsonParserSequence",
    "methods": [
     {
      "params": [
       {
        "type": "JsonParser",
        "name": "first"
       },
       {
        "type": "JsonParser",
        "name": "second"
       }
      ],
      "type": "JsonParserSequence",
      "name": "createFlattened"
     },
     {
      "params": [
       {
        "type": "List",
        "name": "result"
       }
      ],
      "type": null,
      "name": "addFlattenedActiveParsers"
     },
     {
      "params": [],
      "type": null,
      "name": "close"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "nextToken"
     },
     {
      "params": [],
      "type": "int",
      "name": "containedParsersCount"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "switchToNext"
     }
    ],
    "fields": [
     {
      "type": "JsonParser",
      "name": "_parsers"
     },
     {
      "type": "int",
      "name": "_nextParser"
     }
    ]
   }
  ]
 },
 {
  "filename": "GeneratorBase.java",
  "package_name": "com.fasterxml.jackson.core.base",
  "classes": [
   {
    "name": "GeneratorBase",
    "methods": [
     {
      "params": [],
      "type": "Version",
      "name": "version"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getCurrentValue"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "v"
       }
      ],
      "type": null,
      "name": "setCurrentValue"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "boolean",
      "name": "isEnabled"
     },
     {
      "params": [],
      "type": "int",
      "name": "getFeatureMask"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "JsonGenerator",
      "name": "enable"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "JsonGenerator",
      "name": "disable"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "newMask"
       }
      ],
      "type": "JsonGenerator",
      "name": "setFeatureMask"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "values"
       },
       {
        "type": "int",
        "name": "mask"
       }
      ],
      "type": "JsonGenerator",
      "name": "overrideStdFeatures"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "newFeatureFlags"
       },
       {
        "type": "int",
        "name": "changedFeatures"
       }
      ],
      "type": null,
      "name": "_checkStdFeatureChanges"
     },
     {
      "params": [],
      "type": "JsonGenerator",
      "name": "useDefaultPrettyPrinter"
     },
     {
      "params": [
       {
        "type": "ObjectCodec",
        "name": "oc"
       }
      ],
      "type": "JsonGenerator",
      "name": "setCodec"
     },
     {
      "params": [],
      "type": "ObjectCodec",
      "name": "getCodec"
     },
     {
      "params": [],
      "type": "JsonWriteContext",
      "name": "getOutputContext"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "name"
       }
      ],
      "type": null,
      "name": "writeFieldName"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeString"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeRawValue"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeRawValue"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "text"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "writeRawValue"
     },
     {
      "params": [
       {
        "type": "SerializableString",
        "name": "text"
       }
      ],
      "type": null,
      "name": "writeRawValue"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "InputStream",
        "name": "data"
       },
       {
        "type": "int",
        "name": "dataLength"
       }
      ],
      "type": "int",
      "name": "writeBinary"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "value"
       }
      ],
      "type": null,
      "name": "writeObject"
     },
     {
      "params": [
       {
        "type": "TreeNode",
        "name": "rootNode"
       }
      ],
      "type": null,
      "name": "writeTree"
     },
     {
      "params": [],
      "type": null,
      "name": "flush"
     },
     {
      "params": [],
      "type": null,
      "name": "close"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isClosed"
     },
     {
      "params": [],
      "type": null,
      "name": "_releaseBuffers"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "typeMsg"
       }
      ],
      "type": null,
      "name": "_verifyValueWrite"
     },
     {
      "params": [],
      "type": "PrettyPrinter",
      "name": "_constructDefaultPrettyPrinter"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "surr1"
       },
       {
        "type": "int",
        "name": "surr2"
       }
      ],
      "type": "int",
      "name": "_decodeSurrogate"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "SURR1_FIRST"
     },
     {
      "type": "int",
      "name": "SURR1_LAST"
     },
     {
      "type": "int",
      "name": "SURR2_FIRST"
     },
     {
      "type": "int",
      "name": "SURR2_LAST"
     },
     {
      "type": "int",
      "name": "DERIVED_FEATURES_MASK"
     },
     {
      "type": "String",
      "name": "WRITE_BINARY"
     },
     {
      "type": "String",
      "name": "WRITE_BOOLEAN"
     },
     {
      "type": "String",
      "name": "WRITE_NULL"
     },
     {
      "type": "String",
      "name": "WRITE_NUMBER"
     },
     {
      "type": "String",
      "name": "WRITE_RAW"
     },
     {
      "type": "String",
      "name": "WRITE_STRING"
     },
     {
      "type": "ObjectCodec",
      "name": "_objectCodec"
     },
     {
      "type": "int",
      "name": "_features"
     },
     {
      "type": "boolean",
      "name": "_cfgNumbersAsStrings"
     },
     {
      "type": "JsonWriteContext",
      "name": "_writeContext"
     },
     {
      "type": "boolean",
      "name": "_closed"
     }
    ]
   }
  ]
 },
 {
  "filename": "package-info.java",
  "package_name": "com.fasterxml.jackson.core.base",
  "classes": []
 },
 {
  "filename": "ParserBase.java",
  "package_name": "com.fasterxml.jackson.core.base",
  "classes": [
   {
    "name": "ParserBase",
    "methods": [
     {
      "params": [],
      "type": "Version",
      "name": "version"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getCurrentValue"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "v"
       }
      ],
      "type": null,
      "name": "setCurrentValue"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "JsonParser",
      "name": "enable"
     },
     {
      "params": [
       {
        "type": "Feature",
        "name": "f"
       }
      ],
      "type": "JsonParser",
      "name": "disable"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "newMask"
       }
      ],
      "type": "JsonParser",
      "name": "setFeatureMask"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "values"
       },
       {
        "type": "int",
        "name": "mask"
       }
      ],
      "type": "JsonParser",
      "name": "overrideStdFeatures"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "newFeatureFlags"
       },
       {
        "type": "int",
        "name": "changedFeatures"
       }
      ],
      "type": null,
      "name": "_checkStdFeatureChanges"
     },
     {
      "params": [],
      "type": "String",
      "name": "getCurrentName"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": null,
      "name": "overrideCurrentName"
     },
     {
      "params": [],
      "type": null,
      "name": "close"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isClosed"
     },
     {
      "params": [],
      "type": "JsonReadContext",
      "name": "getParsingContext"
     },
     {
      "params": [],
      "type": "JsonLocation",
      "name": "getTokenLocation"
     },
     {
      "params": [],
      "type": "JsonLocation",
      "name": "getCurrentLocation"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "hasTextCharacters"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getEmbeddedObject"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "variant"
       }
      ],
      "type": "byte",
      "name": "getBinaryValue"
     },
     {
      "params": [],
      "type": "long",
      "name": "getTokenCharacterOffset"
     },
     {
      "params": [],
      "type": "int",
      "name": "getTokenLineNr"
     },
     {
      "params": [],
      "type": "int",
      "name": "getTokenColumnNr"
     },
     {
      "params": [],
      "type": null,
      "name": "loadMoreGuaranteed"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "loadMore"
     },
     {
      "params": [],
      "type": null,
      "name": "_finishString"
     },
     {
      "params": [],
      "type": null,
      "name": "_closeInput"
     },
     {
      "params": [],
      "type": null,
      "name": "_releaseBuffers"
     },
     {
      "params": [],
      "type": null,
      "name": "_handleEOF"
     },
     {
      "params": [],
      "type": "int",
      "name": "_eofAsNextChar"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "actCh"
       },
       {
        "type": "char",
        "name": "expCh"
       }
      ],
      "type": null,
      "name": "_reportMismatchedEndMarker"
     },
     {
      "params": [],
      "type": "ByteArrayBuilder",
      "name": "_getByteArrayBuilder"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "negative"
       },
       {
        "type": "int",
        "name": "intLen"
       },
       {
        "type": "int",
        "name": "fractLen"
       },
       {
        "type": "int",
        "name": "expLen"
       }
      ],
      "type": "JsonToken",
      "name": "reset"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "negative"
       },
       {
        "type": "int",
        "name": "intLen"
       }
      ],
      "type": "JsonToken",
      "name": "resetInt"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "negative"
       },
       {
        "type": "int",
        "name": "intLen"
       },
       {
        "type": "int",
        "name": "fractLen"
       },
       {
        "type": "int",
        "name": "expLen"
       }
      ],
      "type": "JsonToken",
      "name": "resetFloat"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "valueStr"
       },
       {
        "type": "double",
        "name": "value"
       }
      ],
      "type": "JsonToken",
      "name": "resetAsNaN"
     },
     {
      "params": [],
      "type": "Number",
      "name": "getNumberValue"
     },
     {
      "params": [],
      "type": "NumberType",
      "name": "getNumberType"
     },
     {
      "params": [],
      "type": "int",
      "name": "getIntValue"
     },
     {
      "params": [],
      "type": "long",
      "name": "getLongValue"
     },
     {
      "params": [],
      "type": "BigInteger",
      "name": "getBigIntegerValue"
     },
     {
      "params": [],
      "type": "float",
      "name": "getFloatValue"
     },
     {
      "params": [],
      "type": "double",
      "name": "getDoubleValue"
     },
     {
      "params": [],
      "type": "BigDecimal",
      "name": "getDecimalValue"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "expType"
       }
      ],
      "type": null,
      "name": "_parseNumericValue"
     },
     {
      "params": [],
      "type": "int",
      "name": "_parseIntValue"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "expType"
       }
      ],
      "type": null,
      "name": "_parseSlowFloat"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "expType"
       },
       {
        "type": "char",
        "name": "buf"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "_parseSlowInt"
     },
     {
      "params": [],
      "type": null,
      "name": "convertNumberToInt"
     },
     {
      "params": [],
      "type": null,
      "name": "convertNumberToLong"
     },
     {
      "params": [],
      "type": null,
      "name": "convertNumberToBigInteger"
     },
     {
      "params": [],
      "type": null,
      "name": "convertNumberToDouble"
     },
     {
      "params": [],
      "type": null,
      "name": "convertNumberToBigDecimal"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ch"
       },
       {
        "type": "String",
        "name": "comment"
       }
      ],
      "type": null,
      "name": "reportUnexpectedNumberChar"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "msg"
       }
      ],
      "type": null,
      "name": "reportInvalidNumber"
     },
     {
      "params": [],
      "type": null,
      "name": "reportOverflowInt"
     },
     {
      "params": [],
      "type": null,
      "name": "reportOverflowLong"
     },
     {
      "params": [],
      "type": "char",
      "name": "_decodeEscaped"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "int",
        "name": "ch"
       },
       {
        "type": "int",
        "name": "index"
       }
      ],
      "type": "int",
      "name": "_decodeBase64Escape"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "char",
        "name": "ch"
       },
       {
        "type": "int",
        "name": "index"
       }
      ],
      "type": "int",
      "name": "_decodeBase64Escape"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "int",
        "name": "ch"
       },
       {
        "type": "int",
        "name": "bindex"
       }
      ],
      "type": "IllegalArgumentException",
      "name": "reportInvalidBase64Char"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       },
       {
        "type": "int",
        "name": "ch"
       },
       {
        "type": "int",
        "name": "bindex"
       },
       {
        "type": "String",
        "name": "msg"
       }
      ],
      "type": "IllegalArgumentException",
      "name": "reportInvalidBase64Char"
     }
    ],
    "fields": [
     {
      "type": "IOContext",
      "name": "_ioContext"
     },
     {
      "type": "boolean",
      "name": "_closed"
     },
     {
      "type": "int",
      "name": "_inputPtr"
     },
     {
      "type": "int",
      "name": "_inputEnd"
     },
     {
      "type": "long",
      "name": "_currInputProcessed"
     },
     {
      "type": "int",
      "name": "_currInputRow"
     },
     {
      "type": "int",
      "name": "_currInputRowStart"
     },
     {
      "type": "long",
      "name": "_tokenInputTotal"
     },
     {
      "type": "int",
      "name": "_tokenInputRow"
     },
     {
      "type": "int",
      "name": "_tokenInputCol"
     },
     {
      "type": "JsonReadContext",
      "name": "_parsingContext"
     },
     {
      "type": "JsonToken",
      "name": "_nextToken"
     },
     {
      "type": "TextBuffer",
      "name": "_textBuffer"
     },
     {
      "type": "char",
      "name": "_nameCopyBuffer"
     },
     {
      "type": "boolean",
      "name": "_nameCopied"
     },
     {
      "type": "ByteArrayBuilder",
      "name": "_byteArrayBuilder"
     },
     {
      "type": "byte",
      "name": "_binaryValue"
     },
     {
      "type": "int",
      "name": "NR_UNKNOWN"
     },
     {
      "type": "int",
      "name": "NR_INT"
     },
     {
      "type": "int",
      "name": "NR_LONG"
     },
     {
      "type": "int",
      "name": "NR_BIGINT"
     },
     {
      "type": "int",
      "name": "NR_DOUBLE"
     },
     {
      "type": "int",
      "name": "NR_BIGDECIMAL"
     },
     {
      "type": "BigInteger",
      "name": "BI_MIN_INT"
     },
     {
      "type": "BigInteger",
      "name": "BI_MAX_INT"
     },
     {
      "type": "BigInteger",
      "name": "BI_MIN_LONG"
     },
     {
      "type": "BigInteger",
      "name": "BI_MAX_LONG"
     },
     {
      "type": "BigDecimal",
      "name": "BD_MIN_LONG"
     },
     {
      "type": "BigDecimal",
      "name": "BD_MAX_LONG"
     },
     {
      "type": "BigDecimal",
      "name": "BD_MIN_INT"
     },
     {
      "type": "BigDecimal",
      "name": "BD_MAX_INT"
     },
     {
      "type": "long",
      "name": "MIN_INT_L"
     },
     {
      "type": "long",
      "name": "MAX_INT_L"
     },
     {
      "type": "double",
      "name": "MIN_LONG_D"
     },
     {
      "type": "double",
      "name": "MAX_LONG_D"
     },
     {
      "type": "double",
      "name": "MIN_INT_D"
     },
     {
      "type": "double",
      "name": "MAX_INT_D"
     },
     {
      "type": "int",
      "name": "INT_0"
     },
     {
      "type": "int",
      "name": "INT_9"
     },
     {
      "type": "int",
      "name": "INT_MINUS"
     },
     {
      "type": "int",
      "name": "INT_PLUS"
     },
     {
      "type": "char",
      "name": "CHAR_NULL"
     },
     {
      "type": "int",
      "name": "_numTypesValid"
     },
     {
      "type": "int",
      "name": "_numberInt"
     },
     {
      "type": "long",
      "name": "_numberLong"
     },
     {
      "type": "double",
      "name": "_numberDouble"
     },
     {
      "type": "BigInteger",
      "name": "_numberBigInt"
     },
     {
      "type": "BigDecimal",
      "name": "_numberBigDecimal"
     },
     {
      "type": "boolean",
      "name": "_numberNegative"
     },
     {
      "type": "int",
      "name": "_intLength"
     },
     {
      "type": "int",
      "name": "_fractLength"
     },
     {
      "type": "int",
      "name": "_expLength"
     }
    ]
   }
  ]
 },
 {
  "filename": "ParserMinimalBase.java",
  "package_name": "com.fasterxml.jackson.core.base",
  "classes": [
   {
    "name": "ParserMinimalBase",
    "methods": [
     {
      "params": [],
      "type": "JsonToken",
      "name": "nextToken"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "getCurrentToken"
     },
     {
      "params": [],
      "type": "int",
      "name": "getCurrentTokenId"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "hasCurrentToken"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "id"
       }
      ],
      "type": "boolean",
      "name": "hasTokenId"
     },
     {
      "params": [
       {
        "type": "JsonToken",
        "name": "t"
       }
      ],
      "type": "boolean",
      "name": "hasToken"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isExpectedStartArrayToken"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isExpectedStartObjectToken"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "nextValue"
     },
     {
      "params": [],
      "type": "JsonParser",
      "name": "skipChildren"
     },
     {
      "params": [],
      "type": null,
      "name": "_handleEOF"
     },
     {
      "params": [],
      "type": "String",
      "name": "getCurrentName"
     },
     {
      "params": [],
      "type": null,
      "name": "close"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isClosed"
     },
     {
      "params": [],
      "type": "JsonStreamContext",
      "name": "getParsingContext"
     },
     {
      "params": [],
      "type": null,
      "name": "clearCurrentToken"
     },
     {
      "params": [],
      "type": "JsonToken",
      "name": "getLastClearedToken"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "name"
       }
      ],
      "type": null,
      "name": "overrideCurrentName"
     },
     {
      "params": [],
      "type": "String",
      "name": "getText"
     },
     {
      "params": [],
      "type": "char",
      "name": "getTextCharacters"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "hasTextCharacters"
     },
     {
      "params": [],
      "type": "int",
      "name": "getTextLength"
     },
     {
      "params": [],
      "type": "int",
      "name": "getTextOffset"
     },
     {
      "params": [
       {
        "type": "Base64Variant",
        "name": "b64variant"
       }
      ],
      "type": "byte",
      "name": "getBinaryValue"
     },
     {
      "params": [
       {
        "type": "boolean",
        "name": "defaultValue"
       }
      ],
      "type": "boolean",
      "name": "getValueAsBoolean"
     },
     {
      "params": [],
      "type": "int",
      "name": "getValueAsInt"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "defaultValue"
       }
      ],
      "type": "int",
      "name": "getValueAsInt"
     },
     {
      "params": [],
      "type": "long",
      "name": "getValueAsLong"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "defaultValue"
       }
      ],
      "type": "long",
      "name": "getValueAsLong"
     },
     {
      "params": [
       {
        "type": "double",
        "name": "defaultValue"
       }
      ],
      "type": "double",
      "name": "getValueAsDouble"
     },
     {
      "params": [],
      "type": "String",
      "name": "getValueAsString"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "defaultValue"
       }
      ],
      "type": "String",
      "name": "getValueAsString"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "str"
       },
       {
        "type": "ByteArrayBuilder",
        "name": "builder"
       },
       {
        "type": "Base64Variant",
        "name": "b64variant"
       }
      ],
      "type": null,
      "name": "_decodeBase64"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "value"
       }
      ],
      "type": "boolean",
      "name": "_hasTextualNull"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ch"
       },
       {
        "type": "String",
        "name": "comment"
       }
      ],
      "type": null,
      "name": "_reportUnexpectedChar"
     },
     {
      "params": [],
      "type": null,
      "name": "_reportInvalidEOF"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "msg"
       }
      ],
      "type": null,
      "name": "_reportInvalidEOF"
     },
     {
      "params": [],
      "type": null,
      "name": "_reportInvalidEOFInValue"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ch"
       }
      ],
      "type": null,
      "name": "_reportMissingRootWS"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ],
      "type": null,
      "name": "_throwInvalidSpace"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "i"
       },
       {
        "type": "String",
        "name": "ctxtDesc"
       }
      ],
      "type": null,
      "name": "_throwUnquotedSpace"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "ch"
       }
      ],
      "type": "char",
      "name": "_handleUnrecognizedCharacterEscape"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ch"
       }
      ],
      "type": "String",
      "name": "_getCharDesc"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "msg"
       }
      ],
      "type": null,
      "name": "_reportError"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "msg"
       },
       {
        "type": "Throwable",
        "name": "t"
       }
      ],
      "type": null,
      "name": "_wrapError"
     },
     {
      "params": [],
      "type": null,
      "name": "_throwInternal"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "msg"
       },
       {
        "type": "Throwable",
        "name": "t"
       }
      ],
      "type": "JsonParseException",
      "name": "_constructError"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "str"
       }
      ],
      "type": "byte",
      "name": "_asciiBytes"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "b"
       }
      ],
      "type": "String",
      "name": "_ascii"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "INT_TAB"
     },
     {
      "type": "int",
      "name": "INT_LF"
     },
     {
      "type": "int",
      "name": "INT_CR"
     },
     {
      "type": "int",
      "name": "INT_SPACE"
     },
     {
      "type": "int",
      "name": "INT_LBRACKET"
     },
     {
      "type": "int",
      "name": "INT_RBRACKET"
     },
     {
      "type": "int",
      "name": "INT_LCURLY"
     },
     {
      "type": "int",
      "name": "INT_RCURLY"
     },
     {
      "type": "int",
      "name": "INT_QUOTE"
     },
     {
      "type": "int",
      "name": "INT_BACKSLASH"
     },
     {
      "type": "int",
      "name": "INT_SLASH"
     },
     {
      "type": "int",
      "name": "INT_COLON"
     },
     {
      "type": "int",
      "name": "INT_COMMA"
     },
     {
      "type": "int",
      "name": "INT_HASH"
     },
     {
      "type": "int",
      "name": "INT_PERIOD"
     },
     {
      "type": "int",
      "name": "INT_e"
     },
     {
      "type": "int",
      "name": "INT_E"
     },
     {
      "type": "JsonToken",
      "name": "_currToken"
     },
     {
      "type": "JsonToken",
      "name": "_lastClearedToken"
     }
    ]
   }
  ]
 },
 {
  "filename": "UTF32Reader.java",
  "package_name": "com.fasterxml.jackson.core.io",
  "classes": [
   {
    "name": "UTF32Reader",
    "methods": [
     {
      "params": [],
      "type": null,
      "name": "close"
     },
     {
      "params": [],
      "type": "int",
      "name": "read"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "cbuf"
       },
       {
        "type": "int",
        "name": "start"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": "int",
      "name": "read"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "gotBytes"
       },
       {
        "type": "int",
        "name": "needed"
       }
      ],
      "type": null,
      "name": "reportUnexpectedEOF"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "value"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "String",
        "name": "msg"
       }
      ],
      "type": null,
      "name": "reportInvalid"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "available"
       }
      ],
      "type": "boolean",
      "name": "loadMore"
     },
     {
      "params": [],
      "type": null,
      "name": "freeBuffers"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "cbuf"
       },
       {
        "type": "int",
        "name": "start"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "reportBounds"
     },
     {
      "params": [],
      "type": null,
      "name": "reportStrangeStream"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "LAST_VALID_UNICODE_CHAR"
     },
     {
      "type": "char",
      "name": "NC"
     },
     {
      "type": "IOContext",
      "name": "_context"
     },
     {
      "type": "InputStream",
      "name": "_in"
     },
     {
      "type": "byte",
      "name": "_buffer"
     },
     {
      "type": "int",
      "name": "_ptr"
     },
     {
      "type": "int",
      "name": "_length"
     },
     {
      "type": "boolean",
      "name": "_bigEndian"
     },
     {
      "type": "char",
      "name": "_surrogate"
     },
     {
      "type": "int",
      "name": "_charCount"
     },
     {
      "type": "int",
      "name": "_byteCount"
     },
     {
      "type": "boolean",
      "name": "_managedBuffers"
     },
     {
      "type": "char",
      "name": "_tmpBuf"
     }
    ]
   }
  ]
 },
 {
  "filename": "UTF8Writer.java",
  "package_name": "com.fasterxml.jackson.core.io",
  "classes": [
   {
    "name": "UTF8Writer",
    "methods": [
     {
      "params": [
       {
        "type": "char",
        "name": "c"
       }
      ],
      "type": "Writer",
      "name": "append"
     },
     {
      "params": [],
      "type": null,
      "name": "close"
     },
     {
      "params": [],
      "type": null,
      "name": "flush"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "cbuf"
       }
      ],
      "type": null,
      "name": "write"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "cbuf"
       },
       {
        "type": "int",
        "name": "off"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "write"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "c"
       }
      ],
      "type": null,
      "name": "write"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "str"
       }
      ],
      "type": null,
      "name": "write"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "str"
       },
       {
        "type": "int",
        "name": "off"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "write"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "secondPart"
       }
      ],
      "type": "int",
      "name": "convertSurrogate"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "code"
       }
      ],
      "type": null,
      "name": "illegalSurrogate"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "code"
       }
      ],
      "type": "String",
      "name": "illegalSurrogateDesc"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "SURR1_FIRST"
     },
     {
      "type": "int",
      "name": "SURR1_LAST"
     },
     {
      "type": "int",
      "name": "SURR2_FIRST"
     },
     {
      "type": "int",
      "name": "SURR2_LAST"
     },
     {
      "type": "IOContext",
      "name": "_context"
     },
     {
      "type": "OutputStream",
      "name": "_out"
     },
     {
      "type": "byte",
      "name": "_outBuffer"
     },
     {
      "type": "int",
      "name": "_outBufferEnd"
     },
     {
      "type": "int",
      "name": "_outPtr"
     },
     {
      "type": "int",
      "name": "_surrogate"
     }
    ]
   }
  ]
 },
 {
  "filename": "IOContext.java",
  "package_name": "com.fasterxml.jackson.core.io",
  "classes": [
   {
    "name": "IOContext",
    "methods": [
     {
      "params": [
       {
        "type": "JsonEncoding",
        "name": "enc"
       }
      ],
      "type": null,
      "name": "setEncoding"
     },
     {
      "params": [
       {
        "type": "JsonEncoding",
        "name": "enc"
       }
      ],
      "type": "IOContext",
      "name": "withEncoding"
     },
     {
      "params": [],
      "type": "Object",
      "name": "getSourceReference"
     },
     {
      "params": [],
      "type": "JsonEncoding",
      "name": "getEncoding"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "isResourceManaged"
     },
     {
      "params": [],
      "type": "TextBuffer",
      "name": "constructTextBuffer"
     },
     {
      "params": [],
      "type": "byte",
      "name": "allocReadIOBuffer"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "minSize"
       }
      ],
      "type": "byte",
      "name": "allocReadIOBuffer"
     },
     {
      "params": [],
      "type": "byte",
      "name": "allocWriteEncodingBuffer"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "minSize"
       }
      ],
      "type": "byte",
      "name": "allocWriteEncodingBuffer"
     },
     {
      "params": [],
      "type": "byte",
      "name": "allocBase64Buffer"
     },
     {
      "params": [],
      "type": "char",
      "name": "allocTokenBuffer"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "minSize"
       }
      ],
      "type": "char",
      "name": "allocTokenBuffer"
     },
     {
      "params": [],
      "type": "char",
      "name": "allocConcatBuffer"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "minSize"
       }
      ],
      "type": "char",
      "name": "allocNameCopyBuffer"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "buf"
       }
      ],
      "type": null,
      "name": "releaseReadIOBuffer"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "buf"
       }
      ],
      "type": null,
      "name": "releaseWriteEncodingBuffer"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "buf"
       }
      ],
      "type": null,
      "name": "releaseBase64Buffer"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "buf"
       }
      ],
      "type": null,
      "name": "releaseTokenBuffer"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "buf"
       }
      ],
      "type": null,
      "name": "releaseConcatBuffer"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "buf"
       }
      ],
      "type": null,
      "name": "releaseNameCopyBuffer"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "buffer"
       }
      ],
      "type": null,
      "name": "_verifyAlloc"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "toRelease"
       },
       {
        "type": "byte",
        "name": "src"
       }
      ],
      "type": null,
      "name": "_verifyRelease"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "toRelease"
       },
       {
        "type": "char",
        "name": "src"
       }
      ],
      "type": null,
      "name": "_verifyRelease"
     },
     {
      "params": [],
      "type": "IllegalArgumentException",
      "name": "wrongBuf"
     }
    ],
    "fields": [
     {
      "type": "Object",
      "name": "_sourceRef"
     },
     {
      "type": "JsonEncoding",
      "name": "_encoding"
     },
     {
      "type": "boolean",
      "name": "_managedResource"
     },
     {
      "type": "BufferRecycler",
      "name": "_bufferRecycler"
     },
     {
      "type": "byte",
      "name": "_readIOBuffer"
     },
     {
      "type": "byte",
      "name": "_writeEncodingBuffer"
     },
     {
      "type": "byte",
      "name": "_base64Buffer"
     },
     {
      "type": "char",
      "name": "_tokenCBuffer"
     },
     {
      "type": "char",
      "name": "_concatCBuffer"
     },
     {
      "type": "char",
      "name": "_nameCopyBuffer"
     }
    ]
   }
  ]
 },
 {
  "filename": "JsonStringEncoder.java",
  "package_name": "com.fasterxml.jackson.core.io",
  "classes": [
   {
    "name": "JsonStringEncoder",
    "methods": [
     {
      "params": [],
      "type": "JsonStringEncoder",
      "name": "getInstance"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "input"
       }
      ],
      "type": "char",
      "name": "quoteAsString"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       }
      ],
      "type": "byte",
      "name": "quoteAsUTF8"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "text"
       }
      ],
      "type": "byte",
      "name": "encodeAsUTF8"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "value"
       },
       {
        "type": "char",
        "name": "qbuf"
       }
      ],
      "type": "int",
      "name": "_appendNumeric"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "esc"
       },
       {
        "type": "char",
        "name": "qbuf"
       }
      ],
      "type": "int",
      "name": "_appendNamed"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ch"
       },
       {
        "type": "int",
        "name": "esc"
       },
       {
        "type": "ByteArrayBuilder",
        "name": "bb"
       },
       {
        "type": "int",
        "name": "ptr"
       }
      ],
      "type": "int",
      "name": "_appendByte"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "p1"
       },
       {
        "type": "int",
        "name": "p2"
       }
      ],
      "type": "int",
      "name": "_convert"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "c"
       }
      ],
      "type": null,
      "name": "_illegal"
     }
    ],
    "fields": [
     {
      "type": "char",
      "name": "HC"
     },
     {
      "type": "byte",
      "name": "HB"
     },
     {
      "type": "int",
      "name": "SURR1_FIRST"
     },
     {
      "type": "int",
      "name": "SURR1_LAST"
     },
     {
      "type": "int",
      "name": "SURR2_FIRST"
     },
     {
      "type": "int",
      "name": "SURR2_LAST"
     },
     {
      "type": "ThreadLocal",
      "name": "_threadEncoder"
     },
     {
      "type": "TextBuffer",
      "name": "_text"
     },
     {
      "type": "ByteArrayBuilder",
      "name": "_bytes"
     },
     {
      "type": "char",
      "name": "_qbuf"
     }
    ]
   }
  ]
 },
 {
  "filename": "MergedStream.java",
  "package_name": "com.fasterxml.jackson.core.io",
  "classes": [
   {
    "name": "MergedStream",
    "methods": [
     {
      "params": [],
      "type": "int",
      "name": "available"
     },
     {
      "params": [],
      "type": null,
      "name": "close"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "readlimit"
       }
      ],
      "type": null,
      "name": "mark"
     },
     {
      "params": [],
      "type": "boolean",
      "name": "markSupported"
     },
     {
      "params": [],
      "type": "int",
      "name": "read"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "b"
       }
      ],
      "type": "int",
      "name": "read"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "b"
       },
       {
        "type": "int",
        "name": "off"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": "int",
      "name": "read"
     },
     {
      "params": [],
      "type": null,
      "name": "reset"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "n"
       }
      ],
      "type": "long",
      "name": "skip"
     },
     {
      "params": [],
      "type": null,
      "name": "_free"
     }
    ],
    "fields": [
     {
      "type": "IOContext",
      "name": "_ctxt"
     },
     {
      "type": "InputStream",
      "name": "_in"
     },
     {
      "type": "byte",
      "name": "_b"
     },
     {
      "type": "int",
      "name": "_ptr"
     },
     {
      "type": "int",
      "name": "_end"
     }
    ]
   }
  ]
 },
 {
  "filename": "CharacterEscapes.java",
  "package_name": "com.fasterxml.jackson.core.io",
  "classes": [
   {
    "name": "CharacterEscapes",
    "methods": [
     {
      "params": [],
      "type": "int",
      "name": "getEscapeCodesForAscii"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ch"
       }
      ],
      "type": "SerializableString",
      "name": "getEscapeSequence"
     },
     {
      "params": [],
      "type": "int",
      "name": "standardAsciiEscapesForJSON"
     }
    ],
    "fields": [
     {
      "type": "int",
      "name": "ESCAPE_NONE"
     },
     {
      "type": "int",
      "name": "ESCAPE_STANDARD"
     },
     {
      "type": "int",
      "name": "ESCAPE_CUSTOM"
     }
    ]
   }
  ]
 },
 {
  "filename": "OutputDecorator.java",
  "package_name": "com.fasterxml.jackson.core.io",
  "classes": [
   {
    "name": "OutputDecorator",
    "methods": [
     {
      "params": [
       {
        "type": "IOContext",
        "name": "ctxt"
       },
       {
        "type": "OutputStream",
        "name": "out"
       }
      ],
      "type": "OutputStream",
      "name": "decorate"
     },
     {
      "params": [
       {
        "type": "IOContext",
        "name": "ctxt"
       },
       {
        "type": "Writer",
        "name": "w"
       }
      ],
      "type": "Writer",
      "name": "decorate"
     }
    ],
    "fields": []
   }
  ]
 },
 {
  "filename": "NumberOutput.java",
  "package_name": "com.fasterxml.jackson.core.io",
  "classes": [
   {
    "name": "NumberOutput",
    "methods": [
     {
      "params": [
       {
        "type": "int",
        "name": "v"
       },
       {
        "type": "char",
        "name": "b"
       },
       {
        "type": "int",
        "name": "off"
       }
      ],
      "type": "int",
      "name": "outputInt"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "v"
       },
       {
        "type": "byte",
        "name": "b"
       },
       {
        "type": "int",
        "name": "off"
       }
      ],
      "type": "int",
      "name": "outputInt"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "v"
       },
       {
        "type": "char",
        "name": "b"
       },
       {
        "type": "int",
        "name": "off"
       }
      ],
      "type": "int",
      "name": "outputLong"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "v"
       },
       {
        "type": "byte",
        "name": "b"
       },
       {
        "type": "int",
        "name": "off"
       }
      ],
      "type": "int",
      "name": "outputLong"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "v"
       }
      ],
      "type": "String",
      "name": "toString"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "v"
       }
      ],
      "type": "String",
      "name": "toString"
     },
     {
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ],
      "type": "String",
      "name": "toString"
     },
     {
      "params": [
       {
        "type": "float",
        "name": "v"
       }
      ],
      "type": "String",
      "name": "toString"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "t"
       },
       {
        "type": "char",
        "name": "b"
       },
       {
        "type": "int",
        "name": "off"
       }
      ],
      "type": "int",
      "name": "leading3"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "t"
       },
       {
        "type": "byte",
        "name": "b"
       },
       {
        "type": "int",
        "name": "off"
       }
      ],
      "type": "int",
      "name": "leading3"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "t"
       },
       {
        "type": "char",
        "name": "b"
       },
       {
        "type": "int",
        "name": "off"
       }
      ],
      "type": "int",
      "name": "full3"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "t"
       },
       {
        "type": "byte",
        "name": "b"
       },
       {
        "type": "int",
        "name": "off"
       }
      ],
      "type": "int",
      "name": "full3"
     },
     {
      "params": [
       {
        "type": "long",
        "name": "v"
       }
      ],
      "type": "int",
      "name": "calcLongStrLength"
     }
    ],
    "fields": [
     {
      "type": "char",
      "name": "NC"
     },
     {
      "type": "int",
      "name": "MILLION"
     },
     {
      "type": "int",
      "name": "BILLION"
     },
     {
      "type": "long",
      "name": "TEN_BILLION_L"
     },
     {
      "type": "long",
      "name": "THOUSAND_L"
     },
     {
      "type": "long",
      "name": "MIN_INT_AS_LONG"
     },
     {
      "type": "long",
      "name": "MAX_INT_AS_LONG"
     },
     {
      "type": "String",
      "name": "SMALLEST_LONG"
     },
     {
      "type": "char",
      "name": "LEAD_3"
     },
     {
      "type": "char",
      "name": "FULL_3"
     },
     {
      "type": "byte",
      "name": "FULL_TRIPLETS_B"
     },
     {
      "type": "String",
      "name": "sSmallIntStrs"
     },
     {
      "type": "String",
      "name": "sSmallIntStrs2"
     }
    ]
   }
  ]
 },
 {
  "filename": "SerializedString.java",
  "package_name": "com.fasterxml.jackson.core.io",
  "classes": [
   {
    "name": "SerializedString",
    "methods": [
     {
      "params": [
       {
        "type": "ObjectInputStream",
        "name": "in"
       }
      ],
      "type": null,
      "name": "readObject"
     },
     {
      "params": [
       {
        "type": "ObjectOutputStream",
        "name": "out"
       }
      ],
      "type": null,
      "name": "writeObject"
     },
     {
      "params": [],
      "type": "Object",
      "name": "readResolve"
     },
     {
      "params": [],
      "type": "String",
      "name": "getValue"
     },
     {
      "params": [],
      "type": "int",
      "name": "charLength"
     },
     {
      "params": [],
      "type": "char",
      "name": "asQuotedChars"
     },
     {
      "params": [],
      "type": "byte",
      "name": "asUnquotedUTF8"
     },
     {
      "params": [],
      "type": "byte",
      "name": "asQuotedUTF8"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "buffer"
       },
       {
        "type": "int",
        "name": "offset"
       }
      ],
      "type": "int",
      "name": "appendQuotedUTF8"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "buffer"
       },
       {
        "type": "int",
        "name": "offset"
       }
      ],
      "type": "int",
      "name": "appendQuoted"
     },
     {
      "params": [
       {
        "type": "byte",
        "name": "buffer"
       },
       {
        "type": "int",
        "name": "offset"
       }
      ],
      "type": "int",
      "name": "appendUnquotedUTF8"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "buffer"
       },
       {
        "type": "int",
        "name": "offset"
       }
      ],
      "type": "int",
      "name": "appendUnquoted"
     },
     {
      "params": [
       {
        "type": "OutputStream",
        "name": "out"
       }
      ],
      "type": "int",
      "name": "writeQuotedUTF8"
     },
     {
      "params": [
       {
        "type": "OutputStream",
        "name": "out"
       }
      ],
      "type": "int",
      "name": "writeUnquotedUTF8"
     },
     {
      "params": [
       {
        "type": "ByteBuffer",
        "name": "buffer"
       }
      ],
      "type": "int",
      "name": "putQuotedUTF8"
     },
     {
      "params": [
       {
        "type": "ByteBuffer",
        "name": "buffer"
       }
      ],
      "type": "int",
      "name": "putUnquotedUTF8"
     },
     {
      "params": [],
      "type": "String",
      "name": "toString"
     },
     {
      "params": [],
      "type": "int",
      "name": "hashCode"
     },
     {
      "params": [
       {
        "type": "Object",
        "name": "o"
       }
      ],
      "type": "boolean",
      "name": "equals"
     }
    ],
    "fields": [
     {
      "type": "String",
      "name": "_value"
     },
     {
      "type": "byte",
      "name": "_quotedUTF8Ref"
     },
     {
      "type": "byte",
      "name": "_unquotedUTF8Ref"
     },
     {
      "type": "char",
      "name": "_quotedChars"
     },
     {
      "type": "String",
      "name": "_jdkSerializeValue"
     }
    ]
   }
  ]
 },
 {
  "filename": "SegmentedStringWriter.java",
  "package_name": "com.fasterxml.jackson.core.io",
  "classes": [
   {
    "name": "SegmentedStringWriter",
    "methods": [
     {
      "params": [
       {
        "type": "char",
        "name": "c"
       }
      ],
      "type": "Writer",
      "name": "append"
     },
     {
      "params": [
       {
        "type": "CharSequence",
        "name": "csq"
       }
      ],
      "type": "Writer",
      "name": "append"
     },
     {
      "params": [
       {
        "type": "CharSequence",
        "name": "csq"
       },
       {
        "type": "int",
        "name": "start"
       },
       {
        "type": "int",
        "name": "end"
       }
      ],
      "type": "Writer",
      "name": "append"
     },
     {
      "params": [],
      "type": null,
      "name": "close"
     },
     {
      "params": [],
      "type": null,
      "name": "flush"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "cbuf"
       }
      ],
      "type": null,
      "name": "write"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "cbuf"
       },
       {
        "type": "int",
        "name": "off"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "write"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "c"
       }
      ],
      "type": null,
      "name": "write"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "str"
       }
      ],
      "type": null,
      "name": "write"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "str"
       },
       {
        "type": "int",
        "name": "off"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": null,
      "name": "write"
     },
     {
      "params": [],
      "type": "String",
      "name": "getAndClear"
     }
    ],
    "fields": [
     {
      "type": "TextBuffer",
      "name": "_buffer"
     }
    ]
   }
  ]
 },
 {
  "filename": "NumberInput.java",
  "package_name": "com.fasterxml.jackson.core.io",
  "classes": [
   {
    "name": "NumberInput",
    "methods": [
     {
      "params": [
       {
        "type": "char",
        "name": "ch"
       },
       {
        "type": "int",
        "name": "off"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": "int",
      "name": "parseInt"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "s"
       }
      ],
      "type": "int",
      "name": "parseInt"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "ch"
       },
       {
        "type": "int",
        "name": "off"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": "long",
      "name": "parseLong"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "s"
       }
      ],
      "type": "long",
      "name": "parseLong"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "ch"
       },
       {
        "type": "int",
        "name": "off"
       },
       {
        "type": "int",
        "name": "len"
       },
       {
        "type": "boolean",
        "name": "negative"
       }
      ],
      "type": "boolean",
      "name": "inLongRange"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "s"
       },
       {
        "type": "boolean",
        "name": "negative"
       }
      ],
      "type": "boolean",
      "name": "inLongRange"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "s"
       },
       {
        "type": "int",
        "name": "def"
       }
      ],
      "type": "int",
      "name": "parseAsInt"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "s"
       },
       {
        "type": "long",
        "name": "def"
       }
      ],
      "type": "long",
      "name": "parseAsLong"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "s"
       },
       {
        "type": "double",
        "name": "def"
       }
      ],
      "type": "double",
      "name": "parseAsDouble"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "s"
       }
      ],
      "type": "double",
      "name": "parseDouble"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "s"
       }
      ],
      "type": "BigDecimal",
      "name": "parseBigDecimal"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "b"
       }
      ],
      "type": "BigDecimal",
      "name": "parseBigDecimal"
     },
     {
      "params": [
       {
        "type": "char",
        "name": "b"
       },
       {
        "type": "int",
        "name": "off"
       },
       {
        "type": "int",
        "name": "len"
       }
      ],
      "type": "BigDecimal",
      "name": "parseBigDecimal"
     },
     {
      "params": [
       {
        "type": "String",
        "name": "s"
       }
      ],
      "type": "NumberFormatException",
      "name": "_badBD"
     }
    ],
    "fields": [
     {
      "type": "String",
      "name": "NASTY_SMALL_DOUBLE"
     },
     {
      "type": "long",
      "name": "L_BILLION"
     },
     {
      "type": "String",
      "name": "MIN_LONG_STR_NO_SIGN"
     },
     {
      "type": "String",
      "name": "MAX_LONG_STR"
     }
    ]
   }
  ]
 },
 {
  "filename": "InputDecorator.java",
  "package_name": "com.fasterxml.jackson.core.io",
  "classes": [
   {
    "name": "InputDecorator",
    "methods": [
     {
      "params": [
       {
        "type": "IOContext",
        "name": "ctxt"
       },
       {
        "type": "InputStream",
        "name": "in"
       }
      ],
      "type": "InputStream",
      "name": "decorate"
     },
     {
      "params": [
       {
        "type": "IOContext",
        "name": "ctxt"
       },
       {
        "type": "byte",
        "name": "src"
       },
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "length"
       }
      ],
      "type": "InputStream",
      "name": "decorate"
     },
     {
      "params": [
       {
        "type": "IOContext",
        "name": "ctxt"
       },
       {
        "type": "Reader",
        "name": "r"
       }
      ],
      "type": "Reader",
      "name": "decorate"
     }
    ],
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ]
   }
  ]
 },
 {
  "filename": "CharTypes.java",
  "package_name": "com.fasterxml.jackson.core.io",
  "classes": [
   {
    "name": "CharTypes",
    "methods": [
     {
      "params": [],
      "type": "int",
      "name": "getInputCodeLatin1"
     },
     {
      "params": [],
      "type": "int",
      "name": "getInputCodeUtf8"
     },
     {
      "params": [],
      "type": "int",
      "name": "getInputCodeLatin1JsNames"
     },
     {
      "params": [],
      "type": "int",
      "name": "getInputCodeUtf8JsNames"
     },
     {
      "params": [],
      "type": "int",
      "name": "getInputCodeComment"
     },
     {
      "params": [],
      "type": "int",
      "name": "getInputCodeWS"
     },
     {
      "params": [],
      "type": "int",
      "name": "get7BitOutputEscapes"
     },
     {
      "params": [
       {
        "type": "int",
        "name": "ch"
       }
      ],
      "type": "int",
      "name": "charToHex"
     },
     {
      "params": [
       {
        "type": "StringBuilder",
        "name": "sb"
       },
       {
        "type": "String",
        "name": "content"
       }
      ],
      "type": null,
      "name": "appendQuoted"
     },
     {
      "params": [],
      "type": "char",
      "name": "copyHexChars"
     },
     {
      "params": [],
      "type": "byte",
      "name": "copyHexBytes"
     }
    ],
    "fields": [
     {
      "type": "char",
      "name": "HC"
     },
     {
      "type": "byte",
      "name": "HB"
     },
     {
      "type": "int",
      "name": "sInputCodes"
     },
     {
      "type": "int",
      "name": "sInputCodesUTF8"
     },
     {
      "type": "int",
      "name": "sInputCodesJsNames"
     },
     {
      "type": "int",
      "name": "sInputCodesUtf8JsNames"
     },
     {
      "type": "int",
      "name": "sInputCodesComment"
     },
     {
      "type": "int",
      "name": "sInputCodesWS"
     },
     {
      "type": "int",
      "name": "sOutputEscapes128"
     },
     {
      "type": "int",
      "name": "sHexValues"
     }
    ]
   }
  ]
 }
]