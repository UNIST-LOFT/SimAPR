[
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "maxIterations"
     }
    ],
    "name": "MaxIterationsExceededException",
    "methods": [
     {
      "type": "int",
      "name": "getMaxIterations",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math",
  "filename": "MaxIterationsExceededException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "DuplicateSampleAbscissaException",
    "methods": [
     {
      "type": "double",
      "name": "getDuplicateAbscissa",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math",
  "filename": "DuplicateSampleAbscissaException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "MathConfigurationException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math",
  "filename": "MathConfigurationException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "ConvergenceException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math",
  "filename": "ConvergenceException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Object",
      "name": "contents"
     }
    ],
    "name": "MessagesResources_fr",
    "methods": [
     {
      "type": "Object",
      "name": "getContents",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math",
  "filename": "MessagesResources_fr.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "ArgumentOutsideDomainException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math",
  "filename": "ArgumentOutsideDomainException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "argument"
     }
    ],
    "name": "FunctionEvaluationException",
    "methods": [
     {
      "type": "double",
      "name": "getArgument",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math",
  "filename": "FunctionEvaluationException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "boolean",
      "name": "JDK_SUPPORTS_NESTED"
     },
     {
      "type": "ResourceBundle",
      "name": "cachedResources"
     },
     {
      "type": "String",
      "name": "pattern"
     },
     {
      "type": "Object",
      "name": "arguments"
     },
     {
      "type": "Throwable",
      "name": "rootCause"
     }
    ],
    "name": "MathException",
    "methods": [
     {
      "type": "String",
      "name": "translate",
      "params": [
       {
        "type": "String",
        "name": "s"
       },
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "String",
      "name": "buildMessage",
      "params": [
       {
        "type": "String",
        "name": "pattern"
       },
       {
        "type": "Object",
        "name": "arguments"
       },
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "String",
      "name": "getPattern",
      "params": []
     },
     {
      "type": "Object",
      "name": "getArguments",
      "params": []
     },
     {
      "type": "String",
      "name": "getMessage",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "Throwable",
      "name": "getCause",
      "params": []
     },
     {
      "type": null,
      "name": "printStackTrace",
      "params": []
     },
     {
      "type": null,
      "name": "printStackTrace",
      "params": [
       {
        "type": "PrintStream",
        "name": "out"
       }
      ]
     },
     {
      "type": null,
      "name": "printStackTrace",
      "params": [
       {
        "type": "PrintWriter",
        "name": "out"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math",
  "filename": "MathException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "dimension1"
     },
     {
      "type": "int",
      "name": "dimension2"
     }
    ],
    "name": "DimensionMismatchException",
    "methods": [
     {
      "type": "int",
      "name": "getDimension1",
      "params": []
     },
     {
      "type": "int",
      "name": "getDimension2",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math",
  "filename": "DimensionMismatchException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "FastSineTransformer",
    "methods": [
     {
      "type": "double",
      "name": "transform",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "transform",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "transform2",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "transform2",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform2",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform2",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "fst",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.transform",
  "filename": "FastSineTransformer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "Complex",
      "name": "omega"
     },
     {
      "type": "int",
      "name": "omegaCount"
     }
    ],
    "name": "FastFourierTransformer",
    "methods": [
     {
      "type": "Complex",
      "name": "transform",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "transform",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "transform",
      "params": [
       {
        "type": "Complex",
        "name": "f"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "transform2",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "transform2",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "transform2",
      "params": [
       {
        "type": "Complex",
        "name": "f"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "inversetransform",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "inversetransform",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "inversetransform",
      "params": [
       {
        "type": "Complex",
        "name": "f"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "inversetransform2",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "inversetransform2",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "inversetransform2",
      "params": [
       {
        "type": "Complex",
        "name": "f"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "fft",
      "params": [
       {
        "type": "double",
        "name": "f"
       },
       {
        "type": "boolean",
        "name": "isInverse"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "fft",
      "params": [
       {
        "type": "Complex",
        "name": "data"
       }
      ]
     },
     {
      "type": null,
      "name": "computeOmega",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "sample",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "scaleArray",
      "params": [
       {
        "type": "double",
        "name": "f"
       },
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "scaleArray",
      "params": [
       {
        "type": "Complex",
        "name": "f"
       },
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isPowerOf2",
      "params": [
       {
        "type": "long",
        "name": "n"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyDataSet",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyDataSet",
      "params": [
       {
        "type": "Object",
        "name": "o"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyInterval",
      "params": [
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "upper"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.transform",
  "filename": "FastFourierTransformer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "FastCosineTransformer",
    "methods": [
     {
      "type": "double",
      "name": "transform",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "transform",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "transform2",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "transform2",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform2",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     },
     {
      "type": "double",
      "name": "inversetransform2",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "fct",
      "params": [
       {
        "type": "double",
        "name": "f"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.transform",
  "filename": "FastCosineTransformer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "numeratorDegreesOfFreedom"
     },
     {
      "type": "double",
      "name": "denominatorDegreesOfFreedom"
     }
    ],
    "name": "FDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": null,
      "name": "setNumeratorDegreesOfFreedom",
      "params": [
       {
        "type": "double",
        "name": "degreesOfFreedom"
       }
      ]
     },
     {
      "type": "double",
      "name": "getNumeratorDegreesOfFreedom",
      "params": []
     },
     {
      "type": null,
      "name": "setDenominatorDegreesOfFreedom",
      "params": [
       {
        "type": "double",
        "name": "degreesOfFreedom"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDenominatorDegreesOfFreedom",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "FDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "GammaDistribution",
      "name": "gamma"
     }
    ],
    "name": "ChiSquaredDistributionImpl",
    "methods": [
     {
      "type": null,
      "name": "setDegreesOfFreedom",
      "params": [
       {
        "type": "double",
        "name": "degreesOfFreedom"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDegreesOfFreedom",
      "params": []
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": null,
      "name": "setGamma",
      "params": [
       {
        "type": "GammaDistribution",
        "name": "g"
       }
      ]
     },
     {
      "type": "GammaDistribution",
      "name": "getGamma",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "ChiSquaredDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FDistribution",
    "methods": [
     {
      "type": null,
      "name": "setNumeratorDegreesOfFreedom",
      "params": [
       {
        "type": "double",
        "name": "degreesOfFreedom"
       }
      ]
     },
     {
      "type": "double",
      "name": "getNumeratorDegreesOfFreedom",
      "params": []
     },
     {
      "type": null,
      "name": "setDenominatorDegreesOfFreedom",
      "params": [
       {
        "type": "double",
        "name": "degreesOfFreedom"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDenominatorDegreesOfFreedom",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "FDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "NormalDistribution",
    "methods": [
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": null,
      "name": "setMean",
      "params": [
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": null,
      "name": "setStandardDeviation",
      "params": [
       {
        "type": "double",
        "name": "sd"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "NormalDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Distribution",
    "methods": [
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x0"
       },
       {
        "type": "double",
        "name": "x1"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "Distribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "numberOfSuccesses"
     },
     {
      "type": "double",
      "name": "probabilityOfSuccess"
     }
    ],
    "name": "PascalDistributionImpl",
    "methods": [
     {
      "type": "int",
      "name": "getNumberOfSuccesses",
      "params": []
     },
     {
      "type": "double",
      "name": "getProbabilityOfSuccess",
      "params": []
     },
     {
      "type": null,
      "name": "setNumberOfSuccesses",
      "params": [
       {
        "type": "int",
        "name": "successes"
       }
      ]
     },
     {
      "type": null,
      "name": "setProbabilityOfSuccess",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "probability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "PascalDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "WeibullDistribution",
    "methods": [
     {
      "type": "double",
      "name": "getShape",
      "params": []
     },
     {
      "type": "double",
      "name": "getScale",
      "params": []
     },
     {
      "type": null,
      "name": "setShape",
      "params": [
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": null,
      "name": "setScale",
      "params": [
       {
        "type": "double",
        "name": "beta"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "WeibullDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ContinuousDistribution",
    "methods": [
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "ContinuousDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "alpha"
     },
     {
      "type": "double",
      "name": "beta"
     }
    ],
    "name": "GammaDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": null,
      "name": "setAlpha",
      "params": [
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "getAlpha",
      "params": []
     },
     {
      "type": null,
      "name": "setBeta",
      "params": [
       {
        "type": "double",
        "name": "beta"
       }
      ]
     },
     {
      "type": "double",
      "name": "getBeta",
      "params": []
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "GammaDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "AbstractIntegerDistribution",
    "methods": [
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x0"
       },
       {
        "type": "double",
        "name": "x1"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "probability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x0"
       },
       {
        "type": "int",
        "name": "x1"
       }
      ]
     },
     {
      "type": "int",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "AbstractIntegerDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "AbstractContinuousDistribution",
    "methods": [
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "AbstractContinuousDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "mean"
     }
    ],
    "name": "ExponentialDistributionImpl",
    "methods": [
     {
      "type": null,
      "name": "setMean",
      "params": [
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "ExponentialDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "numberOfSuccesses"
     },
     {
      "type": "int",
      "name": "populationSize"
     },
     {
      "type": "int",
      "name": "sampleSize"
     }
    ],
    "name": "HypergeometricDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomain",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "m"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getLowerDomain",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "m"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "int",
      "name": "getNumberOfSuccesses",
      "params": []
     },
     {
      "type": "int",
      "name": "getPopulationSize",
      "params": []
     },
     {
      "type": "int",
      "name": "getSampleSize",
      "params": []
     },
     {
      "type": "int",
      "name": "getUpperDomain",
      "params": [
       {
        "type": "int",
        "name": "m"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "double",
      "name": "probability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "probability",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "m"
       },
       {
        "type": "int",
        "name": "k"
       },
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": null,
      "name": "setNumberOfSuccesses",
      "params": [
       {
        "type": "int",
        "name": "num"
       }
      ]
     },
     {
      "type": null,
      "name": "setPopulationSize",
      "params": [
       {
        "type": "int",
        "name": "size"
       }
      ]
     },
     {
      "type": null,
      "name": "setSampleSize",
      "params": [
       {
        "type": "int",
        "name": "size"
       }
      ]
     },
     {
      "type": "double",
      "name": "upperCumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "innerCumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x0"
       },
       {
        "type": "int",
        "name": "x1"
       },
       {
        "type": "int",
        "name": "dx"
       },
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "m"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "HypergeometricDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "HypergeometricDistribution",
    "methods": [
     {
      "type": "int",
      "name": "getNumberOfSuccesses",
      "params": []
     },
     {
      "type": "int",
      "name": "getPopulationSize",
      "params": []
     },
     {
      "type": "int",
      "name": "getSampleSize",
      "params": []
     },
     {
      "type": null,
      "name": "setNumberOfSuccesses",
      "params": [
       {
        "type": "int",
        "name": "num"
       }
      ]
     },
     {
      "type": null,
      "name": "setPopulationSize",
      "params": [
       {
        "type": "int",
        "name": "size"
       }
      ]
     },
     {
      "type": null,
      "name": "setSampleSize",
      "params": [
       {
        "type": "int",
        "name": "size"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "HypergeometricDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "PoissonDistribution",
    "methods": [
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": null,
      "name": "setMean",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "normalApproximateProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "PoissonDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "degreesOfFreedom"
     }
    ],
    "name": "TDistributionImpl",
    "methods": [
     {
      "type": null,
      "name": "setDegreesOfFreedom",
      "params": [
       {
        "type": "double",
        "name": "degreesOfFreedom"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDegreesOfFreedom",
      "params": []
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "TDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "IntegerDistribution",
    "methods": [
     {
      "type": "double",
      "name": "probability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x0"
       },
       {
        "type": "int",
        "name": "x1"
       }
      ]
     },
     {
      "type": "int",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "IntegerDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "GammaDistribution",
    "methods": [
     {
      "type": null,
      "name": "setAlpha",
      "params": [
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "getAlpha",
      "params": []
     },
     {
      "type": null,
      "name": "setBeta",
      "params": [
       {
        "type": "double",
        "name": "beta"
       }
      ]
     },
     {
      "type": "double",
      "name": "getBeta",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "GammaDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "PascalDistribution",
    "methods": [
     {
      "type": "int",
      "name": "getNumberOfSuccesses",
      "params": []
     },
     {
      "type": "double",
      "name": "getProbabilityOfSuccess",
      "params": []
     },
     {
      "type": null,
      "name": "setNumberOfSuccesses",
      "params": [
       {
        "type": "int",
        "name": "successes"
       }
      ]
     },
     {
      "type": null,
      "name": "setProbabilityOfSuccess",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "PascalDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "TDistribution",
    "methods": [
     {
      "type": null,
      "name": "setDegreesOfFreedom",
      "params": [
       {
        "type": "double",
        "name": "degreesOfFreedom"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDegreesOfFreedom",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "TDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "median"
     },
     {
      "type": "double",
      "name": "scale"
     }
    ],
    "name": "CauchyDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "getMedian",
      "params": []
     },
     {
      "type": "double",
      "name": "getScale",
      "params": []
     },
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": null,
      "name": "setMedian",
      "params": [
       {
        "type": "double",
        "name": "median"
       }
      ]
     },
     {
      "type": null,
      "name": "setScale",
      "params": [
       {
        "type": "double",
        "name": "s"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "CauchyDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "AbstractDistribution",
    "methods": [
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x0"
       },
       {
        "type": "double",
        "name": "x1"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "AbstractDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "NormalDistribution",
      "name": "normal"
     },
     {
      "type": "double",
      "name": "mean"
     }
    ],
    "name": "PoissonDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": null,
      "name": "setMean",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "probability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "normalApproximateProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": null,
      "name": "setNormal",
      "params": [
       {
        "type": "NormalDistribution",
        "name": "value"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "PoissonDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "alpha"
     },
     {
      "type": "double",
      "name": "beta"
     }
    ],
    "name": "WeibullDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "getShape",
      "params": []
     },
     {
      "type": "double",
      "name": "getScale",
      "params": []
     },
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": null,
      "name": "setShape",
      "params": [
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": null,
      "name": "setScale",
      "params": [
       {
        "type": "double",
        "name": "beta"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "WeibullDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "mean"
     },
     {
      "type": "double",
      "name": "standardDeviation"
     }
    ],
    "name": "NormalDistributionImpl",
    "methods": [
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": null,
      "name": "setMean",
      "params": [
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": null,
      "name": "setStandardDeviation",
      "params": [
       {
        "type": "double",
        "name": "sd"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialDomain",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "NormalDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "numberOfTrials"
     },
     {
      "type": "double",
      "name": "probabilityOfSuccess"
     }
    ],
    "name": "BinomialDistributionImpl",
    "methods": [
     {
      "type": "int",
      "name": "getNumberOfTrials",
      "params": []
     },
     {
      "type": "double",
      "name": "getProbabilityOfSuccess",
      "params": []
     },
     {
      "type": null,
      "name": "setNumberOfTrials",
      "params": [
       {
        "type": "int",
        "name": "trials"
       }
      ]
     },
     {
      "type": null,
      "name": "setProbabilityOfSuccess",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainLowerBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDomainUpperBound",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "cumulativeProbability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "probability",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "inverseCumulativeProbability",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "BinomialDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ChiSquaredDistribution",
    "methods": [
     {
      "type": null,
      "name": "setDegreesOfFreedom",
      "params": [
       {
        "type": "double",
        "name": "degreesOfFreedom"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDegreesOfFreedom",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "ChiSquaredDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ExponentialDistribution",
    "methods": [
     {
      "type": null,
      "name": "setMean",
      "params": [
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "double",
      "name": "getMean",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "ExponentialDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "BinomialDistribution",
    "methods": [
     {
      "type": "int",
      "name": "getNumberOfTrials",
      "params": []
     },
     {
      "type": "double",
      "name": "getProbabilityOfSuccess",
      "params": []
     },
     {
      "type": null,
      "name": "setNumberOfTrials",
      "params": [
       {
        "type": "int",
        "name": "trials"
       }
      ]
     },
     {
      "type": null,
      "name": "setProbabilityOfSuccess",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "BinomialDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "CauchyDistribution",
    "methods": [
     {
      "type": "double",
      "name": "getMedian",
      "params": []
     },
     {
      "type": "double",
      "name": "getScale",
      "params": []
     },
     {
      "type": null,
      "name": "setMedian",
      "params": [
       {
        "type": "double",
        "name": "median"
       }
      ]
     },
     {
      "type": null,
      "name": "setScale",
      "params": [
       {
        "type": "double",
        "name": "s"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "CauchyDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DiscreteDistribution",
    "methods": [
     {
      "type": "double",
      "name": "probability",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.distribution",
  "filename": "DiscreteDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "RandomGenerator",
      "name": "generator"
     },
     {
      "type": "double",
      "name": "SQRT3"
     }
    ],
    "name": "UniformRandomGenerator",
    "methods": [
     {
      "type": "double",
      "name": "nextNormalizedDouble",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "UniformRandomGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "NormalizedRandomGenerator",
    "methods": [
     {
      "type": "double",
      "name": "nextNormalizedDouble",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "NormalizedRandomGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "EmpiricalDistribution",
    "methods": [
     {
      "type": null,
      "name": "load",
      "params": [
       {
        "type": "double",
        "name": "dataArray"
       }
      ]
     },
     {
      "type": null,
      "name": "load",
      "params": [
       {
        "type": "File",
        "name": "file"
       }
      ]
     },
     {
      "type": null,
      "name": "load",
      "params": [
       {
        "type": "URL",
        "name": "url"
       }
      ]
     },
     {
      "type": "double",
      "name": "getNextValue",
      "params": []
     },
     {
      "type": "StatisticalSummary",
      "name": "getSampleStats",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isLoaded",
      "params": []
     },
     {
      "type": "int",
      "name": "getBinCount",
      "params": []
     },
     {
      "type": "List",
      "name": "getBinStats",
      "params": []
     },
     {
      "type": "double",
      "name": "getUpperBounds",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "EmpiricalDistribution.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "RandomData",
    "methods": [
     {
      "type": "String",
      "name": "nextHexString",
      "params": [
       {
        "type": "int",
        "name": "len"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextInt",
      "params": [
       {
        "type": "int",
        "name": "lower"
       },
       {
        "type": "int",
        "name": "upper"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextLong",
      "params": [
       {
        "type": "long",
        "name": "lower"
       },
       {
        "type": "long",
        "name": "upper"
       }
      ]
     },
     {
      "type": "String",
      "name": "nextSecureHexString",
      "params": [
       {
        "type": "int",
        "name": "len"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextSecureInt",
      "params": [
       {
        "type": "int",
        "name": "lower"
       },
       {
        "type": "int",
        "name": "upper"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextSecureLong",
      "params": [
       {
        "type": "long",
        "name": "lower"
       },
       {
        "type": "long",
        "name": "upper"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextPoisson",
      "params": [
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextGaussian",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "sigma"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextExponential",
      "params": [
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextUniform",
      "params": [
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "upper"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextPermutation",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "Object",
      "name": "nextSample",
      "params": [
       {
        "type": "Collection",
        "name": "c"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "RandomData.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "RandomGenerator",
      "name": "generator"
     }
    ],
    "name": "GaussianRandomGenerator",
    "methods": [
     {
      "type": "double",
      "name": "nextNormalizedDouble",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "GaussianRandomGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "RandomGenerator",
    "methods": [
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "long",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "nextBytes",
      "params": [
       {
        "type": "byte",
        "name": "bytes"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextInt",
      "params": []
     },
     {
      "type": "int",
      "name": "nextInt",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextLong",
      "params": []
     },
     {
      "type": "boolean",
      "name": "nextBoolean",
      "params": []
     },
     {
      "type": "float",
      "name": "nextFloat",
      "params": []
     },
     {
      "type": "double",
      "name": "nextDouble",
      "params": []
     },
     {
      "type": "double",
      "name": "nextGaussian",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "RandomGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "RandomVectorGenerator",
    "methods": [
     {
      "type": "double",
      "name": "nextVector",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "RandomVectorGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "RandomGenerator",
      "name": "randomGenerator"
     }
    ],
    "name": "RandomAdaptor",
    "methods": [
     {
      "type": "Random",
      "name": "createAdaptor",
      "params": [
       {
        "type": "RandomGenerator",
        "name": "randomGenerator"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "nextBoolean",
      "params": []
     },
     {
      "type": null,
      "name": "nextBytes",
      "params": [
       {
        "type": "byte",
        "name": "bytes"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextDouble",
      "params": []
     },
     {
      "type": "float",
      "name": "nextFloat",
      "params": []
     },
     {
      "type": "double",
      "name": "nextGaussian",
      "params": []
     },
     {
      "type": "int",
      "name": "nextInt",
      "params": []
     },
     {
      "type": "int",
      "name": "nextInt",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextLong",
      "params": []
     },
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "long",
        "name": "seed"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "RandomAdaptor.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "RandomGenerator",
      "name": "rand"
     },
     {
      "type": "SecureRandom",
      "name": "secRand"
     }
    ],
    "name": "RandomDataImpl",
    "methods": [
     {
      "type": "String",
      "name": "nextHexString",
      "params": [
       {
        "type": "int",
        "name": "len"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextInt",
      "params": [
       {
        "type": "int",
        "name": "lower"
       },
       {
        "type": "int",
        "name": "upper"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextLong",
      "params": [
       {
        "type": "long",
        "name": "lower"
       },
       {
        "type": "long",
        "name": "upper"
       }
      ]
     },
     {
      "type": "String",
      "name": "nextSecureHexString",
      "params": [
       {
        "type": "int",
        "name": "len"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextSecureInt",
      "params": [
       {
        "type": "int",
        "name": "lower"
       },
       {
        "type": "int",
        "name": "upper"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextSecureLong",
      "params": [
       {
        "type": "long",
        "name": "lower"
       },
       {
        "type": "long",
        "name": "upper"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextPoisson",
      "params": [
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextGaussian",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "sigma"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextExponential",
      "params": [
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextUniform",
      "params": [
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "upper"
       }
      ]
     },
     {
      "type": "RandomGenerator",
      "name": "getRan",
      "params": []
     },
     {
      "type": "SecureRandom",
      "name": "getSecRan",
      "params": []
     },
     {
      "type": null,
      "name": "reSeed",
      "params": [
       {
        "type": "long",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "reSeedSecure",
      "params": []
     },
     {
      "type": null,
      "name": "reSeedSecure",
      "params": [
       {
        "type": "long",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "reSeed",
      "params": []
     },
     {
      "type": null,
      "name": "setSecureAlgorithm",
      "params": [
       {
        "type": "String",
        "name": "algorithm"
       },
       {
        "type": "String",
        "name": "provider"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextPermutation",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "Object",
      "name": "nextSample",
      "params": [
       {
        "type": "Collection",
        "name": "c"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": null,
      "name": "shuffle",
      "params": [
       {
        "type": "int",
        "name": "list"
       },
       {
        "type": "int",
        "name": "end"
       }
      ]
     },
     {
      "type": "int",
      "name": "getNatural",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "RandomDataImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "mode"
     },
     {
      "type": "URL",
      "name": "valuesFileURL"
     },
     {
      "type": "double",
      "name": "mu"
     },
     {
      "type": "double",
      "name": "sigma"
     },
     {
      "type": "EmpiricalDistribution",
      "name": "empiricalDistribution"
     },
     {
      "type": "BufferedReader",
      "name": "filePointer"
     },
     {
      "type": "RandomData",
      "name": "randomData"
     },
     {
      "type": "int",
      "name": "DIGEST_MODE"
     },
     {
      "type": "int",
      "name": "REPLAY_MODE"
     },
     {
      "type": "int",
      "name": "UNIFORM_MODE"
     },
     {
      "type": "int",
      "name": "EXPONENTIAL_MODE"
     },
     {
      "type": "int",
      "name": "GAUSSIAN_MODE"
     },
     {
      "type": "int",
      "name": "CONSTANT_MODE"
     }
    ],
    "name": "ValueServer",
    "methods": [
     {
      "type": "double",
      "name": "getNext",
      "params": []
     },
     {
      "type": null,
      "name": "fill",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "fill",
      "params": [
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": null,
      "name": "computeDistribution",
      "params": []
     },
     {
      "type": null,
      "name": "computeDistribution",
      "params": [
       {
        "type": "int",
        "name": "binCount"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMode",
      "params": []
     },
     {
      "type": null,
      "name": "setMode",
      "params": [
       {
        "type": "int",
        "name": "mode"
       }
      ]
     },
     {
      "type": "URL",
      "name": "getValuesFileURL",
      "params": []
     },
     {
      "type": null,
      "name": "setValuesFileURL",
      "params": [
       {
        "type": "String",
        "name": "url"
       }
      ]
     },
     {
      "type": null,
      "name": "setValuesFileURL",
      "params": [
       {
        "type": "URL",
        "name": "url"
       }
      ]
     },
     {
      "type": "EmpiricalDistribution",
      "name": "getEmpiricalDistribution",
      "params": []
     },
     {
      "type": null,
      "name": "resetReplayFile",
      "params": []
     },
     {
      "type": null,
      "name": "closeReplayFile",
      "params": []
     },
     {
      "type": "double",
      "name": "getMu",
      "params": []
     },
     {
      "type": null,
      "name": "setMu",
      "params": [
       {
        "type": "double",
        "name": "mu"
       }
      ]
     },
     {
      "type": "double",
      "name": "getSigma",
      "params": []
     },
     {
      "type": null,
      "name": "setSigma",
      "params": [
       {
        "type": "double",
        "name": "sigma"
       }
      ]
     },
     {
      "type": "double",
      "name": "getNextDigest",
      "params": []
     },
     {
      "type": "double",
      "name": "getNextReplay",
      "params": []
     },
     {
      "type": "double",
      "name": "getNextUniform",
      "params": []
     },
     {
      "type": "double",
      "name": "getNextExponential",
      "params": []
     },
     {
      "type": "double",
      "name": "getNextGaussian",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "ValueServer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "JDKRandomGenerator",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "JDKRandomGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "mean"
     },
     {
      "type": "double",
      "name": "standardDeviation"
     },
     {
      "type": "NormalizedRandomGenerator",
      "name": "generator"
     }
    ],
    "name": "UncorrelatedRandomVectorGenerator",
    "methods": [
     {
      "type": "double",
      "name": "nextVector",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "UncorrelatedRandomVectorGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "mean"
     },
     {
      "type": "RealMatrixImpl",
      "name": "root"
     },
     {
      "type": "int",
      "name": "rank"
     },
     {
      "type": "NormalizedRandomGenerator",
      "name": "generator"
     },
     {
      "type": "double",
      "name": "normalized"
     }
    ],
    "name": "CorrelatedRandomVectorGenerator",
    "methods": [
     {
      "type": "NormalizedRandomGenerator",
      "name": "getGenerator",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getRootMatrix",
      "params": []
     },
     {
      "type": "int",
      "name": "getRank",
      "params": []
     },
     {
      "type": null,
      "name": "decompose",
      "params": [
       {
        "type": "RealMatrix",
        "name": "covariance"
       },
       {
        "type": "double",
        "name": "small"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextVector",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "CorrelatedRandomVectorGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "List",
      "name": "binStats"
     },
     {
      "type": "SummaryStatistics",
      "name": "sampleStats"
     },
     {
      "type": "int",
      "name": "binCount"
     },
     {
      "type": "boolean",
      "name": "loaded"
     },
     {
      "type": "double",
      "name": "upperBounds"
     },
     {
      "type": "RandomData",
      "name": "randomData"
     }
    ],
    "name": "EmpiricalDistributionImpl",
    "methods": [
     {
      "type": null,
      "name": "load",
      "params": [
       {
        "type": "double",
        "name": "in"
       }
      ]
     },
     {
      "type": null,
      "name": "load",
      "params": [
       {
        "type": "URL",
        "name": "url"
       }
      ]
     },
     {
      "type": null,
      "name": "load",
      "params": [
       {
        "type": "File",
        "name": "file"
       }
      ]
     },
     {
      "type": null,
      "name": "fillBinStats",
      "params": [
       {
        "type": "Object",
        "name": "in"
       }
      ]
     },
     {
      "type": "int",
      "name": "findBin",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "value"
       },
       {
        "type": "double",
        "name": "delta"
       }
      ]
     },
     {
      "type": "double",
      "name": "getNextValue",
      "params": []
     },
     {
      "type": "StatisticalSummary",
      "name": "getSampleStats",
      "params": []
     },
     {
      "type": "int",
      "name": "getBinCount",
      "params": []
     },
     {
      "type": "List",
      "name": "getBinStats",
      "params": []
     },
     {
      "type": "double",
      "name": "getUpperBounds",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isLoaded",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "EmpiricalDistributionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "NotPositiveDefiniteMatrixException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "NotPositiveDefiniteMatrixException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "cachedNormalDeviate"
     }
    ],
    "name": "AbstractRandomGenerator",
    "methods": [
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": null,
      "name": "setSeed",
      "params": [
       {
        "type": "long",
        "name": "seed"
       }
      ]
     },
     {
      "type": null,
      "name": "nextBytes",
      "params": [
       {
        "type": "byte",
        "name": "bytes"
       }
      ]
     },
     {
      "type": "int",
      "name": "nextInt",
      "params": []
     },
     {
      "type": "int",
      "name": "nextInt",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "long",
      "name": "nextLong",
      "params": []
     },
     {
      "type": "boolean",
      "name": "nextBoolean",
      "params": []
     },
     {
      "type": "float",
      "name": "nextFloat",
      "params": []
     },
     {
      "type": "double",
      "name": "nextDouble",
      "params": []
     },
     {
      "type": "double",
      "name": "nextGaussian",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.random",
  "filename": "AbstractRandomGenerator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Chromosome",
      "name": "first"
     },
     {
      "type": "Chromosome",
      "name": "second"
     }
    ],
    "name": "ChromosomePair",
    "methods": [
     {
      "type": "Chromosome",
      "name": "getFirst",
      "params": []
     },
     {
      "type": "Chromosome",
      "name": "getSecond",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "ChromosomePair.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Fitness",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "Fitness.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Population",
    "methods": [
     {
      "type": "int",
      "name": "getPopulationSize",
      "params": []
     },
     {
      "type": "int",
      "name": "getPopulationLimit",
      "params": []
     },
     {
      "type": "Population",
      "name": "nextGeneration",
      "params": []
     },
     {
      "type": null,
      "name": "addChromosome",
      "params": [
       {
        "type": "Chromosome",
        "name": "chromosome"
       }
      ]
     },
     {
      "type": "Chromosome",
      "name": "getFittestChromosome",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "Population.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "StoppingCondition",
    "methods": [
     {
      "type": "boolean",
      "name": "isSatisfied",
      "params": [
       {
        "type": "Population",
        "name": "population"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "StoppingCondition.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "CrossoverPolicy",
      "name": "crossoverPolicy"
     },
     {
      "type": "double",
      "name": "crossoverRate"
     },
     {
      "type": "MutationPolicy",
      "name": "mutationPolicy"
     },
     {
      "type": "double",
      "name": "mutationRate"
     },
     {
      "type": "SelectionPolicy",
      "name": "selectionPolicy"
     }
    ],
    "name": "GeneticAlgorithm",
    "methods": [
     {
      "type": "Population",
      "name": "evolve",
      "params": [
       {
        "type": "Population",
        "name": "initial"
       },
       {
        "type": "StoppingCondition",
        "name": "condition"
       }
      ]
     },
     {
      "type": "CrossoverPolicy",
      "name": "getCrossoverPolicy",
      "params": []
     },
     {
      "type": "double",
      "name": "getCrossoverRate",
      "params": []
     },
     {
      "type": "MutationPolicy",
      "name": "getMutationPolicy",
      "params": []
     },
     {
      "type": "double",
      "name": "getMutationRate",
      "params": []
     },
     {
      "type": "SelectionPolicy",
      "name": "getSelectionPolicy",
      "params": []
     },
     {
      "type": "Population",
      "name": "nextGeneration",
      "params": [
       {
        "type": "Population",
        "name": "current"
       }
      ]
     },
     {
      "type": null,
      "name": "setCrossoverPolicy",
      "params": [
       {
        "type": "CrossoverPolicy",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "setCrossoverRate",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "setMutationPolicy",
      "params": [
       {
        "type": "MutationPolicy",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "setMutationRate",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "setSelectionPolicy",
      "params": [
       {
        "type": "SelectionPolicy",
        "name": "value"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "GeneticAlgorithm.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Chromosome",
    "methods": [
     {
      "type": "Fitness",
      "name": "getFitness",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "Chromosome.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "MutationPolicy",
    "methods": [
     {
      "type": "Chromosome",
      "name": "mutate",
      "params": [
       {
        "type": "Chromosome",
        "name": "original"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "MutationPolicy.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "CrossoverPolicy",
    "methods": [
     {
      "type": "ChromosomePair",
      "name": "crossover",
      "params": [
       {
        "type": "Chromosome",
        "name": "first"
       },
       {
        "type": "Chromosome",
        "name": "second"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "CrossoverPolicy.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "SelectionPolicy",
    "methods": [
     {
      "type": "ChromosomePair",
      "name": "select",
      "params": [
       {
        "type": "Population",
        "name": "population"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.genetics",
  "filename": "SelectionPolicy.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "DEFAULT_EPSILON"
     }
    ],
    "name": "Beta",
    "methods": [
     {
      "type": "double",
      "name": "regularizedBeta",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       }
      ]
     },
     {
      "type": "double",
      "name": "regularizedBeta",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       },
       {
        "type": "double",
        "name": "epsilon"
       }
      ]
     },
     {
      "type": "double",
      "name": "regularizedBeta",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       },
       {
        "type": "int",
        "name": "maxIterations"
       }
      ]
     },
     {
      "type": "double",
      "name": "regularizedBeta",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       },
       {
        "type": "double",
        "name": "epsilon"
       },
       {
        "type": "int",
        "name": "maxIterations"
       }
      ]
     },
     {
      "type": "double",
      "name": "logBeta",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       }
      ]
     },
     {
      "type": "double",
      "name": "logBeta",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       },
       {
        "type": "double",
        "name": "epsilon"
       },
       {
        "type": "int",
        "name": "maxIterations"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.special",
  "filename": "Beta.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "DEFAULT_EPSILON"
     },
     {
      "type": "double",
      "name": "lanczos"
     },
     {
      "type": "double",
      "name": "HALF_LOG_2_PI"
     }
    ],
    "name": "Gamma",
    "methods": [
     {
      "type": "double",
      "name": "logGamma",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "regularizedGammaP",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "regularizedGammaP",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "epsilon"
       },
       {
        "type": "int",
        "name": "maxIterations"
       }
      ]
     },
     {
      "type": "double",
      "name": "regularizedGammaQ",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "regularizedGammaQ",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "epsilon"
       },
       {
        "type": "int",
        "name": "maxIterations"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.special",
  "filename": "Gamma.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "Erf",
    "methods": [
     {
      "type": "double",
      "name": "erf",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.special",
  "filename": "Erf.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Rotation",
      "name": "IDENTITY"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "q0"
     },
     {
      "type": "double",
      "name": "q1"
     },
     {
      "type": "double",
      "name": "q2"
     },
     {
      "type": "double",
      "name": "q3"
     }
    ],
    "name": "Rotation",
    "methods": [
     {
      "type": "Rotation",
      "name": "revert",
      "params": []
     },
     {
      "type": "double",
      "name": "getQ0",
      "params": []
     },
     {
      "type": "double",
      "name": "getQ1",
      "params": []
     },
     {
      "type": "double",
      "name": "getQ2",
      "params": []
     },
     {
      "type": "double",
      "name": "getQ3",
      "params": []
     },
     {
      "type": "Vector3D",
      "name": "getAxis",
      "params": []
     },
     {
      "type": "double",
      "name": "getAngle",
      "params": []
     },
     {
      "type": "double",
      "name": "getAngles",
      "params": [
       {
        "type": "RotationOrder",
        "name": "order"
       }
      ]
     },
     {
      "type": "double",
      "name": "getMatrix",
      "params": []
     },
     {
      "type": "Vector3D",
      "name": "applyTo",
      "params": [
       {
        "type": "Vector3D",
        "name": "u"
       }
      ]
     },
     {
      "type": "Vector3D",
      "name": "applyInverseTo",
      "params": [
       {
        "type": "Vector3D",
        "name": "u"
       }
      ]
     },
     {
      "type": "Rotation",
      "name": "applyTo",
      "params": [
       {
        "type": "Rotation",
        "name": "r"
       }
      ]
     },
     {
      "type": "Rotation",
      "name": "applyInverseTo",
      "params": [
       {
        "type": "Rotation",
        "name": "r"
       }
      ]
     },
     {
      "type": "double",
      "name": "orthogonalizeMatrix",
      "params": [
       {
        "type": "double",
        "name": "m"
       },
       {
        "type": "double",
        "name": "threshold"
       }
      ]
     },
     {
      "type": "double",
      "name": "distance",
      "params": [
       {
        "type": "Rotation",
        "name": "r1"
       },
       {
        "type": "Rotation",
        "name": "r2"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.geometry",
  "filename": "Rotation.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "CardanEulerSingularityException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.geometry",
  "filename": "CardanEulerSingularityException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Vector3D",
      "name": "ZERO"
     },
     {
      "type": "Vector3D",
      "name": "PLUS_I"
     },
     {
      "type": "Vector3D",
      "name": "MINUS_I"
     },
     {
      "type": "Vector3D",
      "name": "PLUS_J"
     },
     {
      "type": "Vector3D",
      "name": "MINUS_J"
     },
     {
      "type": "Vector3D",
      "name": "PLUS_K"
     },
     {
      "type": "Vector3D",
      "name": "MINUS_K"
     },
     {
      "type": "Vector3D",
      "name": "NaN"
     },
     {
      "type": "Vector3D",
      "name": "POSITIVE_INFINITY"
     },
     {
      "type": "Vector3D",
      "name": "NEGATIVE_INFINITY"
     },
     {
      "type": "Vector3DFormat",
      "name": "DEFAULT_FORMAT"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "x"
     },
     {
      "type": "double",
      "name": "y"
     },
     {
      "type": "double",
      "name": "z"
     }
    ],
    "name": "Vector3D",
    "methods": [
     {
      "type": "double",
      "name": "getX",
      "params": []
     },
     {
      "type": "double",
      "name": "getY",
      "params": []
     },
     {
      "type": "double",
      "name": "getZ",
      "params": []
     },
     {
      "type": "double",
      "name": "getNorm",
      "params": []
     },
     {
      "type": "double",
      "name": "getNormSq",
      "params": []
     },
     {
      "type": "double",
      "name": "getAlpha",
      "params": []
     },
     {
      "type": "double",
      "name": "getDelta",
      "params": []
     },
     {
      "type": "Vector3D",
      "name": "add",
      "params": [
       {
        "type": "Vector3D",
        "name": "v"
       }
      ]
     },
     {
      "type": "Vector3D",
      "name": "add",
      "params": [
       {
        "type": "double",
        "name": "factor"
       },
       {
        "type": "Vector3D",
        "name": "v"
       }
      ]
     },
     {
      "type": "Vector3D",
      "name": "subtract",
      "params": [
       {
        "type": "Vector3D",
        "name": "v"
       }
      ]
     },
     {
      "type": "Vector3D",
      "name": "subtract",
      "params": [
       {
        "type": "double",
        "name": "factor"
       },
       {
        "type": "Vector3D",
        "name": "v"
       }
      ]
     },
     {
      "type": "Vector3D",
      "name": "normalize",
      "params": []
     },
     {
      "type": "Vector3D",
      "name": "orthogonal",
      "params": []
     },
     {
      "type": "double",
      "name": "angle",
      "params": [
       {
        "type": "Vector3D",
        "name": "v1"
       },
       {
        "type": "Vector3D",
        "name": "v2"
       }
      ]
     },
     {
      "type": "Vector3D",
      "name": "negate",
      "params": []
     },
     {
      "type": "Vector3D",
      "name": "scalarMultiply",
      "params": [
       {
        "type": "double",
        "name": "a"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isNaN",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isInfinite",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "double",
      "name": "dotProduct",
      "params": [
       {
        "type": "Vector3D",
        "name": "v1"
       },
       {
        "type": "Vector3D",
        "name": "v2"
       }
      ]
     },
     {
      "type": "Vector3D",
      "name": "crossProduct",
      "params": [
       {
        "type": "Vector3D",
        "name": "v1"
       },
       {
        "type": "Vector3D",
        "name": "v2"
       }
      ]
     },
     {
      "type": "double",
      "name": "distance",
      "params": [
       {
        "type": "Vector3D",
        "name": "v1"
       },
       {
        "type": "Vector3D",
        "name": "v2"
       }
      ]
     },
     {
      "type": "double",
      "name": "distanceSq",
      "params": [
       {
        "type": "Vector3D",
        "name": "v1"
       },
       {
        "type": "Vector3D",
        "name": "v2"
       }
      ]
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.geometry",
  "filename": "Vector3D.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "DEFAULT_PREFIX"
     },
     {
      "type": "String",
      "name": "DEFAULT_SUFFIX"
     },
     {
      "type": "String",
      "name": "DEFAULT_SEPARATOR"
     },
     {
      "type": "String",
      "name": "prefix"
     },
     {
      "type": "String",
      "name": "suffix"
     },
     {
      "type": "String",
      "name": "separator"
     },
     {
      "type": "String",
      "name": "trimmedPrefix"
     },
     {
      "type": "String",
      "name": "trimmedSuffix"
     },
     {
      "type": "String",
      "name": "trimmedSeparator"
     },
     {
      "type": "NumberFormat",
      "name": "format"
     }
    ],
    "name": "Vector3DFormat",
    "methods": [
     {
      "type": "Locale",
      "name": "getAvailableLocales",
      "params": []
     },
     {
      "type": "String",
      "name": "getPrefix",
      "params": []
     },
     {
      "type": "String",
      "name": "getSuffix",
      "params": []
     },
     {
      "type": "String",
      "name": "getSeparator",
      "params": []
     },
     {
      "type": "NumberFormat",
      "name": "getFormat",
      "params": []
     },
     {
      "type": "Vector3DFormat",
      "name": "getInstance",
      "params": []
     },
     {
      "type": "Vector3DFormat",
      "name": "getInstance",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "String",
      "name": "formatVector3D",
      "params": [
       {
        "type": "Vector3D",
        "name": "v"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "Vector3D",
        "name": "vector"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "Object",
        "name": "obj"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "Vector3D",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       }
      ]
     },
     {
      "type": "Vector3D",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "Object",
      "name": "parseObject",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.geometry",
  "filename": "Vector3DFormat.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "RotationOrder",
      "name": "XYZ"
     },
     {
      "type": "RotationOrder",
      "name": "XZY"
     },
     {
      "type": "RotationOrder",
      "name": "YXZ"
     },
     {
      "type": "RotationOrder",
      "name": "YZX"
     },
     {
      "type": "RotationOrder",
      "name": "ZXY"
     },
     {
      "type": "RotationOrder",
      "name": "ZYX"
     },
     {
      "type": "RotationOrder",
      "name": "XYX"
     },
     {
      "type": "RotationOrder",
      "name": "XZX"
     },
     {
      "type": "RotationOrder",
      "name": "YXY"
     },
     {
      "type": "RotationOrder",
      "name": "YZY"
     },
     {
      "type": "RotationOrder",
      "name": "ZXZ"
     },
     {
      "type": "RotationOrder",
      "name": "ZYZ"
     },
     {
      "type": "String",
      "name": "name"
     },
     {
      "type": "Vector3D",
      "name": "a1"
     },
     {
      "type": "Vector3D",
      "name": "a2"
     },
     {
      "type": "Vector3D",
      "name": "a3"
     }
    ],
    "name": "RotationOrder",
    "methods": [
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": "Vector3D",
      "name": "getA1",
      "params": []
     },
     {
      "type": "Vector3D",
      "name": "getA2",
      "params": []
     },
     {
      "type": "Vector3D",
      "name": "getA3",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.geometry",
  "filename": "RotationOrder.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "NotARotationMatrixException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.geometry",
  "filename": "NotARotationMatrixException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "data"
     },
     {
      "type": "double",
      "name": "lu"
     },
     {
      "type": "int",
      "name": "permutation"
     },
     {
      "type": "int",
      "name": "parity"
     },
     {
      "type": "double",
      "name": "TOO_SMALL"
     }
    ],
    "name": "RealMatrixImpl",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "copy",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "add",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrixImpl",
      "name": "add",
      "params": [
       {
        "type": "RealMatrixImpl",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "subtract",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrixImpl",
      "name": "subtract",
      "params": [
       {
        "type": "RealMatrixImpl",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "scalarAdd",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "scalarMultiply",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "multiply",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrixImpl",
      "name": "multiply",
      "params": [
       {
        "type": "RealMatrixImpl",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "preMultiply",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "double",
      "name": "getData",
      "params": []
     },
     {
      "type": "double",
      "name": "getDataRef",
      "params": []
     },
     {
      "type": "double",
      "name": "getNorm",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getSubMatrix",
      "params": [
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "getSubMatrix",
      "params": [
       {
        "type": "int",
        "name": "selectedRows"
       },
       {
        "type": "int",
        "name": "selectedColumns"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubMatrix",
      "params": [
       {
        "type": "double",
        "name": "subMatrix"
       },
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "getRowMatrix",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "getColumnMatrix",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "getColumnVector",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "getRowVector",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": "double",
      "name": "getRow",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": "double",
      "name": "getColumn",
      "params": [
       {
        "type": "int",
        "name": "col"
       }
      ]
     },
     {
      "type": "double",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "transpose",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "inverse",
      "params": []
     },
     {
      "type": "double",
      "name": "getDeterminant",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSquare",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSingular",
      "params": []
     },
     {
      "type": "int",
      "name": "getRowDimension",
      "params": []
     },
     {
      "type": "int",
      "name": "getColumnDimension",
      "params": []
     },
     {
      "type": "double",
      "name": "getTrace",
      "params": []
     },
     {
      "type": "double",
      "name": "operate",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "operate",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVectorImpl",
      "name": "operate",
      "params": [
       {
        "type": "RealVectorImpl",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "preMultiply",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "preMultiply",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVectorImpl",
      "name": "preMultiply",
      "params": [
       {
        "type": "RealVectorImpl",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "b"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "solve",
      "params": [
       {
        "type": "RealVector",
        "name": "b"
       }
      ]
     },
     {
      "type": "RealVectorImpl",
      "name": "solve",
      "params": [
       {
        "type": "RealVectorImpl",
        "name": "b"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "solve",
      "params": [
       {
        "type": "RealMatrix",
        "name": "b"
       }
      ]
     },
     {
      "type": null,
      "name": "luDecompose",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "object"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getLUMatrix",
      "params": []
     },
     {
      "type": "int",
      "name": "getPermutation",
      "params": []
     },
     {
      "type": "double",
      "name": "copyOut",
      "params": []
     },
     {
      "type": null,
      "name": "copyIn",
      "params": [
       {
        "type": "double",
        "name": "in"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isValidCoordinate",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "col"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "RealMatrixImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "qr"
     },
     {
      "type": "double",
      "name": "rDiag"
     },
     {
      "type": "RealMatrix",
      "name": "cachedQ"
     },
     {
      "type": "RealMatrix",
      "name": "cachedR"
     },
     {
      "type": "RealMatrix",
      "name": "cachedH"
     },
     {
      "type": "int",
      "name": "m"
     },
     {
      "type": "int",
      "name": "n"
     }
    ],
    "name": "QRDecompositionImpl",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "getR",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getQ",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getH",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isFullRank",
      "params": []
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "b"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "solve",
      "params": [
       {
        "type": "RealVector",
        "name": "b"
       }
      ]
     },
     {
      "type": "RealVectorImpl",
      "name": "solve",
      "params": [
       {
        "type": "RealVectorImpl",
        "name": "b"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "solve",
      "params": [
       {
        "type": "RealMatrix",
        "name": "b"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "QRDecompositionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DecompositionSolver",
    "methods": [
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "b"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "solve",
      "params": [
       {
        "type": "RealVector",
        "name": "b"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "solve",
      "params": [
       {
        "type": "RealMatrix",
        "name": "b"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "DecompositionSolver.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "MatrixIndexException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "MatrixIndexException.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "LUDecomposition",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "getL",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getU",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getP",
      "params": []
     },
     {
      "type": "int",
      "name": "getPivot",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isNonSingular",
      "params": []
     },
     {
      "type": "double",
      "name": "getDeterminant",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "LUDecomposition.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "RealMatrix",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "copy",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "add",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "subtract",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "scalarAdd",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "scalarMultiply",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "multiply",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "preMultiply",
      "params": [
       {
        "type": "RealMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "double",
      "name": "getData",
      "params": []
     },
     {
      "type": "double",
      "name": "getNorm",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getSubMatrix",
      "params": [
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "getSubMatrix",
      "params": [
       {
        "type": "int",
        "name": "selectedRows"
       },
       {
        "type": "int",
        "name": "selectedColumns"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "getRowMatrix",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "getColumnMatrix",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "getRowVector",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "getColumnVector",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "double",
      "name": "getRow",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": "double",
      "name": "getColumn",
      "params": [
       {
        "type": "int",
        "name": "col"
       }
      ]
     },
     {
      "type": "double",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "transpose",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "inverse",
      "params": []
     },
     {
      "type": "double",
      "name": "getDeterminant",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSquare",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSingular",
      "params": []
     },
     {
      "type": "int",
      "name": "getRowDimension",
      "params": []
     },
     {
      "type": "int",
      "name": "getColumnDimension",
      "params": []
     },
     {
      "type": "double",
      "name": "getTrace",
      "params": []
     },
     {
      "type": "double",
      "name": "operate",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "operate",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "preMultiply",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "preMultiply",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "b"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "solve",
      "params": [
       {
        "type": "RealVector",
        "name": "b"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "solve",
      "params": [
       {
        "type": "RealMatrix",
        "name": "b"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "RealMatrix.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "BigDecimal",
      "name": "data"
     },
     {
      "type": "BigDecimal",
      "name": "lu"
     },
     {
      "type": "int",
      "name": "permutation"
     },
     {
      "type": "int",
      "name": "parity"
     },
     {
      "type": "int",
      "name": "roundingMode"
     },
     {
      "type": "int",
      "name": "scale"
     },
     {
      "type": "BigDecimal",
      "name": "TOO_SMALL"
     },
     {
      "type": "BigDecimal",
      "name": "ZERO"
     },
     {
      "type": "BigDecimal",
      "name": "ONE"
     }
    ],
    "name": "BigMatrixImpl",
    "methods": [
     {
      "type": "BigMatrix",
      "name": "copy",
      "params": []
     },
     {
      "type": "BigMatrix",
      "name": "add",
      "params": [
       {
        "type": "BigMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "BigMatrixImpl",
      "name": "add",
      "params": [
       {
        "type": "BigMatrixImpl",
        "name": "m"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "subtract",
      "params": [
       {
        "type": "BigMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "BigMatrixImpl",
      "name": "subtract",
      "params": [
       {
        "type": "BigMatrixImpl",
        "name": "m"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "scalarAdd",
      "params": [
       {
        "type": "BigDecimal",
        "name": "d"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "scalarMultiply",
      "params": [
       {
        "type": "BigDecimal",
        "name": "d"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "multiply",
      "params": [
       {
        "type": "BigMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "BigMatrixImpl",
      "name": "multiply",
      "params": [
       {
        "type": "BigMatrixImpl",
        "name": "m"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "preMultiply",
      "params": [
       {
        "type": "BigMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "BigDecimal",
      "name": "getData",
      "params": []
     },
     {
      "type": "double",
      "name": "getDataAsDoubleArray",
      "params": []
     },
     {
      "type": "BigDecimal",
      "name": "getDataRef",
      "params": []
     },
     {
      "type": "int",
      "name": "getRoundingMode",
      "params": []
     },
     {
      "type": null,
      "name": "setRoundingMode",
      "params": [
       {
        "type": "int",
        "name": "roundingMode"
       }
      ]
     },
     {
      "type": "int",
      "name": "getScale",
      "params": []
     },
     {
      "type": null,
      "name": "setScale",
      "params": [
       {
        "type": "int",
        "name": "scale"
       }
      ]
     },
     {
      "type": "BigDecimal",
      "name": "getNorm",
      "params": []
     },
     {
      "type": "BigMatrix",
      "name": "getSubMatrix",
      "params": [
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "getSubMatrix",
      "params": [
       {
        "type": "int",
        "name": "selectedRows"
       },
       {
        "type": "int",
        "name": "selectedColumns"
       }
      ]
     },
     {
      "type": null,
      "name": "setSubMatrix",
      "params": [
       {
        "type": "BigDecimal",
        "name": "subMatrix"
       },
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "getRowMatrix",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "getColumnMatrix",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "BigDecimal",
      "name": "getRow",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": "double",
      "name": "getRowAsDoubleArray",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": "BigDecimal",
      "name": "getColumn",
      "params": [
       {
        "type": "int",
        "name": "col"
       }
      ]
     },
     {
      "type": "double",
      "name": "getColumnAsDoubleArray",
      "params": [
       {
        "type": "int",
        "name": "col"
       }
      ]
     },
     {
      "type": "BigDecimal",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "double",
      "name": "getEntryAsDouble",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "transpose",
      "params": []
     },
     {
      "type": "BigMatrix",
      "name": "inverse",
      "params": []
     },
     {
      "type": "BigDecimal",
      "name": "getDeterminant",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSquare",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSingular",
      "params": []
     },
     {
      "type": "int",
      "name": "getRowDimension",
      "params": []
     },
     {
      "type": "int",
      "name": "getColumnDimension",
      "params": []
     },
     {
      "type": "BigDecimal",
      "name": "getTrace",
      "params": []
     },
     {
      "type": "BigDecimal",
      "name": "operate",
      "params": [
       {
        "type": "BigDecimal",
        "name": "v"
       }
      ]
     },
     {
      "type": "BigDecimal",
      "name": "operate",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "BigDecimal",
      "name": "preMultiply",
      "params": [
       {
        "type": "BigDecimal",
        "name": "v"
       }
      ]
     },
     {
      "type": "BigDecimal",
      "name": "solve",
      "params": [
       {
        "type": "BigDecimal",
        "name": "b"
       }
      ]
     },
     {
      "type": "BigDecimal",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "b"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "solve",
      "params": [
       {
        "type": "BigMatrix",
        "name": "b"
       }
      ]
     },
     {
      "type": null,
      "name": "luDecompose",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "object"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "BigMatrix",
      "name": "getLUMatrix",
      "params": []
     },
     {
      "type": "int",
      "name": "getPermutation",
      "params": []
     },
     {
      "type": "BigDecimal",
      "name": "copyOut",
      "params": []
     },
     {
      "type": null,
      "name": "copyIn",
      "params": [
       {
        "type": "BigDecimal",
        "name": "in"
       }
      ]
     },
     {
      "type": null,
      "name": "copyIn",
      "params": [
       {
        "type": "double",
        "name": "in"
       }
      ]
     },
     {
      "type": null,
      "name": "copyIn",
      "params": [
       {
        "type": "String",
        "name": "in"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isValidCoordinate",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "col"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "BigMatrixImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "MatrixUtils",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "createRealMatrix",
      "params": [
       {
        "type": "double",
        "name": "data"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "createRealMatrix",
      "params": [
       {
        "type": "double",
        "name": "data"
       },
       {
        "type": "boolean",
        "name": "copyArray"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "createRealIdentityMatrix",
      "params": [
       {
        "type": "int",
        "name": "dimension"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "createBigMatrix",
      "params": [
       {
        "type": "double",
        "name": "data"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "createBigMatrix",
      "params": [
       {
        "type": "BigDecimal",
        "name": "data"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "createBigMatrix",
      "params": [
       {
        "type": "BigDecimal",
        "name": "data"
       },
       {
        "type": "boolean",
        "name": "copyArray"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "createBigMatrix",
      "params": [
       {
        "type": "String",
        "name": "data"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "createRealVector",
      "params": [
       {
        "type": "double",
        "name": "data"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "createRowRealMatrix",
      "params": [
       {
        "type": "double",
        "name": "rowData"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "createRowBigMatrix",
      "params": [
       {
        "type": "double",
        "name": "rowData"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "createRowBigMatrix",
      "params": [
       {
        "type": "BigDecimal",
        "name": "rowData"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "createRowBigMatrix",
      "params": [
       {
        "type": "String",
        "name": "rowData"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "createColumnRealMatrix",
      "params": [
       {
        "type": "double",
        "name": "columnData"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "createColumnBigMatrix",
      "params": [
       {
        "type": "double",
        "name": "columnData"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "createColumnBigMatrix",
      "params": [
       {
        "type": "BigDecimal",
        "name": "columnData"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "createColumnBigMatrix",
      "params": [
       {
        "type": "String",
        "name": "columnData"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "createBigIdentityMatrix",
      "params": [
       {
        "type": "int",
        "name": "dimension"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "MatrixUtils.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "RealVector",
    "methods": [
     {
      "type": "RealVector",
      "name": "copy",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "add",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "subtract",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapAdd",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapAddToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapSubtract",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapSubtractToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapMultiply",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapMultiplyToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapDivide",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapDivideToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapPow",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapPowToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapExp",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapExpToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapExpm1",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapExpm1ToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapLog",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapLogToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapLog10",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapLog10ToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapLog1p",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapLog1pToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapCosh",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapCoshToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapSinh",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapSinhToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapTanh",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapTanhToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapCos",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapCosToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapSin",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapSinToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapTan",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapTanToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapAcos",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapAcosToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapAsin",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapAsinToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapAtan",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapAtanToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapInv",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapInvToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapAbs",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapAbsToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapSqrt",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapSqrtToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapCbrt",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapCbrtToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapCeil",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapCeilToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapFloor",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapFloorToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapRint",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapRintToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapSignum",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapSignumToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapUlp",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapUlpToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "ebeMultiply",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "ebeDivide",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getData",
      "params": []
     },
     {
      "type": "double",
      "name": "dotProduct",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getNorm",
      "params": []
     },
     {
      "type": "double",
      "name": "getL1Norm",
      "params": []
     },
     {
      "type": "double",
      "name": "getLInfNorm",
      "params": []
     },
     {
      "type": "double",
      "name": "getDistance",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getL1Distance",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getLInfDistance",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "unitVector",
      "params": []
     },
     {
      "type": null,
      "name": "unitize",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "projection",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "outerProduct",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "append",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "append",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "append",
      "params": [
       {
        "type": "double",
        "name": "a"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "get",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": null,
      "name": "set",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "set",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "set",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "double",
      "name": "toArray",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isNaN",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isInfinite",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "RealVector.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "DEFAULT_PREFIX"
     },
     {
      "type": "String",
      "name": "DEFAULT_SUFFIX"
     },
     {
      "type": "String",
      "name": "DEFAULT_SEPARATOR"
     },
     {
      "type": "String",
      "name": "prefix"
     },
     {
      "type": "String",
      "name": "suffix"
     },
     {
      "type": "String",
      "name": "separator"
     },
     {
      "type": "String",
      "name": "trimmedPrefix"
     },
     {
      "type": "String",
      "name": "trimmedSuffix"
     },
     {
      "type": "String",
      "name": "trimmedSeparator"
     },
     {
      "type": "NumberFormat",
      "name": "format"
     }
    ],
    "name": "RealVectorFormat",
    "methods": [
     {
      "type": "Locale",
      "name": "getAvailableLocales",
      "params": []
     },
     {
      "type": "String",
      "name": "getPrefix",
      "params": []
     },
     {
      "type": "String",
      "name": "getSuffix",
      "params": []
     },
     {
      "type": "String",
      "name": "getSeparator",
      "params": []
     },
     {
      "type": "NumberFormat",
      "name": "getFormat",
      "params": []
     },
     {
      "type": "RealVectorFormat",
      "name": "getInstance",
      "params": []
     },
     {
      "type": "RealVectorFormat",
      "name": "getInstance",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "String",
      "name": "formatRealVector",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "RealVector",
        "name": "vector"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "Object",
        "name": "obj"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "RealVectorImpl",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       }
      ]
     },
     {
      "type": "RealVectorImpl",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "Object",
      "name": "parseObject",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "RealVectorFormat.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "BigMatrix",
    "methods": [
     {
      "type": "BigMatrix",
      "name": "copy",
      "params": []
     },
     {
      "type": "BigMatrix",
      "name": "add",
      "params": [
       {
        "type": "BigMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "subtract",
      "params": [
       {
        "type": "BigMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "scalarAdd",
      "params": [
       {
        "type": "BigDecimal",
        "name": "d"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "scalarMultiply",
      "params": [
       {
        "type": "BigDecimal",
        "name": "d"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "multiply",
      "params": [
       {
        "type": "BigMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "preMultiply",
      "params": [
       {
        "type": "BigMatrix",
        "name": "m"
       }
      ]
     },
     {
      "type": "BigDecimal",
      "name": "getData",
      "params": []
     },
     {
      "type": "double",
      "name": "getDataAsDoubleArray",
      "params": []
     },
     {
      "type": "int",
      "name": "getRoundingMode",
      "params": []
     },
     {
      "type": "BigDecimal",
      "name": "getNorm",
      "params": []
     },
     {
      "type": "BigMatrix",
      "name": "getSubMatrix",
      "params": [
       {
        "type": "int",
        "name": "startRow"
       },
       {
        "type": "int",
        "name": "endRow"
       },
       {
        "type": "int",
        "name": "startColumn"
       },
       {
        "type": "int",
        "name": "endColumn"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "getSubMatrix",
      "params": [
       {
        "type": "int",
        "name": "selectedRows"
       },
       {
        "type": "int",
        "name": "selectedColumns"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "getRowMatrix",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "getColumnMatrix",
      "params": [
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "BigDecimal",
      "name": "getRow",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": "double",
      "name": "getRowAsDoubleArray",
      "params": [
       {
        "type": "int",
        "name": "row"
       }
      ]
     },
     {
      "type": "BigDecimal",
      "name": "getColumn",
      "params": [
       {
        "type": "int",
        "name": "col"
       }
      ]
     },
     {
      "type": "double",
      "name": "getColumnAsDoubleArray",
      "params": [
       {
        "type": "int",
        "name": "col"
       }
      ]
     },
     {
      "type": "BigDecimal",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "double",
      "name": "getEntryAsDouble",
      "params": [
       {
        "type": "int",
        "name": "row"
       },
       {
        "type": "int",
        "name": "column"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "transpose",
      "params": []
     },
     {
      "type": "BigMatrix",
      "name": "inverse",
      "params": []
     },
     {
      "type": "BigDecimal",
      "name": "getDeterminant",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSquare",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSingular",
      "params": []
     },
     {
      "type": "int",
      "name": "getRowDimension",
      "params": []
     },
     {
      "type": "int",
      "name": "getColumnDimension",
      "params": []
     },
     {
      "type": "BigDecimal",
      "name": "getTrace",
      "params": []
     },
     {
      "type": "BigDecimal",
      "name": "operate",
      "params": [
       {
        "type": "BigDecimal",
        "name": "v"
       }
      ]
     },
     {
      "type": "BigDecimal",
      "name": "preMultiply",
      "params": [
       {
        "type": "BigDecimal",
        "name": "v"
       }
      ]
     },
     {
      "type": "BigDecimal",
      "name": "solve",
      "params": [
       {
        "type": "BigDecimal",
        "name": "b"
       }
      ]
     },
     {
      "type": "BigMatrix",
      "name": "solve",
      "params": [
       {
        "type": "BigMatrix",
        "name": "b"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "BigMatrix.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "RealVectorFormat",
      "name": "DEFAULT_FORMAT"
     },
     {
      "type": "double",
      "name": "data"
     }
    ],
    "name": "RealVectorImpl",
    "methods": [
     {
      "type": "RealVector",
      "name": "copy",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "add",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVectorImpl",
      "name": "add",
      "params": [
       {
        "type": "RealVectorImpl",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "subtract",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVectorImpl",
      "name": "subtract",
      "params": [
       {
        "type": "RealVectorImpl",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapAdd",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapAddToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapSubtract",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapSubtractToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapMultiply",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapMultiplyToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapDivide",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapDivideToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapPow",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapPowToSelf",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "mapExp",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapExpToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapExpm1",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapExpm1ToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapLog",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapLogToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapLog10",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapLog10ToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapLog1p",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapLog1pToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapCosh",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapCoshToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapSinh",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapSinhToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapTanh",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapTanhToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapCos",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapCosToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapSin",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapSinToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapTan",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapTanToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapAcos",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapAcosToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapAsin",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapAsinToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapAtan",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapAtanToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapInv",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapInvToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapAbs",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapAbsToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapSqrt",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapSqrtToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapCbrt",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapCbrtToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapCeil",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapCeilToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapFloor",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapFloorToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapRint",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapRintToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapSignum",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapSignumToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapUlp",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "mapUlpToSelf",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "ebeMultiply",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVectorImpl",
      "name": "ebeMultiply",
      "params": [
       {
        "type": "RealVectorImpl",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "ebeDivide",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVectorImpl",
      "name": "ebeDivide",
      "params": [
       {
        "type": "RealVectorImpl",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getData",
      "params": []
     },
     {
      "type": "double",
      "name": "getDataRef",
      "params": []
     },
     {
      "type": "double",
      "name": "dotProduct",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "dotProduct",
      "params": [
       {
        "type": "RealVectorImpl",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getNorm",
      "params": []
     },
     {
      "type": "double",
      "name": "getL1Norm",
      "params": []
     },
     {
      "type": "double",
      "name": "getLInfNorm",
      "params": []
     },
     {
      "type": "double",
      "name": "getDistance",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getDistance",
      "params": [
       {
        "type": "RealVectorImpl",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getL1Distance",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getL1Distance",
      "params": [
       {
        "type": "RealVectorImpl",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getLInfDistance",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getLInfDistance",
      "params": [
       {
        "type": "RealVectorImpl",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "unitVector",
      "params": []
     },
     {
      "type": null,
      "name": "unitize",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "projection",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVectorImpl",
      "name": "projection",
      "params": [
       {
        "type": "RealVectorImpl",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "outerProduct",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealMatrixImpl",
      "name": "outerProduct",
      "params": [
       {
        "type": "RealVectorImpl",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getEntry",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": "RealVector",
      "name": "append",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVectorImpl",
      "name": "append",
      "params": [
       {
        "type": "RealVectorImpl",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "append",
      "params": [
       {
        "type": "double",
        "name": "in"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "append",
      "params": [
       {
        "type": "double",
        "name": "in"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "get",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": null,
      "name": "set",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "set",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "set",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "RealVectorImpl",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "set",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "double",
      "name": "toArray",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": null,
      "name": "checkVectorDimensions",
      "params": [
       {
        "type": "RealVector",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "checkVectorDimensions",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isNaN",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isInfinite",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "RealVectorImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "InvalidMatrixException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "InvalidMatrixException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "singularityThreshold"
     },
     {
      "type": "int",
      "name": "m"
     },
     {
      "type": "double",
      "name": "lu"
     },
     {
      "type": "int",
      "name": "pivot"
     },
     {
      "type": "int",
      "name": "parity"
     },
     {
      "type": "boolean",
      "name": "singular"
     },
     {
      "type": "RealMatrix",
      "name": "cachedL"
     },
     {
      "type": "RealMatrix",
      "name": "cachedU"
     },
     {
      "type": "RealMatrix",
      "name": "cachedP"
     },
     {
      "type": "double",
      "name": "DEFAULT_TOO_SMALL"
     }
    ],
    "name": "LUDecompositionImpl",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "getL",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getU",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getP",
      "params": []
     },
     {
      "type": "int",
      "name": "getPivot",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isNonSingular",
      "params": []
     },
     {
      "type": "double",
      "name": "getDeterminant",
      "params": []
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "b"
       }
      ]
     },
     {
      "type": "RealVector",
      "name": "solve",
      "params": [
       {
        "type": "RealVector",
        "name": "b"
       }
      ]
     },
     {
      "type": "RealVectorImpl",
      "name": "solve",
      "params": [
       {
        "type": "RealVectorImpl",
        "name": "b"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "solve",
      "params": [
       {
        "type": "RealMatrix",
        "name": "b"
       }
      ]
     },
     {
      "type": null,
      "name": "luDecompose",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "LUDecompositionImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "QRDecomposition",
    "methods": [
     {
      "type": "RealMatrix",
      "name": "getR",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getQ",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getH",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isFullRank",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.linear",
  "filename": "QRDecomposition.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "CompositeFormat",
    "methods": [
     {
      "type": "NumberFormat",
      "name": "getDefaultNumberFormat",
      "params": []
     },
     {
      "type": "NumberFormat",
      "name": "getDefaultNumberFormat",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": null,
      "name": "parseAndIgnoreWhitespace",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "char",
      "name": "parseNextCharacter",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "Number",
      "name": "parseNumber",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "double",
        "name": "value"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "Number",
      "name": "parseNumber",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "NumberFormat",
        "name": "format"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "parseFixedstring",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "String",
        "name": "expected"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "formatDouble",
      "params": [
       {
        "type": "double",
        "name": "value"
       },
       {
        "type": "NumberFormat",
        "name": "format"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "CompositeFormat.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "NumberTransformer",
      "name": "defaultTransformer"
     },
     {
      "type": "Map",
      "name": "map"
     }
    ],
    "name": "TransformerMap",
    "methods": [
     {
      "type": "boolean",
      "name": "containsClass",
      "params": [
       {
        "type": "Class",
        "name": "key"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "containsTransformer",
      "params": [
       {
        "type": "NumberTransformer",
        "name": "value"
       }
      ]
     },
     {
      "type": "NumberTransformer",
      "name": "getTransformer",
      "params": [
       {
        "type": "Class",
        "name": "key"
       }
      ]
     },
     {
      "type": "NumberTransformer",
      "name": "putTransformer",
      "params": [
       {
        "type": "Class",
        "name": "key"
       },
       {
        "type": "NumberTransformer",
        "name": "transformer"
       }
      ]
     },
     {
      "type": "NumberTransformer",
      "name": "removeTransformer",
      "params": [
       {
        "type": "Class",
        "name": "key"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "Set",
      "name": "classes",
      "params": []
     },
     {
      "type": "Collection",
      "name": "transformers",
      "params": []
     },
     {
      "type": "double",
      "name": "transform",
      "params": [
       {
        "type": "Object",
        "name": "o"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "TransformerMap.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "DEFAULT_EPSILON"
     }
    ],
    "name": "ContinuedFraction",
    "methods": [
     {
      "type": "double",
      "name": "getA",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "getB",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "epsilon"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "int",
        "name": "maxIterations"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "epsilon"
       },
       {
        "type": "int",
        "name": "maxIterations"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "ContinuedFraction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DoubleArray",
    "methods": [
     {
      "type": "int",
      "name": "getNumElements",
      "params": []
     },
     {
      "type": "double",
      "name": "getElement",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": null,
      "name": "setElement",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "addElement",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "double",
      "name": "addElementRolling",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "double",
      "name": "getElements",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "DoubleArray.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "byte",
      "name": "NB"
     },
     {
      "type": "short",
      "name": "NS"
     },
     {
      "type": "byte",
      "name": "PB"
     },
     {
      "type": "short",
      "name": "PS"
     },
     {
      "type": "byte",
      "name": "ZB"
     },
     {
      "type": "short",
      "name": "ZS"
     },
     {
      "type": "double",
      "name": "TWO_PI"
     }
    ],
    "name": "MathUtils",
    "methods": [
     {
      "type": "int",
      "name": "addAndCheck",
      "params": [
       {
        "type": "int",
        "name": "x"
       },
       {
        "type": "int",
        "name": "y"
       }
      ]
     },
     {
      "type": "long",
      "name": "addAndCheck",
      "params": [
       {
        "type": "long",
        "name": "a"
       },
       {
        "type": "long",
        "name": "b"
       }
      ]
     },
     {
      "type": "long",
      "name": "addAndCheck",
      "params": [
       {
        "type": "long",
        "name": "a"
       },
       {
        "type": "long",
        "name": "b"
       },
       {
        "type": "String",
        "name": "msg"
       }
      ]
     },
     {
      "type": "long",
      "name": "binomialCoefficient",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "double",
      "name": "binomialCoefficientDouble",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "double",
      "name": "binomialCoefficientLog",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "int",
        "name": "k"
       }
      ]
     },
     {
      "type": "double",
      "name": "cosh",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "long",
      "name": "factorial",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "factorialDouble",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "factorialLog",
      "params": [
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "int",
      "name": "gcd",
      "params": [
       {
        "type": "int",
        "name": "u"
       },
       {
        "type": "int",
        "name": "v"
       }
      ]
     },
     {
      "type": "int",
      "name": "hash",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "int",
      "name": "hash",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "byte",
      "name": "indicator",
      "params": [
       {
        "type": "byte",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "indicator",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "float",
      "name": "indicator",
      "params": [
       {
        "type": "float",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "indicator",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "long",
      "name": "indicator",
      "params": [
       {
        "type": "long",
        "name": "x"
       }
      ]
     },
     {
      "type": "short",
      "name": "indicator",
      "params": [
       {
        "type": "short",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "lcm",
      "params": [
       {
        "type": "int",
        "name": "a"
       },
       {
        "type": "int",
        "name": "b"
       }
      ]
     },
     {
      "type": "double",
      "name": "log",
      "params": [
       {
        "type": "double",
        "name": "base"
       },
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "mulAndCheck",
      "params": [
       {
        "type": "int",
        "name": "x"
       },
       {
        "type": "int",
        "name": "y"
       }
      ]
     },
     {
      "type": "long",
      "name": "mulAndCheck",
      "params": [
       {
        "type": "long",
        "name": "a"
       },
       {
        "type": "long",
        "name": "b"
       }
      ]
     },
     {
      "type": "double",
      "name": "nextAfter",
      "params": [
       {
        "type": "double",
        "name": "d"
       },
       {
        "type": "double",
        "name": "direction"
       }
      ]
     },
     {
      "type": "double",
      "name": "normalizeAngle",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "center"
       }
      ]
     },
     {
      "type": "double",
      "name": "round",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "int",
        "name": "scale"
       }
      ]
     },
     {
      "type": "double",
      "name": "round",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "int",
        "name": "scale"
       },
       {
        "type": "int",
        "name": "roundingMethod"
       }
      ]
     },
     {
      "type": "float",
      "name": "round",
      "params": [
       {
        "type": "float",
        "name": "x"
       },
       {
        "type": "int",
        "name": "scale"
       }
      ]
     },
     {
      "type": "float",
      "name": "round",
      "params": [
       {
        "type": "float",
        "name": "x"
       },
       {
        "type": "int",
        "name": "scale"
       },
       {
        "type": "int",
        "name": "roundingMethod"
       }
      ]
     },
     {
      "type": "double",
      "name": "roundUnscaled",
      "params": [
       {
        "type": "double",
        "name": "unscaled"
       },
       {
        "type": "double",
        "name": "sign"
       },
       {
        "type": "int",
        "name": "roundingMethod"
       }
      ]
     },
     {
      "type": "byte",
      "name": "sign",
      "params": [
       {
        "type": "byte",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "sign",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "float",
      "name": "sign",
      "params": [
       {
        "type": "float",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "sign",
      "params": [
       {
        "type": "int",
        "name": "x"
       }
      ]
     },
     {
      "type": "long",
      "name": "sign",
      "params": [
       {
        "type": "long",
        "name": "x"
       }
      ]
     },
     {
      "type": "short",
      "name": "sign",
      "params": [
       {
        "type": "short",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "sinh",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "subAndCheck",
      "params": [
       {
        "type": "int",
        "name": "x"
       },
       {
        "type": "int",
        "name": "y"
       }
      ]
     },
     {
      "type": "long",
      "name": "subAndCheck",
      "params": [
       {
        "type": "long",
        "name": "a"
       },
       {
        "type": "long",
        "name": "b"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "MathUtils.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "ADDITIVE_MODE"
     },
     {
      "type": "int",
      "name": "MULTIPLICATIVE_MODE"
     },
     {
      "type": "float",
      "name": "contractionCriteria"
     },
     {
      "type": "float",
      "name": "expansionFactor"
     },
     {
      "type": "int",
      "name": "expansionMode"
     },
     {
      "type": "int",
      "name": "initialCapacity"
     },
     {
      "type": "double",
      "name": "internalArray"
     },
     {
      "type": "int",
      "name": "numElements"
     },
     {
      "type": "int",
      "name": "startIndex"
     }
    ],
    "name": "ResizableDoubleArray",
    "methods": [
     {
      "type": null,
      "name": "addElement",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "double",
      "name": "addElementRolling",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "checkContractExpand",
      "params": [
       {
        "type": "float",
        "name": "contractionCritera"
       },
       {
        "type": "float",
        "name": "expansionFactor"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": null,
      "name": "contract",
      "params": []
     },
     {
      "type": null,
      "name": "discardFrontElements",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": null,
      "name": "expand",
      "params": []
     },
     {
      "type": null,
      "name": "expandTo",
      "params": [
       {
        "type": "int",
        "name": "size"
       }
      ]
     },
     {
      "type": "float",
      "name": "getContractionCriteria",
      "params": []
     },
     {
      "type": "double",
      "name": "getElement",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "double",
      "name": "getElements",
      "params": []
     },
     {
      "type": "float",
      "name": "getExpansionFactor",
      "params": []
     },
     {
      "type": "int",
      "name": "getExpansionMode",
      "params": []
     },
     {
      "type": "int",
      "name": "getInternalLength",
      "params": []
     },
     {
      "type": "int",
      "name": "getNumElements",
      "params": []
     },
     {
      "type": "double",
      "name": "getValues",
      "params": []
     },
     {
      "type": null,
      "name": "setContractionCriteria",
      "params": [
       {
        "type": "float",
        "name": "contractionCriteria"
       }
      ]
     },
     {
      "type": null,
      "name": "setElement",
      "params": [
       {
        "type": "int",
        "name": "index"
       },
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": null,
      "name": "setExpansionFactor",
      "params": [
       {
        "type": "float",
        "name": "expansionFactor"
       }
      ]
     },
     {
      "type": null,
      "name": "setExpansionMode",
      "params": [
       {
        "type": "int",
        "name": "expansionMode"
       }
      ]
     },
     {
      "type": null,
      "name": "setInitialCapacity",
      "params": [
       {
        "type": "int",
        "name": "initialCapacity"
       }
      ]
     },
     {
      "type": null,
      "name": "setNumElements",
      "params": [
       {
        "type": "int",
        "name": "i"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "shouldContract",
      "params": []
     },
     {
      "type": "int",
      "name": "start",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "ResizableDoubleArray.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "NumberTransformer",
    "methods": [
     {
      "type": "double",
      "name": "transform",
      "params": [
       {
        "type": "Object",
        "name": "o"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "NumberTransformer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "DefaultTransformer",
    "methods": [
     {
      "type": "double",
      "name": "transform",
      "params": [
       {
        "type": "Object",
        "name": "o"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.util",
  "filename": "DefaultTransformer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "rho"
     },
     {
      "type": "double",
      "name": "khi"
     },
     {
      "type": "double",
      "name": "gamma"
     },
     {
      "type": "double",
      "name": "sigma"
     }
    ],
    "name": "NelderMead",
    "methods": [
     {
      "type": null,
      "name": "iterateSimplex",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "NelderMead.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Comparator",
      "name": "pointCostPairComparator"
     },
     {
      "type": "PointCostPair",
      "name": "simplex"
     },
     {
      "type": "CostFunction",
      "name": "f"
     },
     {
      "type": "int",
      "name": "evaluations"
     },
     {
      "type": "int",
      "name": "starts"
     },
     {
      "type": "RandomVectorGenerator",
      "name": "generator"
     },
     {
      "type": "PointCostPair",
      "name": "minima"
     }
    ],
    "name": "DirectSearchOptimizer",
    "methods": [
     {
      "type": "PointCostPair",
      "name": "minimize",
      "params": [
       {
        "type": "CostFunction",
        "name": "f"
       },
       {
        "type": "int",
        "name": "maxEvaluations"
       },
       {
        "type": "ConvergenceChecker",
        "name": "checker"
       },
       {
        "type": "double",
        "name": "vertexA"
       },
       {
        "type": "double",
        "name": "vertexB"
       }
      ]
     },
     {
      "type": "PointCostPair",
      "name": "minimize",
      "params": [
       {
        "type": "CostFunction",
        "name": "f"
       },
       {
        "type": "int",
        "name": "maxEvaluations"
       },
       {
        "type": "ConvergenceChecker",
        "name": "checker"
       },
       {
        "type": "double",
        "name": "vertexA"
       },
       {
        "type": "double",
        "name": "vertexB"
       },
       {
        "type": "int",
        "name": "starts"
       },
       {
        "type": "long",
        "name": "seed"
       }
      ]
     },
     {
      "type": "PointCostPair",
      "name": "minimize",
      "params": [
       {
        "type": "CostFunction",
        "name": "f"
       },
       {
        "type": "int",
        "name": "maxEvaluations"
       },
       {
        "type": "ConvergenceChecker",
        "name": "checker"
       },
       {
        "type": "double",
        "name": "vertices"
       }
      ]
     },
     {
      "type": "PointCostPair",
      "name": "minimize",
      "params": [
       {
        "type": "CostFunction",
        "name": "f"
       },
       {
        "type": "int",
        "name": "maxEvaluations"
       },
       {
        "type": "ConvergenceChecker",
        "name": "checker"
       },
       {
        "type": "double",
        "name": "vertices"
       },
       {
        "type": "int",
        "name": "starts"
       },
       {
        "type": "long",
        "name": "seed"
       }
      ]
     },
     {
      "type": "PointCostPair",
      "name": "minimize",
      "params": [
       {
        "type": "CostFunction",
        "name": "f"
       },
       {
        "type": "int",
        "name": "maxEvaluations"
       },
       {
        "type": "ConvergenceChecker",
        "name": "checker"
       },
       {
        "type": "RandomVectorGenerator",
        "name": "generator"
       }
      ]
     },
     {
      "type": "PointCostPair",
      "name": "minimize",
      "params": [
       {
        "type": "CostFunction",
        "name": "f"
       },
       {
        "type": "int",
        "name": "maxEvaluations"
       },
       {
        "type": "ConvergenceChecker",
        "name": "checker"
       },
       {
        "type": "RandomVectorGenerator",
        "name": "generator"
       },
       {
        "type": "int",
        "name": "starts"
       }
      ]
     },
     {
      "type": null,
      "name": "buildSimplex",
      "params": [
       {
        "type": "double",
        "name": "vertexA"
       },
       {
        "type": "double",
        "name": "vertexB"
       }
      ]
     },
     {
      "type": null,
      "name": "buildSimplex",
      "params": [
       {
        "type": "double",
        "name": "vertices"
       }
      ]
     },
     {
      "type": null,
      "name": "buildSimplex",
      "params": [
       {
        "type": "RandomVectorGenerator",
        "name": "generator"
       }
      ]
     },
     {
      "type": null,
      "name": "setSingleStart",
      "params": []
     },
     {
      "type": null,
      "name": "setMultiStart",
      "params": [
       {
        "type": "int",
        "name": "starts"
       },
       {
        "type": "RandomVectorGenerator",
        "name": "generator"
       }
      ]
     },
     {
      "type": "PointCostPair",
      "name": "getMinima",
      "params": []
     },
     {
      "type": "PointCostPair",
      "name": "minimize",
      "params": [
       {
        "type": "CostFunction",
        "name": "f"
       },
       {
        "type": "int",
        "name": "maxEvaluations"
       },
       {
        "type": "ConvergenceChecker",
        "name": "checker"
       }
      ]
     },
     {
      "type": null,
      "name": "iterateSimplex",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluateCost",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": null,
      "name": "evaluateSimplex",
      "params": []
     },
     {
      "type": null,
      "name": "replaceWorstPoint",
      "params": [
       {
        "type": "PointCostPair",
        "name": "pointCostPair"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "DirectSearchOptimizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "point"
     },
     {
      "type": "double",
      "name": "cost"
     }
    ],
    "name": "PointCostPair",
    "methods": [
     {
      "type": "double",
      "name": "getPoint",
      "params": []
     },
     {
      "type": "double",
      "name": "getCost",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "PointCostPair.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "khi"
     },
     {
      "type": "double",
      "name": "gamma"
     }
    ],
    "name": "MultiDirectional",
    "methods": [
     {
      "type": null,
      "name": "iterateSimplex",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluateNewSimplex",
      "params": [
       {
        "type": "PointCostPair",
        "name": "original"
       },
       {
        "type": "double",
        "name": "coeff"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "MultiDirectional.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "CostFunction",
    "methods": [
     {
      "type": "double",
      "name": "cost",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "CostFunction.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "CostException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "CostException.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ConvergenceChecker",
    "methods": [
     {
      "type": "boolean",
      "name": "converged",
      "params": [
       {
        "type": "PointCostPair",
        "name": "simplex"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.optimization",
  "filename": "ConvergenceChecker.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "Fraction",
      "name": "ONE"
     },
     {
      "type": "Fraction",
      "name": "ZERO"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "denominator"
     },
     {
      "type": "int",
      "name": "numerator"
     }
    ],
    "name": "Fraction",
    "methods": [
     {
      "type": "Fraction",
      "name": "abs",
      "params": []
     },
     {
      "type": "int",
      "name": "compareTo",
      "params": [
       {
        "type": "Fraction",
        "name": "object"
       }
      ]
     },
     {
      "type": "double",
      "name": "doubleValue",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ]
     },
     {
      "type": "float",
      "name": "floatValue",
      "params": []
     },
     {
      "type": "int",
      "name": "getDenominator",
      "params": []
     },
     {
      "type": "int",
      "name": "getNumerator",
      "params": []
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "int",
      "name": "intValue",
      "params": []
     },
     {
      "type": "long",
      "name": "longValue",
      "params": []
     },
     {
      "type": "Fraction",
      "name": "negate",
      "params": []
     },
     {
      "type": "Fraction",
      "name": "reciprocal",
      "params": []
     },
     {
      "type": "Fraction",
      "name": "add",
      "params": [
       {
        "type": "Fraction",
        "name": "fraction"
       }
      ]
     },
     {
      "type": "Fraction",
      "name": "subtract",
      "params": [
       {
        "type": "Fraction",
        "name": "fraction"
       }
      ]
     },
     {
      "type": "Fraction",
      "name": "addSub",
      "params": [
       {
        "type": "Fraction",
        "name": "fraction"
       },
       {
        "type": "boolean",
        "name": "isAdd"
       }
      ]
     },
     {
      "type": "Fraction",
      "name": "multiply",
      "params": [
       {
        "type": "Fraction",
        "name": "fraction"
       }
      ]
     },
     {
      "type": "Fraction",
      "name": "divide",
      "params": [
       {
        "type": "Fraction",
        "name": "fraction"
       }
      ]
     },
     {
      "type": "Fraction",
      "name": "getReducedFraction",
      "params": [
       {
        "type": "int",
        "name": "numerator"
       },
       {
        "type": "int",
        "name": "denominator"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.fraction",
  "filename": "Fraction.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "FractionConversionException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.fraction",
  "filename": "FractionConversionException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "NumberFormat",
      "name": "wholeFormat"
     }
    ],
    "name": "ProperFractionFormat",
    "methods": [
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "Fraction",
        "name": "fraction"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "NumberFormat",
      "name": "getWholeFormat",
      "params": []
     },
     {
      "type": "Fraction",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": null,
      "name": "setWholeFormat",
      "params": [
       {
        "type": "NumberFormat",
        "name": "format"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.fraction",
  "filename": "ProperFractionFormat.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "NumberFormat",
      "name": "denominatorFormat"
     },
     {
      "type": "NumberFormat",
      "name": "numeratorFormat"
     }
    ],
    "name": "FractionFormat",
    "methods": [
     {
      "type": "String",
      "name": "formatFraction",
      "params": [
       {
        "type": "Fraction",
        "name": "f"
       }
      ]
     },
     {
      "type": "Locale",
      "name": "getAvailableLocales",
      "params": []
     },
     {
      "type": "FractionFormat",
      "name": "getImproperInstance",
      "params": []
     },
     {
      "type": "FractionFormat",
      "name": "getImproperInstance",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "FractionFormat",
      "name": "getProperInstance",
      "params": []
     },
     {
      "type": "FractionFormat",
      "name": "getProperInstance",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "NumberFormat",
      "name": "getDefaultNumberFormat",
      "params": []
     },
     {
      "type": "NumberFormat",
      "name": "getDefaultNumberFormat",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "Fraction",
        "name": "fraction"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "Object",
        "name": "obj"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "NumberFormat",
      "name": "getDenominatorFormat",
      "params": []
     },
     {
      "type": "NumberFormat",
      "name": "getNumeratorFormat",
      "params": []
     },
     {
      "type": "Fraction",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       }
      ]
     },
     {
      "type": "Fraction",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "Object",
      "name": "parseObject",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": null,
      "name": "setDenominatorFormat",
      "params": [
       {
        "type": "NumberFormat",
        "name": "format"
       }
      ]
     },
     {
      "type": null,
      "name": "setNumeratorFormat",
      "params": [
       {
        "type": "NumberFormat",
        "name": "format"
       }
      ]
     },
     {
      "type": null,
      "name": "parseAndIgnoreWhitespace",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "char",
      "name": "parseNextCharacter",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.fraction",
  "filename": "FractionFormat.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "NevilleInterpolator",
    "methods": [
     {
      "type": "UnivariateRealFunction",
      "name": "interpolate",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "NevilleInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "coefficients"
     },
     {
      "type": "double",
      "name": "x"
     },
     {
      "type": "double",
      "name": "y"
     },
     {
      "type": "boolean",
      "name": "coefficientsComputed"
     }
    ],
    "name": "PolynomialFunctionLagrangeForm",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "z"
       }
      ]
     },
     {
      "type": "int",
      "name": "degree",
      "params": []
     },
     {
      "type": "double",
      "name": "getInterpolatingPoints",
      "params": []
     },
     {
      "type": "double",
      "name": "getInterpolatingValues",
      "params": []
     },
     {
      "type": "double",
      "name": "getCoefficients",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "z"
       }
      ]
     },
     {
      "type": null,
      "name": "computeCoefficients",
      "params": []
     },
     {
      "type": null,
      "name": "verifyInterpolationArray",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "PolynomialFunctionLagrangeForm.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "UnivariateRealSolverFactory",
      "name": "factory"
     }
    ],
    "name": "UnivariateRealSolverUtils",
    "methods": [
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "x0"
       },
       {
        "type": "double",
        "name": "x1"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       },
       {
        "type": "double",
        "name": "x0"
       },
       {
        "type": "double",
        "name": "x1"
       },
       {
        "type": "double",
        "name": "absoluteAccuracy"
       }
      ]
     },
     {
      "type": "double",
      "name": "bracket",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "function"
       },
       {
        "type": "double",
        "name": "initial"
       },
       {
        "type": "double",
        "name": "lowerBound"
       },
       {
        "type": "double",
        "name": "upperBound"
       }
      ]
     },
     {
      "type": "double",
      "name": "bracket",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "function"
       },
       {
        "type": "double",
        "name": "initial"
       },
       {
        "type": "double",
        "name": "lowerBound"
       },
       {
        "type": "double",
        "name": "upperBound"
       },
       {
        "type": "int",
        "name": "maximumIterations"
       }
      ]
     },
     {
      "type": "double",
      "name": "midpoint",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "b"
       }
      ]
     },
     {
      "type": null,
      "name": "setup",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "UnivariateRealSolverUtils.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "relativeAccuracy"
     },
     {
      "type": "int",
      "name": "maximalIterationCount"
     },
     {
      "type": "int",
      "name": "minimalIterationCount"
     },
     {
      "type": "double",
      "name": "defaultRelativeAccuracy"
     },
     {
      "type": "int",
      "name": "defaultMaximalIterationCount"
     },
     {
      "type": "int",
      "name": "defaultMinimalIterationCount"
     },
     {
      "type": "boolean",
      "name": "resultComputed"
     },
     {
      "type": "double",
      "name": "result"
     },
     {
      "type": "int",
      "name": "iterationCount"
     },
     {
      "type": "UnivariateRealFunction",
      "name": "f"
     }
    ],
    "name": "UnivariateRealIntegratorImpl",
    "methods": [
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "int",
      "name": "getIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "setResult",
      "params": [
       {
        "type": "double",
        "name": "result"
       },
       {
        "type": "int",
        "name": "iterationCount"
       }
      ]
     },
     {
      "type": null,
      "name": "clearResult",
      "params": []
     },
     {
      "type": null,
      "name": "setMaximalIterationCount",
      "params": [
       {
        "type": "int",
        "name": "count"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMaximalIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "resetMaximalIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "setMinimalIterationCount",
      "params": [
       {
        "type": "int",
        "name": "count"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMinimalIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "resetMinimalIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "setRelativeAccuracy",
      "params": [
       {
        "type": "double",
        "name": "accuracy"
       }
      ]
     },
     {
      "type": "double",
      "name": "getRelativeAccuracy",
      "params": []
     },
     {
      "type": null,
      "name": "resetRelativeAccuracy",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isSequence",
      "params": [
       {
        "type": "double",
        "name": "start"
       },
       {
        "type": "double",
        "name": "mid"
       },
       {
        "type": "double",
        "name": "end"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyInterval",
      "params": [
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "upper"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyIterationCount",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "UnivariateRealIntegratorImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "BrentSolver",
    "methods": [
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "double",
        "name": "initial"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "x0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "x1"
       },
       {
        "type": "double",
        "name": "y1"
       },
       {
        "type": "double",
        "name": "x2"
       },
       {
        "type": "double",
        "name": "y2"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "BrentSolver.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "coefficients"
     },
     {
      "type": "double",
      "name": "a"
     },
     {
      "type": "double",
      "name": "c"
     },
     {
      "type": "boolean",
      "name": "coefficientsComputed"
     }
    ],
    "name": "PolynomialFunctionNewtonForm",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "z"
       }
      ]
     },
     {
      "type": "int",
      "name": "degree",
      "params": []
     },
     {
      "type": "double",
      "name": "getNewtonCoefficients",
      "params": []
     },
     {
      "type": "double",
      "name": "getCenters",
      "params": []
     },
     {
      "type": "double",
      "name": "getCoefficients",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "c"
       },
       {
        "type": "double",
        "name": "z"
       }
      ]
     },
     {
      "type": null,
      "name": "computeCoefficients",
      "params": []
     },
     {
      "type": null,
      "name": "verifyInputArray",
      "params": [
       {
        "type": "double",
        "name": "a"
       },
       {
        "type": "double",
        "name": "c"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "PolynomialFunctionNewtonForm.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "DifferentiableUnivariateRealFunction",
    "methods": [
     {
      "type": "UnivariateRealFunction",
      "name": "derivative",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "DifferentiableUnivariateRealFunction.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "RombergIntegrator",
    "methods": [
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyIterationCount",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "RombergIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "PolynomialFunction",
      "name": "p"
     }
    ],
    "name": "LaguerreSolver",
    "methods": [
     {
      "type": "PolynomialFunction",
      "name": "getPolynomialFunction",
      "params": []
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "double",
        "name": "initial"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isRootOK",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "Complex",
        "name": "z"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "solveAll",
      "params": [
       {
        "type": "double",
        "name": "coefficients"
       },
       {
        "type": "double",
        "name": "initial"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "solveAll",
      "params": [
       {
        "type": "Complex",
        "name": "coefficients"
       },
       {
        "type": "Complex",
        "name": "initial"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "solve",
      "params": [
       {
        "type": "Complex",
        "name": "coefficients"
       },
       {
        "type": "Complex",
        "name": "initial"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "LaguerreSolver.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "SecantSolver",
    "methods": [
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "double",
        "name": "initial"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "SecantSolver.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "absoluteAccuracy"
     },
     {
      "type": "double",
      "name": "relativeAccuracy"
     },
     {
      "type": "double",
      "name": "functionValueAccuracy"
     },
     {
      "type": "int",
      "name": "maximalIterationCount"
     },
     {
      "type": "double",
      "name": "defaultAbsoluteAccuracy"
     },
     {
      "type": "double",
      "name": "defaultRelativeAccuracy"
     },
     {
      "type": "double",
      "name": "defaultFunctionValueAccuracy"
     },
     {
      "type": "int",
      "name": "defaultMaximalIterationCount"
     },
     {
      "type": "boolean",
      "name": "resultComputed"
     },
     {
      "type": "double",
      "name": "result"
     },
     {
      "type": "int",
      "name": "iterationCount"
     },
     {
      "type": "UnivariateRealFunction",
      "name": "f"
     }
    ],
    "name": "UnivariateRealSolverImpl",
    "methods": [
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "int",
      "name": "getIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "setResult",
      "params": [
       {
        "type": "double",
        "name": "result"
       },
       {
        "type": "int",
        "name": "iterationCount"
       }
      ]
     },
     {
      "type": null,
      "name": "clearResult",
      "params": []
     },
     {
      "type": null,
      "name": "setAbsoluteAccuracy",
      "params": [
       {
        "type": "double",
        "name": "accuracy"
       }
      ]
     },
     {
      "type": "double",
      "name": "getAbsoluteAccuracy",
      "params": []
     },
     {
      "type": null,
      "name": "resetAbsoluteAccuracy",
      "params": []
     },
     {
      "type": null,
      "name": "setMaximalIterationCount",
      "params": [
       {
        "type": "int",
        "name": "count"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMaximalIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "resetMaximalIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "setRelativeAccuracy",
      "params": [
       {
        "type": "double",
        "name": "accuracy"
       }
      ]
     },
     {
      "type": "double",
      "name": "getRelativeAccuracy",
      "params": []
     },
     {
      "type": null,
      "name": "resetRelativeAccuracy",
      "params": []
     },
     {
      "type": null,
      "name": "setFunctionValueAccuracy",
      "params": [
       {
        "type": "double",
        "name": "accuracy"
       }
      ]
     },
     {
      "type": "double",
      "name": "getFunctionValueAccuracy",
      "params": []
     },
     {
      "type": null,
      "name": "resetFunctionValueAccuracy",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isBracketing",
      "params": [
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "upper"
       },
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isSequence",
      "params": [
       {
        "type": "double",
        "name": "start"
       },
       {
        "type": "double",
        "name": "mid"
       },
       {
        "type": "double",
        "name": "end"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyInterval",
      "params": [
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "upper"
       }
      ]
     },
     {
      "type": null,
      "name": "verifySequence",
      "params": [
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "initial"
       },
       {
        "type": "double",
        "name": "upper"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyBracketing",
      "params": [
       {
        "type": "double",
        "name": "lower"
       },
       {
        "type": "double",
        "name": "upper"
       },
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "UnivariateRealSolverImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "s"
     }
    ],
    "name": "TrapezoidIntegrator",
    "methods": [
     {
      "type": "double",
      "name": "stage",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "int",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyIterationCount",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "TrapezoidIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "UnivariateRealSolver",
    "methods": [
     {
      "type": null,
      "name": "setMaximalIterationCount",
      "params": [
       {
        "type": "int",
        "name": "count"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMaximalIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "resetMaximalIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "setAbsoluteAccuracy",
      "params": [
       {
        "type": "double",
        "name": "accuracy"
       }
      ]
     },
     {
      "type": "double",
      "name": "getAbsoluteAccuracy",
      "params": []
     },
     {
      "type": null,
      "name": "resetAbsoluteAccuracy",
      "params": []
     },
     {
      "type": null,
      "name": "setRelativeAccuracy",
      "params": [
       {
        "type": "double",
        "name": "accuracy"
       }
      ]
     },
     {
      "type": "double",
      "name": "getRelativeAccuracy",
      "params": []
     },
     {
      "type": null,
      "name": "resetRelativeAccuracy",
      "params": []
     },
     {
      "type": null,
      "name": "setFunctionValueAccuracy",
      "params": [
       {
        "type": "double",
        "name": "accuracy"
       }
      ]
     },
     {
      "type": "double",
      "name": "getFunctionValueAccuracy",
      "params": []
     },
     {
      "type": null,
      "name": "resetFunctionValueAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "double",
        "name": "startValue"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "int",
      "name": "getIterationCount",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "UnivariateRealSolver.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "SplineInterpolator",
    "methods": [
     {
      "type": "UnivariateRealFunction",
      "name": "interpolate",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "SplineInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "UnivariateRealFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "UnivariateRealFunction.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "coefficients"
     }
    ],
    "name": "PolynomialFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "int",
      "name": "degree",
      "params": []
     },
     {
      "type": "double",
      "name": "getCoefficients",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "coefficients"
       },
       {
        "type": "double",
        "name": "argument"
       }
      ]
     },
     {
      "type": "double",
      "name": "differentiate",
      "params": [
       {
        "type": "double",
        "name": "coefficients"
       }
      ]
     },
     {
      "type": "PolynomialFunction",
      "name": "polynomialDerivative",
      "params": []
     },
     {
      "type": "UnivariateRealFunction",
      "name": "derivative",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "PolynomialFunction.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "UnivariateRealFunction",
      "name": "derivative"
     }
    ],
    "name": "NewtonSolver",
    "methods": [
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "double",
        "name": "startValue"
       }
      ]
     },
     {
      "type": null,
      "name": "readObject",
      "params": [
       {
        "type": "java",
        "name": "in"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "NewtonSolver.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "SimpsonIntegrator",
    "methods": [
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": null,
      "name": "verifyIterationCount",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "SimpsonIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "BisectionSolver",
    "methods": [
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "double",
        "name": "initial"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "BisectionSolver.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "knots"
     },
     {
      "type": "PolynomialFunction",
      "name": "polynomials"
     },
     {
      "type": "int",
      "name": "n"
     }
    ],
    "name": "PolynomialSplineFunction",
    "methods": [
     {
      "type": "double",
      "name": "value",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "UnivariateRealFunction",
      "name": "derivative",
      "params": []
     },
     {
      "type": "PolynomialSplineFunction",
      "name": "polynomialSplineDerivative",
      "params": []
     },
     {
      "type": "int",
      "name": "getN",
      "params": []
     },
     {
      "type": "PolynomialFunction",
      "name": "getPolynomials",
      "params": []
     },
     {
      "type": "double",
      "name": "getKnots",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isStrictlyIncreasing",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "PolynomialSplineFunction.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "UnivariateRealSolverFactoryImpl",
    "methods": [
     {
      "type": "UnivariateRealSolver",
      "name": "newDefaultSolver",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       }
      ]
     },
     {
      "type": "UnivariateRealSolver",
      "name": "newBisectionSolver",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       }
      ]
     },
     {
      "type": "UnivariateRealSolver",
      "name": "newBrentSolver",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       }
      ]
     },
     {
      "type": "UnivariateRealSolver",
      "name": "newNewtonSolver",
      "params": [
       {
        "type": "DifferentiableUnivariateRealFunction",
        "name": "f"
       }
      ]
     },
     {
      "type": "UnivariateRealSolver",
      "name": "newSecantSolver",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "UnivariateRealSolverFactoryImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "UnivariateRealIntegrator",
    "methods": [
     {
      "type": null,
      "name": "setMaximalIterationCount",
      "params": [
       {
        "type": "int",
        "name": "count"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMaximalIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "resetMaximalIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "setMinimalIterationCount",
      "params": [
       {
        "type": "int",
        "name": "count"
       }
      ]
     },
     {
      "type": "int",
      "name": "getMinimalIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "resetMinimalIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "setRelativeAccuracy",
      "params": [
       {
        "type": "double",
        "name": "accuracy"
       }
      ]
     },
     {
      "type": "double",
      "name": "getRelativeAccuracy",
      "params": []
     },
     {
      "type": null,
      "name": "resetRelativeAccuracy",
      "params": []
     },
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "int",
      "name": "getIterationCount",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "UnivariateRealIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "DividedDifferenceInterpolator",
    "methods": [
     {
      "type": "UnivariateRealFunction",
      "name": "interpolate",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "computeDividedDifference",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "DividedDifferenceInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "UnivariateRealSolverFactory",
    "methods": [
     {
      "type": "UnivariateRealSolverFactory",
      "name": "newInstance",
      "params": []
     },
     {
      "type": "UnivariateRealSolver",
      "name": "newDefaultSolver",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       }
      ]
     },
     {
      "type": "UnivariateRealSolver",
      "name": "newBisectionSolver",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       }
      ]
     },
     {
      "type": "UnivariateRealSolver",
      "name": "newBrentSolver",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       }
      ]
     },
     {
      "type": "UnivariateRealSolver",
      "name": "newNewtonSolver",
      "params": [
       {
        "type": "DifferentiableUnivariateRealFunction",
        "name": "f"
       }
      ]
     },
     {
      "type": "UnivariateRealSolver",
      "name": "newSecantSolver",
      "params": [
       {
        "type": "UnivariateRealFunction",
        "name": "f"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "UnivariateRealSolverFactory.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "RiddersSolver",
    "methods": [
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "double",
        "name": "initial"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "RiddersSolver.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "UnivariateRealInterpolator",
    "methods": [
     {
      "type": "UnivariateRealFunction",
      "name": "interpolate",
      "params": [
       {
        "type": "double",
        "name": "xval"
       },
       {
        "type": "double",
        "name": "yval"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "UnivariateRealInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "MullerSolver",
    "methods": [
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       },
       {
        "type": "double",
        "name": "initial"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     },
     {
      "type": "double",
      "name": "solve2",
      "params": [
       {
        "type": "double",
        "name": "min"
       },
       {
        "type": "double",
        "name": "max"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.analysis",
  "filename": "MullerSolver.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "Complex",
      "name": "I"
     },
     {
      "type": "Complex",
      "name": "NaN"
     },
     {
      "type": "Complex",
      "name": "INF"
     },
     {
      "type": "Complex",
      "name": "ONE"
     },
     {
      "type": "Complex",
      "name": "ZERO"
     },
     {
      "type": "double",
      "name": "imaginary"
     },
     {
      "type": "double",
      "name": "real"
     }
    ],
    "name": "Complex",
    "methods": [
     {
      "type": "double",
      "name": "abs",
      "params": []
     },
     {
      "type": "Complex",
      "name": "add",
      "params": [
       {
        "type": "Complex",
        "name": "rhs"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "conjugate",
      "params": []
     },
     {
      "type": "Complex",
      "name": "divide",
      "params": [
       {
        "type": "Complex",
        "name": "rhs"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "other"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "double",
      "name": "getImaginary",
      "params": []
     },
     {
      "type": "double",
      "name": "getReal",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isNaN",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isInfinite",
      "params": []
     },
     {
      "type": "Complex",
      "name": "multiply",
      "params": [
       {
        "type": "Complex",
        "name": "rhs"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "negate",
      "params": []
     },
     {
      "type": "Complex",
      "name": "subtract",
      "params": [
       {
        "type": "Complex",
        "name": "rhs"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "acos",
      "params": []
     },
     {
      "type": "Complex",
      "name": "asin",
      "params": []
     },
     {
      "type": "Complex",
      "name": "atan",
      "params": []
     },
     {
      "type": "Complex",
      "name": "cos",
      "params": []
     },
     {
      "type": "Complex",
      "name": "cosh",
      "params": []
     },
     {
      "type": "Complex",
      "name": "exp",
      "params": []
     },
     {
      "type": "Complex",
      "name": "log",
      "params": []
     },
     {
      "type": "Complex",
      "name": "pow",
      "params": [
       {
        "type": "Complex",
        "name": "x"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "sin",
      "params": []
     },
     {
      "type": "Complex",
      "name": "sinh",
      "params": []
     },
     {
      "type": "Complex",
      "name": "sqrt",
      "params": []
     },
     {
      "type": "Complex",
      "name": "sqrt1z",
      "params": []
     },
     {
      "type": "Complex",
      "name": "tan",
      "params": []
     },
     {
      "type": "Complex",
      "name": "tanh",
      "params": []
     },
     {
      "type": "Complex",
      "name": "createComplex",
      "params": [
       {
        "type": "double",
        "name": "real"
       },
       {
        "type": "double",
        "name": "imaginary"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.complex",
  "filename": "Complex.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ComplexUtils",
    "methods": [
     {
      "type": "Complex",
      "name": "polar2Complex",
      "params": [
       {
        "type": "double",
        "name": "r"
       },
       {
        "type": "double",
        "name": "theta"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.complex",
  "filename": "ComplexUtils.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "DEFAULT_IMAGINARY_CHARACTER"
     },
     {
      "type": "String",
      "name": "imaginaryCharacter"
     },
     {
      "type": "NumberFormat",
      "name": "imaginaryFormat"
     },
     {
      "type": "NumberFormat",
      "name": "realFormat"
     }
    ],
    "name": "ComplexFormat",
    "methods": [
     {
      "type": "Locale",
      "name": "getAvailableLocales",
      "params": []
     },
     {
      "type": "String",
      "name": "formatComplex",
      "params": [
       {
        "type": "Complex",
        "name": "c"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "Complex",
        "name": "complex"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "StringBuffer",
      "name": "format",
      "params": [
       {
        "type": "Object",
        "name": "obj"
       },
       {
        "type": "StringBuffer",
        "name": "toAppendTo"
       },
       {
        "type": "FieldPosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "String",
      "name": "getImaginaryCharacter",
      "params": []
     },
     {
      "type": "NumberFormat",
      "name": "getImaginaryFormat",
      "params": []
     },
     {
      "type": "ComplexFormat",
      "name": "getInstance",
      "params": []
     },
     {
      "type": "ComplexFormat",
      "name": "getInstance",
      "params": [
       {
        "type": "Locale",
        "name": "locale"
       }
      ]
     },
     {
      "type": "NumberFormat",
      "name": "getRealFormat",
      "params": []
     },
     {
      "type": "Complex",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       }
      ]
     },
     {
      "type": "Complex",
      "name": "parse",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": "Object",
      "name": "parseObject",
      "params": [
       {
        "type": "String",
        "name": "source"
       },
       {
        "type": "ParsePosition",
        "name": "pos"
       }
      ]
     },
     {
      "type": null,
      "name": "setImaginaryCharacter",
      "params": [
       {
        "type": "String",
        "name": "imaginaryCharacter"
       }
      ]
     },
     {
      "type": null,
      "name": "setImaginaryFormat",
      "params": [
       {
        "type": "NumberFormat",
        "name": "imaginaryFormat"
       }
      ]
     },
     {
      "type": null,
      "name": "setRealFormat",
      "params": [
       {
        "type": "NumberFormat",
        "name": "realFormat"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.complex",
  "filename": "ComplexFormat.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "TreeMap",
      "name": "freqTable"
     }
    ],
    "name": "Frequency",
    "methods": [
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "Object",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "int",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "Integer",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "long",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "char",
        "name": "v"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "Iterator",
      "name": "valuesIterator",
      "params": []
     },
     {
      "type": "long",
      "name": "getSumFreq",
      "params": []
     },
     {
      "type": "long",
      "name": "getCount",
      "params": [
       {
        "type": "Object",
        "name": "v"
       }
      ]
     },
     {
      "type": "long",
      "name": "getCount",
      "params": [
       {
        "type": "int",
        "name": "v"
       }
      ]
     },
     {
      "type": "long",
      "name": "getCount",
      "params": [
       {
        "type": "long",
        "name": "v"
       }
      ]
     },
     {
      "type": "long",
      "name": "getCount",
      "params": [
       {
        "type": "char",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getPct",
      "params": [
       {
        "type": "Object",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getPct",
      "params": [
       {
        "type": "int",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getPct",
      "params": [
       {
        "type": "long",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getPct",
      "params": [
       {
        "type": "char",
        "name": "v"
       }
      ]
     },
     {
      "type": "long",
      "name": "getCumFreq",
      "params": [
       {
        "type": "Object",
        "name": "v"
       }
      ]
     },
     {
      "type": "long",
      "name": "getCumFreq",
      "params": [
       {
        "type": "int",
        "name": "v"
       }
      ]
     },
     {
      "type": "long",
      "name": "getCumFreq",
      "params": [
       {
        "type": "long",
        "name": "v"
       }
      ]
     },
     {
      "type": "long",
      "name": "getCumFreq",
      "params": [
       {
        "type": "char",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getCumPct",
      "params": [
       {
        "type": "Object",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getCumPct",
      "params": [
       {
        "type": "int",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getCumPct",
      "params": [
       {
        "type": "long",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getCumPct",
      "params": [
       {
        "type": "char",
        "name": "v"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat",
  "filename": "Frequency.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "UnivariateStatistic",
      "name": "sum"
     },
     {
      "type": "UnivariateStatistic",
      "name": "sumSq"
     },
     {
      "type": "UnivariateStatistic",
      "name": "prod"
     },
     {
      "type": "UnivariateStatistic",
      "name": "sumLog"
     },
     {
      "type": "UnivariateStatistic",
      "name": "min"
     },
     {
      "type": "UnivariateStatistic",
      "name": "max"
     },
     {
      "type": "UnivariateStatistic",
      "name": "mean"
     },
     {
      "type": "Variance",
      "name": "variance"
     },
     {
      "type": "Percentile",
      "name": "percentile"
     },
     {
      "type": "GeometricMean",
      "name": "geometricMean"
     }
    ],
    "name": "StatUtils",
    "methods": [
     {
      "type": "double",
      "name": "sum",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "sum",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "sumSq",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "sumSq",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "product",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "product",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "sumLog",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "sumLog",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "mean",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "mean",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "geometricMean",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "geometricMean",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "variance",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "variance",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "variance",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "mean"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "variance",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "double",
      "name": "max",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "max",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "min",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "min",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "percentile",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "percentile",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       },
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "sumDifference",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "meanDifference",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "varianceDifference",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "meanDifference"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat",
  "filename": "StatUtils.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "StatisticalSummary",
    "methods": [
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getSum",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "StatisticalSummary.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "AbstractUnivariateStatistic",
    "methods": [
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "test",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "AbstractUnivariateStatistic.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "UnivariateStatistic",
    "methods": [
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "UnivariateStatistic.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "SynchronizedDescriptiveStatistics",
    "methods": [
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "apply",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "stat"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "getElement",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "double",
      "name": "getValues",
      "params": []
     },
     {
      "type": "int",
      "name": "getWindowSize",
      "params": []
     },
     {
      "type": null,
      "name": "setWindowSize",
      "params": [
       {
        "type": "int",
        "name": "windowSize"
       }
      ]
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "SynchronizedDescriptiveStatistics.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "StatisticalMultivariateSummary",
    "methods": [
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getCovariance",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getGeometricMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getSum",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumSq",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumLog",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "StatisticalMultivariateSummary.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "StorelessUnivariateStatistic",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": null,
      "name": "incrementAll",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": null,
      "name": "incrementAll",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "start"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "StorelessUnivariateStatistic.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "k"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "sumImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "sumSqImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "minImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "maxImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "sumLogImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "geoMeanImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "meanImpl"
     },
     {
      "type": "VectorialCovariance",
      "name": "covarianceImpl"
     }
    ],
    "name": "MultivariateSummaryStatistics",
    "methods": [
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getResults",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "stats"
       }
      ]
     },
     {
      "type": "double",
      "name": "getSum",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumSq",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumLog",
      "params": []
     },
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getCovariance",
      "params": []
     },
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "double",
      "name": "getGeometricMean",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": null,
      "name": "append",
      "params": [
       {
        "type": "StringBuffer",
        "name": "buffer"
       },
       {
        "type": "double",
        "name": "data"
       },
       {
        "type": "String",
        "name": "prefix"
       },
       {
        "type": "String",
        "name": "separator"
       },
       {
        "type": "String",
        "name": "suffix"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "object"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": null,
      "name": "setImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "newImpl"
       },
       {
        "type": "StorelessUnivariateStatistic",
        "name": "oldImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumsqImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumsqImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumsqImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMinImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMinImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "minImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMaxImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMaxImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "maxImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumLogImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumLogImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumLogImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getGeoMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setGeoMeanImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "geoMeanImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMeanImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "meanImpl"
       }
      ]
     },
     {
      "type": null,
      "name": "checkEmpty",
      "params": []
     },
     {
      "type": null,
      "name": "checkDimension",
      "params": [
       {
        "type": "int",
        "name": "dimension"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "MultivariateSummaryStatistics.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "windowSize"
     },
     {
      "type": "ResizableDoubleArray",
      "name": "eDA"
     },
     {
      "type": "UnivariateStatistic",
      "name": "meanImpl"
     },
     {
      "type": "UnivariateStatistic",
      "name": "geometricMeanImpl"
     },
     {
      "type": "UnivariateStatistic",
      "name": "kurtosisImpl"
     },
     {
      "type": "UnivariateStatistic",
      "name": "maxImpl"
     },
     {
      "type": "UnivariateStatistic",
      "name": "minImpl"
     },
     {
      "type": "UnivariateStatistic",
      "name": "percentileImpl"
     },
     {
      "type": "UnivariateStatistic",
      "name": "skewnessImpl"
     },
     {
      "type": "UnivariateStatistic",
      "name": "varianceImpl"
     },
     {
      "type": "UnivariateStatistic",
      "name": "sumsqImpl"
     },
     {
      "type": "UnivariateStatistic",
      "name": "sumImpl"
     },
     {
      "type": "int",
      "name": "INFINITE_WINDOW"
     }
    ],
    "name": "DescriptiveStatistics",
    "methods": [
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getGeometricMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "double",
      "name": "getSkewness",
      "params": []
     },
     {
      "type": "double",
      "name": "getKurtosis",
      "params": []
     },
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getSum",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumsq",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "int",
      "name": "getWindowSize",
      "params": []
     },
     {
      "type": null,
      "name": "setWindowSize",
      "params": [
       {
        "type": "int",
        "name": "windowSize"
       }
      ]
     },
     {
      "type": "double",
      "name": "getValues",
      "params": []
     },
     {
      "type": "double",
      "name": "getSortedValues",
      "params": []
     },
     {
      "type": "double",
      "name": "getElement",
      "params": [
       {
        "type": "int",
        "name": "index"
       }
      ]
     },
     {
      "type": "double",
      "name": "getPercentile",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": "double",
      "name": "apply",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "stat"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMeanImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "meanImpl"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getGeometricMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setGeometricMeanImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "geometricMeanImpl"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getKurtosisImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setKurtosisImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "kurtosisImpl"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getMaxImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMaxImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "maxImpl"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getMinImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMinImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "minImpl"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getPercentileImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setPercentileImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "percentileImpl"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getSkewnessImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSkewnessImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "skewnessImpl"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getVarianceImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setVarianceImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "varianceImpl"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getSumsqImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumsqImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "sumsqImpl"
       }
      ]
     },
     {
      "type": "UnivariateStatistic",
      "name": "getSumImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumImpl",
      "params": [
       {
        "type": "UnivariateStatistic",
        "name": "sumImpl"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "DescriptiveStatistics.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "SecondMoment",
      "name": "secondMoment"
     },
     {
      "type": "Sum",
      "name": "sum"
     },
     {
      "type": "SumOfSquares",
      "name": "sumsq"
     },
     {
      "type": "Min",
      "name": "min"
     },
     {
      "type": "Max",
      "name": "max"
     },
     {
      "type": "SumOfLogs",
      "name": "sumLog"
     },
     {
      "type": "GeometricMean",
      "name": "geoMean"
     },
     {
      "type": "Mean",
      "name": "mean"
     },
     {
      "type": "Variance",
      "name": "variance"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "sumImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "sumsqImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "minImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "maxImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "sumLogImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "geoMeanImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "meanImpl"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "varianceImpl"
     }
    ],
    "name": "SummaryStatistics",
    "methods": [
     {
      "type": "StatisticalSummary",
      "name": "getSummary",
      "params": []
     },
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getSum",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumsq",
      "params": []
     },
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "double",
      "name": "getVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "double",
      "name": "getGeometricMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumOfLogs",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "object"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumsqImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumsqImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumsqImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMinImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMinImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "minImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMaxImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMaxImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "maxImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumLogImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumLogImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumLogImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getGeoMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setGeoMeanImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "geoMeanImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMeanImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "meanImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getVarianceImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setVarianceImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "varianceImpl"
       }
      ]
     },
     {
      "type": null,
      "name": "checkEmpty",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "SummaryStatistics.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "SynchronizedMultivariateSummaryStatistics",
    "methods": [
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getSum",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumSq",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumLog",
      "params": []
     },
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "getCovariance",
      "params": []
     },
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "double",
      "name": "getGeometricMean",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "object"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumsqImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumsqImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumsqImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMinImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMinImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "minImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMaxImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMaxImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "maxImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumLogImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumLogImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumLogImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getGeoMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setGeoMeanImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "geoMeanImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMeanImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "meanImpl"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "SynchronizedMultivariateSummaryStatistics.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "SynchronizedSummaryStatistics",
    "methods": [
     {
      "type": "StatisticalSummary",
      "name": "getSummary",
      "params": []
     },
     {
      "type": null,
      "name": "addValue",
      "params": [
       {
        "type": "double",
        "name": "value"
       }
      ]
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getSum",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumsq",
      "params": []
     },
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "double",
      "name": "getVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "double",
      "name": "getGeometricMean",
      "params": []
     },
     {
      "type": "String",
      "name": "toString",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "object"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumsqImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumsqImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumsqImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMinImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMinImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "minImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMaxImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMaxImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "maxImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumLogImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setSumLogImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumLogImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getGeoMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setGeoMeanImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "geoMeanImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getMeanImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setMeanImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "meanImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getVarianceImpl",
      "params": []
     },
     {
      "type": null,
      "name": "setVarianceImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "varianceImpl"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "SynchronizedSummaryStatistics.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "mean"
     },
     {
      "type": "double",
      "name": "variance"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "double",
      "name": "max"
     },
     {
      "type": "double",
      "name": "min"
     },
     {
      "type": "double",
      "name": "sum"
     }
    ],
    "name": "StatisticalSummaryValues",
    "methods": [
     {
      "type": "double",
      "name": "getMax",
      "params": []
     },
     {
      "type": "double",
      "name": "getMean",
      "params": []
     },
     {
      "type": "double",
      "name": "getMin",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getSum",
      "params": []
     },
     {
      "type": "double",
      "name": "getStandardDeviation",
      "params": []
     },
     {
      "type": "double",
      "name": "getVariance",
      "params": []
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "object"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "StatisticalSummaryValues.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "AbstractStorelessUnivariateStatistic",
    "methods": [
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": null,
      "name": "incrementAll",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": null,
      "name": "incrementAll",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "equals",
      "params": [
       {
        "type": "Object",
        "name": "object"
       }
      ]
     },
     {
      "type": "int",
      "name": "hashCode",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive",
  "filename": "AbstractStorelessUnivariateStatistic.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "m3"
     },
     {
      "type": "double",
      "name": "nDevSq"
     }
    ],
    "name": "ThirdMoment",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "ThirdMoment.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "Mean",
      "name": "means"
     }
    ],
    "name": "VectorialMean",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "VectorialMean.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "sums"
     },
     {
      "type": "double",
      "name": "productsSums"
     },
     {
      "type": "boolean",
      "name": "isBiasCorrected"
     },
     {
      "type": "long",
      "name": "n"
     }
    ],
    "name": "VectorialCovariance",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "v"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "VectorialCovariance.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "SecondMoment",
      "name": "moment"
     },
     {
      "type": "boolean",
      "name": "incMoment"
     },
     {
      "type": "boolean",
      "name": "isBiasCorrected"
     }
    ],
    "name": "Variance",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "mean"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isBiasCorrected",
      "params": []
     },
     {
      "type": null,
      "name": "setBiasCorrected",
      "params": [
       {
        "type": "boolean",
        "name": "isBiasCorrected"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "Variance.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "m4"
     }
    ],
    "name": "FourthMoment",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "FourthMoment.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "FourthMoment",
      "name": "moment"
     },
     {
      "type": "boolean",
      "name": "incMoment"
     }
    ],
    "name": "Kurtosis",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "Kurtosis.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "ThirdMoment",
      "name": "moment"
     },
     {
      "type": "boolean",
      "name": "incMoment"
     }
    ],
    "name": "Skewness",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "Skewness.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "double",
      "name": "m1"
     },
     {
      "type": "double",
      "name": "dev"
     },
     {
      "type": "double",
      "name": "nDev"
     }
    ],
    "name": "FirstMoment",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "FirstMoment.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "m2"
     }
    ],
    "name": "SecondMoment",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "SecondMoment.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "Variance",
      "name": "variance"
     }
    ],
    "name": "StandardDeviation",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "mean"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "mean"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isBiasCorrected",
      "params": []
     },
     {
      "type": null,
      "name": "setBiasCorrected",
      "params": [
       {
        "type": "boolean",
        "name": "isBiasCorrected"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "StandardDeviation.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "FirstMoment",
      "name": "moment"
     },
     {
      "type": "boolean",
      "name": "incMoment"
     }
    ],
    "name": "Mean",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "Mean.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "sumOfLogs"
     }
    ],
    "name": "GeometricMean",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": null,
      "name": "setSumLogImpl",
      "params": [
       {
        "type": "StorelessUnivariateStatistic",
        "name": "sumLogImpl"
       }
      ]
     },
     {
      "type": "StorelessUnivariateStatistic",
      "name": "getSumLogImpl",
      "params": []
     },
     {
      "type": null,
      "name": "checkEmpty",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.moment",
  "filename": "GeometricMean.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "double",
      "name": "value"
     }
    ],
    "name": "Max",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.rank",
  "filename": "Max.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "Median",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.rank",
  "filename": "Median.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "double",
      "name": "value"
     }
    ],
    "name": "Min",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.rank",
  "filename": "Min.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "quantile"
     }
    ],
    "name": "Percentile",
    "methods": [
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "start"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       },
       {
        "type": "double",
        "name": "p"
       }
      ]
     },
     {
      "type": "double",
      "name": "getQuantile",
      "params": []
     },
     {
      "type": null,
      "name": "setQuantile",
      "params": [
       {
        "type": "double",
        "name": "p"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.rank",
  "filename": "Percentile.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "double",
      "name": "value"
     }
    ],
    "name": "Product",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.summary",
  "filename": "Product.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "double",
      "name": "value"
     }
    ],
    "name": "SumOfSquares",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.summary",
  "filename": "SumOfSquares.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "double",
      "name": "value"
     }
    ],
    "name": "Sum",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.summary",
  "filename": "Sum.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "int",
      "name": "n"
     },
     {
      "type": "double",
      "name": "value"
     }
    ],
    "name": "SumOfLogs",
    "methods": [
     {
      "type": null,
      "name": "increment",
      "params": [
       {
        "type": "double",
        "name": "d"
       }
      ]
     },
     {
      "type": "double",
      "name": "getResult",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "double",
      "name": "evaluate",
      "params": [
       {
        "type": "double",
        "name": "values"
       },
       {
        "type": "int",
        "name": "begin"
       },
       {
        "type": "int",
        "name": "length"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.descriptive.summary",
  "filename": "SumOfLogs.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "RealMatrix",
      "name": "X"
     },
     {
      "type": "RealMatrix",
      "name": "Y"
     }
    ],
    "name": "AbstractMultipleLinearRegression",
    "methods": [
     {
      "type": null,
      "name": "newSampleData",
      "params": [
       {
        "type": "double",
        "name": "data"
       },
       {
        "type": "int",
        "name": "nobs"
       },
       {
        "type": "int",
        "name": "nvars"
       }
      ]
     },
     {
      "type": null,
      "name": "newYSampleData",
      "params": [
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": null,
      "name": "newXSampleData",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": null,
      "name": "validateSampleData",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": null,
      "name": "validateCovarianceData",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "covariance"
       }
      ]
     },
     {
      "type": "double",
      "name": "estimateRegressionParameters",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateResiduals",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateRegressionParametersVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateRegressandVariance",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "calculateBeta",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "calculateBetaVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateYVariance",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "calculateResiduals",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.regression",
  "filename": "AbstractMultipleLinearRegression.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "RealMatrix",
      "name": "Omega"
     }
    ],
    "name": "GLSMultipleLinearRegression",
    "methods": [
     {
      "type": null,
      "name": "newSampleData",
      "params": [
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "covariance"
       }
      ]
     },
     {
      "type": null,
      "name": "newCovarianceData",
      "params": [
       {
        "type": "double",
        "name": "omega"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "calculateBeta",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "calculateBetaVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateYVariance",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.regression",
  "filename": "GLSMultipleLinearRegression.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "TDistribution",
      "name": "distribution"
     },
     {
      "type": "double",
      "name": "sumX"
     },
     {
      "type": "double",
      "name": "sumXX"
     },
     {
      "type": "double",
      "name": "sumY"
     },
     {
      "type": "double",
      "name": "sumYY"
     },
     {
      "type": "double",
      "name": "sumXY"
     },
     {
      "type": "long",
      "name": "n"
     },
     {
      "type": "double",
      "name": "xbar"
     },
     {
      "type": "double",
      "name": "ybar"
     }
    ],
    "name": "SimpleRegression",
    "methods": [
     {
      "type": null,
      "name": "addData",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": null,
      "name": "removeData",
      "params": [
       {
        "type": "double",
        "name": "x"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": null,
      "name": "addData",
      "params": [
       {
        "type": "double",
        "name": "data"
       }
      ]
     },
     {
      "type": null,
      "name": "removeData",
      "params": [
       {
        "type": "double",
        "name": "data"
       }
      ]
     },
     {
      "type": null,
      "name": "clear",
      "params": []
     },
     {
      "type": "long",
      "name": "getN",
      "params": []
     },
     {
      "type": "double",
      "name": "predict",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "double",
      "name": "getIntercept",
      "params": []
     },
     {
      "type": "double",
      "name": "getSlope",
      "params": []
     },
     {
      "type": "double",
      "name": "getSumSquaredErrors",
      "params": []
     },
     {
      "type": "double",
      "name": "getTotalSumSquares",
      "params": []
     },
     {
      "type": "double",
      "name": "getRegressionSumSquares",
      "params": []
     },
     {
      "type": "double",
      "name": "getMeanSquareError",
      "params": []
     },
     {
      "type": "double",
      "name": "getR",
      "params": []
     },
     {
      "type": "double",
      "name": "getRSquare",
      "params": []
     },
     {
      "type": "double",
      "name": "getInterceptStdErr",
      "params": []
     },
     {
      "type": "double",
      "name": "getSlopeStdErr",
      "params": []
     },
     {
      "type": "double",
      "name": "getSlopeConfidenceInterval",
      "params": []
     },
     {
      "type": "double",
      "name": "getSlopeConfidenceInterval",
      "params": [
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "getSignificance",
      "params": []
     },
     {
      "type": "double",
      "name": "getIntercept",
      "params": [
       {
        "type": "double",
        "name": "slope"
       }
      ]
     },
     {
      "type": "double",
      "name": "getRegressionSumSquares",
      "params": [
       {
        "type": "double",
        "name": "slope"
       }
      ]
     },
     {
      "type": null,
      "name": "setDistribution",
      "params": [
       {
        "type": "TDistribution",
        "name": "value"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.regression",
  "filename": "SimpleRegression.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "QRDecomposition",
      "name": "qr"
     }
    ],
    "name": "OLSMultipleLinearRegression",
    "methods": [
     {
      "type": null,
      "name": "newSampleData",
      "params": [
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": null,
      "name": "newSampleData",
      "params": [
       {
        "type": "double",
        "name": "data"
       },
       {
        "type": "int",
        "name": "nobs"
       },
       {
        "type": "int",
        "name": "nvars"
       }
      ]
     },
     {
      "type": null,
      "name": "newXSampleData",
      "params": [
       {
        "type": "double",
        "name": "x"
       }
      ]
     },
     {
      "type": "RealMatrix",
      "name": "calculateBeta",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "calculateBetaVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "calculateYVariance",
      "params": []
     },
     {
      "type": "RealMatrix",
      "name": "solveUpperTriangular",
      "params": [
       {
        "type": "RealMatrixImpl",
        "name": "coefficients"
       },
       {
        "type": "RealMatrixImpl",
        "name": "constants"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isUpperTriangular",
      "params": [
       {
        "type": "RealMatrixImpl",
        "name": "m"
       },
       {
        "type": "double",
        "name": "epsilon"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.regression",
  "filename": "OLSMultipleLinearRegression.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "MultipleLinearRegression",
    "methods": [
     {
      "type": "double",
      "name": "estimateRegressionParameters",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateRegressionParametersVariance",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateResiduals",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateRegressandVariance",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.regression",
  "filename": "MultipleLinearRegression.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "OneWayAnova",
    "methods": [
     {
      "type": "double",
      "name": "anovaFValue",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       }
      ]
     },
     {
      "type": "double",
      "name": "anovaPValue",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "anovaTest",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "OneWayAnova.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "TTest",
      "name": "tTest"
     },
     {
      "type": "ChiSquareTest",
      "name": "chiSquareTest"
     },
     {
      "type": "UnknownDistributionChiSquareTest",
      "name": "unknownDistributionChiSquareTest"
     },
     {
      "type": "OneWayAnova",
      "name": "oneWayAnova"
     }
    ],
    "name": "TestUtils",
    "methods": [
     {
      "type": null,
      "name": "setChiSquareTest",
      "params": [
       {
        "type": "TTest",
        "name": "tTest"
       }
      ]
     },
     {
      "type": "TTest",
      "name": "getTTest",
      "params": []
     },
     {
      "type": null,
      "name": "setChiSquareTest",
      "params": [
       {
        "type": "ChiSquareTest",
        "name": "chiSquareTest"
       }
      ]
     },
     {
      "type": "ChiSquareTest",
      "name": "getChiSquareTest",
      "params": []
     },
     {
      "type": null,
      "name": "setUnknownDistributionChiSquareTest",
      "params": [
       {
        "type": "UnknownDistributionChiSquareTest",
        "name": "unknownDistributionChiSquareTest"
       }
      ]
     },
     {
      "type": "UnknownDistributionChiSquareTest",
      "name": "getUnknownDistributionChiSquareTest",
      "params": []
     },
     {
      "type": null,
      "name": "setOneWayAnova",
      "params": [
       {
        "type": "OneWayAnova",
        "name": "oneWayAnova"
       }
      ]
     },
     {
      "type": "OneWayAnova",
      "name": "getOneWayAnova",
      "params": []
     },
     {
      "type": "double",
      "name": "homoscedasticT",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticT",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "double",
      "name": "pairedT",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "pairedTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "pairedTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "observed"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "sample"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "sample"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquare",
      "params": [
       {
        "type": "double",
        "name": "expected"
       },
       {
        "type": "long",
        "name": "observed"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquare",
      "params": [
       {
        "type": "long",
        "name": "counts"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "double",
        "name": "expected"
       },
       {
        "type": "long",
        "name": "observed"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "double",
        "name": "expected"
       },
       {
        "type": "long",
        "name": "observed"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "long",
        "name": "counts"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "long",
        "name": "counts"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareDataSetsComparison",
      "params": [
       {
        "type": "long",
        "name": "observed1"
       },
       {
        "type": "long",
        "name": "observed2"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareTestDataSetsComparison",
      "params": [
       {
        "type": "long",
        "name": "observed1"
       },
       {
        "type": "long",
        "name": "observed2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "chiSquareTestDataSetsComparison",
      "params": [
       {
        "type": "long",
        "name": "observed1"
       },
       {
        "type": "long",
        "name": "observed2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "oneWayAnovaFValue",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       }
      ]
     },
     {
      "type": "double",
      "name": "oneWayAnovaPValue",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "oneWayAnovaTest",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "TestUtils.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "ChiSquaredDistribution",
      "name": "distribution"
     }
    ],
    "name": "ChiSquareTestImpl",
    "methods": [
     {
      "type": "double",
      "name": "chiSquare",
      "params": [
       {
        "type": "double",
        "name": "expected"
       },
       {
        "type": "long",
        "name": "observed"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "double",
        "name": "expected"
       },
       {
        "type": "long",
        "name": "observed"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "double",
        "name": "expected"
       },
       {
        "type": "long",
        "name": "observed"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquare",
      "params": [
       {
        "type": "long",
        "name": "counts"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "long",
        "name": "counts"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "long",
        "name": "counts"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareDataSetsComparison",
      "params": [
       {
        "type": "long",
        "name": "observed1"
       },
       {
        "type": "long",
        "name": "observed2"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareTestDataSetsComparison",
      "params": [
       {
        "type": "long",
        "name": "observed1"
       },
       {
        "type": "long",
        "name": "observed2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "chiSquareTestDataSetsComparison",
      "params": [
       {
        "type": "long",
        "name": "observed1"
       },
       {
        "type": "long",
        "name": "observed2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": null,
      "name": "checkArray",
      "params": [
       {
        "type": "long",
        "name": "in"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isRectangular",
      "params": [
       {
        "type": "long",
        "name": "in"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isPositive",
      "params": [
       {
        "type": "double",
        "name": "in"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isNonNegative",
      "params": [
       {
        "type": "long",
        "name": "in"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isNonNegative",
      "params": [
       {
        "type": "long",
        "name": "in"
       }
      ]
     },
     {
      "type": null,
      "name": "setDistribution",
      "params": [
       {
        "type": "ChiSquaredDistribution",
        "name": "value"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "ChiSquareTestImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "UnknownDistributionChiSquareTest",
    "methods": [
     {
      "type": "double",
      "name": "chiSquareDataSetsComparison",
      "params": [
       {
        "type": "long",
        "name": "observed1"
       },
       {
        "type": "long",
        "name": "observed2"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareTestDataSetsComparison",
      "params": [
       {
        "type": "long",
        "name": "observed1"
       },
       {
        "type": "long",
        "name": "observed2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "chiSquareTestDataSetsComparison",
      "params": [
       {
        "type": "long",
        "name": "observed1"
       },
       {
        "type": "long",
        "name": "observed2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "UnknownDistributionChiSquareTest.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "OneWayAnovaImpl",
    "methods": [
     {
      "type": "double",
      "name": "anovaFValue",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       }
      ]
     },
     {
      "type": "double",
      "name": "anovaPValue",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "anovaTest",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "AnovaStats",
      "name": "anovaStats",
      "params": [
       {
        "type": "Collection",
        "name": "categoryData"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "OneWayAnovaImpl.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "TDistribution",
      "name": "distribution"
     }
    ],
    "name": "TTestImpl",
    "methods": [
     {
      "type": "double",
      "name": "pairedT",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "pairedTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "pairedTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "observed"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticT",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticT",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "sample"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "sample"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "df",
      "params": [
       {
        "type": "double",
        "name": "v1"
       },
       {
        "type": "double",
        "name": "v2"
       },
       {
        "type": "double",
        "name": "n1"
       },
       {
        "type": "double",
        "name": "n2"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "m"
       },
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "v"
       },
       {
        "type": "double",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "m1"
       },
       {
        "type": "double",
        "name": "m2"
       },
       {
        "type": "double",
        "name": "v1"
       },
       {
        "type": "double",
        "name": "v2"
       },
       {
        "type": "double",
        "name": "n1"
       },
       {
        "type": "double",
        "name": "n2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticT",
      "params": [
       {
        "type": "double",
        "name": "m1"
       },
       {
        "type": "double",
        "name": "m2"
       },
       {
        "type": "double",
        "name": "v1"
       },
       {
        "type": "double",
        "name": "v2"
       },
       {
        "type": "double",
        "name": "n1"
       },
       {
        "type": "double",
        "name": "n2"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "m"
       },
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "v"
       },
       {
        "type": "double",
        "name": "n"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "m1"
       },
       {
        "type": "double",
        "name": "m2"
       },
       {
        "type": "double",
        "name": "v1"
       },
       {
        "type": "double",
        "name": "v2"
       },
       {
        "type": "double",
        "name": "n1"
       },
       {
        "type": "double",
        "name": "n2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "double",
        "name": "m1"
       },
       {
        "type": "double",
        "name": "m2"
       },
       {
        "type": "double",
        "name": "v1"
       },
       {
        "type": "double",
        "name": "v2"
       },
       {
        "type": "double",
        "name": "n1"
       },
       {
        "type": "double",
        "name": "n2"
       }
      ]
     },
     {
      "type": null,
      "name": "setDistribution",
      "params": [
       {
        "type": "TDistribution",
        "name": "value"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "TTestImpl.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "TTest",
    "methods": [
     {
      "type": "double",
      "name": "pairedT",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "pairedTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "pairedTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "observed"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticT",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "t",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticT",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "sample"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "sample"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "mu"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "double",
        "name": "sample1"
       },
       {
        "type": "double",
        "name": "sample2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "tTest",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "double",
      "name": "homoscedasticTTest",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tTest",
      "params": [
       {
        "type": "StatisticalSummary",
        "name": "sampleStats1"
       },
       {
        "type": "StatisticalSummary",
        "name": "sampleStats2"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "TTest.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ChiSquareTest",
    "methods": [
     {
      "type": "double",
      "name": "chiSquare",
      "params": [
       {
        "type": "double",
        "name": "expected"
       },
       {
        "type": "long",
        "name": "observed"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "double",
        "name": "expected"
       },
       {
        "type": "long",
        "name": "observed"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "double",
        "name": "expected"
       },
       {
        "type": "long",
        "name": "observed"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquare",
      "params": [
       {
        "type": "long",
        "name": "counts"
       }
      ]
     },
     {
      "type": "double",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "long",
        "name": "counts"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "chiSquareTest",
      "params": [
       {
        "type": "long",
        "name": "counts"
       },
       {
        "type": "double",
        "name": "alpha"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.stat.inference",
  "filename": "ChiSquareTest.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FirstOrderIntegrator",
    "methods": [
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "FirstOrderIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "initialTime"
     },
     {
      "type": "double",
      "name": "finalTime"
     },
     {
      "type": "boolean",
      "name": "forward"
     },
     {
      "type": "int",
      "name": "index"
     },
     {
      "type": "List",
      "name": "steps"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "ContinuousOutputModel",
    "methods": [
     {
      "type": null,
      "name": "append",
      "params": [
       {
        "type": "ContinuousOutputModel",
        "name": "model"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "requiresDenseOutput",
      "params": []
     },
     {
      "type": null,
      "name": "reset",
      "params": []
     },
     {
      "type": null,
      "name": "handleStep",
      "params": [
       {
        "type": "StepInterpolator",
        "name": "interpolator"
       },
       {
        "type": "boolean",
        "name": "isLast"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInitialTime",
      "params": []
     },
     {
      "type": "double",
      "name": "getFinalTime",
      "params": []
     },
     {
      "type": "double",
      "name": "getInterpolatedTime",
      "params": []
     },
     {
      "type": null,
      "name": "setInterpolatedTime",
      "params": [
       {
        "type": "double",
        "name": "time"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInterpolatedState",
      "params": []
     },
     {
      "type": "int",
      "name": "locatePoint",
      "params": [
       {
        "type": "double",
        "name": "time"
       },
       {
        "type": "StepInterpolator",
        "name": "interval"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "ContinuousOutputModel.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "String",
      "name": "name"
     },
     {
      "type": "Collection",
      "name": "stepHandlers"
     },
     {
      "type": "double",
      "name": "stepStart"
     },
     {
      "type": "double",
      "name": "stepSize"
     },
     {
      "type": "CombinedEventsManager",
      "name": "eventsHandlersManager"
     }
    ],
    "name": "AbstractIntegrator",
    "methods": [
     {
      "type": "String",
      "name": "getName",
      "params": []
     },
     {
      "type": null,
      "name": "addStepHandler",
      "params": [
       {
        "type": "StepHandler",
        "name": "handler"
       }
      ]
     },
     {
      "type": "Collection",
      "name": "getStepHandlers",
      "params": []
     },
     {
      "type": null,
      "name": "clearStepHandlers",
      "params": []
     },
     {
      "type": null,
      "name": "addEventHandler",
      "params": [
       {
        "type": "EventHandler",
        "name": "function"
       },
       {
        "type": "double",
        "name": "maxCheckInterval"
       },
       {
        "type": "double",
        "name": "convergence"
       },
       {
        "type": "int",
        "name": "maxIterationCount"
       }
      ]
     },
     {
      "type": "Collection",
      "name": "getEventHandlers",
      "params": []
     },
     {
      "type": null,
      "name": "clearEventHandlers",
      "params": []
     },
     {
      "type": "boolean",
      "name": "requiresDenseOutput",
      "params": []
     },
     {
      "type": "double",
      "name": "getCurrentStepStart",
      "params": []
     },
     {
      "type": "double",
      "name": "getCurrentSignedStepsize",
      "params": []
     },
     {
      "type": null,
      "name": "sanityChecks",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "CombinedEventsManager",
      "name": "addEndTimeChecker",
      "params": [
       {
        "type": "double",
        "name": "startTime"
       },
       {
        "type": "double",
        "name": "endTime"
       },
       {
        "type": "CombinedEventsManager",
        "name": "manager"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "AbstractIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "SecondOrderDifferentialEquations",
    "methods": [
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": null,
      "name": "computeSecondDerivatives",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "yDot"
       },
       {
        "type": "double",
        "name": "yDDot"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "SecondOrderDifferentialEquations.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "DerivativeException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "DerivativeException.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "SecondOrderIntegrator",
    "methods": [
     {
      "type": null,
      "name": "integrate",
      "params": [
       {
        "type": "SecondOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "yDot0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "yDot"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "SecondOrderIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "SecondOrderDifferentialEquations",
      "name": "equations"
     },
     {
      "type": "int",
      "name": "dimension"
     },
     {
      "type": "double",
      "name": "z"
     },
     {
      "type": "double",
      "name": "zDot"
     },
     {
      "type": "double",
      "name": "zDDot"
     }
    ],
    "name": "FirstOrderConverter",
    "methods": [
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": null,
      "name": "computeDerivatives",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "yDot"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "FirstOrderConverter.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "ODEIntegrator",
    "methods": [
     {
      "type": "String",
      "name": "getName",
      "params": []
     },
     {
      "type": null,
      "name": "addStepHandler",
      "params": [
       {
        "type": "StepHandler",
        "name": "handler"
       }
      ]
     },
     {
      "type": "Collection",
      "name": "getStepHandlers",
      "params": []
     },
     {
      "type": null,
      "name": "clearStepHandlers",
      "params": []
     },
     {
      "type": null,
      "name": "addEventHandler",
      "params": [
       {
        "type": "EventHandler",
        "name": "handler"
       },
       {
        "type": "double",
        "name": "maxCheckInterval"
       },
       {
        "type": "double",
        "name": "convergence"
       },
       {
        "type": "int",
        "name": "maxIterationCount"
       }
      ]
     },
     {
      "type": "Collection",
      "name": "getEventHandlers",
      "params": []
     },
     {
      "type": null,
      "name": "clearEventHandlers",
      "params": []
     },
     {
      "type": "double",
      "name": "getCurrentStepStart",
      "params": []
     },
     {
      "type": "double",
      "name": "getCurrentSignedStepsize",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "ODEIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FirstOrderDifferentialEquations",
    "methods": [
     {
      "type": "int",
      "name": "getDimension",
      "params": []
     },
     {
      "type": null,
      "name": "computeDerivatives",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "yDot"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "FirstOrderDifferentialEquations.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "IntegratorException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.ode",
  "filename": "IntegratorException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "List",
      "name": "states"
     },
     {
      "type": "EventState",
      "name": "first"
     },
     {
      "type": "boolean",
      "name": "initialized"
     }
    ],
    "name": "CombinedEventsManager",
    "methods": [
     {
      "type": null,
      "name": "addEventHandler",
      "params": [
       {
        "type": "EventHandler",
        "name": "handler"
       },
       {
        "type": "double",
        "name": "maxCheckInterval"
       },
       {
        "type": "double",
        "name": "convergence"
       },
       {
        "type": "int",
        "name": "maxIterationCount"
       }
      ]
     },
     {
      "type": "Collection",
      "name": "getEventsHandlers",
      "params": []
     },
     {
      "type": null,
      "name": "clearEventsHandlers",
      "params": []
     },
     {
      "type": "Collection",
      "name": "getEventsStates",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isEmpty",
      "params": []
     },
     {
      "type": "boolean",
      "name": "evaluateStep",
      "params": [
       {
        "type": "StepInterpolator",
        "name": "interpolator"
       }
      ]
     },
     {
      "type": "double",
      "name": "getEventTime",
      "params": []
     },
     {
      "type": null,
      "name": "stepAccepted",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "stop",
      "params": []
     },
     {
      "type": "boolean",
      "name": "reset",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.events",
  "filename": "CombinedEventsManager.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "EventException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.ode.events",
  "filename": "EventException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "STOP"
     },
     {
      "type": "int",
      "name": "RESET_STATE"
     },
     {
      "type": "int",
      "name": "RESET_DERIVATIVES"
     },
     {
      "type": "int",
      "name": "CONTINUE"
     }
    ],
    "name": "EventHandler",
    "methods": [
     {
      "type": "double",
      "name": "g",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "int",
      "name": "eventOccurred",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": null,
      "name": "resetState",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.events",
  "filename": "EventHandler.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "EventHandler",
      "name": "handler"
     },
     {
      "type": "double",
      "name": "maxCheckInterval"
     },
     {
      "type": "double",
      "name": "convergence"
     },
     {
      "type": "int",
      "name": "maxIterationCount"
     },
     {
      "type": "double",
      "name": "t0"
     },
     {
      "type": "double",
      "name": "g0"
     },
     {
      "type": "boolean",
      "name": "g0Positive"
     },
     {
      "type": "boolean",
      "name": "pendingEvent"
     },
     {
      "type": "double",
      "name": "pendingEventTime"
     },
     {
      "type": "double",
      "name": "previousEventTime"
     },
     {
      "type": "boolean",
      "name": "increasing"
     },
     {
      "type": "int",
      "name": "nextAction"
     }
    ],
    "name": "EventState",
    "methods": [
     {
      "type": "EventHandler",
      "name": "getEventHandler",
      "params": []
     },
     {
      "type": "double",
      "name": "getMaxCheckInterval",
      "params": []
     },
     {
      "type": "double",
      "name": "getConvergence",
      "params": []
     },
     {
      "type": "int",
      "name": "getMaxIterationCount",
      "params": []
     },
     {
      "type": null,
      "name": "reinitializeBegin",
      "params": [
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "evaluateStep",
      "params": [
       {
        "type": "StepInterpolator",
        "name": "interpolator"
       }
      ]
     },
     {
      "type": "double",
      "name": "getEventTime",
      "params": []
     },
     {
      "type": null,
      "name": "stepAccepted",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "stop",
      "params": []
     },
     {
      "type": "boolean",
      "name": "reset",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.events",
  "filename": "EventState.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "StepHandler",
    "methods": [
     {
      "type": "boolean",
      "name": "requiresDenseOutput",
      "params": []
     },
     {
      "type": null,
      "name": "reset",
      "params": []
     },
     {
      "type": null,
      "name": "handleStep",
      "params": [
       {
        "type": "StepInterpolator",
        "name": "interpolator"
       },
       {
        "type": "boolean",
        "name": "isLast"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.sampling",
  "filename": "StepHandler.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "DummyStepHandler",
      "name": "instance"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "DummyStepHandler",
    "methods": [
     {
      "type": "DummyStepHandler",
      "name": "getInstance",
      "params": []
     },
     {
      "type": "boolean",
      "name": "requiresDenseOutput",
      "params": []
     },
     {
      "type": null,
      "name": "reset",
      "params": []
     },
     {
      "type": null,
      "name": "handleStep",
      "params": [
       {
        "type": "StepInterpolator",
        "name": "interpolator"
       },
       {
        "type": "boolean",
        "name": "isLast"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.sampling",
  "filename": "DummyStepHandler.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "DummyStepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "computeInterpolatedState",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     },
     {
      "type": null,
      "name": "writeExternal",
      "params": [
       {
        "type": "ObjectOutput",
        "name": "out"
       }
      ]
     },
     {
      "type": null,
      "name": "readExternal",
      "params": [
       {
        "type": "ObjectInput",
        "name": "in"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.sampling",
  "filename": "DummyStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "FixedStepHandler",
    "methods": [
     {
      "type": null,
      "name": "handleStep",
      "params": [
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "yDot"
       },
       {
        "type": "boolean",
        "name": "isLast"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.sampling",
  "filename": "FixedStepHandler.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "previousTime"
     },
     {
      "type": "double",
      "name": "currentTime"
     },
     {
      "type": "double",
      "name": "h"
     },
     {
      "type": "double",
      "name": "currentState"
     },
     {
      "type": "double",
      "name": "interpolatedTime"
     },
     {
      "type": "double",
      "name": "interpolatedState"
     },
     {
      "type": "double",
      "name": "interpolatedDerivatives"
     },
     {
      "type": "boolean",
      "name": "finalized"
     },
     {
      "type": "boolean",
      "name": "forward"
     }
    ],
    "name": "AbstractStepInterpolator",
    "methods": [
     {
      "type": null,
      "name": "reinitialize",
      "params": [
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "boolean",
        "name": "forward"
       }
      ]
     },
     {
      "type": "StepInterpolator",
      "name": "copy",
      "params": []
     },
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "shift",
      "params": []
     },
     {
      "type": null,
      "name": "storeTime",
      "params": [
       {
        "type": "double",
        "name": "t"
       }
      ]
     },
     {
      "type": "double",
      "name": "getPreviousTime",
      "params": []
     },
     {
      "type": "double",
      "name": "getCurrentTime",
      "params": []
     },
     {
      "type": "double",
      "name": "getInterpolatedTime",
      "params": []
     },
     {
      "type": null,
      "name": "setInterpolatedTime",
      "params": [
       {
        "type": "double",
        "name": "time"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isForward",
      "params": []
     },
     {
      "type": null,
      "name": "computeInterpolatedState",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInterpolatedState",
      "params": []
     },
     {
      "type": "double",
      "name": "getInterpolatedDerivatives",
      "params": []
     },
     {
      "type": null,
      "name": "finalizeStep",
      "params": []
     },
     {
      "type": null,
      "name": "doFinalize",
      "params": []
     },
     {
      "type": null,
      "name": "writeExternal",
      "params": [
       {
        "type": "ObjectOutput",
        "name": "out"
       }
      ]
     },
     {
      "type": null,
      "name": "readExternal",
      "params": [
       {
        "type": "ObjectInput",
        "name": "in"
       }
      ]
     },
     {
      "type": null,
      "name": "writeBaseExternal",
      "params": [
       {
        "type": "ObjectOutput",
        "name": "out"
       }
      ]
     },
     {
      "type": "double",
      "name": "readBaseExternal",
      "params": [
       {
        "type": "ObjectInput",
        "name": "in"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.sampling",
  "filename": "AbstractStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "StepInterpolator",
    "methods": [
     {
      "type": "double",
      "name": "getPreviousTime",
      "params": []
     },
     {
      "type": "double",
      "name": "getCurrentTime",
      "params": []
     },
     {
      "type": "double",
      "name": "getInterpolatedTime",
      "params": []
     },
     {
      "type": null,
      "name": "setInterpolatedTime",
      "params": [
       {
        "type": "double",
        "name": "time"
       }
      ]
     },
     {
      "type": "double",
      "name": "getInterpolatedState",
      "params": []
     },
     {
      "type": "double",
      "name": "getInterpolatedDerivatives",
      "params": []
     },
     {
      "type": "boolean",
      "name": "isForward",
      "params": []
     },
     {
      "type": "StepInterpolator",
      "name": "copy",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.sampling",
  "filename": "StepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "h"
     },
     {
      "type": "FixedStepHandler",
      "name": "handler"
     },
     {
      "type": "double",
      "name": "lastTime"
     },
     {
      "type": "double",
      "name": "lastState"
     },
     {
      "type": "double",
      "name": "lastDerivatives"
     },
     {
      "type": "boolean",
      "name": "forward"
     }
    ],
    "name": "StepNormalizer",
    "methods": [
     {
      "type": "boolean",
      "name": "requiresDenseOutput",
      "params": []
     },
     {
      "type": null,
      "name": "reset",
      "params": []
     },
     {
      "type": null,
      "name": "handleStep",
      "params": [
       {
        "type": "StepInterpolator",
        "name": "interpolator"
       },
       {
        "type": "boolean",
        "name": "isLast"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.sampling",
  "filename": "StepNormalizer.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "y0Dot"
     },
     {
      "type": "double",
      "name": "y1"
     },
     {
      "type": "double",
      "name": "y1Dot"
     },
     {
      "type": "double",
      "name": "yMidDots"
     },
     {
      "type": "double",
      "name": "polynoms"
     },
     {
      "type": "double",
      "name": "errfac"
     },
     {
      "type": "int",
      "name": "currentDegree"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "GraggBulirschStoerStepInterpolator",
    "methods": [
     {
      "type": null,
      "name": "resetTables",
      "params": [
       {
        "type": "int",
        "name": "maxDegree"
       }
      ]
     },
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "computeCoefficients",
      "params": [
       {
        "type": "int",
        "name": "mu"
       },
       {
        "type": "double",
        "name": "h"
       }
      ]
     },
     {
      "type": "double",
      "name": "estimateError",
      "params": [
       {
        "type": "double",
        "name": "scale"
       }
      ]
     },
     {
      "type": null,
      "name": "computeInterpolatedState",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     },
     {
      "type": null,
      "name": "writeExternal",
      "params": [
       {
        "type": "ObjectOutput",
        "name": "out"
       }
      ]
     },
     {
      "type": null,
      "name": "readExternal",
      "params": [
       {
        "type": "ObjectInput",
        "name": "in"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "GraggBulirschStoerStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "yDotKLast"
     },
     {
      "type": "double",
      "name": "v"
     },
     {
      "type": "boolean",
      "name": "vectorsInitialized"
     },
     {
      "type": "double",
      "name": "b_01"
     },
     {
      "type": "double",
      "name": "b_06"
     },
     {
      "type": "double",
      "name": "b_07"
     },
     {
      "type": "double",
      "name": "b_08"
     },
     {
      "type": "double",
      "name": "b_09"
     },
     {
      "type": "double",
      "name": "b_10"
     },
     {
      "type": "double",
      "name": "b_11"
     },
     {
      "type": "double",
      "name": "b_12"
     },
     {
      "type": "double",
      "name": "c14"
     },
     {
      "type": "double",
      "name": "k14_01"
     },
     {
      "type": "double",
      "name": "k14_06"
     },
     {
      "type": "double",
      "name": "k14_07"
     },
     {
      "type": "double",
      "name": "k14_08"
     },
     {
      "type": "double",
      "name": "k14_09"
     },
     {
      "type": "double",
      "name": "k14_10"
     },
     {
      "type": "double",
      "name": "k14_11"
     },
     {
      "type": "double",
      "name": "k14_12"
     },
     {
      "type": "double",
      "name": "k14_13"
     },
     {
      "type": "double",
      "name": "c15"
     },
     {
      "type": "double",
      "name": "k15_01"
     },
     {
      "type": "double",
      "name": "k15_06"
     },
     {
      "type": "double",
      "name": "k15_07"
     },
     {
      "type": "double",
      "name": "k15_08"
     },
     {
      "type": "double",
      "name": "k15_09"
     },
     {
      "type": "double",
      "name": "k15_10"
     },
     {
      "type": "double",
      "name": "k15_11"
     },
     {
      "type": "double",
      "name": "k15_12"
     },
     {
      "type": "double",
      "name": "k15_13"
     },
     {
      "type": "double",
      "name": "k15_14"
     },
     {
      "type": "double",
      "name": "c16"
     },
     {
      "type": "double",
      "name": "k16_01"
     },
     {
      "type": "double",
      "name": "k16_06"
     },
     {
      "type": "double",
      "name": "k16_07"
     },
     {
      "type": "double",
      "name": "k16_08"
     },
     {
      "type": "double",
      "name": "k16_09"
     },
     {
      "type": "double",
      "name": "k16_10"
     },
     {
      "type": "double",
      "name": "k16_11"
     },
     {
      "type": "double",
      "name": "k16_12"
     },
     {
      "type": "double",
      "name": "k16_13"
     },
     {
      "type": "double",
      "name": "k16_14"
     },
     {
      "type": "double",
      "name": "k16_15"
     },
     {
      "type": "double",
      "name": "d"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "DormandPrince853StepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "reinitialize",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "yDotK"
       },
       {
        "type": "boolean",
        "name": "forward"
       }
      ]
     },
     {
      "type": null,
      "name": "storeTime",
      "params": [
       {
        "type": "double",
        "name": "t"
       }
      ]
     },
     {
      "type": null,
      "name": "computeInterpolatedState",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     },
     {
      "type": null,
      "name": "doFinalize",
      "params": []
     },
     {
      "type": null,
      "name": "writeExternal",
      "params": [
       {
        "type": "ObjectOutput",
        "name": "out"
       }
      ]
     },
     {
      "type": null,
      "name": "readExternal",
      "params": [
       {
        "type": "ObjectInput",
        "name": "in"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "DormandPrince853StepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "yDotK"
     },
     {
      "type": "FirstOrderDifferentialEquations",
      "name": "equations"
     }
    ],
    "name": "RungeKuttaStepInterpolator",
    "methods": [
     {
      "type": null,
      "name": "reinitialize",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "yDotK"
       },
       {
        "type": "boolean",
        "name": "forward"
       }
      ]
     },
     {
      "type": null,
      "name": "writeExternal",
      "params": [
       {
        "type": "ObjectOutput",
        "name": "out"
       }
      ]
     },
     {
      "type": null,
      "name": "readExternal",
      "params": [
       {
        "type": "ObjectInput",
        "name": "in"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "RungeKuttaStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "METHOD_NAME"
     },
     {
      "type": "double",
      "name": "predictorCoeffs"
     },
     {
      "type": "double",
      "name": "correctorCoeffs"
     },
     {
      "type": "double",
      "name": "step"
     }
    ],
    "name": "AdamsMoultonIntegrator",
    "methods": [
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "getPredictorCoeffs",
      "params": []
     },
     {
      "type": "double",
      "name": "getCorrectorCoeffs",
      "params": []
     },
     {
      "type": "Fraction",
      "name": "computeGammaStarArray",
      "params": [
       {
        "type": "int",
        "name": "order"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "AdamsMoultonIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "minStep"
     },
     {
      "type": "double",
      "name": "maxStep"
     },
     {
      "type": "double",
      "name": "initialStep"
     },
     {
      "type": "double",
      "name": "scalAbsoluteTolerance"
     },
     {
      "type": "double",
      "name": "scalRelativeTolerance"
     },
     {
      "type": "double",
      "name": "vecAbsoluteTolerance"
     },
     {
      "type": "double",
      "name": "vecRelativeTolerance"
     }
    ],
    "name": "AdaptiveStepsizeIntegrator",
    "methods": [
     {
      "type": null,
      "name": "setInitialStepSize",
      "params": [
       {
        "type": "double",
        "name": "initialStepSize"
       }
      ]
     },
     {
      "type": null,
      "name": "sanityChecks",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "initializeStep",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "boolean",
        "name": "forward"
       },
       {
        "type": "int",
        "name": "order"
       },
       {
        "type": "double",
        "name": "scale"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "yDot0"
       },
       {
        "type": "double",
        "name": "y1"
       },
       {
        "type": "double",
        "name": "yDot1"
       }
      ]
     },
     {
      "type": "double",
      "name": "filterStep",
      "params": [
       {
        "type": "double",
        "name": "h"
       },
       {
        "type": "boolean",
        "name": "forward"
       },
       {
        "type": "boolean",
        "name": "acceptSmall"
       }
      ]
     },
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "getCurrentStepStart",
      "params": []
     },
     {
      "type": null,
      "name": "resetInternalState",
      "params": []
     },
     {
      "type": "double",
      "name": "getMinStep",
      "params": []
     },
     {
      "type": "double",
      "name": "getMaxStep",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "AdaptiveStepsizeIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "v1"
     },
     {
      "type": "double",
      "name": "v2"
     },
     {
      "type": "double",
      "name": "v3"
     },
     {
      "type": "double",
      "name": "v4"
     },
     {
      "type": "boolean",
      "name": "vectorsInitialized"
     },
     {
      "type": "double",
      "name": "a70"
     },
     {
      "type": "double",
      "name": "a72"
     },
     {
      "type": "double",
      "name": "a73"
     },
     {
      "type": "double",
      "name": "a74"
     },
     {
      "type": "double",
      "name": "a75"
     },
     {
      "type": "double",
      "name": "d0"
     },
     {
      "type": "double",
      "name": "d2"
     },
     {
      "type": "double",
      "name": "d3"
     },
     {
      "type": "double",
      "name": "d4"
     },
     {
      "type": "double",
      "name": "d5"
     },
     {
      "type": "double",
      "name": "d6"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "DormandPrince54StepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "reinitialize",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "yDotK"
       },
       {
        "type": "boolean",
        "name": "forward"
       }
      ]
     },
     {
      "type": null,
      "name": "storeTime",
      "params": [
       {
        "type": "double",
        "name": "t"
       }
      ]
     },
     {
      "type": null,
      "name": "computeInterpolatedState",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "DormandPrince54StepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "c"
     },
     {
      "type": "double",
      "name": "a"
     },
     {
      "type": "double",
      "name": "b"
     }
    ],
    "name": "GillIntegrator",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "GillIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "c"
     },
     {
      "type": "double",
      "name": "a"
     },
     {
      "type": "double",
      "name": "b"
     }
    ],
    "name": "ClassicalRungeKuttaIntegrator",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "ClassicalRungeKuttaIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "c"
     },
     {
      "type": "double",
      "name": "a"
     },
     {
      "type": "double",
      "name": "b"
     },
     {
      "type": "RungeKuttaStepInterpolator",
      "name": "prototype"
     },
     {
      "type": "double",
      "name": "step"
     }
    ],
    "name": "RungeKuttaIntegrator",
    "methods": [
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "RungeKuttaIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "METHOD_NAME"
     },
     {
      "type": "double",
      "name": "staticC"
     },
     {
      "type": "double",
      "name": "staticA"
     },
     {
      "type": "double",
      "name": "staticB"
     },
     {
      "type": "double",
      "name": "e1_01"
     },
     {
      "type": "double",
      "name": "e1_06"
     },
     {
      "type": "double",
      "name": "e1_07"
     },
     {
      "type": "double",
      "name": "e1_08"
     },
     {
      "type": "double",
      "name": "e1_09"
     },
     {
      "type": "double",
      "name": "e1_10"
     },
     {
      "type": "double",
      "name": "e1_11"
     },
     {
      "type": "double",
      "name": "e1_12"
     },
     {
      "type": "double",
      "name": "e2_01"
     },
     {
      "type": "double",
      "name": "e2_06"
     },
     {
      "type": "double",
      "name": "e2_07"
     },
     {
      "type": "double",
      "name": "e2_08"
     },
     {
      "type": "double",
      "name": "e2_09"
     },
     {
      "type": "double",
      "name": "e2_10"
     },
     {
      "type": "double",
      "name": "e2_11"
     },
     {
      "type": "double",
      "name": "e2_12"
     }
    ],
    "name": "DormandPrince853Integrator",
    "methods": [
     {
      "type": "int",
      "name": "getOrder",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateError",
      "params": [
       {
        "type": "double",
        "name": "yDotK"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "y1"
       },
       {
        "type": "double",
        "name": "h"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "DormandPrince853Integrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "c"
     },
     {
      "type": "double",
      "name": "a"
     },
     {
      "type": "double",
      "name": "b"
     }
    ],
    "name": "MidpointIntegrator",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "MidpointIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "EulerStepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "computeInterpolatedState",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "EulerStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "HighamHall54StepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "computeInterpolatedState",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "HighamHall54StepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "previousT"
     },
     {
      "type": "double",
      "name": "previousF"
     }
    ],
    "name": "MultistepStepInterpolator",
    "methods": [
     {
      "type": null,
      "name": "reinitialize",
      "params": [
       {
        "type": "double",
        "name": "y"
       },
       {
        "type": "double",
        "name": "previousT"
       },
       {
        "type": "double",
        "name": "previousF"
       },
       {
        "type": "boolean",
        "name": "forward"
       }
      ]
     },
     {
      "type": null,
      "name": "initializeCoefficients",
      "params": []
     },
     {
      "type": null,
      "name": "writeExternal",
      "params": [
       {
        "type": "ObjectOutput",
        "name": "out"
       }
      ]
     },
     {
      "type": null,
      "name": "readExternal",
      "params": [
       {
        "type": "ObjectInput",
        "name": "in"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "MultistepStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "ThreeEighthesStepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "computeInterpolatedState",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "ThreeEighthesStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "METHOD_NAME"
     },
     {
      "type": "double",
      "name": "coeffs"
     },
     {
      "type": "double",
      "name": "step"
     }
    ],
    "name": "AdamsBashforthIntegrator",
    "methods": [
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "getCoeffs",
      "params": []
     },
     {
      "type": "int",
      "name": "computeBackwardDifferencesArray",
      "params": [
       {
        "type": "int",
        "name": "order"
       }
      ]
     },
     {
      "type": "Fraction",
      "name": "computeGammaArray",
      "params": [
       {
        "type": "int",
        "name": "order"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "AdamsBashforthIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "neville"
     },
     {
      "type": "double",
      "name": "rollback"
     },
     {
      "type": "double",
      "name": "gammaStar"
     },
     {
      "type": "int",
      "name": "bdArray"
     },
     {
      "type": "double",
      "name": "nonTruncatedEnd"
     },
     {
      "type": "double",
      "name": "nonTruncatedH"
     }
    ],
    "name": "AdamsMoultonStepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "initializeCoefficients",
      "params": []
     },
     {
      "type": null,
      "name": "storeTime",
      "params": [
       {
        "type": "double",
        "name": "t"
       }
      ]
     },
     {
      "type": null,
      "name": "truncateStep",
      "params": [
       {
        "type": "double",
        "name": "truncatedEndTime"
       }
      ]
     },
     {
      "type": null,
      "name": "setInterpolatedTime",
      "params": [
       {
        "type": "double",
        "name": "time"
       }
      ]
     },
     {
      "type": null,
      "name": "computeInterpolatedState",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     },
     {
      "type": null,
      "name": "interpolateDerivatives",
      "params": []
     },
     {
      "type": null,
      "name": "interpolateState",
      "params": [
       {
        "type": "double",
        "name": "theta"
       }
      ]
     },
     {
      "type": null,
      "name": "computeRollback",
      "params": [
       {
        "type": "int",
        "name": "order"
       },
       {
        "type": "double",
        "name": "theta"
       }
      ]
     },
     {
      "type": null,
      "name": "writeExternal",
      "params": [
       {
        "type": "ObjectOutput",
        "name": "out"
       }
      ]
     },
     {
      "type": null,
      "name": "readExternal",
      "params": [
       {
        "type": "ObjectInput",
        "name": "in"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "AdamsMoultonStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "c"
     },
     {
      "type": "double",
      "name": "a"
     },
     {
      "type": "double",
      "name": "b"
     }
    ],
    "name": "EulerIntegrator",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "EulerIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "c"
     },
     {
      "type": "double",
      "name": "a"
     },
     {
      "type": "double",
      "name": "b"
     }
    ],
    "name": "ThreeEighthesIntegrator",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "ThreeEighthesIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "ClassicalRungeKuttaStepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "computeInterpolatedState",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "ClassicalRungeKuttaStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "METHOD_NAME"
     },
     {
      "type": "double",
      "name": "staticC"
     },
     {
      "type": "double",
      "name": "staticA"
     },
     {
      "type": "double",
      "name": "staticB"
     },
     {
      "type": "double",
      "name": "staticE"
     }
    ],
    "name": "HighamHall54Integrator",
    "methods": [
     {
      "type": "int",
      "name": "getOrder",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateError",
      "params": [
       {
        "type": "double",
        "name": "yDotK"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "y1"
       },
       {
        "type": "double",
        "name": "h"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "HighamHall54Integrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "tMq"
     },
     {
      "type": "double",
      "name": "tPq"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "GillStepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "computeInterpolatedState",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "GillStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "METHOD_NAME"
     },
     {
      "type": "double",
      "name": "staticC"
     },
     {
      "type": "double",
      "name": "staticA"
     },
     {
      "type": "double",
      "name": "staticB"
     },
     {
      "type": "double",
      "name": "e1"
     },
     {
      "type": "double",
      "name": "e3"
     },
     {
      "type": "double",
      "name": "e4"
     },
     {
      "type": "double",
      "name": "e5"
     },
     {
      "type": "double",
      "name": "e6"
     },
     {
      "type": "double",
      "name": "e7"
     }
    ],
    "name": "DormandPrince54Integrator",
    "methods": [
     {
      "type": "int",
      "name": "getOrder",
      "params": []
     },
     {
      "type": "double",
      "name": "estimateError",
      "params": [
       {
        "type": "double",
        "name": "yDotK"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "y1"
       },
       {
        "type": "double",
        "name": "h"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "DormandPrince54Integrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "MidpointStepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "computeInterpolatedState",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "MidpointStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "String",
      "name": "METHOD_NAME"
     },
     {
      "type": "int",
      "name": "maxOrder"
     },
     {
      "type": "int",
      "name": "sequence"
     },
     {
      "type": "int",
      "name": "costPerStep"
     },
     {
      "type": "double",
      "name": "costPerTimeUnit"
     },
     {
      "type": "double",
      "name": "optimalStep"
     },
     {
      "type": "double",
      "name": "coeff"
     },
     {
      "type": "boolean",
      "name": "performTest"
     },
     {
      "type": "int",
      "name": "maxChecks"
     },
     {
      "type": "int",
      "name": "maxIter"
     },
     {
      "type": "double",
      "name": "stabilityReduction"
     },
     {
      "type": "double",
      "name": "stepControl1"
     },
     {
      "type": "double",
      "name": "stepControl2"
     },
     {
      "type": "double",
      "name": "stepControl3"
     },
     {
      "type": "double",
      "name": "stepControl4"
     },
     {
      "type": "double",
      "name": "orderControl1"
     },
     {
      "type": "double",
      "name": "orderControl2"
     },
     {
      "type": "boolean",
      "name": "denseOutput"
     },
     {
      "type": "boolean",
      "name": "useInterpolationError"
     },
     {
      "type": "int",
      "name": "mudif"
     }
    ],
    "name": "GraggBulirschStoerIntegrator",
    "methods": [
     {
      "type": null,
      "name": "setStabilityCheck",
      "params": [
       {
        "type": "boolean",
        "name": "performTest"
       },
       {
        "type": "int",
        "name": "maxIter"
       },
       {
        "type": "int",
        "name": "maxChecks"
       },
       {
        "type": "double",
        "name": "stabilityReduction"
       }
      ]
     },
     {
      "type": null,
      "name": "setStepsizeControl",
      "params": [
       {
        "type": "double",
        "name": "stepControl1"
       },
       {
        "type": "double",
        "name": "stepControl2"
       },
       {
        "type": "double",
        "name": "stepControl3"
       },
       {
        "type": "double",
        "name": "stepControl4"
       }
      ]
     },
     {
      "type": null,
      "name": "setOrderControl",
      "params": [
       {
        "type": "int",
        "name": "maxOrder"
       },
       {
        "type": "double",
        "name": "orderControl1"
       },
       {
        "type": "double",
        "name": "orderControl2"
       }
      ]
     },
     {
      "type": null,
      "name": "addStepHandler",
      "params": [
       {
        "type": "StepHandler",
        "name": "handler"
       }
      ]
     },
     {
      "type": null,
      "name": "addEventHandler",
      "params": [
       {
        "type": "EventHandler",
        "name": "function"
       },
       {
        "type": "double",
        "name": "maxCheckInterval"
       },
       {
        "type": "double",
        "name": "convergence"
       },
       {
        "type": "int",
        "name": "maxIterationCount"
       }
      ]
     },
     {
      "type": null,
      "name": "initializeArrays",
      "params": []
     },
     {
      "type": null,
      "name": "setInterpolationControl",
      "params": [
       {
        "type": "boolean",
        "name": "useInterpolationError"
       },
       {
        "type": "int",
        "name": "mudif"
       }
      ]
     },
     {
      "type": null,
      "name": "rescale",
      "params": [
       {
        "type": "double",
        "name": "y1"
       },
       {
        "type": "double",
        "name": "y2"
       },
       {
        "type": "double",
        "name": "scale"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "tryStep",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "step"
       },
       {
        "type": "int",
        "name": "k"
       },
       {
        "type": "double",
        "name": "scale"
       },
       {
        "type": "double",
        "name": "f"
       },
       {
        "type": "double",
        "name": "yMiddle"
       },
       {
        "type": "double",
        "name": "yEnd"
       },
       {
        "type": "double",
        "name": "yTmp"
       }
      ]
     },
     {
      "type": null,
      "name": "extrapolate",
      "params": [
       {
        "type": "int",
        "name": "offset"
       },
       {
        "type": "int",
        "name": "k"
       },
       {
        "type": "double",
        "name": "diag"
       },
       {
        "type": "double",
        "name": "last"
       }
      ]
     },
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "GraggBulirschStoerIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     },
     {
      "type": "double",
      "name": "neville"
     },
     {
      "type": "double",
      "name": "rollback"
     },
     {
      "type": "double",
      "name": "gamma"
     },
     {
      "type": "int",
      "name": "bdArray"
     },
     {
      "type": "double",
      "name": "nonTruncatedEnd"
     },
     {
      "type": "double",
      "name": "nonTruncatedH"
     }
    ],
    "name": "AdamsBashforthStepInterpolator",
    "methods": [
     {
      "type": "StepInterpolator",
      "name": "doCopy",
      "params": []
     },
     {
      "type": null,
      "name": "initializeCoefficients",
      "params": []
     },
     {
      "type": null,
      "name": "storeTime",
      "params": [
       {
        "type": "double",
        "name": "t"
       }
      ]
     },
     {
      "type": null,
      "name": "truncateStep",
      "params": [
       {
        "type": "double",
        "name": "truncatedEndTime"
       }
      ]
     },
     {
      "type": null,
      "name": "setInterpolatedTime",
      "params": [
       {
        "type": "double",
        "name": "time"
       }
      ]
     },
     {
      "type": null,
      "name": "computeInterpolatedState",
      "params": [
       {
        "type": "double",
        "name": "theta"
       },
       {
        "type": "double",
        "name": "oneMinusThetaH"
       }
      ]
     },
     {
      "type": null,
      "name": "interpolateDerivatives",
      "params": []
     },
     {
      "type": null,
      "name": "interpolateState",
      "params": [
       {
        "type": "double",
        "name": "theta"
       }
      ]
     },
     {
      "type": null,
      "name": "computeRollback",
      "params": [
       {
        "type": "int",
        "name": "order"
       },
       {
        "type": "double",
        "name": "theta"
       }
      ]
     },
     {
      "type": null,
      "name": "writeExternal",
      "params": [
       {
        "type": "ObjectOutput",
        "name": "out"
       }
      ]
     },
     {
      "type": null,
      "name": "readExternal",
      "params": [
       {
        "type": "ObjectInput",
        "name": "in"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "AdamsBashforthStepInterpolator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "boolean",
      "name": "fsal"
     },
     {
      "type": "double",
      "name": "c"
     },
     {
      "type": "double",
      "name": "a"
     },
     {
      "type": "double",
      "name": "b"
     },
     {
      "type": "RungeKuttaStepInterpolator",
      "name": "prototype"
     },
     {
      "type": "double",
      "name": "exp"
     },
     {
      "type": "double",
      "name": "safety"
     },
     {
      "type": "double",
      "name": "minReduction"
     },
     {
      "type": "double",
      "name": "maxGrowth"
     }
    ],
    "name": "EmbeddedRungeKuttaIntegrator",
    "methods": [
     {
      "type": "int",
      "name": "getOrder",
      "params": []
     },
     {
      "type": "double",
      "name": "getSafety",
      "params": []
     },
     {
      "type": null,
      "name": "setSafety",
      "params": [
       {
        "type": "double",
        "name": "safety"
       }
      ]
     },
     {
      "type": "double",
      "name": "integrate",
      "params": [
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "t"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": "double",
      "name": "getMinReduction",
      "params": []
     },
     {
      "type": null,
      "name": "setMinReduction",
      "params": [
       {
        "type": "double",
        "name": "minReduction"
       }
      ]
     },
     {
      "type": "double",
      "name": "getMaxGrowth",
      "params": []
     },
     {
      "type": null,
      "name": "setMaxGrowth",
      "params": [
       {
        "type": "double",
        "name": "maxGrowth"
       }
      ]
     },
     {
      "type": "double",
      "name": "estimateError",
      "params": [
       {
        "type": "double",
        "name": "yDotK"
       },
       {
        "type": "double",
        "name": "y0"
       },
       {
        "type": "double",
        "name": "y1"
       },
       {
        "type": "double",
        "name": "h"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "EmbeddedRungeKuttaIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "FirstOrderIntegrator",
      "name": "starter"
     },
     {
      "type": "double",
      "name": "previousT"
     },
     {
      "type": "double",
      "name": "previousF"
     },
     {
      "type": "double",
      "name": "resetTime"
     },
     {
      "type": "MultistepStepInterpolator",
      "name": "prototype"
     }
    ],
    "name": "MultistepIntegrator",
    "methods": [
     {
      "type": "ODEIntegrator",
      "name": "getStarterIntegrator",
      "params": []
     },
     {
      "type": null,
      "name": "setStarterIntegrator",
      "params": [
       {
        "type": "FirstOrderIntegrator",
        "name": "starter"
       }
      ]
     },
     {
      "type": "double",
      "name": "start",
      "params": [
       {
        "type": "int",
        "name": "n"
       },
       {
        "type": "double",
        "name": "h"
       },
       {
        "type": "CombinedEventsManager",
        "name": "manager"
       },
       {
        "type": "FirstOrderDifferentialEquations",
        "name": "equations"
       },
       {
        "type": "double",
        "name": "t0"
       },
       {
        "type": "double",
        "name": "y"
       }
      ]
     },
     {
      "type": null,
      "name": "rotatePreviousSteps",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.ode.nonstiff",
  "filename": "MultistepIntegrator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "List",
      "name": "parameters"
     },
     {
      "type": "List",
      "name": "measurements"
     }
    ],
    "name": "SimpleEstimationProblem",
    "methods": [
     {
      "type": "EstimatedParameter",
      "name": "getAllParameters",
      "params": []
     },
     {
      "type": "EstimatedParameter",
      "name": "getUnboundParameters",
      "params": []
     },
     {
      "type": "WeightedMeasurement",
      "name": "getMeasurements",
      "params": []
     },
     {
      "type": null,
      "name": "addParameter",
      "params": [
       {
        "type": "EstimatedParameter",
        "name": "p"
       }
      ]
     },
     {
      "type": null,
      "name": "addMeasurement",
      "params": [
       {
        "type": "WeightedMeasurement",
        "name": "m"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.estimation",
  "filename": "SimpleEstimationProblem.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "int",
      "name": "solvedCols"
     },
     {
      "type": "double",
      "name": "diagR"
     },
     {
      "type": "double",
      "name": "jacNorm"
     },
     {
      "type": "double",
      "name": "beta"
     },
     {
      "type": "int",
      "name": "permutation"
     },
     {
      "type": "int",
      "name": "rank"
     },
     {
      "type": "double",
      "name": "lmPar"
     },
     {
      "type": "double",
      "name": "lmDir"
     },
     {
      "type": "double",
      "name": "initialStepBoundFactor"
     },
     {
      "type": "double",
      "name": "costRelativeTolerance"
     },
     {
      "type": "double",
      "name": "parRelativeTolerance"
     },
     {
      "type": "double",
      "name": "orthoTolerance"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "LevenbergMarquardtEstimator",
    "methods": [
     {
      "type": null,
      "name": "setInitialStepBoundFactor",
      "params": [
       {
        "type": "double",
        "name": "initialStepBoundFactor"
       }
      ]
     },
     {
      "type": null,
      "name": "setCostRelativeTolerance",
      "params": [
       {
        "type": "double",
        "name": "costRelativeTolerance"
       }
      ]
     },
     {
      "type": null,
      "name": "setParRelativeTolerance",
      "params": [
       {
        "type": "double",
        "name": "parRelativeTolerance"
       }
      ]
     },
     {
      "type": null,
      "name": "setOrthoTolerance",
      "params": [
       {
        "type": "double",
        "name": "orthoTolerance"
       }
      ]
     },
     {
      "type": null,
      "name": "estimate",
      "params": [
       {
        "type": "EstimationProblem",
        "name": "problem"
       }
      ]
     },
     {
      "type": null,
      "name": "determineLMParameter",
      "params": [
       {
        "type": "double",
        "name": "qy"
       },
       {
        "type": "double",
        "name": "delta"
       },
       {
        "type": "double",
        "name": "diag"
       },
       {
        "type": "double",
        "name": "work1"
       },
       {
        "type": "double",
        "name": "work2"
       },
       {
        "type": "double",
        "name": "work3"
       }
      ]
     },
     {
      "type": null,
      "name": "determineLMDirection",
      "params": [
       {
        "type": "double",
        "name": "qy"
       },
       {
        "type": "double",
        "name": "diag"
       },
       {
        "type": "double",
        "name": "lmDiag"
       },
       {
        "type": "double",
        "name": "work"
       }
      ]
     },
     {
      "type": null,
      "name": "qrDecomposition",
      "params": []
     },
     {
      "type": null,
      "name": "qTy",
      "params": [
       {
        "type": "double",
        "name": "y"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.estimation",
  "filename": "LevenbergMarquardtEstimator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "weight"
     },
     {
      "type": "double",
      "name": "measuredValue"
     },
     {
      "type": "boolean",
      "name": "ignored"
     }
    ],
    "name": "WeightedMeasurement",
    "methods": [
     {
      "type": "double",
      "name": "getWeight",
      "params": []
     },
     {
      "type": "double",
      "name": "getMeasuredValue",
      "params": []
     },
     {
      "type": "double",
      "name": "getResidual",
      "params": []
     },
     {
      "type": "double",
      "name": "getTheoreticalValue",
      "params": []
     },
     {
      "type": "double",
      "name": "getPartial",
      "params": [
       {
        "type": "EstimatedParameter",
        "name": "parameter"
       }
      ]
     },
     {
      "type": null,
      "name": "setIgnored",
      "params": [
       {
        "type": "boolean",
        "name": "ignored"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isIgnored",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.estimation",
  "filename": "WeightedMeasurement.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "Estimator",
    "methods": [
     {
      "type": null,
      "name": "estimate",
      "params": [
       {
        "type": "EstimationProblem",
        "name": "problem"
       }
      ]
     },
     {
      "type": "double",
      "name": "getRMS",
      "params": [
       {
        "type": "EstimationProblem",
        "name": "problem"
       }
      ]
     },
     {
      "type": "double",
      "name": "getCovariances",
      "params": [
       {
        "type": "EstimationProblem",
        "name": "problem"
       }
      ]
     },
     {
      "type": "double",
      "name": "guessParametersErrors",
      "params": [
       {
        "type": "EstimationProblem",
        "name": "problem"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.estimation",
  "filename": "Estimator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "EstimationException",
    "methods": []
   }
  ],
  "package_name": "org.apache.commons.math.estimation",
  "filename": "EstimationException.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "String",
      "name": "name"
     },
     {
      "type": "double",
      "name": "estimate"
     },
     {
      "type": "boolean",
      "name": "bound"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "EstimatedParameter",
    "methods": [
     {
      "type": null,
      "name": "setEstimate",
      "params": [
       {
        "type": "double",
        "name": "estimate"
       }
      ]
     },
     {
      "type": "double",
      "name": "getEstimate",
      "params": []
     },
     {
      "type": "String",
      "name": "getName",
      "params": []
     },
     {
      "type": null,
      "name": "setBound",
      "params": [
       {
        "type": "boolean",
        "name": "bound"
       }
      ]
     },
     {
      "type": "boolean",
      "name": "isBound",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.estimation",
  "filename": "EstimatedParameter.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "double",
      "name": "steadyStateThreshold"
     },
     {
      "type": "double",
      "name": "convergence"
     },
     {
      "type": "long",
      "name": "serialVersionUID"
     }
    ],
    "name": "GaussNewtonEstimator",
    "methods": [
     {
      "type": null,
      "name": "estimate",
      "params": [
       {
        "type": "EstimationProblem",
        "name": "problem"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.estimation",
  "filename": "GaussNewtonEstimator.java"
 },
 {
  "classes": [
   {
    "fields": [
     {
      "type": "WeightedMeasurement",
      "name": "measurements"
     },
     {
      "type": "EstimatedParameter",
      "name": "parameters"
     },
     {
      "type": "double",
      "name": "jacobian"
     },
     {
      "type": "int",
      "name": "cols"
     },
     {
      "type": "int",
      "name": "rows"
     },
     {
      "type": "double",
      "name": "residuals"
     },
     {
      "type": "double",
      "name": "cost"
     },
     {
      "type": "int",
      "name": "maxCostEval"
     },
     {
      "type": "int",
      "name": "costEvaluations"
     },
     {
      "type": "int",
      "name": "jacobianEvaluations"
     }
    ],
    "name": "AbstractEstimator",
    "methods": [
     {
      "type": null,
      "name": "setMaxCostEval",
      "params": [
       {
        "type": "int",
        "name": "maxCostEval"
       }
      ]
     },
     {
      "type": "int",
      "name": "getCostEvaluations",
      "params": []
     },
     {
      "type": "int",
      "name": "getJacobianEvaluations",
      "params": []
     },
     {
      "type": null,
      "name": "updateJacobian",
      "params": []
     },
     {
      "type": null,
      "name": "incrementJacobianEvaluationsCounter",
      "params": []
     },
     {
      "type": null,
      "name": "updateResidualsAndCost",
      "params": []
     },
     {
      "type": "double",
      "name": "getRMS",
      "params": [
       {
        "type": "EstimationProblem",
        "name": "problem"
       }
      ]
     },
     {
      "type": "double",
      "name": "getChiSquare",
      "params": [
       {
        "type": "EstimationProblem",
        "name": "problem"
       }
      ]
     },
     {
      "type": "double",
      "name": "getCovariances",
      "params": [
       {
        "type": "EstimationProblem",
        "name": "problem"
       }
      ]
     },
     {
      "type": "double",
      "name": "guessParametersErrors",
      "params": [
       {
        "type": "EstimationProblem",
        "name": "problem"
       }
      ]
     },
     {
      "type": null,
      "name": "initializeEstimate",
      "params": [
       {
        "type": "EstimationProblem",
        "name": "problem"
       }
      ]
     },
     {
      "type": null,
      "name": "estimate",
      "params": [
       {
        "type": "EstimationProblem",
        "name": "problem"
       }
      ]
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.estimation",
  "filename": "AbstractEstimator.java"
 },
 {
  "classes": [
   {
    "fields": [],
    "name": "EstimationProblem",
    "methods": [
     {
      "type": "WeightedMeasurement",
      "name": "getMeasurements",
      "params": []
     },
     {
      "type": "EstimatedParameter",
      "name": "getUnboundParameters",
      "params": []
     },
     {
      "type": "EstimatedParameter",
      "name": "getAllParameters",
      "params": []
     }
    ]
   }
  ],
  "package_name": "org.apache.commons.math.estimation",
  "filename": "EstimationProblem.java"
 }
]