[
 {
  "filename": "NameReferenceGraph.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "isExtern",
        "type": "boolean"
       }
      ],
      "name": "defineNameIfNotExists",
      "type": "Name"
     },
     {
      "params": [
       {
        "name": "site",
        "type": "Node"
       }
      ],
      "name": "getReferencesAt",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "useSite",
        "type": "Node"
       }
      ],
      "name": "getDefinitionsReferencedAt",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getSymbol",
      "type": "Name"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "Name"
       }
      ],
      "name": "createNode",
      "type": "GraphNode"
     },
     {
      "params": [
       {
        "name": "src",
        "type": "Name"
       },
       {
        "name": "ref",
        "type": "Reference"
       },
       {
        "name": "dest",
        "type": "Name"
       }
      ],
      "name": "connect",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "referenceMap",
      "type": "Multimap"
     },
     {
      "name": "nameMap",
      "type": "Map"
     },
     {
      "name": "UNKNOWN",
      "type": "Name"
     },
     {
      "name": "MAIN",
      "type": "Name"
     },
     {
      "name": "WINDOW",
      "type": "Name"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "NameReferenceGraph"
   }
  ]
 },
 {
  "filename": "DeadAssignmentsElimination.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "enterScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "exitScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "cfg",
        "type": "ControlFlowGraph"
       }
      ],
      "name": "tryRemoveDeadAssignments",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "state",
        "type": "FlowState"
       }
      ],
      "name": "tryRemoveAssignment",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "exprRoot",
        "type": "Node"
       },
       {
        "name": "state",
        "type": "FlowState"
       }
      ],
      "name": "tryRemoveAssignment",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "exprRoot",
        "type": "Node"
       },
       {
        "name": "variable",
        "type": "String"
       }
      ],
      "name": "isVariableStillLiveWithinExpression",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "variable",
        "type": "String"
       }
      ],
      "name": "isVariableReadBeforeKill",
      "type": "VariableLiveness"
     },
     {
      "params": [
       {
        "name": "trueCase",
        "type": "Node"
       },
       {
        "name": "falseCase",
        "type": "Node"
       },
       {
        "name": "variable",
        "type": "String"
       }
      ],
      "name": "checkHookBranchReadBeforeKill",
      "type": "VariableLiveness"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "liveness",
      "type": "LiveVariablesAnalysis"
     },
     {
      "name": "matchRemovableAssigns",
      "type": "Predicate"
     }
    ],
    "name": "DeadAssignmentsElimination"
   }
  ]
 },
 {
  "filename": "InlineVariables.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "getFilterForMode",
      "type": "Predicate"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "mode",
      "type": "Mode"
     },
     {
      "name": "inlineAllStrings",
      "type": "boolean"
     },
     {
      "name": "identifyConstants",
      "type": "IdentifyConstants"
     }
    ],
    "name": "InlineVariables"
   }
  ]
 },
 {
  "filename": "VariableRenamingPolicy.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [],
    "fields": [],
    "name": "VariableRenamingPolicy"
   }
  ]
 },
 {
  "filename": "CompilerOptions.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       }
      ],
      "name": "setCheckShadowVars",
      "type": null
     },
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       }
      ],
      "name": "setAggressiveVarCheck",
      "type": null
     },
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       }
      ],
      "name": "setCheckFunctions",
      "type": null
     },
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       }
      ],
      "name": "setCheckMethods",
      "type": null
     },
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       }
      ],
      "name": "setReportMissingOverride",
      "type": null
     },
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       }
      ],
      "name": "setReportUnknownTypes",
      "type": null
     },
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       }
      ],
      "name": "setCheckRequires",
      "type": null
     },
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       }
      ],
      "name": "setCheckProvides",
      "type": null
     },
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       }
      ],
      "name": "setCheckGlobalNamesLevel",
      "type": null
     },
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       }
      ],
      "name": "setBrokenClosureRequiresLevel",
      "type": null
     },
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       }
      ],
      "name": "setCheckGlobalThisLevel",
      "type": null
     },
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       }
      ],
      "name": "setCheckMissingGetCssNameLevel",
      "type": null
     },
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       }
      ],
      "name": "setCheckUnreachableCode",
      "type": null
     },
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       }
      ],
      "name": "setCheckMissingReturn",
      "type": null
     },
     {
      "params": [],
      "name": "getDefineReplacements",
      "type": "Map"
     },
     {
      "params": [],
      "name": "getTweakReplacements",
      "type": "Map"
     },
     {
      "params": [
       {
        "name": "source",
        "type": "Map"
       }
      ],
      "name": "getReplacementsHelper",
      "type": "Map"
     },
     {
      "params": [
       {
        "name": "defineName",
        "type": "String"
       },
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setDefineToBooleanLiteral",
      "type": null
     },
     {
      "params": [
       {
        "name": "defineName",
        "type": "String"
       },
       {
        "name": "value",
        "type": "String"
       }
      ],
      "name": "setDefineToStringLiteral",
      "type": null
     },
     {
      "params": [
       {
        "name": "defineName",
        "type": "String"
       },
       {
        "name": "value",
        "type": "int"
       }
      ],
      "name": "setDefineToNumberLiteral",
      "type": null
     },
     {
      "params": [
       {
        "name": "defineName",
        "type": "String"
       },
       {
        "name": "value",
        "type": "double"
       }
      ],
      "name": "setDefineToDoubleLiteral",
      "type": null
     },
     {
      "params": [
       {
        "name": "tweakId",
        "type": "String"
       },
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setTweakToBooleanLiteral",
      "type": null
     },
     {
      "params": [
       {
        "name": "tweakId",
        "type": "String"
       },
       {
        "name": "value",
        "type": "String"
       }
      ],
      "name": "setTweakToStringLiteral",
      "type": null
     },
     {
      "params": [
       {
        "name": "tweakId",
        "type": "String"
       },
       {
        "name": "value",
        "type": "int"
       }
      ],
      "name": "setTweakToNumberLiteral",
      "type": null
     },
     {
      "params": [
       {
        "name": "tweakId",
        "type": "String"
       },
       {
        "name": "value",
        "type": "double"
       }
      ],
      "name": "setTweakToDoubleLiteral",
      "type": null
     },
     {
      "params": [],
      "name": "skipAllCompilerPasses",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "DiagnosticGroup"
       }
      ],
      "name": "enables",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "DiagnosticGroup"
       }
      ],
      "name": "disables",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "DiagnosticGroup"
       },
       {
        "name": "level",
        "type": "CheckLevel"
       }
      ],
      "name": "setWarningLevel",
      "type": null
     },
     {
      "params": [],
      "name": "getWarningsGuard",
      "type": "WarningsGuard"
     },
     {
      "params": [],
      "name": "resetWarningsGuard",
      "type": null
     },
     {
      "params": [],
      "name": "useEmergencyFailSafe",
      "type": null
     },
     {
      "params": [
       {
        "name": "guard",
        "type": "WarningsGuard"
       }
      ],
      "name": "addWarningsGuard",
      "type": null
     },
     {
      "params": [
       {
        "name": "newVariablePolicy",
        "type": "VariableRenamingPolicy"
       },
       {
        "name": "newPropertyPolicy",
        "type": "PropertyRenamingPolicy"
       }
      ],
      "name": "setRenamingPolicy",
      "type": null
     },
     {
      "params": [
       {
        "name": "useAffinity",
        "type": "boolean"
       }
      ],
      "name": "setPropertyAffinity",
      "type": null
     },
     {
      "params": [
       {
        "name": "shadow",
        "type": "boolean"
       }
      ],
      "name": "setShadowVariables",
      "type": null
     },
     {
      "params": [
       {
        "name": "collapse",
        "type": "boolean"
       }
      ],
      "name": "setCollapsePropertiesOnExternTypes",
      "type": null
     },
     {
      "params": [
       {
        "name": "process",
        "type": "boolean"
       }
      ],
      "name": "setProcessObjectPropertyString",
      "type": null
     },
     {
      "params": [
       {
        "name": "idGenerators",
        "type": "Set"
       }
      ],
      "name": "setIdGenerators",
      "type": null
     },
     {
      "params": [
       {
        "name": "placeholderToken",
        "type": "String"
       },
       {
        "name": "functionDescriptors",
        "type": "List"
       }
      ],
      "name": "setReplaceStringsConfiguration",
      "type": null
     },
     {
      "params": [
       {
        "name": "rewrite",
        "type": "boolean"
       }
      ],
      "name": "setRewriteNewDateGoogNow",
      "type": null
     },
     {
      "params": [
       {
        "name": "remove",
        "type": "boolean"
       }
      ],
      "name": "setRemoveAbstractMethods",
      "type": null
     },
     {
      "params": [
       {
        "name": "remove",
        "type": "boolean"
       }
      ],
      "name": "setRemoveClosureAsserts",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setNameAnonymousFunctionsOnly",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "int"
       }
      ],
      "name": "lineLengthThreshold",
      "type": null
     },
     {
      "params": [
       {
        "name": "colorizeErrorOutput",
        "type": "boolean"
       }
      ],
      "name": "setColorizeErrorOutput",
      "type": null
     },
     {
      "params": [],
      "name": "shouldColorizeErrorOutput",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setChainCalls",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setAcceptConstKeyword",
      "type": null
     },
     {
      "params": [
       {
        "name": "logFunction",
        "type": "String"
       }
      ],
      "name": "enableRuntimeTypeCheck",
      "type": null
     },
     {
      "params": [],
      "name": "disableRuntimeTypeCheck",
      "type": null
     },
     {
      "params": [
       {
        "name": "generateExports",
        "type": "boolean"
       }
      ],
      "name": "setGenerateExports",
      "type": null
     },
     {
      "params": [
       {
        "name": "codingConvention",
        "type": "CodingConvention"
       }
      ],
      "name": "setCodingConvention",
      "type": null
     },
     {
      "params": [],
      "name": "getCodingConvention",
      "type": "CodingConvention"
     },
     {
      "params": [
       {
        "name": "newVal",
        "type": "boolean"
       }
      ],
      "name": "setManageClosureDependencies",
      "type": null
     },
     {
      "params": [
       {
        "name": "entryPoints",
        "type": "List"
       }
      ],
      "name": "setManageClosureDependencies",
      "type": null
     },
     {
      "params": [
       {
        "name": "summaryDetailLevel",
        "type": "int"
       }
      ],
      "name": "setSummaryDetailLevel",
      "type": null
     },
     {
      "params": [
       {
        "name": "enable",
        "type": "boolean"
       }
      ],
      "name": "enableExternExports",
      "type": null
     },
     {
      "params": [
       {
        "name": "extraAnnotationNames",
        "type": "Set"
       }
      ],
      "name": "setExtraAnnotationNames",
      "type": null
     },
     {
      "params": [],
      "name": "isExternExportsEnabled",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "charsetName",
        "type": "String"
       }
      ],
      "name": "setOutputCharset",
      "type": null
     },
     {
      "params": [
       {
        "name": "tweakProcessing",
        "type": "TweakProcessing"
       }
      ],
      "name": "setTweakProcessing",
      "type": null
     },
     {
      "params": [],
      "name": "getTweakProcessing",
      "type": "TweakProcessing"
     },
     {
      "params": [
       {
        "name": "languageIn",
        "type": "LanguageMode"
       }
      ],
      "name": "setLanguageIn",
      "type": null
     },
     {
      "params": [],
      "name": "getLanguageIn",
      "type": "LanguageMode"
     },
     {
      "params": [],
      "name": "getLanguageOut",
      "type": "LanguageMode"
     },
     {
      "params": [
       {
        "name": "looseTypes",
        "type": "boolean"
       }
      ],
      "name": "setLooseTypes",
      "type": null
     },
     {
      "params": [],
      "name": "clone",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "changes",
        "type": "AliasTransformationHandler"
       }
      ],
      "name": "setAliasTransformationHandler",
      "type": null
     },
     {
      "params": [],
      "name": "getAliasTransformationHandler",
      "type": "AliasTransformationHandler"
     },
     {
      "params": [
       {
        "name": "enable",
        "type": "boolean"
       }
      ],
      "name": "setInferTypes",
      "type": null
     },
     {
      "params": [],
      "name": "getInferTypes",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isAssumeStrictThis",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "enable",
        "type": "boolean"
       }
      ],
      "name": "setAssumeStrictThis",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "languageIn",
      "type": "LanguageMode"
     },
     {
      "name": "languageOut",
      "type": "LanguageMode"
     },
     {
      "name": "acceptConstKeyword",
      "type": "boolean"
     },
     {
      "name": "assumeStrictThis",
      "type": "boolean"
     },
     {
      "name": "ideMode",
      "type": "boolean"
     },
     {
      "name": "inferTypes",
      "type": "boolean"
     },
     {
      "name": "skipAllPasses",
      "type": "boolean"
     },
     {
      "name": "nameAnonymousFunctionsOnly",
      "type": "boolean"
     },
     {
      "name": "devMode",
      "type": "DevMode"
     },
     {
      "name": "manageClosureDependencies",
      "type": "boolean"
     },
     {
      "name": "manageClosureDependenciesEntryPoints",
      "type": "List"
     },
     {
      "name": "messageBundle",
      "type": "MessageBundle"
     },
     {
      "name": "checkSymbols",
      "type": "boolean"
     },
     {
      "name": "checkShadowVars",
      "type": "CheckLevel"
     },
     {
      "name": "aggressiveVarCheck",
      "type": "CheckLevel"
     },
     {
      "name": "checkFunctions",
      "type": "CheckLevel"
     },
     {
      "name": "checkMethods",
      "type": "CheckLevel"
     },
     {
      "name": "checkDuplicateMessages",
      "type": "boolean"
     },
     {
      "name": "allowLegacyJsMessages",
      "type": "boolean"
     },
     {
      "name": "strictMessageReplacement",
      "type": "boolean"
     },
     {
      "name": "checkSuspiciousCode",
      "type": "boolean"
     },
     {
      "name": "checkControlStructures",
      "type": "boolean"
     },
     {
      "name": "checkTypes",
      "type": "boolean"
     },
     {
      "name": "tightenTypes",
      "type": "boolean"
     },
     {
      "name": "inferTypesInGlobalScope",
      "type": "boolean"
     },
     {
      "name": "checkTypedPropertyCalls",
      "type": "boolean"
     },
     {
      "name": "reportMissingOverride",
      "type": "CheckLevel"
     },
     {
      "name": "reportUnknownTypes",
      "type": "CheckLevel"
     },
     {
      "name": "checkRequires",
      "type": "CheckLevel"
     },
     {
      "name": "checkProvides",
      "type": "CheckLevel"
     },
     {
      "name": "checkGlobalNamesLevel",
      "type": "CheckLevel"
     },
     {
      "name": "brokenClosureRequiresLevel",
      "type": "CheckLevel"
     },
     {
      "name": "checkGlobalThisLevel",
      "type": "CheckLevel"
     },
     {
      "name": "checkMissingGetCssNameLevel",
      "type": "CheckLevel"
     },
     {
      "name": "checkMissingGetCssNameBlacklist",
      "type": "String"
     },
     {
      "name": "checkEs5Strict",
      "type": "boolean"
     },
     {
      "name": "checkCaja",
      "type": "boolean"
     },
     {
      "name": "extraAnnotationNames",
      "type": "Set"
     },
     {
      "name": "foldConstants",
      "type": "boolean"
     },
     {
      "name": "deadAssignmentElimination",
      "type": "boolean"
     },
     {
      "name": "inlineConstantVars",
      "type": "boolean"
     },
     {
      "name": "inlineFunctions",
      "type": "boolean"
     },
     {
      "name": "decomposeExpressions",
      "type": "boolean"
     },
     {
      "name": "inlineAnonymousFunctionExpressions",
      "type": "boolean"
     },
     {
      "name": "inlineLocalFunctions",
      "type": "boolean"
     },
     {
      "name": "crossModuleCodeMotion",
      "type": "boolean"
     },
     {
      "name": "coalesceVariableNames",
      "type": "boolean"
     },
     {
      "name": "crossModuleMethodMotion",
      "type": "boolean"
     },
     {
      "name": "inlineGetters",
      "type": "boolean"
     },
     {
      "name": "inlineVariables",
      "type": "boolean"
     },
     {
      "name": "inlineLocalVariables",
      "type": "boolean"
     },
     {
      "name": "flowSensitiveInlineVariables",
      "type": "boolean"
     },
     {
      "name": "smartNameRemoval",
      "type": "boolean"
     },
     {
      "name": "removeDeadCode",
      "type": "boolean"
     },
     {
      "name": "checkUnreachableCode",
      "type": "CheckLevel"
     },
     {
      "name": "checkMissingReturn",
      "type": "CheckLevel"
     },
     {
      "name": "extractPrototypeMemberDeclarations",
      "type": "boolean"
     },
     {
      "name": "removeEmptyFunctions",
      "type": "boolean"
     },
     {
      "name": "removeUnusedPrototypeProperties",
      "type": "boolean"
     },
     {
      "name": "removeUnusedPrototypePropertiesInExterns",
      "type": "boolean"
     },
     {
      "name": "removeUnusedVars",
      "type": "boolean"
     },
     {
      "name": "removeUnusedLocalVars",
      "type": "boolean"
     },
     {
      "name": "aliasExternals",
      "type": "boolean"
     },
     {
      "name": "aliasableGlobals",
      "type": "String"
     },
     {
      "name": "unaliasableGlobals",
      "type": "String"
     },
     {
      "name": "collapseVariableDeclarations",
      "type": "boolean"
     },
     {
      "name": "groupVariableDeclarations",
      "type": "boolean"
     },
     {
      "name": "collapseAnonymousFunctions",
      "type": "boolean"
     },
     {
      "name": "aliasableStrings",
      "type": "Set"
     },
     {
      "name": "aliasStringsBlacklist",
      "type": "String"
     },
     {
      "name": "aliasAllStrings",
      "type": "boolean"
     },
     {
      "name": "outputJsStringUsage",
      "type": "boolean"
     },
     {
      "name": "convertToDottedProperties",
      "type": "boolean"
     },
     {
      "name": "rewriteFunctionExpressions",
      "type": "boolean"
     },
     {
      "name": "optimizeParameters",
      "type": "boolean"
     },
     {
      "name": "optimizeReturns",
      "type": "boolean"
     },
     {
      "name": "optimizeCalls",
      "type": "boolean"
     },
     {
      "name": "optimizeArgumentsArray",
      "type": "boolean"
     },
     {
      "name": "chainCalls",
      "type": "boolean"
     },
     {
      "name": "variableRenaming",
      "type": "VariableRenamingPolicy"
     },
     {
      "name": "propertyRenaming",
      "type": "PropertyRenamingPolicy"
     },
     {
      "name": "propertyAffinity",
      "type": "boolean"
     },
     {
      "name": "labelRenaming",
      "type": "boolean"
     },
     {
      "name": "reserveRawExports",
      "type": "boolean"
     },
     {
      "name": "shadowVariables",
      "type": "boolean"
     },
     {
      "name": "generatePseudoNames",
      "type": "boolean"
     },
     {
      "name": "renamePrefix",
      "type": "String"
     },
     {
      "name": "aliasKeywords",
      "type": "boolean"
     },
     {
      "name": "collapseProperties",
      "type": "boolean"
     },
     {
      "name": "collapseObjectLiterals",
      "type": "boolean"
     },
     {
      "name": "collapsePropertiesOnExternTypes",
      "type": "boolean"
     },
     {
      "name": "devirtualizePrototypeMethods",
      "type": "boolean"
     },
     {
      "name": "computeFunctionSideEffects",
      "type": "boolean"
     },
     {
      "name": "debugFunctionSideEffectsPath",
      "type": "String"
     },
     {
      "name": "disambiguateProperties",
      "type": "boolean"
     },
     {
      "name": "ambiguateProperties",
      "type": "boolean"
     },
     {
      "name": "anonymousFunctionNaming",
      "type": "AnonymousFunctionNamingPolicy"
     },
     {
      "name": "inputVariableMapSerialized",
      "type": "byte"
     },
     {
      "name": "inputPropertyMapSerialized",
      "type": "byte"
     },
     {
      "name": "exportTestFunctions",
      "type": "boolean"
     },
     {
      "name": "specializeInitialModule",
      "type": "boolean"
     },
     {
      "name": "runtimeTypeCheck",
      "type": "boolean"
     },
     {
      "name": "runtimeTypeCheckLogFunction",
      "type": "String"
     },
     {
      "name": "codingConvention",
      "type": "CodingConvention"
     },
     {
      "name": "instrumentForCoverage",
      "type": "boolean"
     },
     {
      "name": "instrumentForCoverageOnly",
      "type": "boolean"
     },
     {
      "name": "ignoreCajaProperties",
      "type": "boolean"
     },
     {
      "name": "syntheticBlockStartMarker",
      "type": "String"
     },
     {
      "name": "syntheticBlockEndMarker",
      "type": "String"
     },
     {
      "name": "locale",
      "type": "String"
     },
     {
      "name": "markAsCompiled",
      "type": "boolean"
     },
     {
      "name": "removeTryCatchFinally",
      "type": "boolean"
     },
     {
      "name": "closurePass",
      "type": "boolean"
     },
     {
      "name": "rewriteNewDateGoogNow",
      "type": "boolean"
     },
     {
      "name": "removeAbstractMethods",
      "type": "boolean"
     },
     {
      "name": "removeClosureAsserts",
      "type": "boolean"
     },
     {
      "name": "gatherCssNames",
      "type": "boolean"
     },
     {
      "name": "stripTypes",
      "type": "Set"
     },
     {
      "name": "stripNameSuffixes",
      "type": "Set"
     },
     {
      "name": "stripNamePrefixes",
      "type": "Set"
     },
     {
      "name": "stripTypePrefixes",
      "type": "Set"
     },
     {
      "name": "customPasses",
      "type": "Multimap"
     },
     {
      "name": "markNoSideEffectCalls",
      "type": "boolean"
     },
     {
      "name": "defineReplacements",
      "type": "Map"
     },
     {
      "name": "tweakProcessing",
      "type": "TweakProcessing"
     },
     {
      "name": "tweakReplacements",
      "type": "Map"
     },
     {
      "name": "moveFunctionDeclarations",
      "type": "boolean"
     },
     {
      "name": "instrumentationTemplate",
      "type": "String"
     },
     {
      "name": "appNameStr",
      "type": "String"
     },
     {
      "name": "recordFunctionInformation",
      "type": "boolean"
     },
     {
      "name": "generateExports",
      "type": "boolean"
     },
     {
      "name": "cssRenamingMap",
      "type": "CssRenamingMap"
     },
     {
      "name": "processObjectPropertyString",
      "type": "boolean"
     },
     {
      "name": "idGenerators",
      "type": "Set"
     },
     {
      "name": "replaceStringsFunctionDescriptions",
      "type": "List"
     },
     {
      "name": "replaceStringsPlaceholderToken",
      "type": "String"
     },
     {
      "name": "replaceStringsReservedStrings",
      "type": "Set"
     },
     {
      "name": "operaCompoundAssignFix",
      "type": "boolean"
     },
     {
      "name": "prettyPrint",
      "type": "boolean"
     },
     {
      "name": "lineBreak",
      "type": "boolean"
     },
     {
      "name": "printInputDelimiter",
      "type": "boolean"
     },
     {
      "name": "inputDelimiter",
      "type": "String"
     },
     {
      "name": "reportPath",
      "type": "String"
     },
     {
      "name": "tracer",
      "type": "TracerMode"
     },
     {
      "name": "colorizeErrorOutput",
      "type": "boolean"
     },
     {
      "name": "errorFormat",
      "type": "ErrorFormat"
     },
     {
      "name": "jsOutputFile",
      "type": "String"
     },
     {
      "name": "warningsGuard",
      "type": "ComposeWarningsGuard"
     },
     {
      "name": "summaryDetailLevel",
      "type": "int"
     },
     {
      "name": "lineLengthThreshold",
      "type": "int"
     },
     {
      "name": "externExports",
      "type": "boolean"
     },
     {
      "name": "externExportsPath",
      "type": "String"
     },
     {
      "name": "nameReferenceReportPath",
      "type": "String"
     },
     {
      "name": "nameReferenceGraphPath",
      "type": "String"
     },
     {
      "name": "sourceMapOutputPath",
      "type": "String"
     },
     {
      "name": "sourceMapDetailLevel",
      "type": "SourceMap"
     },
     {
      "name": "sourceMapFormat",
      "type": "SourceMap"
     },
     {
      "name": "sourceMapLocationMappings",
      "type": "List"
     },
     {
      "name": "outputCharset",
      "type": "String"
     },
     {
      "name": "looseTypes",
      "type": "boolean"
     },
     {
      "name": "aliasHandler",
      "type": "AliasTransformationHandler"
     },
     {
      "name": "NULL_ALIAS_TRANSFORMATION_HANDLER",
      "type": "AliasTransformationHandler"
     }
    ],
    "name": "CompilerOptions"
   }
  ]
 },
 {
  "filename": "WarningsGuard.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "level",
      "type": "CheckLevel"
     },
     {
      "params": [],
      "name": "getPriority",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "group",
        "type": "DiagnosticGroup"
       }
      ],
      "name": "disables",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "group",
        "type": "DiagnosticGroup"
       }
      ],
      "name": "enables",
      "type": "boolean"
     }
    ],
    "fields": [],
    "name": "WarningsGuard"
   }
  ]
 },
 {
  "filename": "CheckPathsBetweenNodes.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "allPathsSatisfyPredicate",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "somePathsSatisfyPredicate",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "setUp",
      "type": null
     },
     {
      "params": [],
      "name": "tearDown",
      "type": null
     },
     {
      "params": [
       {
        "name": "u",
        "type": "DiGraphNode"
       }
      ],
      "name": "discoverBackEdges",
      "type": null
     },
     {
      "params": [
       {
        "name": "e",
        "type": "DiGraphEdge"
       }
      ],
      "name": "ignoreEdge",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "a",
        "type": "DiGraphNode"
       },
       {
        "name": "b",
        "type": "DiGraphNode"
       }
      ],
      "name": "checkAllPathsWithoutBackEdges",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "a",
        "type": "DiGraphNode"
       },
       {
        "name": "b",
        "type": "DiGraphNode"
       }
      ],
      "name": "checkSomePathsWithoutBackEdges",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "nodePredicate",
      "type": "Predicate"
     },
     {
      "name": "edgePredicate",
      "type": "Predicate"
     },
     {
      "name": "inclusive",
      "type": "boolean"
     },
     {
      "name": "BACK_EDGE",
      "type": "Annotation"
     },
     {
      "name": "VISITED_EDGE",
      "type": "Annotation"
     },
     {
      "name": "WHITE",
      "type": "Annotation"
     },
     {
      "name": "GRAY",
      "type": "Annotation"
     },
     {
      "name": "BLACK",
      "type": "Annotation"
     },
     {
      "name": "graph",
      "type": "DiGraph"
     },
     {
      "name": "start",
      "type": "DiGraphNode"
     },
     {
      "name": "end",
      "type": "DiGraphNode"
     }
    ],
    "name": "CheckPathsBetweenNodes"
   }
  ]
 },
 {
  "filename": "ShadowVariables.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "scopeUpRefMap",
      "type": "Multimap"
     },
     {
      "name": "varToNameUsage",
      "type": "Multimap"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "varsByFrequency",
      "type": "SortedSet"
     },
     {
      "name": "assignments",
      "type": "SortedMap"
     },
     {
      "name": "oldPseudoNameMap",
      "type": "Map"
     },
     {
      "name": "deltaPseudoNameMap",
      "type": "Map"
     }
    ],
    "name": "ShadowVariables"
   }
  ]
 },
 {
  "filename": "JSModuleGraph.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getAllModules",
      "type": "Iterable"
     },
     {
      "params": [],
      "name": "getAllModulesInDependencyOrder",
      "type": "Iterable"
     },
     {
      "params": [],
      "name": "getModuleCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "getRootModule",
      "type": "JSModule"
     },
     {
      "params": [
       {
        "name": "src",
        "type": "JSModule"
       },
       {
        "name": "m",
        "type": "JSModule"
       }
      ],
      "name": "dependsOn",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "m1",
        "type": "JSModule"
       },
       {
        "name": "m2",
        "type": "JSModule"
       }
      ],
      "name": "getDeepestCommonDependency",
      "type": "JSModule"
     },
     {
      "params": [
       {
        "name": "m1",
        "type": "JSModule"
       },
       {
        "name": "m2",
        "type": "JSModule"
       }
      ],
      "name": "getDeepestCommonDependencyInclusive",
      "type": "JSModule"
     },
     {
      "params": [
       {
        "name": "modules",
        "type": "Collection"
       }
      ],
      "name": "getDeepestCommonDependencyInclusive",
      "type": "JSModule"
     },
     {
      "params": [
       {
        "name": "m",
        "type": "JSModule"
       }
      ],
      "name": "getTransitiveDepsDeepestFirst",
      "type": "Set"
     },
     {
      "params": [
       {
        "name": "deps",
        "type": "Set"
       },
       {
        "name": "m",
        "type": "JSModule"
       }
      ],
      "name": "addDeps",
      "type": null
     },
     {
      "params": [],
      "name": "coalesceDuplicateFiles",
      "type": null
     },
     {
      "params": [
       {
        "name": "entryPoints",
        "type": "List"
       },
       {
        "name": "inputs",
        "type": "List"
       }
      ],
      "name": "manageDependencies",
      "type": "List"
     },
     {
      "params": [],
      "name": "toGraphvizGraph",
      "type": "LinkedDirectedGraph"
     },
     {
      "params": [
       {
        "name": "m1",
        "type": "JSModule"
       },
       {
        "name": "m2",
        "type": "JSModule"
       }
      ],
      "name": "depthCompare",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "modules",
      "type": "Set"
     },
     {
      "name": "modulesByDepth",
      "type": "List"
     },
     {
      "name": "dependencyMap",
      "type": "Map"
     }
    ],
    "name": "JSModuleGraph"
   }
  ]
 },
 {
  "filename": "CssRenamingMap.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "value",
        "type": "String"
       }
      ],
      "name": "get",
      "type": "String"
     },
     {
      "params": [],
      "name": "getStyle",
      "type": "Style"
     }
    ],
    "fields": [],
    "name": "CssRenamingMap"
   }
  ]
 },
 {
  "filename": "CompilerInput.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getInputId",
      "type": "InputId"
     },
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getAst",
      "type": "SourceAst"
     },
     {
      "params": [],
      "name": "getPathRelativeToClosureBase",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "getAstRoot",
      "type": "Node"
     },
     {
      "params": [],
      "name": "clearAst",
      "type": null
     },
     {
      "params": [],
      "name": "getSourceFile",
      "type": "SourceFile"
     },
     {
      "params": [
       {
        "name": "file",
        "type": "SourceFile"
       }
      ],
      "name": "setSourceFile",
      "type": null
     },
     {
      "params": [],
      "name": "getSourceAst",
      "type": "SourceAst"
     },
     {
      "params": [
       {
        "name": "errorManager",
        "type": "ErrorManager"
       }
      ],
      "name": "setErrorManager",
      "type": null
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "setCompiler",
      "type": null
     },
     {
      "params": [],
      "name": "getRequires",
      "type": "Collection"
     },
     {
      "params": [],
      "name": "getProvides",
      "type": "Collection"
     },
     {
      "params": [],
      "name": "regenerateDependencyInfoIfNecessary",
      "type": null
     },
     {
      "params": [
       {
        "name": "lineNumber",
        "type": "int"
       }
      ],
      "name": "getLine",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "lineNumber",
        "type": "int"
       }
      ],
      "name": "getRegion",
      "type": "Region"
     },
     {
      "params": [],
      "name": "getCode",
      "type": "String"
     },
     {
      "params": [],
      "name": "getModule",
      "type": "JSModule"
     },
     {
      "params": [
       {
        "name": "module",
        "type": "JSModule"
       }
      ],
      "name": "setModule",
      "type": null
     },
     {
      "params": [],
      "name": "isExtern",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "isExtern",
        "type": "boolean"
       }
      ],
      "name": "setIsExtern",
      "type": null
     },
     {
      "params": [
       {
        "name": "lineno",
        "type": "int"
       }
      ],
      "name": "getLineOffset",
      "type": "int"
     },
     {
      "params": [],
      "name": "getNumLines",
      "type": "int"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "module",
      "type": "JSModule"
     },
     {
      "name": "id",
      "type": "InputId"
     },
     {
      "name": "ast",
      "type": "SourceAst"
     },
     {
      "name": "provides",
      "type": "Set"
     },
     {
      "name": "requires",
      "type": "Set"
     },
     {
      "name": "generatedDependencyInfoFromSource",
      "type": "boolean"
     },
     {
      "name": "errorManager",
      "type": "ErrorManager"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "CompilerInput"
   }
  ]
 },
 {
  "filename": "ExtractPrototypeMemberDeclarations.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "info",
        "type": "GatherExtractionInfo"
       }
      ],
      "name": "doExtraction",
      "type": null
     },
     {
      "params": [
       {
        "name": "instance",
        "type": "ExtractionInstance"
       }
      ],
      "name": "extractInstance",
      "type": null
     },
     {
      "params": [
       {
        "name": "declar",
        "type": "PrototypeMemberDeclaration"
       }
      ],
      "name": "replacePrototypeMemberDeclaration",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "GLOBAL_VAR_DECL_OVERHEAD",
      "type": "int"
     },
     {
      "name": "PER_EXTRACTION_INSTANCE_OVERHEAD",
      "type": "int"
     },
     {
      "name": "PER_PROTOTYPE_MEMBER_DELTA",
      "type": "int"
     },
     {
      "name": "prototypeAlias",
      "type": "String"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "ExtractPrototypeMemberDeclarations"
   }
  ]
 },
 {
  "filename": "TypeInferencePass.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externsRoot",
        "type": "Node"
       },
       {
        "name": "jsRoot",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "inferTypes",
      "type": null
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "Scope"
       }
      ],
      "name": "getUnflowableVars",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "Scope"
       }
      ],
      "name": "inferTypes",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "computeCfg",
      "type": "ControlFlowGraph"
     }
    ],
    "fields": [
     {
      "name": "DATAFLOW_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "reverseInterpreter",
      "type": "ReverseAbstractInterpreter"
     },
     {
      "name": "topScope",
      "type": "Scope"
     },
     {
      "name": "scopeCreator",
      "type": "ScopeCreator"
     },
     {
      "name": "assertionFunctionsMap",
      "type": "Map"
     },
     {
      "name": "escapedLocalVars",
      "type": "Multimap"
     }
    ],
    "name": "TypeInferencePass"
   }
  ]
 },
 {
  "filename": "RenameLabels.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "nameSupplier",
      "type": "Supplier"
     },
     {
      "name": "removeUnused",
      "type": "boolean"
     }
    ],
    "name": "RenameLabels"
   }
  ]
 },
 {
  "filename": "ParallelCompilerPass.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "execute",
      "type": "Result"
     },
     {
      "params": [],
      "name": "processAllTasks",
      "type": "Result"
     },
     {
      "params": [],
      "name": "processTask",
      "type": "Result"
     },
     {
      "params": [],
      "name": "getTask",
      "type": "Node"
     }
    ],
    "fields": [
     {
      "name": "splitter",
      "type": "AstParallelizer"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "numWorkers",
      "type": "int"
     },
     {
      "name": "taskSupply",
      "type": "Supplier"
     },
     {
      "name": "worklist",
      "type": "List"
     }
    ],
    "name": "ParallelCompilerPass"
   }
  ]
 },
 {
  "filename": "Result.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "success",
      "type": "boolean"
     },
     {
      "name": "errors",
      "type": "JSError"
     },
     {
      "name": "warnings",
      "type": "JSError"
     },
     {
      "name": "debugLog",
      "type": "String"
     },
     {
      "name": "variableMap",
      "type": "VariableMap"
     },
     {
      "name": "propertyMap",
      "type": "VariableMap"
     },
     {
      "name": "namedAnonFunctionMap",
      "type": "VariableMap"
     },
     {
      "name": "stringMap",
      "type": "VariableMap"
     },
     {
      "name": "functionInformationMap",
      "type": "FunctionInformationMap"
     },
     {
      "name": "sourceMap",
      "type": "SourceMap"
     },
     {
      "name": "cssNames",
      "type": "Map"
     },
     {
      "name": "externExport",
      "type": "String"
     },
     {
      "name": "idGeneratorMap",
      "type": "String"
     }
    ],
    "name": "Result"
   }
  ]
 },
 {
  "filename": "CheckRegExp.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "isGlobalRegExpPropertiesUsed",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "REGEXP_REFERENCE",
      "type": "DiagnosticType"
     },
     {
      "name": "MALFORMED_REGEXP",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "globalRegExpPropertiesUsed",
      "type": "boolean"
     }
    ],
    "name": "CheckRegExp"
   }
  ]
 },
 {
  "filename": "FlowSensitiveInlineVariables.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "enterScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "exitScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "expressionRoot",
        "type": "Node"
       },
       {
        "name": "predicate",
        "type": "Predicate"
       }
      ],
      "name": "checkRightOf",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "expressionRoot",
        "type": "Node"
       },
       {
        "name": "predicate",
        "type": "Predicate"
       }
      ],
      "name": "checkLeftOf",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "cfg",
      "type": "ControlFlowGraph"
     },
     {
      "name": "candidates",
      "type": "List"
     },
     {
      "name": "reachingDef",
      "type": "MustBeReachingVariableDef"
     },
     {
      "name": "reachingUses",
      "type": "MaybeReachingVariableUse"
     },
     {
      "name": "SIDE_EFFECT_PREDICATE",
      "type": "Predicate"
     }
    ],
    "name": "FlowSensitiveInlineVariables"
   }
  ]
 },
 {
  "filename": "Scope.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getDepth",
      "type": "int"
     },
     {
      "params": [],
      "name": "isBottom",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getRootNode",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getParent",
      "type": "Scope"
     },
     {
      "params": [],
      "name": "getGlobalScope",
      "type": "Scope"
     },
     {
      "params": [],
      "name": "getParentScope",
      "type": "StaticScope"
     },
     {
      "params": [],
      "name": "getTypeOfThis",
      "type": "ObjectType"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "nameNode",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "input",
        "type": "CompilerInput"
       }
      ],
      "name": "declare",
      "type": "Var"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "nameNode",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "input",
        "type": "CompilerInput"
       },
       {
        "name": "inferred",
        "type": "boolean"
       }
      ],
      "name": "declare",
      "type": "Var"
     },
     {
      "params": [
       {
        "name": "var",
        "type": "Var"
       }
      ],
      "name": "undeclare",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getSlot",
      "type": "StaticSlot"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getOwnSlot",
      "type": "StaticSlot"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getVar",
      "type": "Var"
     },
     {
      "params": [],
      "name": "getArgumentsVar",
      "type": "Var"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "recurse",
        "type": "boolean"
       }
      ],
      "name": "isDeclared",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getVars",
      "type": "Iterator"
     },
     {
      "params": [
       {
        "name": "var",
        "type": "Var"
       }
      ],
      "name": "getReferences",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "var",
        "type": "Var"
       }
      ],
      "name": "getScope",
      "type": "StaticScope"
     },
     {
      "params": [],
      "name": "getAllSymbols",
      "type": "Iterable"
     },
     {
      "params": [],
      "name": "getVarCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "isGlobal",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isLocal",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getDeclarativelyUnboundVarsWithoutTypes",
      "type": "Iterator"
     }
    ],
    "fields": [
     {
      "name": "vars",
      "type": "Map"
     },
     {
      "name": "parent",
      "type": "Scope"
     },
     {
      "name": "depth",
      "type": "int"
     },
     {
      "name": "rootNode",
      "type": "Node"
     },
     {
      "name": "thisType",
      "type": "ObjectType"
     },
     {
      "name": "isBottom",
      "type": "boolean"
     },
     {
      "name": "arguments",
      "type": "Var"
     },
     {
      "name": "DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",
      "type": "Predicate"
     }
    ],
    "name": "Scope"
   }
  ]
 },
 {
  "filename": "Tracer.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "object",
        "type": "Object"
       },
       {
        "name": "comment",
        "type": "String"
       }
      ],
      "name": "shortName",
      "type": "Tracer"
     },
     {
      "params": [
       {
        "name": "v",
        "type": "long"
       },
       {
        "name": "digits_column_width",
        "type": "int"
       }
      ],
      "name": "longToPaddedString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "long"
       }
      ],
      "name": "numDigits",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "sb",
        "type": "StringBuilder"
       },
       {
        "name": "numSpaces",
        "type": "int"
       }
      ],
      "name": "appendSpaces",
      "type": null
     },
     {
      "params": [
       {
        "name": "tracingStatistic",
        "type": "TracingStatistic"
       }
      ],
      "name": "addTracingStatistic",
      "type": "int"
     },
     {
      "params": [],
      "name": "clearTracingStatisticsTestingOnly",
      "type": null
     },
     {
      "params": [
       {
        "name": "silence_threshold",
        "type": "int"
       }
      ],
      "name": "stop",
      "type": "long"
     },
     {
      "params": [],
      "name": "stop",
      "type": "long"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "threshold",
        "type": "int"
       }
      ],
      "name": "setDefaultSilenceThreshold",
      "type": null
     },
     {
      "params": [],
      "name": "initCurrentThreadTrace",
      "type": null
     },
     {
      "params": [
       {
        "name": "default_silence_threshold",
        "type": "int"
       }
      ],
      "name": "initCurrentThreadTrace",
      "type": null
     },
     {
      "params": [],
      "name": "getCurrentThreadTraceReport",
      "type": "String"
     },
     {
      "params": [],
      "name": "logCurrentThreadTrace",
      "type": null
     },
     {
      "params": [],
      "name": "clearCurrentThreadTrace",
      "type": null
     },
     {
      "params": [],
      "name": "logAndClearCurrentThreadTrace",
      "type": null
     },
     {
      "params": [
       {
        "name": "enabled",
        "type": "boolean"
       }
      ],
      "name": "setPrettyPrint",
      "type": null
     },
     {
      "params": [],
      "name": "enableTypeMaps",
      "type": null
     },
     {
      "params": [],
      "name": "getTypeToCountMap",
      "type": "Map"
     },
     {
      "params": [],
      "name": "getTypeToSilentMap",
      "type": "Map"
     },
     {
      "params": [],
      "name": "getTypeToTimeMap",
      "type": "Map"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "String"
       }
      ],
      "name": "getStatsForType",
      "type": "Stat"
     },
     {
      "params": [
       {
        "name": "time",
        "type": "long"
       }
      ],
      "name": "formatTime",
      "type": "String"
     },
     {
      "params": [],
      "name": "getThreadTrace",
      "type": "ThreadTrace"
     },
     {
      "params": [],
      "name": "clearThreadTrace",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "logger",
      "type": "Logger"
     },
     {
      "name": "defaultPrettyPrint",
      "type": "boolean"
     },
     {
      "name": "extraTracingStatistics",
      "type": "List"
     },
     {
      "name": "extraTracingValues",
      "type": "long"
     },
     {
      "name": "type",
      "type": "String"
     },
     {
      "name": "comment",
      "type": "String"
     },
     {
      "name": "startTimeMs",
      "type": "long"
     },
     {
      "name": "stopTimeMs",
      "type": "long"
     },
     {
      "name": "startThread",
      "type": "Thread"
     },
     {
      "name": "MAX_TRACE_SIZE",
      "type": "int"
     },
     {
      "name": "clock",
      "type": "InternalClock"
     },
     {
      "name": "typeToCountMap",
      "type": "AtomicTracerStatMap"
     },
     {
      "name": "typeToSilentMap",
      "type": "AtomicTracerStatMap"
     },
     {
      "name": "typeToTimeMap",
      "type": "AtomicTracerStatMap"
     },
     {
      "name": "ZERO_STAT",
      "type": "Stat"
     },
     {
      "name": "traces",
      "type": "ThreadLocal"
     }
    ],
    "name": "Tracer"
   }
  ]
 },
 {
  "filename": "AnonymousFunctionNamingPolicy.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getReservedCharacters",
      "type": "char"
     }
    ],
    "fields": [
     {
      "name": "reservedCharacters",
      "type": "char"
     }
    ],
    "name": "AnonymousFunctionNamingPolicy"
   }
  ]
 },
 {
  "filename": "TypeInference.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "createInitialEstimateLattice",
      "type": "FlowScope"
     },
     {
      "params": [],
      "name": "createEntryLattice",
      "type": "FlowScope"
     },
     {
      "params": [],
      "name": "getAssignedOuterLocalVars",
      "type": "Multimap"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "input",
        "type": "FlowScope"
       }
      ],
      "name": "flowThrough",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "source",
        "type": "Node"
       },
       {
        "name": "input",
        "type": "FlowScope"
       }
      ],
      "name": "branchedFlowThrough",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "traverse",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "traverseCatch",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "traverseAssign",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "FlowScope"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "leftType",
        "type": "JSType"
       },
       {
        "name": "resultType",
        "type": "JSType"
       }
      ],
      "name": "updateScopeForTypeChange",
      "type": null
     },
     {
      "params": [
       {
        "name": "getprop",
        "type": "Node"
       },
       {
        "name": "rightType",
        "type": "JSType"
       }
      ],
      "name": "ensurePropertyDefined",
      "type": null
     },
     {
      "params": [
       {
        "name": "getprop",
        "type": "Node"
       }
      ],
      "name": "ensurePropertyDeclared",
      "type": null
     },
     {
      "params": [
       {
        "name": "getprop",
        "type": "Node"
       },
       {
        "name": "objectType",
        "type": "ObjectType"
       }
      ],
      "name": "ensurePropertyDeclaredHelper",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "traverseName",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "traverseArrayLiteral",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "traverseObjectLiteral",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "traverseAdd",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "isAddedAsNumber",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "traverseHook",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "traverseCall",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "FlowScope"
       },
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "tightenTypesAfterAssertions",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "FlowScope"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "narrowed",
        "type": "JSType"
       }
      ],
      "name": "narrowScope",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "fnType",
        "type": "FunctionType"
       }
      ],
      "name": "updateTypeOfParameters",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "fnType",
        "type": "FunctionType"
       }
      ],
      "name": "updateTypeOfThisOnClosure",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "traverseNew",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "traverseAnd",
      "type": "BooleanOutcomePair"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "traverseChildren",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "traverseGetElem",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "traverseGetProp",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "constraint",
        "type": "JSType"
       }
      ],
      "name": "inferPropertyTypesToMatchConstraint",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "dereferencePointer",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "objType",
        "type": "JSType"
       },
       {
        "name": "propName",
        "type": "String"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "getPropertyType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "traverseOr",
      "type": "BooleanOutcomePair"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       },
       {
        "name": "condition",
        "type": "boolean"
       }
      ],
      "name": "traverseShortCircuitingBinOp",
      "type": "BooleanOutcomePair"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "traverseWithinShortCircuitingBinOp",
      "type": "BooleanOutcomePair"
     },
     {
      "params": [
       {
        "name": "left",
        "type": "BooleanOutcomePair"
       },
       {
        "name": "right",
        "type": "BooleanOutcomePair"
       },
       {
        "name": "condition",
        "type": "boolean"
       }
      ],
      "name": "getBooleanOutcomePair",
      "type": "BooleanOutcomePair"
     },
     {
      "params": [
       {
        "name": "left",
        "type": "BooleanLiteralSet"
       },
       {
        "name": "right",
        "type": "BooleanLiteralSet"
       },
       {
        "name": "condition",
        "type": "boolean"
       }
      ],
      "name": "getBooleanOutcomes",
      "type": "BooleanLiteralSet"
     },
     {
      "params": [
       {
        "name": "jsType",
        "type": "JSType"
       },
       {
        "name": "flowScope",
        "type": "FlowScope"
       }
      ],
      "name": "newBooleanOutcomePair",
      "type": "BooleanOutcomePair"
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "FlowScope"
       },
       {
        "name": "nameNode",
        "type": "Node"
       },
       {
        "name": "varType",
        "type": "JSType"
       }
      ],
      "name": "redeclareSimpleVar",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getJSType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "typeId",
        "type": "JSTypeNative"
       }
      ],
      "name": "getNativeType",
      "type": "JSType"
     }
    ],
    "fields": [
     {
      "name": "TEMPLATE_TYPE_NOT_OBJECT_TYPE",
      "type": "DiagnosticType"
     },
     {
      "name": "TEMPLATE_TYPE_OF_THIS_EXPECTED",
      "type": "DiagnosticType"
     },
     {
      "name": "FUNCTION_LITERAL_UNDEFINED_THIS",
      "type": "DiagnosticType"
     },
     {
      "name": "FUNCTION_LITERAL_UNREAD_THIS",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "registry",
      "type": "JSTypeRegistry"
     },
     {
      "name": "reverseInterpreter",
      "type": "ReverseAbstractInterpreter"
     },
     {
      "name": "syntacticScope",
      "type": "Scope"
     },
     {
      "name": "functionScope",
      "type": "FlowScope"
     },
     {
      "name": "bottomScope",
      "type": "FlowScope"
     },
     {
      "name": "assertionFunctionsMap",
      "type": "Map"
     },
     {
      "name": "assignedOuterLocalVars",
      "type": "Multimap"
     },
     {
      "name": "unflowableVarNames",
      "type": "Set"
     }
    ],
    "name": "TypeInference"
   }
  ]
 },
 {
  "filename": "CheckAccidentalSemicolon.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "SUSPICIOUS_SEMICOLON",
      "type": "DiagnosticType"
     },
     {
      "name": "level",
      "type": "CheckLevel"
     }
    ],
    "name": "CheckAccidentalSemicolon"
   }
  ]
 },
 {
  "filename": "InvocationsCallback.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "callNode",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "callName",
        "type": "String"
       }
      ],
      "name": "visit",
      "type": null
     }
    ],
    "fields": [],
    "name": "InvocationsCallback"
   }
  ]
 },
 {
  "filename": "CheckLevel.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "isOn",
      "type": "boolean"
     }
    ],
    "fields": [],
    "name": "CheckLevel"
   }
  ]
 },
 {
  "filename": "SourceFile.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "lineno",
        "type": "int"
       }
      ],
      "name": "getLineOffset",
      "type": "int"
     },
     {
      "params": [],
      "name": "getNumLines",
      "type": "int"
     },
     {
      "params": [],
      "name": "findLineOffsets",
      "type": null
     },
     {
      "params": [],
      "name": "getCode",
      "type": "String"
     },
     {
      "params": [],
      "name": "getCodeReader",
      "type": "Reader"
     },
     {
      "params": [],
      "name": "getCodeNoCache",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "sourceCode",
        "type": "String"
       }
      ],
      "name": "setCode",
      "type": null
     },
     {
      "params": [],
      "name": "getOriginalPath",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "originalPath",
        "type": "String"
       }
      ],
      "name": "setOriginalPath",
      "type": null
     },
     {
      "params": [],
      "name": "clearCachedSource",
      "type": null
     },
     {
      "params": [],
      "name": "hasSourceInMemory",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "isExtern",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "newVal",
        "type": "boolean"
       }
      ],
      "name": "setIsExtern",
      "type": null
     },
     {
      "params": [
       {
        "name": "lineNumber",
        "type": "int"
       }
      ],
      "name": "getLine",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "lineNumber",
        "type": "int"
       }
      ],
      "name": "getRegion",
      "type": "Region"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       },
       {
        "name": "c",
        "type": "Charset"
       }
      ],
      "name": "fromFile",
      "type": "SourceFile"
     },
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       }
      ],
      "name": "fromFile",
      "type": "SourceFile"
     },
     {
      "params": [
       {
        "name": "file",
        "type": "File"
       },
       {
        "name": "c",
        "type": "Charset"
       }
      ],
      "name": "fromFile",
      "type": "SourceFile"
     },
     {
      "params": [
       {
        "name": "file",
        "type": "File"
       }
      ],
      "name": "fromFile",
      "type": "SourceFile"
     },
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       },
       {
        "name": "code",
        "type": "String"
       }
      ],
      "name": "fromCode",
      "type": "SourceFile"
     },
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       },
       {
        "name": "originalPath",
        "type": "String"
       },
       {
        "name": "code",
        "type": "String"
       }
      ],
      "name": "fromCode",
      "type": "SourceFile"
     },
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       },
       {
        "name": "s",
        "type": "InputStream"
       }
      ],
      "name": "fromInputStream",
      "type": "SourceFile"
     },
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       },
       {
        "name": "originalPath",
        "type": "String"
       },
       {
        "name": "s",
        "type": "InputStream"
       }
      ],
      "name": "fromInputStream",
      "type": "SourceFile"
     },
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       },
       {
        "name": "r",
        "type": "Reader"
       }
      ],
      "name": "fromReader",
      "type": "SourceFile"
     },
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       },
       {
        "name": "generator",
        "type": "Generator"
       }
      ],
      "name": "fromGenerator",
      "type": "SourceFile"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "SOURCE_EXCERPT_REGION_LENGTH",
      "type": "int"
     },
     {
      "name": "fileName",
      "type": "String"
     },
     {
      "name": "isExternFile",
      "type": "boolean"
     },
     {
      "name": "originalPath",
      "type": "String"
     },
     {
      "name": "lineOffsets",
      "type": "int"
     },
     {
      "name": "lastOffset",
      "type": "int"
     },
     {
      "name": "lastLine",
      "type": "int"
     },
     {
      "name": "code",
      "type": "String"
     }
    ],
    "name": "SourceFile"
   }
  ]
 },
 {
  "filename": "StrictModeCheck.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isDeclaration",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "checkNameUse",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "checkAssignment",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "checkDelete",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "checkObjectLiteral",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "checkLabel",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "UNKNOWN_VARIABLE",
      "type": "DiagnosticType"
     },
     {
      "name": "EVAL_USE",
      "type": "DiagnosticType"
     },
     {
      "name": "EVAL_DECLARATION",
      "type": "DiagnosticType"
     },
     {
      "name": "EVAL_ASSIGNMENT",
      "type": "DiagnosticType"
     },
     {
      "name": "ARGUMENTS_DECLARATION",
      "type": "DiagnosticType"
     },
     {
      "name": "ARGUMENTS_ASSIGNMENT",
      "type": "DiagnosticType"
     },
     {
      "name": "DELETE_VARIABLE",
      "type": "DiagnosticType"
     },
     {
      "name": "ILLEGAL_NAME",
      "type": "DiagnosticType"
     },
     {
      "name": "DUPLICATE_OBJECT_KEY",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "noVarCheck",
      "type": "boolean"
     },
     {
      "name": "noCajaChecks",
      "type": "boolean"
     }
    ],
    "name": "StrictModeCheck"
   }
  ]
 },
 {
  "filename": "DiagnosticGroups.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "group",
        "type": "DiagnosticGroup"
       }
      ],
      "name": "registerGroup",
      "type": "DiagnosticGroup"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "types",
        "type": "DiagnosticType"
       }
      ],
      "name": "registerGroup",
      "type": "DiagnosticGroup"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "groups",
        "type": "DiagnosticGroup"
       }
      ],
      "name": "registerGroup",
      "type": "DiagnosticGroup"
     },
     {
      "params": [],
      "name": "getRegisteredGroups",
      "type": "Map"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "forName",
      "type": "DiagnosticGroup"
     },
     {
      "params": [
       {
        "name": "options",
        "type": "CompilerOptions"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "level",
        "type": "CheckLevel"
       }
      ],
      "name": "setWarningLevel",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "groupsByName",
      "type": "Map"
     },
     {
      "name": "DIAGNOSTIC_GROUP_NAMES",
      "type": "String"
     },
     {
      "name": "GLOBAL_THIS",
      "type": "DiagnosticGroup"
     },
     {
      "name": "DEPRECATED",
      "type": "DiagnosticGroup"
     },
     {
      "name": "VISIBILITY",
      "type": "DiagnosticGroup"
     },
     {
      "name": "CONSTANT_PROPERTY",
      "type": "DiagnosticGroup"
     },
     {
      "name": "NON_STANDARD_JSDOC",
      "type": "DiagnosticGroup"
     },
     {
      "name": "ACCESS_CONTROLS",
      "type": "DiagnosticGroup"
     },
     {
      "name": "INVALID_CASTS",
      "type": "DiagnosticGroup"
     },
     {
      "name": "FILEOVERVIEW_JSDOC",
      "type": "DiagnosticGroup"
     },
     {
      "name": "STRICT_MODULE_DEP_CHECK",
      "type": "DiagnosticGroup"
     },
     {
      "name": "EXTERNS_VALIDATION",
      "type": "DiagnosticGroup"
     },
     {
      "name": "AMBIGUOUS_FUNCTION_DECL",
      "type": "DiagnosticGroup"
     },
     {
      "name": "UNKNOWN_DEFINES",
      "type": "DiagnosticGroup"
     },
     {
      "name": "TWEAKS",
      "type": "DiagnosticGroup"
     },
     {
      "name": "MISSING_PROPERTIES",
      "type": "DiagnosticGroup"
     },
     {
      "name": "INTERNET_EXPLORER_CHECKS",
      "type": "DiagnosticGroup"
     },
     {
      "name": "UNDEFINED_VARIABLES",
      "type": "DiagnosticGroup"
     },
     {
      "name": "CHECK_REGEXP",
      "type": "DiagnosticGroup"
     },
     {
      "name": "CHECK_TYPES",
      "type": "DiagnosticGroup"
     },
     {
      "name": "CHECK_VARIABLES",
      "type": "DiagnosticGroup"
     },
     {
      "name": "CHECK_USELESS_CODE",
      "type": "DiagnosticGroup"
     },
     {
      "name": "CONST",
      "type": "DiagnosticGroup"
     },
     {
      "name": "TYPE_INVALIDATION",
      "type": "DiagnosticGroup"
     },
     {
      "name": "DUPLICATE_VARS",
      "type": "DiagnosticGroup"
     },
     {
      "name": "ES5_STRICT",
      "type": "DiagnosticGroup"
     }
    ],
    "name": "DiagnosticGroups"
   }
  ]
 },
 {
  "filename": "ChainableReverseAbstractInterpreter.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "lastLink",
        "type": "ChainableReverseAbstractInterpreter"
       }
      ],
      "name": "append",
      "type": "ChainableReverseAbstractInterpreter"
     },
     {
      "params": [],
      "name": "getFirst",
      "type": "ChainableReverseAbstractInterpreter"
     },
     {
      "params": [
       {
        "name": "condition",
        "type": "Node"
       },
       {
        "name": "blindScope",
        "type": "FlowScope"
       },
       {
        "name": "outcome",
        "type": "boolean"
       }
      ],
      "name": "firstPreciserScopeKnowingConditionOutcome",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "condition",
        "type": "Node"
       },
       {
        "name": "blindScope",
        "type": "FlowScope"
       },
       {
        "name": "outcome",
        "type": "boolean"
       }
      ],
      "name": "nextPreciserScopeKnowingConditionOutcome",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "FlowScope"
       }
      ],
      "name": "getTypeIfRefinable",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "FlowScope"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "declareNameInScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "getRestrictedWithoutUndefined",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "getRestrictedWithoutNull",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "value",
        "type": "String"
       },
       {
        "name": "resultEqualsValue",
        "type": "boolean"
       }
      ],
      "name": "getRestrictedByTypeOfResult",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "typeId",
        "type": "JSTypeNative"
       }
      ],
      "name": "getNativeType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "String"
       }
      ],
      "name": "getNativeTypeForTypeOf",
      "type": "JSType"
     }
    ],
    "fields": [
     {
      "name": "convention",
      "type": "CodingConvention"
     },
     {
      "name": "typeRegistry",
      "type": "JSTypeRegistry"
     },
     {
      "name": "firstLink",
      "type": "ChainableReverseAbstractInterpreter"
     },
     {
      "name": "nextLink",
      "type": "ChainableReverseAbstractInterpreter"
     },
     {
      "name": "restrictUndefinedVisitor",
      "type": "Visitor"
     },
     {
      "name": "restrictNullVisitor",
      "type": "Visitor"
     }
    ],
    "name": "ChainableReverseAbstractInterpreter"
   }
  ]
 },
 {
  "filename": "RenamePrototypes.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "properties",
        "type": "Set"
       }
      ],
      "name": "reusePrototypeNames",
      "type": null
     },
     {
      "params": [],
      "name": "getPropertyMap",
      "type": "VariableMap"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "aggressiveRenaming",
      "type": "boolean"
     },
     {
      "name": "reservedCharacters",
      "type": "char"
     },
     {
      "name": "prevUsedRenameMap",
      "type": "VariableMap"
     },
     {
      "name": "FREQUENCY_COMPARATOR",
      "type": "Comparator"
     },
     {
      "name": "stringNodes",
      "type": "Set"
     },
     {
      "name": "properties",
      "type": "Map"
     },
     {
      "name": "reservedNames",
      "type": "Set"
     },
     {
      "name": "prototypeObjLits",
      "type": "Set"
     }
    ],
    "name": "RenamePrototypes"
   }
  ]
 },
 {
  "filename": "RemoveUnusedVars.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       },
       {
        "name": "defFinder",
        "type": "SimpleDefinitionFinder"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "traverseAndRemoveUnusedReferences",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "Scope"
       }
      ],
      "name": "traverseNode",
      "type": null
     },
     {
      "params": [
       {
        "name": "var",
        "type": "Var"
       }
      ],
      "name": "isRemovableVar",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parentScope",
        "type": "Scope"
       }
      ],
      "name": "traverseFunction",
      "type": null
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "Scope"
       }
      ],
      "name": "collectMaybeUnreferencedVars",
      "type": null
     },
     {
      "params": [
       {
        "name": "fnScope",
        "type": "Scope"
       }
      ],
      "name": "removeUnreferencedFunctionArgs",
      "type": null
     },
     {
      "params": [
       {
        "name": "function",
        "type": "Node"
       }
      ],
      "name": "getFunctionArgList",
      "type": "Node"
     },
     {
      "params": [],
      "name": "interpretAssigns",
      "type": null
     },
     {
      "params": [
       {
        "name": "var",
        "type": "Var"
       }
      ],
      "name": "removeAllAssigns",
      "type": null
     },
     {
      "params": [
       {
        "name": "var",
        "type": "Var"
       }
      ],
      "name": "markReferencedVar",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "removeUnreferencedVars",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "codingConvention",
      "type": "CodingConvention"
     },
     {
      "name": "removeGlobals",
      "type": "boolean"
     },
     {
      "name": "preserveFunctionExpressionNames",
      "type": "boolean"
     },
     {
      "name": "referenced",
      "type": "Set"
     },
     {
      "name": "maybeUnreferenced",
      "type": "List"
     },
     {
      "name": "allFunctionScopes",
      "type": "List"
     },
     {
      "name": "assignsByVar",
      "type": "Multimap"
     },
     {
      "name": "assignsByNode",
      "type": "Map"
     },
     {
      "name": "inheritsCalls",
      "type": "Multimap"
     },
     {
      "name": "continuations",
      "type": "Multimap"
     },
     {
      "name": "modifyCallSites",
      "type": "boolean"
     },
     {
      "name": "callSiteOptimizer",
      "type": "CallSiteOptimizer"
     }
    ],
    "name": "RemoveUnusedVars"
   }
  ]
 },
 {
  "filename": "OperaCompoundAssignFix.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "enterScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "exitScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "assign",
        "type": "Node"
       },
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "applyWorkAround",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "names",
      "type": "Deque"
     }
    ],
    "name": "OperaCompoundAssignFix"
   }
  ]
 },
 {
  "filename": "ScopeCreator.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Scope"
       }
      ],
      "name": "createScope",
      "type": "Scope"
     }
    ],
    "fields": [],
    "name": "ScopeCreator"
   }
  ]
 },
 {
  "filename": "RemoveUnusedNames.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externRoot",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "graph",
        "type": "NameReferenceGraph"
       }
      ],
      "name": "removeUnusedProperties",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "logger",
      "type": "Logger"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "canModifyExterns",
      "type": "boolean"
     }
    ],
    "name": "RemoveUnusedNames"
   }
  ]
 },
 {
  "filename": "TypedCodeGenerator.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "context",
        "type": "Context"
       }
      ],
      "name": "add",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "getTypeAnnotation",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "fnNode",
        "type": "Node"
       }
      ],
      "name": "getFunctionAnnotation",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "parameterNode",
        "type": "Node"
       }
      ],
      "name": "getParameterNodeJSDocType",
      "type": "String"
     }
    ],
    "fields": [],
    "name": "TypedCodeGenerator"
   }
  ]
 },
 {
  "filename": "FunctionArgumentInjector.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "replacements",
        "type": "Map"
       }
      ],
      "name": "inject",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "replacements",
        "type": "Map"
       },
       {
        "name": "replaceThis",
        "type": "boolean"
       }
      ],
      "name": "inject",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "fnNode",
        "type": "Node"
       },
       {
        "name": "callNode",
        "type": "Node"
       },
       {
        "name": "safeNameIdSupplier",
        "type": "Supplier"
       }
      ],
      "name": "getFunctionCallParameterMap",
      "type": "LinkedHashMap"
     },
     {
      "params": [
       {
        "name": "safeNameIdSupplier",
        "type": "Supplier"
       }
      ],
      "name": "getUniqueAnonymousParameterName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "fnNode",
        "type": "Node"
       }
      ],
      "name": "findModifiedParameters",
      "type": "Set"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "names",
        "type": "Set"
       },
       {
        "name": "unsafe",
        "type": "Set"
       }
      ],
      "name": "findModifiedParameters",
      "type": "Set"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "canNameValueChange",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "fnNode",
        "type": "Node"
       },
       {
        "name": "argMap",
        "type": "Map"
       },
       {
        "name": "namesNeedingTemps",
        "type": "Set"
       },
       {
        "name": "convention",
        "type": "CodingConvention"
       }
      ],
      "name": "maybeAddTempsForCallArguments",
      "type": null
     },
     {
      "params": [
       {
        "name": "parameters",
        "type": "Set"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "findParametersReferencedAfterSideEffect",
      "type": "Set"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "names",
        "type": "Set"
       }
      ],
      "name": "gatherLocalNames",
      "type": null
     },
     {
      "params": [
       {
        "name": "fnNode",
        "type": "Node"
       }
      ],
      "name": "getFunctionParameterSet",
      "type": "Set"
     }
    ],
    "fields": [
     {
      "name": "THIS_MARKER",
      "type": "String"
     }
    ],
    "name": "FunctionArgumentInjector"
   }
  ]
 },
 {
  "filename": "MarkNoSideEffectCalls.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "def",
        "type": "Definition"
       }
      ],
      "name": "definitionTypeContainsFunctionType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "hasNoSideEffectsAnnotation",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "INVALID_NO_SIDE_EFFECT_ANNOTATION",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "noSideEffectFunctionNames",
      "type": "Set"
     }
    ],
    "name": "MarkNoSideEffectCalls"
   }
  ]
 },
 {
  "filename": "AbstractPeepholeOptimization.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "subtree",
        "type": "Node"
       }
      ],
      "name": "optimizeSubtree",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "diagnostic",
        "type": "DiagnosticType"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "error",
      "type": null
     },
     {
      "params": [],
      "name": "reportCodeChange",
      "type": null
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "Node"
       },
       {
        "name": "n2",
        "type": "Node"
       }
      ],
      "name": "areNodesEqualForInlining",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isASTNormalized",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "traversal",
        "type": "NodeTraversal"
       }
      ],
      "name": "beginTraversal",
      "type": null
     },
     {
      "params": [
       {
        "name": "traversal",
        "type": "NodeTraversal"
       }
      ],
      "name": "endTraversal",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "mayEffectMutableState",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "mayHaveSideEffects",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isEcmaScript5OrGreater",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getCodingConvention",
      "type": "CodingConvention"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateResult",
      "type": "Node"
     }
    ],
    "fields": [
     {
      "name": "currentTraversal",
      "type": "NodeTraversal"
     }
    ],
    "name": "AbstractPeepholeOptimization"
   }
  ]
 },
 {
  "filename": "RecordFunctionInformation.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getMap",
      "type": "FunctionInformationMap"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "module",
        "type": "JSModule"
       }
      ],
      "name": "addModuleInformation",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "Compiler"
     },
     {
      "name": "functionNames",
      "type": "FunctionNames"
     },
     {
      "name": "moduleGraph",
      "type": "JSModuleGraph"
     },
     {
      "name": "mapBuilder",
      "type": "FunctionInformationMap"
     }
    ],
    "name": "RecordFunctionInformation"
   }
  ]
 },
 {
  "filename": "CheckGlobalThis.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "shouldTraverse",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "shouldReportThis",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getFunctionJsDocInfo",
      "type": "JSDocInfo"
     }
    ],
    "fields": [
     {
      "name": "GLOBAL_THIS",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "assignLhsChild",
      "type": "Node"
     }
    ],
    "name": "CheckGlobalThis"
   }
  ]
 },
 {
  "filename": "DiagnosticType.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "descriptionFormat",
        "type": "String"
       }
      ],
      "name": "error",
      "type": "DiagnosticType"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "descriptionFormat",
        "type": "String"
       }
      ],
      "name": "warning",
      "type": "DiagnosticType"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "descriptionFormat",
        "type": "String"
       }
      ],
      "name": "disabled",
      "type": "DiagnosticType"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "level",
        "type": "CheckLevel"
       },
       {
        "name": "descriptionFormat",
        "type": "String"
       }
      ],
      "name": "make",
      "type": "DiagnosticType"
     },
     {
      "params": [
       {
        "name": "arguments",
        "type": "Object"
       }
      ],
      "name": "format",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "diagnosticType",
        "type": "DiagnosticType"
       }
      ],
      "name": "compareTo",
      "type": "int"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "key",
      "type": "String"
     },
     {
      "name": "format",
      "type": "MessageFormat"
     },
     {
      "name": "defaultLevel",
      "type": "CheckLevel"
     },
     {
      "name": "level",
      "type": "CheckLevel"
     }
    ],
    "name": "DiagnosticType"
   }
  ]
 },
 {
  "filename": "AnalyzePrototypeProperties.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externRoot",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "getAllNameInfo",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "type",
        "type": "SymbolType"
       }
      ],
      "name": "getNameInfoForName",
      "type": "NameInfo"
     }
    ],
    "fields": [
     {
      "name": "PROPERTY",
      "type": "SymbolType"
     },
     {
      "name": "VAR",
      "type": "SymbolType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "canModifyExterns",
      "type": "boolean"
     },
     {
      "name": "anchorUnusedVars",
      "type": "boolean"
     },
     {
      "name": "moduleGraph",
      "type": "JSModuleGraph"
     },
     {
      "name": "firstModule",
      "type": "JSModule"
     },
     {
      "name": "IMPLICITLY_USED_PROPERTIES",
      "type": "Set"
     },
     {
      "name": "symbolGraph",
      "type": "LinkedDirectedGraph"
     },
     {
      "name": "globalNode",
      "type": "NameInfo"
     },
     {
      "name": "externNode",
      "type": "NameInfo"
     },
     {
      "name": "anonymousNode",
      "type": "NameInfo"
     },
     {
      "name": "propertyNameInfo",
      "type": "Map"
     },
     {
      "name": "varNameInfo",
      "type": "Map"
     }
    ],
    "name": "AnalyzePrototypeProperties"
   }
  ]
 },
 {
  "filename": "VariableVisibilityAnalysis.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "declaringNameNode",
        "type": "Node"
       }
      ],
      "name": "getVariableVisibility",
      "type": "VariableVisibility"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "variable",
        "type": "Var"
       }
      ],
      "name": "variableIsParameter",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "visibilityByDeclaringNameNode",
      "type": "Map"
     }
    ],
    "name": "VariableVisibilityAnalysis"
   }
  ]
 },
 {
  "filename": "PeepholeSimplifyRegExp.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "subtree",
        "type": "Node"
       }
      ],
      "name": "optimizeSubtree",
      "type": "Node"
     }
    ],
    "fields": [],
    "name": "PeepholeSimplifyRegExp"
   }
  ]
 },
 {
  "filename": "PassFactory.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "isOneTimePass",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "makeOneTimePass",
      "type": "PassFactory"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "create",
      "type": "CompilerPass"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "createInternal",
      "type": "CompilerPass"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "getHotSwapPass",
      "type": "HotSwapCompilerPass"
     }
    ],
    "fields": [
     {
      "name": "name",
      "type": "String"
     },
     {
      "name": "isOneTimePass",
      "type": "boolean"
     },
     {
      "name": "isCreated",
      "type": "boolean"
     }
    ],
    "name": "PassFactory"
   }
  ]
 },
 {
  "filename": "FieldCleanupPass.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "scriptRoot",
        "type": "Node"
       },
       {
        "name": "originalRoot",
        "type": "Node"
       }
      ],
      "name": "hotSwapScript",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "FieldCleanupPass"
   }
  ]
 },
 {
  "filename": "GlobalNamespace.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getRootNode",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getParentScope",
      "type": "StaticScope"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getSlot",
      "type": "StaticSlot"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getOwnSlot",
      "type": "StaticSlot"
     },
     {
      "params": [],
      "name": "getTypeOfThis",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "slot",
        "type": "Name"
       }
      ],
      "name": "getReferences",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "slot",
        "type": "Name"
       }
      ],
      "name": "getScope",
      "type": "StaticScope"
     },
     {
      "params": [],
      "name": "getAllSymbols",
      "type": "Iterable"
     },
     {
      "params": [],
      "name": "ensureGenerated",
      "type": null
     },
     {
      "params": [],
      "name": "getNameForest",
      "type": "List"
     },
     {
      "params": [],
      "name": "getNameIndex",
      "type": "Map"
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "Scope"
       },
       {
        "name": "newNodes",
        "type": "Set"
       }
      ],
      "name": "scanNewNodes",
      "type": null
     },
     {
      "params": [],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "s",
        "type": "Scope"
       }
      ],
      "name": "isGlobalNameReference",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getTopVarName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "s",
        "type": "Scope"
       }
      ],
      "name": "isGlobalVarReference",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "Scope"
       }
      ],
      "name": "isGlobalScope",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "root",
      "type": "Node"
     },
     {
      "name": "externsRoot",
      "type": "Node"
     },
     {
      "name": "inExterns",
      "type": "boolean"
     },
     {
      "name": "externsScope",
      "type": "Scope"
     },
     {
      "name": "generated",
      "type": "boolean"
     },
     {
      "name": "currentPreOrderIndex",
      "type": "int"
     },
     {
      "name": "globalNames",
      "type": "List"
     },
     {
      "name": "nameMap",
      "type": "Map"
     }
    ],
    "name": "GlobalNamespace"
   }
  ]
 },
 {
  "filename": "ReferenceCollectingCallback.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "scriptRoot",
        "type": "Node"
       },
       {
        "name": "originalRoot",
        "type": "Node"
       }
      ],
      "name": "hotSwapScript",
      "type": null
     },
     {
      "params": [],
      "name": "getAllSymbols",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "var",
        "type": "Var"
       }
      ],
      "name": "getScope",
      "type": "Scope"
     },
     {
      "params": [
       {
        "name": "v",
        "type": "Var"
       }
      ],
      "name": "getReferences",
      "type": "ReferenceCollection"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "enterScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "exitScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "nodeTraversal",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "shouldTraverse",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "isBlockBoundary",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "v",
        "type": "Var"
       },
       {
        "name": "reference",
        "type": "Reference"
       }
      ],
      "name": "addReference",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "referenceMap",
      "type": "Map"
     },
     {
      "name": "blockStack",
      "type": "Deque"
     },
     {
      "name": "behavior",
      "type": "Behavior"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "varFilter",
      "type": "Predicate"
     },
     {
      "name": "DO_NOTHING_BEHAVIOR",
      "type": "Behavior"
     }
    ],
    "name": "ReferenceCollectingCallback"
   }
  ]
 },
 {
  "filename": "OptimizeCalls.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "pass",
        "type": "CallGraphCompilerPass"
       }
      ],
      "name": "addPass",
      "type": "OptimizeCalls"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "passes",
      "type": "List"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "OptimizeCalls"
   }
  ]
 },
 {
  "filename": "DataFlowAnalysis.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getCfg",
      "type": "ControlFlowGraph"
     },
     {
      "params": [],
      "name": "getExitLatticeElement",
      "type": "L"
     },
     {
      "params": [
       {
        "name": "latticeA",
        "type": "L"
       },
       {
        "name": "latticeB",
        "type": "L"
       }
      ],
      "name": "join",
      "type": "L"
     },
     {
      "params": [],
      "name": "isForward",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "N"
       },
       {
        "name": "input",
        "type": "L"
       }
      ],
      "name": "flowThrough",
      "type": "L"
     },
     {
      "params": [],
      "name": "analyze",
      "type": null
     },
     {
      "params": [
       {
        "name": "maxSteps",
        "type": "int"
       }
      ],
      "name": "analyze",
      "type": null
     },
     {
      "params": [],
      "name": "createInitialEstimateLattice",
      "type": "L"
     },
     {
      "params": [],
      "name": "createEntryLattice",
      "type": "L"
     },
     {
      "params": [],
      "name": "initialize",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "DiGraphNode"
       }
      ],
      "name": "flow",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "DiGraphNode"
       }
      ],
      "name": "joinInputs",
      "type": null
     },
     {
      "params": [
       {
        "name": "jsScope",
        "type": "Scope"
       },
       {
        "name": "escaped",
        "type": "Set"
       },
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "computeEscaped",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "cfg",
      "type": "ControlFlowGraph"
     },
     {
      "name": "joinOp",
      "type": "JoinOp"
     },
     {
      "name": "orderedWorkSet",
      "type": "Set"
     },
     {
      "name": "MAX_STEPS",
      "type": "int"
     }
    ],
    "name": "DataFlowAnalysis"
   }
  ]
 },
 {
  "filename": "UnreachableCodeElimination.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "enterScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "exitScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryRemoveUnconditionalBranching",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "computeFollowing",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "removeDeadExprStatementSafely",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "logger",
      "type": "Logger"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "removeNoOpStatements",
      "type": "boolean"
     },
     {
      "name": "cfgStack",
      "type": "Deque"
     },
     {
      "name": "curCfg",
      "type": "ControlFlowGraph"
     }
    ],
    "name": "UnreachableCodeElimination"
   }
  ]
 },
 {
  "filename": "ReverseAbstractInterpreter.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "condition",
        "type": "Node"
       },
       {
        "name": "blindScope",
        "type": "FlowScope"
       },
       {
        "name": "outcome",
        "type": "boolean"
       }
      ],
      "name": "getPreciserScopeKnowingConditionOutcome",
      "type": "FlowScope"
     }
    ],
    "fields": [],
    "name": "ReverseAbstractInterpreter"
   }
  ]
 },
 {
  "filename": "SourceMap.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "outputStartPosition",
        "type": "FilePosition"
       },
       {
        "name": "outputEndPosition",
        "type": "FilePosition"
       }
      ],
      "name": "addMapping",
      "type": null
     },
     {
      "params": [
       {
        "name": "sourceFile",
        "type": "String"
       }
      ],
      "name": "fixupSourceLocation",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "appendTo",
      "type": null
     },
     {
      "params": [],
      "name": "reset",
      "type": null
     },
     {
      "params": [
       {
        "name": "offsetLine",
        "type": "int"
       },
       {
        "name": "offsetIndex",
        "type": "int"
       }
      ],
      "name": "setStartingPosition",
      "type": null
     },
     {
      "params": [
       {
        "name": "prefix",
        "type": "String"
       }
      ],
      "name": "setWrapperPrefix",
      "type": null
     },
     {
      "params": [
       {
        "name": "validate",
        "type": "boolean"
       }
      ],
      "name": "validate",
      "type": null
     },
     {
      "params": [
       {
        "name": "sourceMapLocationMappings",
        "type": "List"
       }
      ],
      "name": "setPrefixMappings",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "generator",
      "type": "SourceMapGenerator"
     },
     {
      "name": "prefixMappings",
      "type": "List"
     },
     {
      "name": "sourceLocationFixupCache",
      "type": "Map"
     }
    ],
    "name": "SourceMap"
   }
  ]
 },
 {
  "filename": "JSError.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "type",
        "type": "DiagnosticType"
       },
       {
        "name": "arguments",
        "type": "String"
       }
      ],
      "name": "make",
      "type": "JSError"
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       },
       {
        "name": "type",
        "type": "DiagnosticType"
       },
       {
        "name": "arguments",
        "type": "String"
       }
      ],
      "name": "make",
      "type": "JSError"
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       },
       {
        "name": "level",
        "type": "CheckLevel"
       },
       {
        "name": "type",
        "type": "DiagnosticType"
       },
       {
        "name": "arguments",
        "type": "String"
       }
      ],
      "name": "make",
      "type": "JSError"
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "DiagnosticType"
       },
       {
        "name": "arguments",
        "type": "String"
       }
      ],
      "name": "make",
      "type": "JSError"
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "level",
        "type": "CheckLevel"
       },
       {
        "name": "type",
        "type": "DiagnosticType"
       },
       {
        "name": "arguments",
        "type": "String"
       }
      ],
      "name": "make",
      "type": "JSError"
     },
     {
      "params": [],
      "name": "getType",
      "type": "DiagnosticType"
     },
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       },
       {
        "name": "formatter",
        "type": "MessageFormatter"
       }
      ],
      "name": "format",
      "type": "String"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "getCharno",
      "type": "int"
     },
     {
      "params": [],
      "name": "getNodeSourceOffset",
      "type": "int"
     },
     {
      "params": [],
      "name": "getNodeLength",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "o",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "type",
      "type": "DiagnosticType"
     },
     {
      "name": "description",
      "type": "String"
     },
     {
      "name": "sourceName",
      "type": "String"
     },
     {
      "name": "node",
      "type": "Node"
     },
     {
      "name": "lineNumber",
      "type": "int"
     },
     {
      "name": "level",
      "type": "CheckLevel"
     },
     {
      "name": "charno",
      "type": "int"
     }
    ],
    "name": "JSError"
   }
  ]
 },
 {
  "filename": "FunctionToBlockMutator.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "fnName",
        "type": "String"
       },
       {
        "name": "fnNode",
        "type": "Node"
       },
       {
        "name": "callNode",
        "type": "Node"
       },
       {
        "name": "resultName",
        "type": "String"
       },
       {
        "name": "needsDefaultResult",
        "type": "boolean"
       },
       {
        "name": "isCallInLoop",
        "type": "boolean"
       }
      ],
      "name": "mutate",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "rewriteFunctionDeclarations",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "fixUnitializedVarDeclarations",
      "type": null
     },
     {
      "params": [
       {
        "name": "fnNode",
        "type": "Node"
       },
       {
        "name": "isCallInLoop",
        "type": "boolean"
       }
      ],
      "name": "makeLocalNamesUnique",
      "type": null
     },
     {
      "params": [
       {
        "name": "fnName",
        "type": "String"
       }
      ],
      "name": "getLabelNameForFunction",
      "type": "String"
     },
     {
      "params": [],
      "name": "getUniqueThisName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "fnTemplateRoot",
        "type": "Node"
       },
       {
        "name": "argMap",
        "type": "LinkedHashMap"
       },
       {
        "name": "namesToAlias",
        "type": "Set"
       }
      ],
      "name": "aliasAndInlineArguments",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "block",
        "type": "Node"
       },
       {
        "name": "resultName",
        "type": "String"
       },
       {
        "name": "labelName",
        "type": "String"
       },
       {
        "name": "resultMustBeSet",
        "type": "boolean"
       }
      ],
      "name": "replaceReturns",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "resultName",
        "type": "String"
       }
      ],
      "name": "addDummyAssignment",
      "type": null
     },
     {
      "params": [
       {
        "name": "block",
        "type": "Node"
       },
       {
        "name": "resultName",
        "type": "String"
       }
      ],
      "name": "convertLastReturnToStatement",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "expression",
        "type": "Node"
       }
      ],
      "name": "createAssignStatementNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "resultName",
        "type": "String"
       }
      ],
      "name": "getReplacementReturnStatement",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "block",
        "type": "Node"
       }
      ],
      "name": "hasReturnAtExit",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "current",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "resultName",
        "type": "String"
       },
       {
        "name": "labelName",
        "type": "String"
       }
      ],
      "name": "replaceReturnWithBreak",
      "type": "Node"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "safeNameIdSupplier",
      "type": "Supplier"
     }
    ],
    "name": "FunctionToBlockMutator"
   }
  ]
 },
 {
  "filename": "AliasKeywords.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "estimateMinOccurrencesRequriedToAlias",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "aliasName",
        "type": "String"
       }
      ],
      "name": "createAliasFunctionNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "needsAliases",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "codeRoot",
        "type": "Node"
       }
      ],
      "name": "addAliasNodes",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isAliasDefinition",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "int"
       }
      ],
      "name": "isAliasableType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "isAliasName",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "createAliasSpecifications",
      "type": "List"
     }
    ],
    "fields": [
     {
      "name": "ALIAS_NULL",
      "type": "String"
     },
     {
      "name": "ALIAS_TRUE",
      "type": "String"
     },
     {
      "name": "ALIAS_FALSE",
      "type": "String"
     },
     {
      "name": "ALIAS_THROW",
      "type": "String"
     },
     {
      "name": "ALIAS_VOID",
      "type": "String"
     },
     {
      "name": "MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL",
      "type": "int"
     },
     {
      "name": "MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW",
      "type": "int"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "aliasSpecifications",
      "type": "List"
     },
     {
      "name": "aliasTypes",
      "type": "Map"
     },
     {
      "name": "aliasNames",
      "type": "Set"
     }
    ],
    "name": "AliasKeywords"
   }
  ]
 },
 {
  "filename": "IgnoreCajaProperties.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "counter",
      "type": "int"
     }
    ],
    "name": "IgnoreCajaProperties"
   }
  ]
 },
 {
  "filename": "SuppressDocWarningsGuard.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "level",
      "type": "CheckLevel"
     },
     {
      "params": [],
      "name": "getPriority",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "suppressors",
      "type": "Map"
     }
    ],
    "name": "SuppressDocWarningsGuard"
   }
  ]
 },
 {
  "filename": "GenerateExports.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "annotate",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "getPropertyName",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "PROTOTYPE_PROPERTY",
      "type": "String"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "exportSymbolFunction",
      "type": "String"
     },
     {
      "name": "exportPropertyFunction",
      "type": "String"
     }
    ],
    "name": "GenerateExports"
   }
  ]
 },
 {
  "filename": "PeepholeCollectPropertyAssignments.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "subtree",
        "type": "Node"
       }
      ],
      "name": "optimizeSubtree",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getName",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getValue",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isInterestingValue",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyCandidate",
        "type": "Node"
       }
      ],
      "name": "isPropertyAssignmentToName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyCandidate",
        "type": "Node"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "value",
        "type": "Node"
       }
      ],
      "name": "collectProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "arrayLiteral",
        "type": "Node"
       },
       {
        "name": "propertyCandidate",
        "type": "Node"
       }
      ],
      "name": "collectArrayProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "objectLiteral",
        "type": "Node"
       },
       {
        "name": "propertyCandidate",
        "type": "Node"
       }
      ],
      "name": "collectObjectProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "varName",
        "type": "String"
       }
      ],
      "name": "mightContainForwardReference",
      "type": "boolean"
     }
    ],
    "fields": [],
    "name": "PeepholeCollectPropertyAssignments"
   }
  ]
 },
 {
  "filename": "DiagnosticGroup.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "type",
        "type": "DiagnosticType"
       }
      ],
      "name": "forType",
      "type": "DiagnosticGroup"
     },
     {
      "params": [
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "matches",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "DiagnosticType"
       }
      ],
      "name": "matches",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "group",
        "type": "DiagnosticGroup"
       }
      ],
      "name": "isSubGroup",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getTypes",
      "type": "Collection"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "types",
      "type": "Set"
     },
     {
      "name": "name",
      "type": "String"
     },
     {
      "name": "singletons",
      "type": "Map"
     }
    ],
    "name": "DiagnosticGroup"
   }
  ]
 },
 {
  "filename": "NameAnonymousFunctions.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "logger",
      "type": "Logger"
     },
     {
      "name": "DELIMITER",
      "type": "char"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "namedCount",
      "type": "int"
     },
     {
      "name": "bytesUsed",
      "type": "int"
     }
    ],
    "name": "NameAnonymousFunctions"
   }
  ]
 },
 {
  "filename": "CheckLevelLegacy.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [],
    "fields": [],
    "name": "CheckLevelLegacy"
   }
  ]
 },
 {
  "filename": "ProcessTweaks.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "calls",
        "type": "List"
       }
      ],
      "name": "replaceGetCompilerOverridesCalls",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "tweakInfos",
        "type": "Map"
       }
      ],
      "name": "stripAllCalls",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "sourceInformationNode",
        "type": "Node"
       }
      ],
      "name": "createCompilerDefaultValueOverridesVarNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "tweakInfos",
        "type": "Map"
       }
      ],
      "name": "applyCompilerDefaultValueOverrides",
      "type": null
     },
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "collectTweaks",
      "type": "CollectTweaksResult"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "stripTweaks",
      "type": "boolean"
     },
     {
      "name": "compilerDefaultValueOverrides",
      "type": "SortedMap"
     },
     {
      "name": "ID_MATCHER",
      "type": "CharMatcher"
     },
     {
      "name": "UNKNOWN_TWEAK_WARNING",
      "type": "DiagnosticType"
     },
     {
      "name": "TWEAK_MULTIPLY_REGISTERED_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "NON_LITERAL_TWEAK_ID_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "INVALID_TWEAK_DEFAULT_VALUE_WARNING",
      "type": "DiagnosticType"
     },
     {
      "name": "NON_GLOBAL_TWEAK_INIT_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "TWEAK_WRONG_GETTER_TYPE_WARNING",
      "type": "DiagnosticType"
     },
     {
      "name": "INVALID_TWEAK_ID_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "TWEAK_FUNCTIONS_MAP",
      "type": "Map"
     }
    ],
    "name": "ProcessTweaks"
   }
  ]
 },
 {
  "filename": "SideEffectsAnalysis.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "createVisibilityAbstraction",
      "type": "LocationAbstraction"
     },
     {
      "params": [
       {
        "name": "source",
        "type": "Node"
       },
       {
        "name": "environment",
        "type": "AbstractMotionEnvironment"
       },
       {
        "name": "destination",
        "type": "Node"
       }
      ],
      "name": "safeToMoveBefore",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "isPure",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node1",
        "type": "Node"
       },
       {
        "name": "node2",
        "type": "Node"
       }
      ],
      "name": "nodesHaveSameControlFlow",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "child",
        "type": "Node"
       }
      ],
      "name": "isControlDependentChild",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "closestControlDependentAncestor",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "possibleAncestor",
        "type": "Node"
       }
      ],
      "name": "nodeHasAncestor",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "nodeHasCall",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "NOT_FUNCTION_PREDICATE",
      "type": "Predicate"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "locationAbstraction",
      "type": "LocationAbstraction"
     },
     {
      "name": "locationAbstractionIdentifier",
      "type": "LocationAbstractionMode"
     }
    ],
    "name": "SideEffectsAnalysis"
   }
  ]
 },
 {
  "filename": "PhaseOptimizer.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "randomizeLoops",
      "type": null
     },
     {
      "params": [],
      "name": "getLoopsRun",
      "type": "List"
     },
     {
      "params": [],
      "name": "clearLoopsRun",
      "type": null
     },
     {
      "params": [
       {
        "name": "factories",
        "type": "List"
       }
      ],
      "name": "consume",
      "type": null
     },
     {
      "params": [
       {
        "name": "factory",
        "type": "PassFactory"
       }
      ],
      "name": "addOneTimePass",
      "type": null
     },
     {
      "params": [],
      "name": "addFixedPointLoop",
      "type": "Loop"
     },
     {
      "params": [
       {
        "name": "sanityCheck",
        "type": "PassFactory"
       }
      ],
      "name": "setSanityCheck",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "passName",
        "type": "String"
       }
      ],
      "name": "startPass",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "endPass",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "maybeSanityCheck",
      "type": null
     },
     {
      "params": [],
      "name": "hasHaltingErrors",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "passName",
        "type": "String"
       }
      ],
      "name": "newTracer",
      "type": "Tracer"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "Tracer"
       },
       {
        "name": "passName",
        "type": "String"
       }
      ],
      "name": "stopTracer",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "OPTIMAL_ORDER",
      "type": "List"
     },
     {
      "name": "MAX_LOOPS",
      "type": "int"
     },
     {
      "name": "OPTIMIZE_LOOP_ERROR",
      "type": "String"
     },
     {
      "name": "logger",
      "type": "Logger"
     },
     {
      "name": "passes",
      "type": "List"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "tracker",
      "type": "PerformanceTracker"
     },
     {
      "name": "recentChange",
      "type": "CodeChangeHandler"
     },
     {
      "name": "loopMutex",
      "type": "boolean"
     },
     {
      "name": "currentTracer",
      "type": "Tracer"
     },
     {
      "name": "currentPassName",
      "type": "String"
     },
     {
      "name": "sanityCheck",
      "type": "PassFactory"
     },
     {
      "name": "randomizeLoops",
      "type": "boolean"
     },
     {
      "name": "loopsRun",
      "type": "List"
     }
    ],
    "name": "PhaseOptimizer"
   }
  ]
 },
 {
  "filename": "JsAst.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "getAstRoot",
      "type": "Node"
     },
     {
      "params": [],
      "name": "clearAst",
      "type": null
     },
     {
      "params": [],
      "name": "getInputId",
      "type": "InputId"
     },
     {
      "params": [],
      "name": "getSourceFile",
      "type": "SourceFile"
     },
     {
      "params": [
       {
        "name": "file",
        "type": "SourceFile"
       }
      ],
      "name": "setSourceFile",
      "type": null
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "parse",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "logger_",
      "type": "Logger"
     },
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "inputId",
      "type": "InputId"
     },
     {
      "name": "sourceFile",
      "type": "SourceFile"
     },
     {
      "name": "fileName",
      "type": "String"
     },
     {
      "name": "root",
      "type": "Node"
     }
    ],
    "name": "JsAst"
   }
  ]
 },
 {
  "filename": "LoggerErrorManager.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       },
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "println",
      "type": null
     },
     {
      "params": [],
      "name": "printSummary",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "formatter",
      "type": "MessageFormatter"
     },
     {
      "name": "logger",
      "type": "Logger"
     }
    ],
    "name": "LoggerErrorManager"
   }
  ]
 },
 {
  "filename": "ExportTestFunctions.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "testFunctionName",
        "type": "String"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "scriptNode",
        "type": "Node"
       }
      ],
      "name": "exportTestFunction",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "functionName",
        "type": "String"
       }
      ],
      "name": "isTestFunction",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "TEST_FUNCTIONS_NAME_PATTERN",
      "type": "Pattern"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "exportSymbolFunction",
      "type": "String"
     }
    ],
    "name": "ExportTestFunctions"
   }
  ]
 },
 {
  "filename": "VariableReferenceCheck.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "scriptRoot",
        "type": "Node"
       },
       {
        "name": "originalRoot",
        "type": "Node"
       }
      ],
      "name": "hotSwapScript",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "UNDECLARED_REFERENCE",
      "type": "DiagnosticType"
     },
     {
      "name": "REDECLARED_VARIABLE",
      "type": "DiagnosticType"
     },
     {
      "name": "AMBIGUOUS_FUNCTION_DECL",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "checkLevel",
      "type": "CheckLevel"
     },
     {
      "name": "blocksWithDeclarations",
      "type": "Set"
     }
    ],
    "name": "VariableReferenceCheck"
   }
  ]
 },
 {
  "filename": "ErrorPass.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "error",
      "type": "JSError"
     }
    ],
    "name": "ErrorPass"
   }
  ]
 },
 {
  "filename": "Normalize.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       },
       {
        "name": "code",
        "type": "String"
       },
       {
        "name": "prefix",
        "type": "String"
       }
      ],
      "name": "parseAndNormalizeSyntheticCode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       },
       {
        "name": "code",
        "type": "String"
       },
       {
        "name": "prefix",
        "type": "String"
       }
      ],
      "name": "parseAndNormalizeTestCode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "changeDescription",
        "type": "String"
       }
      ],
      "name": "reportCodeChange",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "removeDuplicateDeclarations",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "assertOnChange",
      "type": "boolean"
     },
     {
      "name": "CONVERT_WHILE_TO_FOR",
      "type": "boolean"
     },
     {
      "name": "MAKE_LOCAL_NAMES_UNIQUE",
      "type": "boolean"
     },
     {
      "name": "CATCH_BLOCK_VAR_ERROR",
      "type": "DiagnosticType"
     }
    ],
    "name": "Normalize"
   }
  ]
 },
 {
  "filename": "JsMessageDefinition.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getMessageNode",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getVisitingNode",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getMessageParentNode",
      "type": "Node"
     }
    ],
    "fields": [
     {
      "name": "messageNode",
      "type": "Node"
     },
     {
      "name": "messageParentNode",
      "type": "Node"
     },
     {
      "name": "visitingNode",
      "type": "Node"
     }
    ],
    "name": "JsMessageDefinition"
   }
  ]
 },
 {
  "filename": "NodeUtil.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getImpureBooleanValue",
      "type": "TernaryValue"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getPureBooleanValue",
      "type": "TernaryValue"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getStringValue",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "double"
       }
      ],
      "name": "getStringValue",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getArrayElementStringValue",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "literal",
        "type": "Node"
       }
      ],
      "name": "arrayToString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getNumberValue",
      "type": "Double"
     },
     {
      "params": [
       {
        "name": "rawJsString",
        "type": "String"
       }
      ],
      "name": "getStringNumberValue",
      "type": "Double"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "trimJsWhiteSpace",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "int"
       }
      ],
      "name": "isStrWhiteSpaceChar",
      "type": "TernaryValue"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getFunctionName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getNearestFunctionName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isImmutableValue",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isSymmetricOperation",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isRelationalOperation",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "int"
       }
      ],
      "name": "getInverseOperator",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "includeFunctions",
        "type": "boolean"
       }
      ],
      "name": "isLiteralValue",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "val",
        "type": "Node"
       },
       {
        "name": "defines",
        "type": "Set"
       }
      ],
      "name": "isValidDefineValue",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "block",
        "type": "Node"
       }
      ],
      "name": "isEmptyBlock",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isSimpleOperator",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "int"
       }
      ],
      "name": "isSimpleOperatorType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "child",
        "type": "Node"
       }
      ],
      "name": "newExpr",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "mayEffectMutableState",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "mayEffectMutableState",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "mayHaveSideEffects",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "mayHaveSideEffects",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "checkForNewObjects",
        "type": "boolean"
       },
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "checkForStateChangeHelper",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "constructorCallHasSideEffects",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       },
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "constructorCallHasSideEffects",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "functionCallHasSideEffects",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       },
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "functionCallHasSideEffects",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "callHasLocalResult",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "newHasLocalResult",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "nodeTypeMayHaveSideEffects",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "nodeTypeMayHaveSideEffects",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "canBeSideEffected",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "knownConstants",
        "type": "Set"
       }
      ],
      "name": "canBeSideEffected",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "int"
       }
      ],
      "name": "precedence",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "p",
        "type": "Predicate"
       }
      ],
      "name": "valueCheck",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isNumericResult",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isNumericResultHelper",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isBooleanResult",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isBooleanResultHelper",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isUndefined",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isNull",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isNullOrUndefined",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "mayBeString",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "recurse",
        "type": "boolean"
       }
      ],
      "name": "mayBeString",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "mayBeStringHelper",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "int"
       }
      ],
      "name": "isAssociative",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "int"
       }
      ],
      "name": "isCommutative",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isAssignmentOp",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getOpFromAssignmentOp",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isExpressionNode",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "containsFunction",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "referencesThis",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isGet",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isGetProp",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isNew",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isVar",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isVarDeclaration",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getAssignedValue",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isString",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isExprAssign",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isAssign",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isExprCall",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isForIn",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isLoopStructure",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getLoopCodeBlock",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isWithinLoop",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isControlStructure",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isControlStructureCodeBlock",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getConditionExpression",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isStatementBlock",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isStatement",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "isStatementParent",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isSwitchCase",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isReferenceName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isLabelName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "child",
        "type": "Node"
       }
      ],
      "name": "isTryFinallyNode",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isTryCatchNodeContainer",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "removeChild",
      "type": null
     },
     {
      "params": [
       {
        "name": "tryNode",
        "type": "Node"
       }
      ],
      "name": "maybeAddFinally",
      "type": null
     },
     {
      "params": [
       {
        "name": "block",
        "type": "Node"
       }
      ],
      "name": "tryMergeBlock",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isCall",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "isCallOrNew",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isFunction",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "fn",
        "type": "Node"
       }
      ],
      "name": "getFunctionBody",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "isThis",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "isArrayLiteral",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "containsCall",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isFunctionDeclaration",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isHoistedFunctionDeclaration",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isFunctionExpression",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "isEmptyFunctionExpression",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "function",
        "type": "Node"
       }
      ],
      "name": "isVarArgsFunction",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       },
       {
        "name": "methodName",
        "type": "String"
       }
      ],
      "name": "isObjectCallMethod",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "isFunctionObjectCall",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "isFunctionObjectApply",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "isFunctionObjectCallOrApply",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "isSimpleFunctionObjectCall",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "isVarOrSimpleAssignLhs",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "isLValue",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "isObjectLitKey",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "Node"
       }
      ],
      "name": "getObjectLitKeyName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "Node"
       },
       {
        "name": "valueType",
        "type": "JSType"
       }
      ],
      "name": "getObjectLitKeyTypeFromValueType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "isGetOrSetKey",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "operator",
        "type": "int"
       }
      ],
      "name": "opToStr",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "operator",
        "type": "int"
       }
      ],
      "name": "opToStrNoFail",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "int"
       },
       {
        "name": "traverseChildrenPred",
        "type": "Predicate"
       }
      ],
      "name": "containsType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "int"
       }
      ],
      "name": "containsType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "branch",
        "type": "Node"
       }
      ],
      "name": "redeclareVarsInsideBranch",
      "type": null
     },
     {
      "params": [
       {
        "name": "source",
        "type": "Node"
       },
       {
        "name": "destination",
        "type": "Node"
       }
      ],
      "name": "copyNameAnnotations",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getAddingRoot",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "params",
        "type": "List"
       },
       {
        "name": "body",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "newFunctionNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "convention",
        "type": "CodingConvention"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "newQualifiedNameNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "convention",
        "type": "CodingConvention"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "basisNode",
        "type": "Node"
       },
       {
        "name": "originalName",
        "type": "String"
       }
      ],
      "name": "newQualifiedNameNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "qName",
        "type": "Node"
       }
      ],
      "name": "getRootOfQualifiedName",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "basisNode",
        "type": "Node"
       },
       {
        "name": "originalName",
        "type": "String"
       }
      ],
      "name": "setDebugInformation",
      "type": null
     },
     {
      "params": [
       {
        "name": "convention",
        "type": "CodingConvention"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "newName",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "convention",
        "type": "CodingConvention"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "basisNode",
        "type": "Node"
       }
      ],
      "name": "newName",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "convention",
        "type": "CodingConvention"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "basisNode",
        "type": "Node"
       },
       {
        "name": "originalName",
        "type": "String"
       }
      ],
      "name": "newName",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "isLatin",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "isValidPropertyName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "getVarsDeclaredInBranch",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isPrototypePropertyDeclaration",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isPrototypeProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "qName",
        "type": "Node"
       }
      ],
      "name": "getPrototypeClassName",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "qName",
        "type": "Node"
       }
      ],
      "name": "getPrototypePropertyName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "srcReferenceNode",
        "type": "Node"
       }
      ],
      "name": "newUndefinedNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "value",
        "type": "Node"
       }
      ],
      "name": "newVarNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "int"
       },
       {
        "name": "traverseChildrenPred",
        "type": "Predicate"
       }
      ],
      "name": "getNodeTypeReferenceCount",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "traverseChildrenPred",
        "type": "Predicate"
       }
      ],
      "name": "isNameReferenced",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "isNameReferenced",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getNameReferenceCount",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "pred",
        "type": "Predicate"
       },
       {
        "name": "traverseChildrenPred",
        "type": "Predicate"
       }
      ],
      "name": "has",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "pred",
        "type": "Predicate"
       },
       {
        "name": "traverseChildrenPred",
        "type": "Predicate"
       }
      ],
      "name": "getCount",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "vistor",
        "type": "Visitor"
       },
       {
        "name": "traverseChildrenPred",
        "type": "Predicate"
       }
      ],
      "name": "visitPreOrder",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "vistor",
        "type": "Visitor"
       },
       {
        "name": "traverseChildrenPred",
        "type": "Predicate"
       }
      ],
      "name": "visitPostOrder",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "hasFinally",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getCatchBlock",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "hasCatchHandler",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "fnNode",
        "type": "Node"
       }
      ],
      "name": "getFunctionParameters",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "isConstantName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "convention",
        "type": "CodingConvention"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "isConstantByConvention",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "nameNode",
        "type": "Node"
       }
      ],
      "name": "getInfoForNameNode",
      "type": "JSDocInfo"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getFunctionJSDocInfo",
      "type": "JSDocInfo"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getSourceName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getSourceFile",
      "type": "StaticSourceFile"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getInputId",
      "type": "InputId"
     },
     {
      "params": [
       {
        "name": "callTarget",
        "type": "Node"
       },
       {
        "name": "parameters",
        "type": "Node"
       }
      ],
      "name": "newCallNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "Node"
       }
      ],
      "name": "evaluatesToLocalValue",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "Node"
       },
       {
        "name": "locals",
        "type": "Predicate"
       }
      ],
      "name": "evaluatesToLocalValue",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "first",
        "type": "Node"
       },
       {
        "name": "index",
        "type": "int"
       }
      ],
      "name": "getNthSibling",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "function",
        "type": "Node"
       },
       {
        "name": "index",
        "type": "int"
       }
      ],
      "name": "getArgumentForFunction",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "call",
        "type": "Node"
       },
       {
        "name": "index",
        "type": "int"
       }
      ],
      "name": "getArgumentForCallOrNew",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "call",
        "type": "Node"
       }
      ],
      "name": "isToStringMethodCall",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getBestJSDocInfo",
      "type": "JSDocInfo"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getBestLValue",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "lValue",
        "type": "Node"
       }
      ],
      "name": "getBestLValueName",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "MAX_POSITIVE_INTEGER_NUMBER",
      "type": "long"
     },
     {
      "name": "JSC_PROPERTY_NAME_FN",
      "type": "String"
     },
     {
      "name": "CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",
      "type": "Set"
     },
     {
      "name": "BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",
      "type": "Set"
     },
     {
      "name": "OBJECT_METHODS_WITHOUT_SIDEEFFECTS",
      "type": "Set"
     },
     {
      "name": "REGEXP_METHODS",
      "type": "Set"
     },
     {
      "name": "STRING_REGEXP_METHODS",
      "type": "Set"
     },
     {
      "name": "NUMBERIC_RESULT_PREDICATE",
      "type": "NumbericResultPredicate"
     },
     {
      "name": "BOOLEAN_RESULT_PREDICATE",
      "type": "BooleanResultPredicate"
     },
     {
      "name": "MAY_BE_STRING_PREDICATE",
      "type": "MayBeStringResultPredicate"
     },
     {
      "name": "MATCH_NOT_FUNCTION",
      "type": "Predicate"
     }
    ],
    "name": "NodeUtil"
   }
  ]
 },
 {
  "filename": "AbstractMessageFormatter.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "colorize",
        "type": "boolean"
       }
      ],
      "name": "setColorize",
      "type": null
     },
     {
      "params": [],
      "name": "getSource",
      "type": "SourceExcerptProvider"
     },
     {
      "params": [
       {
        "name": "term",
        "type": "String"
       }
      ],
      "name": "termSupportsColor",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       }
      ],
      "name": "getLevelName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "text",
        "type": "String"
       },
       {
        "name": "color",
        "type": "Color"
       }
      ],
      "name": "maybeColorize",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "source",
      "type": "SourceExcerptProvider"
     },
     {
      "name": "colorize",
      "type": "boolean"
     },
     {
      "name": "SUPPORTED_COLOR_TERMINALS",
      "type": "Set"
     }
    ],
    "name": "AbstractMessageFormatter"
   }
  ]
 },
 {
  "filename": "LinkedFlowScope.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getFunctionScope",
      "type": "Scope"
     },
     {
      "params": [],
      "name": "flowsFromBottom",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "Scope"
       }
      ],
      "name": "createEntryLattice",
      "type": "LinkedFlowScope"
     },
     {
      "params": [
       {
        "name": "symbol",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "inferSlotType",
      "type": null
     },
     {
      "params": [
       {
        "name": "symbol",
        "type": "String"
       },
       {
        "name": "bottomType",
        "type": "JSType"
       },
       {
        "name": "inferredType",
        "type": "JSType"
       }
      ],
      "name": "inferQualifiedSlot",
      "type": null
     },
     {
      "params": [],
      "name": "getTypeOfThis",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "getRootNode",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getParentScope",
      "type": "StaticScope"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getSlot",
      "type": "StaticSlot"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getOwnSlot",
      "type": "StaticSlot"
     },
     {
      "params": [],
      "name": "createChildFlowScope",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "blindScope",
        "type": "FlowScope"
       }
      ],
      "name": "findUniqueRefinedSlot",
      "type": "StaticSlot"
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "Scope"
       }
      ],
      "name": "completeScope",
      "type": null
     },
     {
      "params": [],
      "name": "optimize",
      "type": "LinkedFlowScope"
     },
     {
      "params": [
       {
        "name": "other",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "slotA",
        "type": "StaticSlot"
       },
       {
        "name": "slotB",
        "type": "StaticSlot"
       }
      ],
      "name": "diffSlots",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "allFlowSlots",
      "type": "Map"
     }
    ],
    "fields": [
     {
      "name": "cache",
      "type": "FlatFlowScopeCache"
     },
     {
      "name": "parent",
      "type": "LinkedFlowScope"
     },
     {
      "name": "depth",
      "type": "int"
     },
     {
      "name": "MAX_DEPTH",
      "type": "int"
     },
     {
      "name": "flattened",
      "type": "FlatFlowScopeCache"
     },
     {
      "name": "frozen",
      "type": "boolean"
     },
     {
      "name": "lastSlot",
      "type": "LinkedFlowSlot"
     }
    ],
    "name": "LinkedFlowScope"
   }
  ]
 },
 {
  "filename": "RemoveTryCatch.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "tryNodesContainingReturnStatements",
      "type": "Set"
     }
    ],
    "name": "RemoveTryCatch"
   }
  ]
 },
 {
  "filename": "CombinedCompilerPass.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       },
       {
        "name": "root",
        "type": "Node"
       },
       {
        "name": "callbacks",
        "type": "List"
       }
      ],
      "name": "traverse",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "scriptRoot",
        "type": "Node"
       },
       {
        "name": "originalRoot",
        "type": "Node"
       }
      ],
      "name": "hotSwapScript",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "shouldTraverse",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "enterScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "exitScope",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "callbacks",
      "type": "CallbackWrapper"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "CombinedCompilerPass"
   }
  ]
 },
 {
  "filename": "ClosureCodeRemoval.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "ABSTRACT_METHOD_NAME",
      "type": "String"
     },
     {
      "name": "removeAbstractMethods",
      "type": "boolean"
     },
     {
      "name": "removeAssertionCalls",
      "type": "boolean"
     },
     {
      "name": "abstractMethodAssignmentNodes",
      "type": "List"
     },
     {
      "name": "assertionCalls",
      "type": "List"
     }
    ],
    "name": "ClosureCodeRemoval"
   }
  ]
 },
 {
  "filename": "GlobalVarReferenceMap.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "var",
        "type": "Var"
       }
      ],
      "name": "getReferences",
      "type": "ReferenceCollection"
     },
     {
      "params": [
       {
        "name": "globalRefMap",
        "type": "Map"
       }
      ],
      "name": "resetGlobalVarReferences",
      "type": null
     },
     {
      "params": [
       {
        "name": "refMapPatch",
        "type": "Map"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "updateGlobalVarReferences",
      "type": null
     },
     {
      "params": [
       {
        "name": "inputId",
        "type": "InputId"
       }
      ],
      "name": "removeScriptReferences",
      "type": null
     },
     {
      "params": [
       {
        "name": "varName",
        "type": "String"
       },
       {
        "name": "inputId",
        "type": "InputId"
       },
       {
        "name": "newSourceCollection",
        "type": "ReferenceCollection"
       }
      ],
      "name": "replaceReferences",
      "type": null
     },
     {
      "params": [
       {
        "name": "refList",
        "type": "List"
       },
       {
        "name": "inputId",
        "type": "InputId"
       }
      ],
      "name": "findSourceRefRange",
      "type": "SourceRefRange"
     }
    ],
    "fields": [
     {
      "name": "refMap",
      "type": "Map"
     },
     {
      "name": "inputOrder",
      "type": "Map"
     }
    ],
    "name": "GlobalVarReferenceMap"
   }
  ]
 },
 {
  "filename": "CodePrinter.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       },
       {
        "name": "outputFormat",
        "type": "Format"
       },
       {
        "name": "lineBreak",
        "type": "boolean"
       },
       {
        "name": "lineLengthThreshold",
        "type": "int"
       },
       {
        "name": "sourceMap",
        "type": "SourceMap"
       },
       {
        "name": "sourceMapDetailLevel",
        "type": "SourceMap"
       },
       {
        "name": "outputCharset",
        "type": "Charset"
       },
       {
        "name": "tagAsStrict",
        "type": "boolean"
       }
      ],
      "name": "toSource",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "DEFAULT_LINE_LENGTH_THRESHOLD",
      "type": "int"
     }
    ],
    "name": "CodePrinter"
   }
  ]
 },
 {
  "filename": "ClosureOptimizePrimitives.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "callNodes",
        "type": "List"
       }
      ],
      "name": "processObjectCreateCalls",
      "type": null
     },
     {
      "params": [
       {
        "name": "firstParam",
        "type": "Node"
       }
      ],
      "name": "canOptimizeObjectCreate",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "ClosureOptimizePrimitives"
   }
  ]
 },
 {
  "filename": "Compiler.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "errorManager",
        "type": "ErrorManager"
       }
      ],
      "name": "setErrorManager",
      "type": null
     },
     {
      "params": [],
      "name": "createMessageFormatter",
      "type": "MessageFormatter"
     },
     {
      "params": [
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "initOptions",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "JSSourceFile"
       },
       {
        "name": "inputs",
        "type": "JSSourceFile"
       },
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "init",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "List"
       },
       {
        "name": "inputs",
        "type": "List"
       },
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "init",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "JSSourceFile"
       },
       {
        "name": "modules",
        "type": "JSModule"
       },
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "init",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "List"
       },
       {
        "name": "modules",
        "type": "List"
       },
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "initModules",
      "type": null
     },
     {
      "params": [],
      "name": "initBasedOnOptions",
      "type": null
     },
     {
      "params": [
       {
        "name": "files",
        "type": "List"
       },
       {
        "name": "isExtern",
        "type": "boolean"
       }
      ],
      "name": "makeCompilerInput",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "modules",
        "type": "List"
       }
      ],
      "name": "checkFirstModule",
      "type": null
     },
     {
      "params": [
       {
        "name": "modules",
        "type": "List"
       }
      ],
      "name": "fillEmptyModules",
      "type": null
     },
     {
      "params": [],
      "name": "rebuildInputsFromModules",
      "type": null
     },
     {
      "params": [
       {
        "name": "modules",
        "type": "List"
       }
      ],
      "name": "getAllInputsFromModules",
      "type": "List"
     },
     {
      "params": [],
      "name": "initInputsByIdMap",
      "type": null
     },
     {
      "params": [
       {
        "name": "extern",
        "type": "JSSourceFile"
       },
       {
        "name": "input",
        "type": "JSSourceFile"
       },
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "compile",
      "type": "Result"
     },
     {
      "params": [
       {
        "name": "extern",
        "type": "JSSourceFile"
       },
       {
        "name": "input",
        "type": "JSSourceFile"
       },
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "compile",
      "type": "Result"
     },
     {
      "params": [
       {
        "name": "extern",
        "type": "JSSourceFile"
       },
       {
        "name": "modules",
        "type": "JSModule"
       },
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "compile",
      "type": "Result"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "JSSourceFile"
       },
       {
        "name": "inputs",
        "type": "JSSourceFile"
       },
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "compile",
      "type": "Result"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "List"
       },
       {
        "name": "inputs",
        "type": "List"
       },
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "compile",
      "type": "Result"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "JSSourceFile"
       },
       {
        "name": "modules",
        "type": "JSModule"
       },
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "compile",
      "type": "Result"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "List"
       },
       {
        "name": "modules",
        "type": "List"
       },
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "compileModules",
      "type": "Result"
     },
     {
      "params": [],
      "name": "compile",
      "type": "Result"
     },
     {
      "params": [],
      "name": "disableThreads",
      "type": null
     },
     {
      "params": [
       {
        "name": "callable",
        "type": "Callable"
       }
      ],
      "name": "runInCompilerThread",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "callable",
        "type": "Callable"
       }
      ],
      "name": "runCallableWithLargeStack",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "callable",
        "type": "Callable"
       },
       {
        "name": "useLargeStackThread",
        "type": "boolean"
       },
       {
        "name": "trace",
        "type": "boolean"
       }
      ],
      "name": "runCallable",
      "type": "T"
     },
     {
      "params": [],
      "name": "compileInternal",
      "type": null
     },
     {
      "params": [],
      "name": "parse",
      "type": null
     },
     {
      "params": [],
      "name": "getPassConfig",
      "type": "PassConfig"
     },
     {
      "params": [],
      "name": "createPassConfigInternal",
      "type": "PassConfig"
     },
     {
      "params": [
       {
        "name": "passes",
        "type": "PassConfig"
       }
      ],
      "name": "setPassConfig",
      "type": null
     },
     {
      "params": [],
      "name": "precheck",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "check",
      "type": null
     },
     {
      "params": [],
      "name": "externExports",
      "type": null
     },
     {
      "params": [
       {
        "name": "p",
        "type": "CompilerPass"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "maybeSanityCheck",
      "type": null
     },
     {
      "params": [],
      "name": "runSanityCheck",
      "type": null
     },
     {
      "params": [],
      "name": "removeTryCatchFinally",
      "type": null
     },
     {
      "params": [
       {
        "name": "stripTypes",
        "type": "Set"
       },
       {
        "name": "stripNameSuffixes",
        "type": "Set"
       },
       {
        "name": "stripTypePrefixes",
        "type": "Set"
       },
       {
        "name": "stripNamePrefixes",
        "type": "Set"
       }
      ],
      "name": "stripCode",
      "type": null
     },
     {
      "params": [
       {
        "name": "executionTime",
        "type": "CustomPassExecutionTime"
       }
      ],
      "name": "runCustomPasses",
      "type": null
     },
     {
      "params": [
       {
        "name": "passName",
        "type": "String"
       }
      ],
      "name": "startPass",
      "type": null
     },
     {
      "params": [],
      "name": "endPass",
      "type": null
     },
     {
      "params": [
       {
        "name": "passName",
        "type": "String"
       }
      ],
      "name": "newTracer",
      "type": "Tracer"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "Tracer"
       },
       {
        "name": "passName",
        "type": "String"
       }
      ],
      "name": "stopTracer",
      "type": null
     },
     {
      "params": [],
      "name": "getResult",
      "type": "Result"
     },
     {
      "params": [],
      "name": "getMessages",
      "type": "JSError"
     },
     {
      "params": [],
      "name": "getErrors",
      "type": "JSError"
     },
     {
      "params": [],
      "name": "getWarnings",
      "type": "JSError"
     },
     {
      "params": [],
      "name": "getRoot",
      "type": "Node"
     },
     {
      "params": [],
      "name": "nextUniqueNameId",
      "type": "int"
     },
     {
      "params": [],
      "name": "resetUniqueNameId",
      "type": null
     },
     {
      "params": [],
      "name": "getUniqueNameIdSupplier",
      "type": "Supplier"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "Node"
       },
       {
        "name": "n2",
        "type": "Node"
       }
      ],
      "name": "areNodesEqualForInlining",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "id",
        "type": "InputId"
       }
      ],
      "name": "getInput",
      "type": "CompilerInput"
     },
     {
      "params": [
       {
        "name": "id",
        "type": "InputId"
       }
      ],
      "name": "removeExternInput",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "newExternInput",
      "type": "CompilerInput"
     },
     {
      "params": [
       {
        "name": "ast",
        "type": "JsAst"
       }
      ],
      "name": "addIncrementalSourceAst",
      "type": null
     },
     {
      "params": [
       {
        "name": "ast",
        "type": "JsAst"
       }
      ],
      "name": "replaceIncrementalSourceAst",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getModuleGraph",
      "type": "JSModuleGraph"
     },
     {
      "params": [],
      "name": "getTypeRegistry",
      "type": "JSTypeRegistry"
     },
     {
      "params": [],
      "name": "getTypedScopeCreator",
      "type": "MemoizedScopeCreator"
     },
     {
      "params": [],
      "name": "ensureDefaultPassConfig",
      "type": "DefaultPassConfig"
     },
     {
      "params": [],
      "name": "buildKnownSymbolTable",
      "type": "SymbolTable"
     },
     {
      "params": [],
      "name": "getTopScope",
      "type": "Scope"
     },
     {
      "params": [],
      "name": "getReverseAbstractInterpreter",
      "type": "ReverseAbstractInterpreter"
     },
     {
      "params": [],
      "name": "getTypeValidator",
      "type": "TypeValidator"
     },
     {
      "params": [],
      "name": "parseInputs",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "file",
        "type": "JSSourceFile"
       }
      ],
      "name": "parse",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "js",
        "type": "String"
       }
      ],
      "name": "parseSyntheticCode",
      "type": "Node"
     },
     {
      "params": [],
      "name": "initCompilerOptionsIfTesting",
      "type": null
     },
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       },
       {
        "name": "js",
        "type": "String"
       }
      ],
      "name": "parseSyntheticCode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "js",
        "type": "String"
       }
      ],
      "name": "parseTestCode",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getDefaultErrorReporter",
      "type": "ErrorReporter"
     },
     {
      "params": [],
      "name": "toSource",
      "type": "String"
     },
     {
      "params": [],
      "name": "toSourceArray",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "module",
        "type": "JSModule"
       }
      ],
      "name": "toSource",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "module",
        "type": "JSModule"
       }
      ],
      "name": "toSourceArray",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "cb",
        "type": "CodeBuilder"
       },
       {
        "name": "inputSeqNum",
        "type": "int"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "toSource",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "toSource",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "sourceMap",
        "type": "SourceMap"
       },
       {
        "name": "firstOutput",
        "type": "boolean"
       }
      ],
      "name": "toSource",
      "type": "String"
     },
     {
      "params": [],
      "name": "optimize",
      "type": null
     },
     {
      "params": [
       {
        "name": "map",
        "type": "CssRenamingMap"
       }
      ],
      "name": "setCssRenamingMap",
      "type": null
     },
     {
      "params": [],
      "name": "getCssRenamingMap",
      "type": "CssRenamingMap"
     },
     {
      "params": [],
      "name": "processDefines",
      "type": null
     },
     {
      "params": [],
      "name": "isInliningForbidden",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "computeCFG",
      "type": "ControlFlowGraph"
     },
     {
      "params": [],
      "name": "normalize",
      "type": null
     },
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "prepareAst",
      "type": null
     },
     {
      "params": [],
      "name": "recordFunctionInformation",
      "type": null
     },
     {
      "params": [
       {
        "name": "handler",
        "type": "CodeChangeHandler"
       }
      ],
      "name": "addChangeHandler",
      "type": null
     },
     {
      "params": [
       {
        "name": "handler",
        "type": "CodeChangeHandler"
       }
      ],
      "name": "removeChangeHandler",
      "type": null
     },
     {
      "params": [],
      "name": "reportCodeChange",
      "type": null
     },
     {
      "params": [],
      "name": "getCodingConvention",
      "type": "CodingConvention"
     },
     {
      "params": [],
      "name": "isIdeMode",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "acceptEcmaScript5",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "languageMode",
      "type": "LanguageMode"
     },
     {
      "params": [],
      "name": "acceptConstKeyword",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getParserConfig",
      "type": "Config"
     },
     {
      "params": [],
      "name": "isTypeCheckingEnabled",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getDiagnosticGroups",
      "type": "DiagnosticGroups"
     },
     {
      "params": [
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "report",
      "type": null
     },
     {
      "params": [
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "getErrorLevel",
      "type": "CheckLevel"
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "cause",
        "type": "Exception"
       }
      ],
      "name": "throwInternalError",
      "type": null
     },
     {
      "params": [],
      "name": "getErrorCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "getWarningCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "hasHaltingErrors",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hasErrors",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "str",
        "type": "String"
       }
      ],
      "name": "addToDebugLog",
      "type": null
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       }
      ],
      "name": "getSourceFileByName",
      "type": "SourceFile"
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "lineNumber",
        "type": "int"
       }
      ],
      "name": "getSourceLine",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "lineNumber",
        "type": "int"
       }
      ],
      "name": "getSourceRegion",
      "type": "Region"
     },
     {
      "params": [
       {
        "name": "module",
        "type": "JSModule"
       }
      ],
      "name": "getNodeForCodeInsertion",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getSourceMap",
      "type": "SourceMap"
     },
     {
      "params": [],
      "name": "getVariableMap",
      "type": "VariableMap"
     },
     {
      "params": [],
      "name": "getPropertyMap",
      "type": "VariableMap"
     },
     {
      "params": [],
      "name": "getOptions",
      "type": "CompilerOptions"
     },
     {
      "params": [],
      "name": "getFunctionalInformationMap",
      "type": "FunctionInformationMap"
     },
     {
      "params": [
       {
        "name": "level",
        "type": "Level"
       }
      ],
      "name": "setLoggingLevel",
      "type": null
     },
     {
      "params": [],
      "name": "getAstDotGraph",
      "type": "String"
     },
     {
      "params": [],
      "name": "getErrorManager",
      "type": "ErrorManager"
     },
     {
      "params": [],
      "name": "getInputsInOrder",
      "type": "List"
     },
     {
      "params": [],
      "name": "getExternsInOrder",
      "type": "List"
     },
     {
      "params": [],
      "name": "getState",
      "type": "IntermediateState"
     },
     {
      "params": [
       {
        "name": "state",
        "type": "IntermediateState"
       }
      ],
      "name": "setState",
      "type": null
     },
     {
      "params": [],
      "name": "getInputsForTesting",
      "type": "List"
     },
     {
      "params": [],
      "name": "getExternsForTesting",
      "type": "List"
     },
     {
      "params": [],
      "name": "hasRegExpGlobalReferences",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "references",
        "type": "boolean"
       }
      ],
      "name": "setHasRegExpGlobalReferences",
      "type": null
     },
     {
      "params": [
       {
        "name": "refMapPatch",
        "type": "Map"
       },
       {
        "name": "collectionRoot",
        "type": "Node"
       }
      ],
      "name": "updateGlobalVarReferences",
      "type": null
     },
     {
      "params": [],
      "name": "getGlobalVarReferences",
      "type": "ReferenceMap"
     }
    ],
    "fields": [
     {
      "name": "MODULE_DEPENDENCY_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "MISSING_ENTRY_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "options",
      "type": "CompilerOptions"
     },
     {
      "name": "passes",
      "type": "PassConfig"
     },
     {
      "name": "externs",
      "type": "List"
     },
     {
      "name": "modules",
      "type": "List"
     },
     {
      "name": "moduleGraph",
      "type": "JSModuleGraph"
     },
     {
      "name": "inputs",
      "type": "List"
     },
     {
      "name": "errorManager",
      "type": "ErrorManager"
     },
     {
      "name": "warningsGuard",
      "type": "WarningsGuard"
     },
     {
      "name": "externsRoot",
      "type": "Node"
     },
     {
      "name": "jsRoot",
      "type": "Node"
     },
     {
      "name": "externAndJsRoot",
      "type": "Node"
     },
     {
      "name": "inputsById",
      "type": "Map"
     },
     {
      "name": "sourceMap",
      "type": "SourceMap"
     },
     {
      "name": "externExports",
      "type": "String"
     },
     {
      "name": "uniqueNameId",
      "type": "int"
     },
     {
      "name": "useThreads",
      "type": "boolean"
     },
     {
      "name": "hasRegExpGlobalReferences",
      "type": "boolean"
     },
     {
      "name": "functionInformationMap",
      "type": "FunctionInformationMap"
     },
     {
      "name": "debugLog",
      "type": "StringBuilder"
     },
     {
      "name": "defaultCodingConvention",
      "type": "CodingConvention"
     },
     {
      "name": "typeRegistry",
      "type": "JSTypeRegistry"
     },
     {
      "name": "parserConfig",
      "type": "Config"
     },
     {
      "name": "abstractInterpreter",
      "type": "ReverseAbstractInterpreter"
     },
     {
      "name": "typeValidator",
      "type": "TypeValidator"
     },
     {
      "name": "tracker",
      "type": "PerformanceTracker"
     },
     {
      "name": "oldErrorReporter",
      "type": "com"
     },
     {
      "name": "defaultErrorReporter",
      "type": "ErrorReporter"
     },
     {
      "name": "OPTIMIZE_LOOP_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "MOTION_ITERATIONS_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "COMPILER_STACK_SIZE",
      "type": "long"
     },
     {
      "name": "logger",
      "type": "Logger"
     },
     {
      "name": "outStream",
      "type": "PrintStream"
     },
     {
      "name": "globalRefMap",
      "type": "GlobalVarReferenceMap"
     },
     {
      "name": "EMPTY_MODULE_LIST_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "EMPTY_ROOT_MODULE_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "DUPLICATE_INPUT",
      "type": "DiagnosticType"
     },
     {
      "name": "DUPLICATE_EXTERN_INPUT",
      "type": "DiagnosticType"
     },
     {
      "name": "sanityCheck",
      "type": "PassFactory"
     },
     {
      "name": "currentTracer",
      "type": "Tracer"
     },
     {
      "name": "currentPassName",
      "type": "String"
     },
     {
      "name": "syntheticCodeId",
      "type": "int"
     },
     {
      "name": "recentChange",
      "type": "CodeChangeHandler"
     },
     {
      "name": "codeChangeHandlers",
      "type": "List"
     }
    ],
    "name": "Compiler"
   }
  ]
 },
 {
  "filename": "DefaultCodingConvention.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "variableName",
        "type": "String"
       }
      ],
      "name": "isConstant",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "variableName",
        "type": "String"
       }
      ],
      "name": "isConstantKey",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "String"
       }
      ],
      "name": "isValidEnumKey",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parameter",
        "type": "Node"
       }
      ],
      "name": "isOptionalParameter",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parameter",
        "type": "Node"
       }
      ],
      "name": "isVarArgsParameter",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "local",
        "type": "boolean"
       }
      ],
      "name": "isExported",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "isExported",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "isPrivate",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "getClassesDefinedByCall",
      "type": "SubclassRelationship"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "isSuperClassReference",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "extractClassNameIfProvide",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "extractClassNameIfRequire",
      "type": "String"
     },
     {
      "params": [],
      "name": "getExportPropertyFunction",
      "type": "String"
     },
     {
      "params": [],
      "name": "getExportSymbolFunction",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "identifyTypeDeclarationCall",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "parentCtor",
        "type": "FunctionType"
       },
       {
        "name": "childCtor",
        "type": "FunctionType"
       },
       {
        "name": "type",
        "type": "SubclassType"
       }
      ],
      "name": "applySubclassRelationship",
      "type": null
     },
     {
      "params": [],
      "name": "getAbstractMethodName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "getSingletonGetterClassName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "functionType",
        "type": "FunctionType"
       },
       {
        "name": "getterType",
        "type": "FunctionType"
       },
       {
        "name": "objectType",
        "type": "ObjectType"
       }
      ],
      "name": "applySingletonGetter",
      "type": null
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "getDelegateRelationship",
      "type": "DelegateRelationship"
     },
     {
      "params": [
       {
        "name": "delegateSuperclass",
        "type": "ObjectType"
       },
       {
        "name": "delegateBase",
        "type": "ObjectType"
       },
       {
        "name": "delegator",
        "type": "ObjectType"
       },
       {
        "name": "delegateProxy",
        "type": "FunctionType"
       },
       {
        "name": "findDelegate",
        "type": "FunctionType"
       }
      ],
      "name": "applyDelegateRelationship",
      "type": null
     },
     {
      "params": [],
      "name": "getDelegateSuperclassName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "delegateCallingConventions",
        "type": "Map"
       }
      ],
      "name": "checkForCallingConventionDefiningCalls",
      "type": null
     },
     {
      "params": [
       {
        "name": "registry",
        "type": "JSTypeRegistry"
       },
       {
        "name": "scope",
        "type": "Scope"
       },
       {
        "name": "delegateProxyPrototypes",
        "type": "List"
       },
       {
        "name": "delegateCallingConventions",
        "type": "Map"
       }
      ],
      "name": "defineDelegateProxyPrototypeProperties",
      "type": null
     },
     {
      "params": [],
      "name": "getGlobalObject",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "call",
        "type": "Node"
       }
      ],
      "name": "isPropertyTestFunction",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "getObjectLiteralCast",
      "type": "ObjectLiteralCast"
     },
     {
      "params": [],
      "name": "getAssertionFunctions",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "describeFunctionBind",
      "type": "Bind"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "safeNext",
      "type": "Node"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "DefaultCodingConvention"
   }
  ]
 },
 {
  "filename": "FindExportableNodes.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [],
      "name": "getExports",
      "type": "LinkedHashMap"
     }
    ],
    "fields": [
     {
      "name": "NON_GLOBAL_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "exports",
      "type": "LinkedHashMap"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "FindExportableNodes"
   }
  ]
 },
 {
  "filename": "ChainCalls.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "badFunctionNodes",
      "type": "Set"
     },
     {
      "name": "goodFunctionNodes",
      "type": "Set"
     },
     {
      "name": "callSites",
      "type": "List"
     },
     {
      "name": "defFinder",
      "type": "SimpleDefinitionFinder"
     },
     {
      "name": "gatherFunctions",
      "type": "GatherFunctions"
     }
    ],
    "name": "ChainCalls"
   }
  ]
 },
 {
  "filename": "GatherRawExports.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isGlobalThisObject",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getExportedVariableNames",
      "type": "Set"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "GLOBAL_THIS_NAME",
      "type": "String"
     },
     {
      "name": "exportedVariables",
      "type": "Set"
     }
    ],
    "name": "GatherRawExports"
   }
  ]
 },
 {
  "filename": "Denormalize.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "shouldTraverse",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "maybeCollapseIntoForStatements",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "Denormalize"
   }
  ]
 },
 {
  "filename": "AbstractCompiler.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "inputId",
        "type": "InputId"
       }
      ],
      "name": "getInput",
      "type": "CompilerInput"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "newExternInput",
      "type": "CompilerInput"
     },
     {
      "params": [],
      "name": "getModuleGraph",
      "type": "JSModuleGraph"
     },
     {
      "params": [],
      "name": "getInputsInOrder",
      "type": "List"
     },
     {
      "params": [],
      "name": "getTypeRegistry",
      "type": "JSTypeRegistry"
     },
     {
      "params": [],
      "name": "getTypedScopeCreator",
      "type": "ScopeCreator"
     },
     {
      "params": [],
      "name": "getTopScope",
      "type": "Scope"
     },
     {
      "params": [
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "report",
      "type": null
     },
     {
      "params": [
       {
        "name": "msg",
        "type": "String"
       },
       {
        "name": "cause",
        "type": "Exception"
       }
      ],
      "name": "throwInternalError",
      "type": null
     },
     {
      "params": [],
      "name": "getCodingConvention",
      "type": "CodingConvention"
     },
     {
      "params": [],
      "name": "reportCodeChange",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       }
      ],
      "name": "addToDebugLog",
      "type": null
     },
     {
      "params": [
       {
        "name": "map",
        "type": "CssRenamingMap"
       }
      ],
      "name": "setCssRenamingMap",
      "type": null
     },
     {
      "params": [],
      "name": "getCssRenamingMap",
      "type": "CssRenamingMap"
     },
     {
      "params": [
       {
        "name": "module",
        "type": "JSModule"
       }
      ],
      "name": "getNodeForCodeInsertion",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getTypeValidator",
      "type": "TypeValidator"
     },
     {
      "params": [
       {
        "name": "code",
        "type": "String"
       }
      ],
      "name": "parseSyntheticCode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       },
       {
        "name": "code",
        "type": "String"
       }
      ],
      "name": "parseSyntheticCode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "code",
        "type": "String"
       }
      ],
      "name": "parseTestCode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "toSource",
      "type": "String"
     },
     {
      "params": [],
      "name": "getDefaultErrorReporter",
      "type": "ErrorReporter"
     },
     {
      "params": [],
      "name": "getReverseAbstractInterpreter",
      "type": "ReverseAbstractInterpreter"
     },
     {
      "params": [],
      "name": "getLifeCycleStage",
      "type": "LifeCycleStage"
     },
     {
      "params": [],
      "name": "getUniqueNameIdSupplier",
      "type": "Supplier"
     },
     {
      "params": [],
      "name": "hasHaltingErrors",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "handler",
        "type": "CodeChangeHandler"
       }
      ],
      "name": "addChangeHandler",
      "type": null
     },
     {
      "params": [
       {
        "name": "handler",
        "type": "CodeChangeHandler"
       }
      ],
      "name": "removeChangeHandler",
      "type": null
     },
     {
      "params": [],
      "name": "isIdeMode",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "acceptEcmaScript5",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "acceptConstKeyword",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getParserConfig",
      "type": "Config"
     },
     {
      "params": [],
      "name": "isTypeCheckingEnabled",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "prepareAst",
      "type": null
     },
     {
      "params": [],
      "name": "getErrorManager",
      "type": "ErrorManager"
     },
     {
      "params": [
       {
        "name": "stage",
        "type": "LifeCycleStage"
       }
      ],
      "name": "setLifeCycleStage",
      "type": null
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "Node"
       },
       {
        "name": "n2",
        "type": "Node"
       }
      ],
      "name": "areNodesEqualForInlining",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "references",
        "type": "boolean"
       }
      ],
      "name": "setHasRegExpGlobalReferences",
      "type": null
     },
     {
      "params": [],
      "name": "hasRegExpGlobalReferences",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "getErrorLevel",
      "type": "CheckLevel"
     },
     {
      "params": [
       {
        "name": "pass",
        "type": "CompilerPass"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "getRoot",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "refMapPatch",
        "type": "Map"
       },
       {
        "name": "collectionRoot",
        "type": "Node"
       }
      ],
      "name": "updateGlobalVarReferences",
      "type": null
     },
     {
      "params": [],
      "name": "getGlobalVarReferences",
      "type": "ReferenceMap"
     }
    ],
    "fields": [
     {
      "name": "READ_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "stage",
      "type": "LifeCycleStage"
     }
    ],
    "name": "AbstractCompiler"
   }
  ]
 },
 {
  "filename": "PrepareAst.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "reportChange",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "normalizeNodeTypes",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "normalizeBlocks",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "checkOnly",
      "type": "boolean"
     }
    ],
    "name": "PrepareAst"
   }
  ]
 },
 {
  "filename": "FunctionNames.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "getFunctionNodeList",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "f",
        "type": "Node"
       }
      ],
      "name": "getFunctionId",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "f",
        "type": "Node"
       }
      ],
      "name": "getFunctionName",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "functionMap",
      "type": "Map"
     },
     {
      "name": "functionListExtractor",
      "type": "FunctionListExtractor"
     }
    ],
    "name": "FunctionNames"
   }
  ]
 },
 {
  "filename": "CheckMissingReturn.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "enterScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "cfg",
        "type": "ControlFlowGraph"
       }
      ],
      "name": "fastAllPathsReturnCheck",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "exitScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "nodeTraversal",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "shouldTraverse",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "Node"
       }
      ],
      "name": "explicitReturnExpected",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "function",
        "type": "Node"
       }
      ],
      "name": "isEmptyFunction",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "returnType",
        "type": "JSType"
       }
      ],
      "name": "isVoidOrUnknown",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "MISSING_RETURN_STATEMENT",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "level",
      "type": "CheckLevel"
     },
     {
      "name": "IS_RETURN",
      "type": "Predicate"
     },
     {
      "name": "GOES_THROUGH_TRUE_CONDITION_PREDICATE",
      "type": "Predicate"
     }
    ],
    "name": "CheckMissingReturn"
   }
  ]
 },
 {
  "filename": "ObjectPropertyStringPreprocess.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "declarationStmt",
        "type": "Node"
       }
      ],
      "name": "addExternDeclaration",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "OBJECT_PROPERTY_STRING",
      "type": "String"
     },
     {
      "name": "EXTERN_OBJECT_PROPERTY_STRING",
      "type": "String"
     },
     {
      "name": "INVALID_NUM_ARGUMENTS_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "QUALIFIED_NAME_EXPECTED_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "STRING_LITERAL_EXPECTED_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "ObjectPropertyStringPreprocess"
   }
  ]
 },
 {
  "filename": "InlineCostEstimator.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "getCost",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       },
       {
        "name": "costThreshhold",
        "type": "int"
       }
      ],
      "name": "getCost",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "ESTIMATED_IDENTIFIER",
      "type": "String"
     },
     {
      "name": "ESTIMATED_IDENTIFIER_COST",
      "type": "int"
     }
    ],
    "name": "InlineCostEstimator"
   }
  ]
 },
 {
  "filename": "RenameProperties.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "reservedNames",
        "type": "Set"
       },
       {
        "name": "allProps",
        "type": "Collection"
       }
      ],
      "name": "reusePropertyNames",
      "type": null
     },
     {
      "params": [],
      "name": "computeAffinityScores",
      "type": null
     },
     {
      "params": [
       {
        "name": "props",
        "type": "Set"
       },
       {
        "name": "reservedNames",
        "type": "Set"
       }
      ],
      "name": "generateNames",
      "type": null
     },
     {
      "params": [],
      "name": "getPropertyMap",
      "type": "VariableMap"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "generatePseudoNames",
      "type": "boolean"
     },
     {
      "name": "prevUsedPropertyMap",
      "type": "VariableMap"
     },
     {
      "name": "stringNodesToRename",
      "type": "List"
     },
     {
      "name": "callNodeToParentMap",
      "type": "Map"
     },
     {
      "name": "reservedCharacters",
      "type": "char"
     },
     {
      "name": "propertyMap",
      "type": "Map"
     },
     {
      "name": "affinityGraph",
      "type": "UndiGraph"
     },
     {
      "name": "externedNames",
      "type": "Set"
     },
     {
      "name": "quotedNames",
      "type": "Set"
     },
     {
      "name": "FREQUENCY_COMPARATOR",
      "type": "Comparator"
     },
     {
      "name": "RENAME_PROPERTY_FUNCTION_NAME",
      "type": "String"
     },
     {
      "name": "BAD_CALL",
      "type": "DiagnosticType"
     },
     {
      "name": "BAD_ARG",
      "type": "DiagnosticType"
     }
    ],
    "name": "RenameProperties"
   }
  ]
 },
 {
  "filename": "MessageBundle.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "idGenerator",
      "type": "JsMessage"
     },
     {
      "params": [
       {
        "name": "id",
        "type": "String"
       }
      ],
      "name": "getMessage",
      "type": "JsMessage"
     },
     {
      "params": [],
      "name": "getAllMessages",
      "type": "Iterable"
     }
    ],
    "fields": [],
    "name": "MessageBundle"
   }
  ]
 },
 {
  "filename": "SymbolTable.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "symbol",
        "type": "Symbol"
       }
      ],
      "name": "getReferences",
      "type": "Iterable"
     },
     {
      "params": [],
      "name": "getAllSymbols",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "slot",
        "type": "Symbol"
       }
      ],
      "name": "getScope",
      "type": "SymbolScope"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getEnclosingScope",
      "type": "SymbolScope"
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "SymbolScope"
       }
      ],
      "name": "getSymbolForScope",
      "type": "Symbol"
     },
     {
      "params": [
       {
        "name": "sym",
        "type": "Symbol"
       }
      ],
      "name": "getAllSymbolsForTypeOf",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "fn",
        "type": "FunctionType"
       }
      ],
      "name": "getSymbolDeclaredBy",
      "type": "Symbol"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "scope",
        "type": "SymbolScope"
       }
      ],
      "name": "getAllSymbolsForType",
      "type": "List"
     },
     {
      "params": [],
      "name": "toDebugString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "builder",
        "type": "StringBuilder"
       },
       {
        "name": "symbol",
        "type": "Symbol"
       }
      ],
      "name": "toDebugString",
      "type": null
     },
     {
      "params": [
       {
        "name": "otherSymbolTable",
        "type": "StaticSymbolTable"
       }
      ],
      "name": "addSymbolsFrom",
      "type": null
     },
     {
      "params": [],
      "name": "fillNamespaceReferences",
      "type": null
     },
     {
      "params": [
       {
        "name": "otherScope",
        "type": "StaticScope"
       }
      ],
      "name": "createScopeFrom",
      "type": "SymbolScope"
     }
    ],
    "fields": [
     {
      "name": "symbols",
      "type": "Table"
     },
     {
      "name": "scopes",
      "type": "Map"
     },
     {
      "name": "globalScope",
      "type": "SymbolScope"
     }
    ],
    "name": "SymbolTable"
   }
  ]
 },
 {
  "filename": "MethodCompilerPass.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "getActingCallback",
      "type": "Callback"
     },
     {
      "params": [],
      "name": "getSignatureStore",
      "type": "SignatureStore"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "addPossibleSignature",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "function",
        "type": "Node"
       },
       {
        "name": "fnSourceName",
        "type": "String"
       }
      ],
      "name": "addSignature",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "externMethods",
      "type": "Set"
     },
     {
      "name": "externMethodsWithoutSignatures",
      "type": "Set"
     },
     {
      "name": "nonMethodProperties",
      "type": "Set"
     },
     {
      "name": "methodDefinitions",
      "type": "Multimap"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "MethodCompilerPass"
   }
  ]
 },
 {
  "filename": "PeepholeFoldConstants.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "subtree",
        "type": "Node"
       }
      ],
      "name": "optimizeSubtree",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "subtree",
        "type": "Node"
       }
      ],
      "name": "tryFoldBinaryOperator",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryReduceVoid",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryReduceOperandsForOp",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryConvertOperandsToNumber",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryConvertToNumber",
      "type": null
     },
     {
      "params": [
       {
        "name": "originalTypeofNode",
        "type": "Node"
       }
      ],
      "name": "tryFoldTypeof",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryFoldUnaryOperator",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       }
      ],
      "name": "tryFoldInstanceof",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       }
      ],
      "name": "tryFoldAssign",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       }
      ],
      "name": "tryFoldAndOr",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       }
      ],
      "name": "tryFoldChildAddString",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       }
      ],
      "name": "tryFoldAddConstantString",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       }
      ],
      "name": "tryFoldArithmeticOp",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "opType",
        "type": "int"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       }
      ],
      "name": "performArithmeticOp",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       }
      ],
      "name": "tryFoldLeftChildOp",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       }
      ],
      "name": "tryFoldAdd",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       }
      ],
      "name": "tryFoldShift",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       }
      ],
      "name": "tryFoldComparison",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getNormalizedNodeType",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "op",
        "type": "int"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       }
      ],
      "name": "compareAsNumbers",
      "type": "Boolean"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "Node"
       },
       {
        "name": "op",
        "type": "int"
       }
      ],
      "name": "compareToUndefined",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryFoldCtorCall",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "inForcedStringContext",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryFoldInForcedStringContext",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       }
      ],
      "name": "tryFoldGetElem",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       }
      ],
      "name": "tryFoldGetProp",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isAssignmentTarget",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       }
      ],
      "name": "tryFoldArrayAccess",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       }
      ],
      "name": "tryFoldObjectPropAccess",
      "type": "Node"
     }
    ],
    "fields": [
     {
      "name": "INVALID_GETELEM_INDEX_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "INDEX_OUT_OF_BOUNDS_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "NEGATING_A_NON_NUMBER_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "BITWISE_OPERAND_OUT_OF_RANGE",
      "type": "DiagnosticType"
     },
     {
      "name": "SHIFT_AMOUNT_OUT_OF_BOUNDS",
      "type": "DiagnosticType"
     },
     {
      "name": "FRACTIONAL_BITWISE_OPERAND",
      "type": "DiagnosticType"
     },
     {
      "name": "MAX_FOLD_NUMBER",
      "type": "double"
     }
    ],
    "name": "PeepholeFoldConstants"
   }
  ]
 },
 {
  "filename": "ConvertToDottedProperties.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "ConvertToDottedProperties"
   }
  ]
 },
 {
  "filename": "JsMessageExtractor.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "inputs",
        "type": "JSSourceFile"
       }
      ],
      "name": "extractMessages",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "inputs",
        "type": "Iterable"
       }
      ],
      "name": "extractMessages",
      "type": "Collection"
     }
    ],
    "fields": [
     {
      "name": "style",
      "type": "JsMessage"
     },
     {
      "name": "idGenerator",
      "type": "JsMessage"
     }
    ],
    "name": "JsMessageExtractor"
   }
  ]
 },
 {
  "filename": "GoogleCodingConvention.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "isConstant",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "isConstantKey",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "String"
       }
      ],
      "name": "isValidEnumKey",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parameter",
        "type": "Node"
       }
      ],
      "name": "isOptionalParameter",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parameter",
        "type": "Node"
       }
      ],
      "name": "isVarArgsParameter",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "local",
        "type": "boolean"
       }
      ],
      "name": "isExported",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "isPrivate",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "OPTIONAL_ARG_PREFIX",
      "type": "String"
     },
     {
      "name": "VAR_ARGS_NAME",
      "type": "String"
     },
     {
      "name": "ENUM_KEY_PATTERN",
      "type": "Pattern"
     }
    ],
    "name": "GoogleCodingConvention"
   }
  ]
 },
 {
  "filename": "PropertyRenamingPolicy.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [],
    "fields": [],
    "name": "PropertyRenamingPolicy"
   }
  ]
 },
 {
  "filename": "CheckGlobalNames.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "namespace",
        "type": "GlobalNamespace"
       }
      ],
      "name": "injectNamespace",
      "type": "CheckGlobalNames"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "Name"
       },
       {
        "name": "nameIsDefined",
        "type": "boolean"
       }
      ],
      "name": "checkDescendantNames",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "Name"
       },
       {
        "name": "isDefined",
        "type": "boolean"
       }
      ],
      "name": "validateName",
      "type": null
     },
     {
      "params": [
       {
        "name": "ref",
        "type": "Ref"
       }
      ],
      "name": "isTypedef",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "Name"
       },
       {
        "name": "ref",
        "type": "Ref"
       }
      ],
      "name": "reportBadModuleReference",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "Name"
       },
       {
        "name": "ref",
        "type": "Ref"
       }
      ],
      "name": "reportRefToUndefinedName",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "Name"
       }
      ],
      "name": "propertyMustBeInitializedByFullName",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "level",
      "type": "CheckLevel"
     },
     {
      "name": "namespace",
      "type": "GlobalNamespace"
     },
     {
      "name": "UNDEFINED_NAME_WARNING",
      "type": "DiagnosticType"
     },
     {
      "name": "NAME_DEFINED_LATE_WARNING",
      "type": "DiagnosticType"
     },
     {
      "name": "STRICT_MODULE_DEP_QNAME",
      "type": "DiagnosticType"
     }
    ],
    "name": "CheckGlobalNames"
   }
  ]
 },
 {
  "filename": "DiagnosticGroupWarningsGuard.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "level",
      "type": "CheckLevel"
     },
     {
      "params": [
       {
        "name": "otherGroup",
        "type": "DiagnosticGroup"
       }
      ],
      "name": "disables",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "otherGroup",
        "type": "DiagnosticGroup"
       }
      ],
      "name": "enables",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "group",
      "type": "DiagnosticGroup"
     },
     {
      "name": "level",
      "type": "CheckLevel"
     }
    ],
    "name": "DiagnosticGroupWarningsGuard"
   }
  ]
 },
 {
  "filename": "MemoizedScopeCreator.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "var",
        "type": "Var"
       }
      ],
      "name": "getReferences",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "var",
        "type": "Var"
       }
      ],
      "name": "getScope",
      "type": "Scope"
     },
     {
      "params": [],
      "name": "getAllSymbols",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Scope"
       }
      ],
      "name": "createScope",
      "type": "Scope"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getScopeIfMemoized",
      "type": "Scope"
     }
    ],
    "fields": [
     {
      "name": "scopes",
      "type": "Map"
     },
     {
      "name": "delegate",
      "type": "ScopeCreator"
     }
    ],
    "name": "MemoizedScopeCreator"
   }
  ]
 },
 {
  "filename": "SimpleDefinitionFinder.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getDefinitionSites",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "getDefinitionAt",
      "type": "DefinitionSite"
     },
     {
      "params": [
       {
        "name": "function",
        "type": "Node"
       }
      ],
      "name": "getDefinitionForFunction",
      "type": "DefinitionSite"
     },
     {
      "params": [
       {
        "name": "useSite",
        "type": "Node"
       }
      ],
      "name": "getDefinitionsReferencedAt",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "source",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "definition",
        "type": "Definition"
       }
      ],
      "name": "getUseSites",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "getSimplifiedName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "use",
        "type": "UseSite"
       }
      ],
      "name": "isCallOrNewSite",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "definition",
        "type": "Definition"
       }
      ],
      "name": "canModifyDefinition",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "definition",
        "type": "Definition"
       }
      ],
      "name": "isExported",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "fn",
        "type": "Node"
       }
      ],
      "name": "isSimpleFunctionDeclaration",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "function",
        "type": "Node"
       }
      ],
      "name": "getNameNodeFromFunctionNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "removeReferences",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "definitionSiteMap",
      "type": "Map"
     },
     {
      "name": "nameDefinitionMultimap",
      "type": "Multimap"
     },
     {
      "name": "nameUseSiteMultimap",
      "type": "Multimap"
     }
    ],
    "name": "SimpleDefinitionFinder"
   }
  ]
 },
 {
  "filename": "NodeTraversal.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "unexpectedException",
        "type": "Exception"
       }
      ],
      "name": "throwUnexpectedException",
      "type": null
     },
     {
      "params": [
       {
        "name": "label",
        "type": "String"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "formatNodeContext",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "traverse",
      "type": null
     },
     {
      "params": [
       {
        "name": "roots",
        "type": "Node"
       }
      ],
      "name": "traverseRoots",
      "type": null
     },
     {
      "params": [
       {
        "name": "roots",
        "type": "List"
       }
      ],
      "name": "traverseRoots",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "formatNodePosition",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       },
       {
        "name": "s",
        "type": "Scope"
       }
      ],
      "name": "traverseWithScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "s",
        "type": "Scope"
       }
      ],
      "name": "traverseAtScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "refinedScope",
        "type": "Scope"
       }
      ],
      "name": "traverseInnerNode",
      "type": null
     },
     {
      "params": [],
      "name": "getCompiler",
      "type": "Compiler"
     },
     {
      "params": [],
      "name": "getLineNumber",
      "type": "int"
     },
     {
      "params": [],
      "name": "getSourceName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getInput",
      "type": "CompilerInput"
     },
     {
      "params": [],
      "name": "getModule",
      "type": "JSModule"
     },
     {
      "params": [],
      "name": "getCurrentNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       },
       {
        "name": "root",
        "type": "Node"
       },
       {
        "name": "cb",
        "type": "Callback"
       }
      ],
      "name": "traverse",
      "type": null
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       },
       {
        "name": "roots",
        "type": "List"
       },
       {
        "name": "cb",
        "type": "Callback"
       }
      ],
      "name": "traverseRoots",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "traverseBranch",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "traverseFunction",
      "type": null
     },
     {
      "params": [],
      "name": "getEnclosingFunction",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "pushScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "s",
        "type": "Scope"
       }
      ],
      "name": "pushScope",
      "type": null
     },
     {
      "params": [],
      "name": "popScope",
      "type": null
     },
     {
      "params": [],
      "name": "getScope",
      "type": "Scope"
     },
     {
      "params": [],
      "name": "getControlFlowGraph",
      "type": "ControlFlowGraph"
     },
     {
      "params": [],
      "name": "getScopeRoot",
      "type": "Node"
     },
     {
      "params": [],
      "name": "inGlobalScope",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getScopeDepth",
      "type": "int"
     },
     {
      "params": [],
      "name": "hasScope",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "diagnosticType",
        "type": "DiagnosticType"
       },
       {
        "name": "arguments",
        "type": "String"
       }
      ],
      "name": "report",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getSourceName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getInputId",
      "type": "InputId"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "level",
        "type": "CheckLevel"
       },
       {
        "name": "type",
        "type": "DiagnosticType"
       },
       {
        "name": "arguments",
        "type": "String"
       }
      ],
      "name": "makeError",
      "type": "JSError"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "DiagnosticType"
       },
       {
        "name": "arguments",
        "type": "String"
       }
      ],
      "name": "makeError",
      "type": "JSError"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "callback",
      "type": "Callback"
     },
     {
      "name": "curNode",
      "type": "Node"
     },
     {
      "name": "NODE_TRAVERSAL_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "scopes",
      "type": "Deque"
     },
     {
      "name": "scopeRoots",
      "type": "Deque"
     },
     {
      "name": "cfgs",
      "type": "Deque"
     },
     {
      "name": "sourceName",
      "type": "String"
     },
     {
      "name": "inputId",
      "type": "InputId"
     },
     {
      "name": "scopeCreator",
      "type": "ScopeCreator"
     },
     {
      "name": "scopeCallback",
      "type": "ScopedCallback"
     },
     {
      "name": "MISSING_SOURCE",
      "type": "String"
     }
    ],
    "name": "NodeTraversal"
   }
  ]
 },
 {
  "filename": "ReplaceMessages.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "message",
        "type": "JsMessage"
       },
       {
        "name": "definition",
        "type": "JsMessageDefinition"
       }
      ],
      "name": "processJsMessage",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "JsMessage"
       },
       {
        "name": "origValueNode",
        "type": "Node"
       }
      ],
      "name": "getNewValueNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "message",
        "type": "JsMessage"
       },
       {
        "name": "functionNode",
        "type": "Node"
       }
      ],
      "name": "updateFunctionNode",
      "type": null
     },
     {
      "params": [
       {
        "name": "partsIterator",
        "type": "Iterator"
       },
       {
        "name": "argListNode",
        "type": "Node"
       }
      ],
      "name": "constructAddOrStringNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "message",
        "type": "JsMessage"
       },
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "replaceCallNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "parts",
        "type": "Iterator"
       },
       {
        "name": "objLitNode",
        "type": "Node"
       }
      ],
      "name": "constructStringExprNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "int"
       }
      ],
      "name": "checkNode",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "checkStringExprNode",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "bundle",
      "type": "MessageBundle"
     },
     {
      "name": "strictReplacement",
      "type": "boolean"
     },
     {
      "name": "BUNDLE_DOES_NOT_HAVE_THE_MESSAGE",
      "type": "DiagnosticType"
     }
    ],
    "name": "ReplaceMessages"
   }
  ]
 },
 {
  "filename": "MustBeReachingVariableDef.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "isForward",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "createEntryLattice",
      "type": "MustDef"
     },
     {
      "params": [],
      "name": "createInitialEstimateLattice",
      "type": "MustDef"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "input",
        "type": "MustDef"
       }
      ],
      "name": "flowThrough",
      "type": "MustDef"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "cfgNode",
        "type": "Node"
       },
       {
        "name": "output",
        "type": "MustDef"
       },
       {
        "name": "conditional",
        "type": "boolean"
       }
      ],
      "name": "computeMustDef",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "rValue",
        "type": "Node"
       },
       {
        "name": "def",
        "type": "MustDef"
       }
      ],
      "name": "addToDefIfLocal",
      "type": null
     },
     {
      "params": [
       {
        "name": "output",
        "type": "MustDef"
       }
      ],
      "name": "escapeParameters",
      "type": null
     },
     {
      "params": [
       {
        "name": "v",
        "type": "Var"
       }
      ],
      "name": "isParameter",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "def",
        "type": "Definition"
       },
       {
        "name": "rValue",
        "type": "Node"
       }
      ],
      "name": "computeDependence",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "useNode",
        "type": "Node"
       }
      ],
      "name": "getDef",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "useNode",
        "type": "Node"
       }
      ],
      "name": "dependsOnOuterScopeVars",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "jsScope",
      "type": "Scope"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "escaped",
      "type": "Set"
     }
    ],
    "name": "MustBeReachingVariableDef"
   }
  ]
 },
 {
  "filename": "AliasExternals.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "usage",
        "type": "int"
       }
      ],
      "name": "setRequiredUsage",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "aliasProperties",
      "type": null
     },
     {
      "params": [
       {
        "name": "getPropNode",
        "type": "Node"
       }
      ],
      "name": "replaceAccessor",
      "type": null
     },
     {
      "params": [
       {
        "name": "getPropNode",
        "type": "Node"
       }
      ],
      "name": "replaceMutator",
      "type": null
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "before",
        "type": "Node"
       },
       {
        "name": "after",
        "type": "Node"
       }
      ],
      "name": "replaceNode",
      "type": null
     },
     {
      "params": [
       {
        "name": "propName",
        "type": "String"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "addAccessorPropName",
      "type": null
     },
     {
      "params": [
       {
        "name": "propName",
        "type": "String"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "addMutatorFunction",
      "type": null
     },
     {
      "params": [
       {
        "name": "m",
        "type": "JSModule"
       }
      ],
      "name": "getAddingRoot",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "prop",
        "type": "String"
       }
      ],
      "name": "getMutatorFor",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "prop",
        "type": "String"
       }
      ],
      "name": "getArrayNotationNameFor",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "aliasGlobals",
      "type": null
     },
     {
      "params": [
       {
        "name": "globalUse",
        "type": "Node"
       }
      ],
      "name": "replaceGlobalUse",
      "type": null
     },
     {
      "params": [
       {
        "name": "global",
        "type": "Symbol"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "addGlobalAliasNode",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "Node"
       }
      ],
      "name": "newSymbolForGlobalVar",
      "type": "Symbol"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "newSymbolForProperty",
      "type": "Symbol"
     }
    ],
    "fields": [
     {
      "name": "DEFAULT_REQUIRED_USAGE",
      "type": "int"
     },
     {
      "name": "requiredUsage",
      "type": "int"
     },
     {
      "name": "MIN_PROP_SIZE",
      "type": "int"
     },
     {
      "name": "PROTOTYPE_PROPERTY_NAME",
      "type": "String"
     },
     {
      "name": "props",
      "type": "Map"
     },
     {
      "name": "accessors",
      "type": "List"
     },
     {
      "name": "mutators",
      "type": "List"
     },
     {
      "name": "replacementMap",
      "type": "Map"
     },
     {
      "name": "globals",
      "type": "Map"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "moduleGraph",
      "type": "JSModuleGraph"
     },
     {
      "name": "defaultRoot",
      "type": "Node"
     },
     {
      "name": "moduleRoots",
      "type": "Map"
     },
     {
      "name": "unaliasableGlobals",
      "type": "Set"
     },
     {
      "name": "aliasableGlobals",
      "type": "Set"
     }
    ],
    "name": "AliasExternals"
   }
  ]
 },
 {
  "filename": "LatticeElement.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [],
    "fields": [],
    "name": "LatticeElement"
   }
  ]
 },
 {
  "filename": "TypeCheck.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "report",
        "type": "boolean"
       }
      ],
      "name": "reportMissingProperties",
      "type": "TypeCheck"
     },
     {
      "params": [
       {
        "name": "externsRoot",
        "type": "Node"
       },
       {
        "name": "jsRoot",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "externsRoot",
        "type": "Node"
       },
       {
        "name": "jsRoot",
        "type": "Node"
       }
      ],
      "name": "processForTesting",
      "type": "Scope"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "externs",
        "type": "boolean"
       }
      ],
      "name": "check",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "enterSection",
        "type": "boolean"
       }
      ],
      "name": "checkNoTypeCheckSection",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "diagnosticType",
        "type": "DiagnosticType"
       },
       {
        "name": "arguments",
        "type": "String"
       }
      ],
      "name": "report",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "shouldTraverse",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "doPercentTypedAccounting",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "assign",
        "type": "Node"
       }
      ],
      "name": "visitAssign",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "key",
        "type": "Node"
       },
       {
        "name": "objlit",
        "type": "Node"
       }
      ],
      "name": "visitObjLitKey",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "ObjectType"
       },
       {
        "name": "prop",
        "type": "String"
       }
      ],
      "name": "propertyIsImplicitCast",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "ctorType",
        "type": "FunctionType"
       },
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "info",
        "type": "JSDocInfo"
       },
       {
        "name": "propertyType",
        "type": "JSType"
       }
      ],
      "name": "checkDeclaredPropertyInheritance",
      "type": null
     },
     {
      "params": [
       {
        "name": "ctor",
        "type": "FunctionType"
       }
      ],
      "name": "hasUnknownOrEmptySupertype",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "assign",
        "type": "Node"
       },
       {
        "name": "object",
        "type": "Node"
       },
       {
        "name": "property",
        "type": "String"
       },
       {
        "name": "lvalue",
        "type": "Node"
       },
       {
        "name": "rvalue",
        "type": "Node"
       }
      ],
      "name": "visitInterfaceGetprop",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "assign",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "object",
        "type": "Node"
       },
       {
        "name": "property",
        "type": "String"
       },
       {
        "name": "rvalue",
        "type": "Node"
       }
      ],
      "name": "visitAnnotatedAssignGetprop",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visitName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visitGetProp",
      "type": null
     },
     {
      "params": [
       {
        "name": "childType",
        "type": "JSType"
       },
       {
        "name": "propName",
        "type": "String"
       },
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "checkPropertyAccess",
      "type": null
     },
     {
      "params": [
       {
        "name": "getProp",
        "type": "Node"
       }
      ],
      "name": "isPropertyTest",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "visitGetElem",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "visitVar",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "visitNew",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "functionName",
        "type": "String"
       },
       {
        "name": "properties",
        "type": "HashMap"
       },
       {
        "name": "currentProperties",
        "type": "HashMap"
       },
       {
        "name": "interfaceType",
        "type": "ObjectType"
       }
      ],
      "name": "checkInterfaceConflictProperties",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "visitFunction",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "visitCall",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "call",
        "type": "Node"
       },
       {
        "name": "functionType",
        "type": "FunctionType"
       }
      ],
      "name": "visitParameterList",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "visitReturn",
      "type": null
     },
     {
      "params": [
       {
        "name": "op",
        "type": "int"
       },
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "visitBinaryOperator",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "value",
        "type": "Node"
       },
       {
        "name": "primitiveType",
        "type": "JSType"
       }
      ],
      "name": "checkEnumInitializer",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getJSType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "ensureTyped",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "JSTypeNative"
       }
      ],
      "name": "ensureTyped",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "ensureTyped",
      "type": null
     },
     {
      "params": [],
      "name": "getTypedPercent",
      "type": "double"
     },
     {
      "params": [
       {
        "name": "typeId",
        "type": "JSTypeNative"
       }
      ],
      "name": "getNativeType",
      "type": "JSType"
     }
    ],
    "fields": [
     {
      "name": "UNEXPECTED_TOKEN",
      "type": "DiagnosticType"
     },
     {
      "name": "BAD_DELETE",
      "type": "DiagnosticType"
     },
     {
      "name": "OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",
      "type": "String"
     },
     {
      "name": "DETERMINISTIC_TEST",
      "type": "DiagnosticType"
     },
     {
      "name": "DETERMINISTIC_TEST_NO_RESULT",
      "type": "DiagnosticType"
     },
     {
      "name": "INEXISTENT_ENUM_ELEMENT",
      "type": "DiagnosticType"
     },
     {
      "name": "INEXISTENT_PROPERTY",
      "type": "DiagnosticType"
     },
     {
      "name": "NOT_A_CONSTRUCTOR",
      "type": "DiagnosticType"
     },
     {
      "name": "BIT_OPERATION",
      "type": "DiagnosticType"
     },
     {
      "name": "NOT_CALLABLE",
      "type": "DiagnosticType"
     },
     {
      "name": "CONSTRUCTOR_NOT_CALLABLE",
      "type": "DiagnosticType"
     },
     {
      "name": "FUNCTION_MASKS_VARIABLE",
      "type": "DiagnosticType"
     },
     {
      "name": "MULTIPLE_VAR_DEF",
      "type": "DiagnosticType"
     },
     {
      "name": "ENUM_DUP",
      "type": "DiagnosticType"
     },
     {
      "name": "ENUM_NOT_CONSTANT",
      "type": "DiagnosticType"
     },
     {
      "name": "INVALID_INTERFACE_MEMBER_DECLARATION",
      "type": "DiagnosticType"
     },
     {
      "name": "INTERFACE_FUNCTION_NOT_EMPTY",
      "type": "DiagnosticType"
     },
     {
      "name": "CONFLICTING_EXTENDED_TYPE",
      "type": "DiagnosticType"
     },
     {
      "name": "CONFLICTING_IMPLEMENTED_TYPE",
      "type": "DiagnosticType"
     },
     {
      "name": "BAD_IMPLEMENTED_TYPE",
      "type": "DiagnosticType"
     },
     {
      "name": "HIDDEN_SUPERCLASS_PROPERTY",
      "type": "DiagnosticType"
     },
     {
      "name": "HIDDEN_INTERFACE_PROPERTY",
      "type": "DiagnosticType"
     },
     {
      "name": "HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",
      "type": "DiagnosticType"
     },
     {
      "name": "UNKNOWN_OVERRIDE",
      "type": "DiagnosticType"
     },
     {
      "name": "INTERFACE_METHOD_OVERRIDE",
      "type": "DiagnosticType"
     },
     {
      "name": "UNKNOWN_EXPR_TYPE",
      "type": "DiagnosticType"
     },
     {
      "name": "UNRESOLVED_TYPE",
      "type": "DiagnosticType"
     },
     {
      "name": "WRONG_ARGUMENT_COUNT",
      "type": "DiagnosticType"
     },
     {
      "name": "ILLEGAL_IMPLICIT_CAST",
      "type": "DiagnosticType"
     },
     {
      "name": "INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",
      "type": "DiagnosticType"
     },
     {
      "name": "EXPECTED_THIS_TYPE",
      "type": "DiagnosticType"
     },
     {
      "name": "ALL_DIAGNOSTICS",
      "type": "DiagnosticGroup"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "validator",
      "type": "TypeValidator"
     },
     {
      "name": "reverseInterpreter",
      "type": "ReverseAbstractInterpreter"
     },
     {
      "name": "typeRegistry",
      "type": "JSTypeRegistry"
     },
     {
      "name": "topScope",
      "type": "Scope"
     },
     {
      "name": "scopeCreator",
      "type": "ScopeCreator"
     },
     {
      "name": "reportMissingOverride",
      "type": "CheckLevel"
     },
     {
      "name": "reportUnknownTypes",
      "type": "CheckLevel"
     },
     {
      "name": "reportMissingProperties",
      "type": "boolean"
     },
     {
      "name": "inferJSDocInfo",
      "type": "InferJSDocInfo"
     },
     {
      "name": "typedCount",
      "type": "int"
     },
     {
      "name": "nullCount",
      "type": "int"
     },
     {
      "name": "unknownCount",
      "type": "int"
     },
     {
      "name": "inExterns",
      "type": "boolean"
     },
     {
      "name": "noTypeCheckSection",
      "type": "int"
     }
    ],
    "name": "TypeCheck"
   }
  ]
 },
 {
  "filename": "InlineSimpleMethods.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getActingCallback",
      "type": "Callback"
     },
     {
      "params": [
       {
        "name": "expectedGetprop",
        "type": "Node"
       }
      ],
      "name": "isPropertyTree",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "expectedGetprop",
        "type": "Node"
       },
       {
        "name": "replacement",
        "type": "Node"
       }
      ],
      "name": "replaceThis",
      "type": null
     },
     {
      "params": [
       {
        "name": "fn",
        "type": "Node"
       }
      ],
      "name": "returnedExpression",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "fn",
        "type": "Node"
       }
      ],
      "name": "isEmptyMethod",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "fn",
        "type": "Node"
       }
      ],
      "name": "getMethodBlock",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "definitions",
        "type": "Collection"
       }
      ],
      "name": "allDefinitionsEquivalent",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "call",
        "type": "Node"
       },
       {
        "name": "returnedValue",
        "type": "Node"
       }
      ],
      "name": "inlinePropertyReturn",
      "type": null
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "call",
        "type": "Node"
       },
       {
        "name": "returnedValue",
        "type": "Node"
       }
      ],
      "name": "inlineConstReturn",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "call",
        "type": "Node"
       }
      ],
      "name": "inlineEmptyMethod",
      "type": null
     },
     {
      "params": [
       {
        "name": "call",
        "type": "Node"
       }
      ],
      "name": "argsMayHaveSideEffects",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getSignatureStore",
      "type": "SignatureStore"
     }
    ],
    "fields": [
     {
      "name": "logger",
      "type": "Logger"
     },
     {
      "name": "DUMMY_SIGNATURE_STORE",
      "type": "MethodCompilerPass"
     }
    ],
    "name": "InlineSimpleMethods"
   }
  ]
 },
 {
  "filename": "DefaultPassConfig.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getIntermediateState",
      "type": "State"
     },
     {
      "params": [
       {
        "name": "state",
        "type": "State"
       }
      ],
      "name": "setIntermediateState",
      "type": null
     },
     {
      "params": [],
      "name": "getGlobalNamespace",
      "type": "GlobalNamespace"
     },
     {
      "params": [],
      "name": "getPreprocessorSymbolTable",
      "type": "PreprocessorSymbolTable"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "maybeInitializePreprocessorSymbolTable",
      "type": null
     },
     {
      "params": [],
      "name": "getChecks",
      "type": "List"
     },
     {
      "params": [],
      "name": "getOptimizations",
      "type": "List"
     },
     {
      "params": [],
      "name": "getMainOptimizationLoop",
      "type": "List"
     },
     {
      "params": [],
      "name": "getCodeRemovingPasses",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "passes",
        "type": "List"
       }
      ],
      "name": "assertAllOneTimePasses",
      "type": null
     },
     {
      "params": [
       {
        "name": "passes",
        "type": "List"
       }
      ],
      "name": "assertAllLoopablePasses",
      "type": null
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       },
       {
        "name": "callbacks",
        "type": "List"
       }
      ],
      "name": "combineChecks",
      "type": "HotSwapCompilerPass"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       },
       {
        "name": "prevPropertyMap",
        "type": "VariableMap"
       },
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "runPropertyRenaming",
      "type": "VariableMap"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       },
       {
        "name": "prevVariableMap",
        "type": "VariableMap"
       },
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "runVariableRenaming",
      "type": "VariableMap"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "createEmptyPass",
      "type": "PassFactory"
     },
     {
      "params": [
       {
        "name": "executionTime",
        "type": "CustomPassExecutionTime"
       }
      ],
      "name": "getCustomPasses",
      "type": "PassFactory"
     },
     {
      "params": [],
      "name": "isInliningForbidden",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "passes",
        "type": "CompilerPass"
       }
      ],
      "name": "runInSerial",
      "type": "CompilerPass"
     },
     {
      "params": [
       {
        "name": "passes",
        "type": "Collection"
       }
      ],
      "name": "runInSerial",
      "type": "CompilerPass"
     },
     {
      "params": [
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "getAdditionalReplacements",
      "type": "Map"
     }
    ],
    "fields": [
     {
      "name": "COMPILED_CONSTANT_NAME",
      "type": "String"
     },
     {
      "name": "CLOSURE_LOCALE_CONSTANT_NAME",
      "type": "String"
     },
     {
      "name": "TIGHTEN_TYPES_WITHOUT_TYPE_CHECK",
      "type": "DiagnosticType"
     },
     {
      "name": "CANNOT_USE_PROTOTYPE_AND_VAR",
      "type": "DiagnosticType"
     },
     {
      "name": "REPORT_PATH_IO_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "INPUT_MAP_PROP_PARSE",
      "type": "DiagnosticType"
     },
     {
      "name": "INPUT_MAP_VAR_PARSE",
      "type": "DiagnosticType"
     },
     {
      "name": "NAME_REF_GRAPH_FILE_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "NAME_REF_REPORT_FILE_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "namespaceForChecks",
      "type": "GlobalNamespace"
     },
     {
      "name": "preprocessorSymbolTable",
      "type": "PreprocessorSymbolTable"
     },
     {
      "name": "tightenTypes",
      "type": "TightenTypes"
     },
     {
      "name": "exportedNames",
      "type": "Set"
     },
     {
      "name": "crossModuleIdGenerator",
      "type": "CrossModuleMethodMotion"
     },
     {
      "name": "cssNames",
      "type": "Map"
     },
     {
      "name": "variableMap",
      "type": "VariableMap"
     },
     {
      "name": "propertyMap",
      "type": "VariableMap"
     },
     {
      "name": "anonymousFunctionNameMap",
      "type": "VariableMap"
     },
     {
      "name": "functionNames",
      "type": "FunctionNames"
     },
     {
      "name": "stringMap",
      "type": "VariableMap"
     },
     {
      "name": "idGeneratorMap",
      "type": "String"
     },
     {
      "name": "suspiciousCode",
      "type": "HotSwapPassFactory"
     },
     {
      "name": "checkControlStructures",
      "type": "HotSwapPassFactory"
     },
     {
      "name": "checkRequires",
      "type": "HotSwapPassFactory"
     },
     {
      "name": "checkProvides",
      "type": "HotSwapPassFactory"
     },
     {
      "name": "GENERATE_EXPORTS_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "generateExports",
      "type": "PassFactory"
     },
     {
      "name": "exportTestFunctions",
      "type": "PassFactory"
     },
     {
      "name": "gatherRawExports",
      "type": "PassFactory"
     },
     {
      "name": "closurePrimitives",
      "type": "HotSwapPassFactory"
     },
     {
      "name": "replaceMessages",
      "type": "PassFactory"
     },
     {
      "name": "closureGoogScopeAliases",
      "type": "HotSwapPassFactory"
     },
     {
      "name": "closureCheckGetCssName",
      "type": "PassFactory"
     },
     {
      "name": "closureReplaceGetCssName",
      "type": "PassFactory"
     },
     {
      "name": "createSyntheticBlocks",
      "type": "PassFactory"
     },
     {
      "name": "peepholeOptimizations",
      "type": "PassFactory"
     },
     {
      "name": "latePeepholeOptimizations",
      "type": "PassFactory"
     },
     {
      "name": "checkVars",
      "type": "HotSwapPassFactory"
     },
     {
      "name": "checkRegExp",
      "type": "PassFactory"
     },
     {
      "name": "checkShadowVars",
      "type": "PassFactory"
     },
     {
      "name": "checkVariableReferences",
      "type": "HotSwapPassFactory"
     },
     {
      "name": "objectPropertyStringPreprocess",
      "type": "PassFactory"
     },
     {
      "name": "resolveTypes",
      "type": "HotSwapPassFactory"
     },
     {
      "name": "inferTypes",
      "type": "HotSwapPassFactory"
     },
     {
      "name": "inferJsDocInfo",
      "type": "HotSwapPassFactory"
     },
     {
      "name": "checkTypes",
      "type": "HotSwapPassFactory"
     },
     {
      "name": "checkControlFlow",
      "type": "HotSwapPassFactory"
     },
     {
      "name": "checkAccessControls",
      "type": "HotSwapPassFactory"
     },
     {
      "name": "checkGlobalNames",
      "type": "PassFactory"
     },
     {
      "name": "checkStrictMode",
      "type": "PassFactory"
     },
     {
      "name": "processTweaks",
      "type": "PassFactory"
     },
     {
      "name": "processDefines",
      "type": "PassFactory"
     },
     {
      "name": "garbageCollectChecks",
      "type": "PassFactory"
     },
     {
      "name": "checkConsts",
      "type": "PassFactory"
     },
     {
      "name": "computeFunctionNames",
      "type": "PassFactory"
     },
     {
      "name": "ignoreCajaProperties",
      "type": "PassFactory"
     },
     {
      "name": "runtimeTypeCheck",
      "type": "PassFactory"
     },
     {
      "name": "replaceIdGenerators",
      "type": "PassFactory"
     },
     {
      "name": "replaceStrings",
      "type": "PassFactory"
     },
     {
      "name": "optimizeArgumentsArray",
      "type": "PassFactory"
     },
     {
      "name": "closureCodeRemoval",
      "type": "PassFactory"
     },
     {
      "name": "closureOptimizePrimitives",
      "type": "PassFactory"
     },
     {
      "name": "collapseProperties",
      "type": "PassFactory"
     },
     {
      "name": "collapseObjectLiterals",
      "type": "PassFactory"
     },
     {
      "name": "tightenTypesBuilder",
      "type": "PassFactory"
     },
     {
      "name": "disambiguateProperties",
      "type": "PassFactory"
     },
     {
      "name": "chainCalls",
      "type": "PassFactory"
     },
     {
      "name": "devirtualizePrototypeMethods",
      "type": "PassFactory"
     },
     {
      "name": "optimizeCallsAndRemoveUnusedVars",
      "type": "PassFactory"
     },
     {
      "name": "markPureFunctions",
      "type": "PassFactory"
     },
     {
      "name": "markNoSideEffectCalls",
      "type": "PassFactory"
     },
     {
      "name": "inlineVariables",
      "type": "PassFactory"
     },
     {
      "name": "inlineConstants",
      "type": "PassFactory"
     },
     {
      "name": "minimizeExitPoints",
      "type": "PassFactory"
     },
     {
      "name": "removeUnreachableCode",
      "type": "PassFactory"
     },
     {
      "name": "removeUnusedPrototypeProperties",
      "type": "PassFactory"
     },
     {
      "name": "smartNamePass",
      "type": "PassFactory"
     },
     {
      "name": "smartNamePass2",
      "type": "PassFactory"
     },
     {
      "name": "inlineSimpleMethods",
      "type": "PassFactory"
     },
     {
      "name": "deadAssignmentsElimination",
      "type": "PassFactory"
     },
     {
      "name": "inlineFunctions",
      "type": "PassFactory"
     },
     {
      "name": "removeUnusedVars",
      "type": "PassFactory"
     },
     {
      "name": "crossModuleCodeMotion",
      "type": "PassFactory"
     },
     {
      "name": "crossModuleMethodMotion",
      "type": "PassFactory"
     },
     {
      "name": "specializeInitialModule",
      "type": "PassFactory"
     },
     {
      "name": "flowSensitiveInlineVariables",
      "type": "PassFactory"
     },
     {
      "name": "coalesceVariableNames",
      "type": "PassFactory"
     },
     {
      "name": "exploitAssign",
      "type": "PassFactory"
     },
     {
      "name": "collapseVariableDeclarations",
      "type": "PassFactory"
     },
     {
      "name": "groupVariableDeclarations",
      "type": "PassFactory"
     },
     {
      "name": "extractPrototypeMemberDeclarations",
      "type": "PassFactory"
     },
     {
      "name": "rewriteFunctionExpressions",
      "type": "PassFactory"
     },
     {
      "name": "collapseAnonymousFunctions",
      "type": "PassFactory"
     },
     {
      "name": "moveFunctionDeclarations",
      "type": "PassFactory"
     },
     {
      "name": "nameUnmappedAnonymousFunctions",
      "type": "PassFactory"
     },
     {
      "name": "nameMappedAnonymousFunctions",
      "type": "PassFactory"
     },
     {
      "name": "operaCompoundAssignFix",
      "type": "PassFactory"
     },
     {
      "name": "aliasExternals",
      "type": "PassFactory"
     },
     {
      "name": "aliasStrings",
      "type": "PassFactory"
     },
     {
      "name": "aliasKeywords",
      "type": "PassFactory"
     },
     {
      "name": "objectPropertyStringPostprocess",
      "type": "PassFactory"
     },
     {
      "name": "ambiguateProperties",
      "type": "PassFactory"
     },
     {
      "name": "markUnnormalized",
      "type": "PassFactory"
     },
     {
      "name": "denormalize",
      "type": "PassFactory"
     },
     {
      "name": "invertContextualRenaming",
      "type": "PassFactory"
     },
     {
      "name": "renameProperties",
      "type": "PassFactory"
     },
     {
      "name": "renameVars",
      "type": "PassFactory"
     },
     {
      "name": "renameLabels",
      "type": "PassFactory"
     },
     {
      "name": "convertToDottedProperties",
      "type": "PassFactory"
     },
     {
      "name": "sanityCheckAst",
      "type": "PassFactory"
     },
     {
      "name": "sanityCheckVars",
      "type": "PassFactory"
     },
     {
      "name": "instrumentFunctions",
      "type": "PassFactory"
     },
     {
      "name": "printNameReferenceGraph",
      "type": "PassFactory"
     },
     {
      "name": "printNameReferenceReport",
      "type": "PassFactory"
     }
    ],
    "name": "DefaultPassConfig"
   }
  ]
 },
 {
  "filename": "SimpleRegion.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getBeginningLineNumber",
      "type": "int"
     },
     {
      "params": [],
      "name": "getEndingLineNumber",
      "type": "int"
     },
     {
      "params": [],
      "name": "getSourceExcerpt",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "beginningLineNumber",
      "type": "int"
     },
     {
      "name": "endingLineNumber",
      "type": "int"
     },
     {
      "name": "source",
      "type": "String"
     }
    ],
    "name": "SimpleRegion"
   }
  ]
 },
 {
  "filename": "AnonymousFunctionNamingCallback.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "objectLiteral",
        "type": "Node"
       },
       {
        "name": "context",
        "type": "String"
       }
      ],
      "name": "nameObjectLiteralMethods",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "namer",
      "type": "FunctionNamer"
     }
    ],
    "name": "AnonymousFunctionNamingCallback"
   }
  ]
 },
 {
  "filename": "PreprocessorSymbolTable.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getRootNode",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getTypeOfThis",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "getParentScope",
      "type": "StaticScope"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getSlot",
      "type": "SimpleSlot"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getOwnSlot",
      "type": "SimpleSlot"
     },
     {
      "params": [
       {
        "name": "symbol",
        "type": "SimpleSlot"
       }
      ],
      "name": "getReferences",
      "type": "Iterable"
     },
     {
      "params": [],
      "name": "getAllSymbols",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "slot",
        "type": "SimpleSlot"
       }
      ],
      "name": "getScope",
      "type": "StaticScope"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "addReference",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "symbols",
      "type": "Map"
     },
     {
      "name": "refs",
      "type": "Multimap"
     },
     {
      "name": "root",
      "type": "Node"
     }
    ],
    "name": "PreprocessorSymbolTable"
   }
  ]
 },
 {
  "filename": "InstrumentFunctions.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "functionNames",
      "type": "FunctionNames"
     },
     {
      "name": "templateFilename",
      "type": "String"
     },
     {
      "name": "appNameStr",
      "type": "String"
     },
     {
      "name": "initCodeSource",
      "type": "String"
     },
     {
      "name": "definedFunctionName",
      "type": "String"
     },
     {
      "name": "reportFunctionName",
      "type": "String"
     },
     {
      "name": "reportFunctionExitName",
      "type": "String"
     },
     {
      "name": "appNameSetter",
      "type": "String"
     },
     {
      "name": "declarationsToRemove",
      "type": "List"
     }
    ],
    "name": "InstrumentFunctions"
   }
  ]
 },
 {
  "filename": "CodeGenerator.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "tagAsStrict",
      "type": null
     },
     {
      "params": [
       {
        "name": "str",
        "type": "String"
       }
      ],
      "name": "add",
      "type": null
     },
     {
      "params": [
       {
        "name": "identifier",
        "type": "String"
       }
      ],
      "name": "addIdentifier",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "add",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "context",
        "type": "Context"
       }
      ],
      "name": "add",
      "type": null
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "isSimpleNumber",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "getSimpleNumber",
      "type": "double"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isIndirectEval",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "context",
        "type": "Context"
       },
       {
        "name": "allowNonBlockChild",
        "type": "boolean"
       }
      ],
      "name": "addNonEmptyStatement",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isOneExactlyFunctionOrDo",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "minPrecedence",
        "type": "int"
       },
       {
        "name": "context",
        "type": "Context"
       }
      ],
      "name": "addLeftExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "minPrecedence",
        "type": "int"
       }
      ],
      "name": "addExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "minPrecedence",
        "type": "int"
       },
       {
        "name": "context",
        "type": "Context"
       }
      ],
      "name": "addExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "firstInList",
        "type": "Node"
       }
      ],
      "name": "addList",
      "type": null
     },
     {
      "params": [
       {
        "name": "firstInList",
        "type": "Node"
       },
       {
        "name": "isArrayOrFunctionArgument",
        "type": "boolean"
       }
      ],
      "name": "addList",
      "type": null
     },
     {
      "params": [
       {
        "name": "firstInList",
        "type": "Node"
       },
       {
        "name": "isArrayOrFunctionArgument",
        "type": "boolean"
       },
       {
        "name": "lhsContext",
        "type": "Context"
       }
      ],
      "name": "addList",
      "type": null
     },
     {
      "params": [
       {
        "name": "firstInList",
        "type": "Node"
       }
      ],
      "name": "addArrayList",
      "type": null
     },
     {
      "params": [
       {
        "name": "caseBody",
        "type": "Node"
       }
      ],
      "name": "addCaseBody",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "addAllSiblings",
      "type": null
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "addJsString",
      "type": null
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "jsString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       },
       {
        "name": "outputCharsetEncoder",
        "type": "CharsetEncoder"
       }
      ],
      "name": "regexpEscape",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "escapeToDoubleQuotedJsString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "regexpEscape",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       },
       {
        "name": "quote",
        "type": "char"
       },
       {
        "name": "doublequoteEscape",
        "type": "String"
       },
       {
        "name": "singlequoteEscape",
        "type": "String"
       },
       {
        "name": "backslashEscape",
        "type": "String"
       },
       {
        "name": "outputCharsetEncoder",
        "type": "CharsetEncoder"
       }
      ],
      "name": "strEscape",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "identifierEscape",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "maxCount",
        "type": "int"
       }
      ],
      "name": "getNonEmptyChildCount",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getFirstNonEmptyChild",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "currentContext",
        "type": "Context"
       }
      ],
      "name": "getContextForNonEmptyExpression",
      "type": "Context"
     },
     {
      "params": [
       {
        "name": "context",
        "type": "Context"
       }
      ],
      "name": "getContextForNoInOperator",
      "type": "Context"
     },
     {
      "params": [
       {
        "name": "context",
        "type": "Context"
       }
      ],
      "name": "clearContextForNoInOperator",
      "type": "Context"
     },
     {
      "params": [
       {
        "name": "sb",
        "type": "StringBuilder"
       },
       {
        "name": "c",
        "type": "char"
       }
      ],
      "name": "appendHexJavaScriptRepresentation",
      "type": null
     },
     {
      "params": [
       {
        "name": "codePoint",
        "type": "int"
       },
       {
        "name": "out",
        "type": "Appendable"
       }
      ],
      "name": "appendHexJavaScriptRepresentation",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "ESCAPED_JS_STRINGS",
      "type": "Map"
     },
     {
      "name": "HEX_CHARS",
      "type": "char"
     },
     {
      "name": "cc",
      "type": "CodeConsumer"
     },
     {
      "name": "outputCharsetEncoder",
      "type": "CharsetEncoder"
     }
    ],
    "name": "CodeGenerator"
   }
  ]
 },
 {
  "filename": "NameReferenceGraphConstruction.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getNameReferenceGraph",
      "type": "NameReferenceGraph"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "connectUnknowns",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "functionNode",
        "type": "Name"
       }
      ],
      "name": "pushContainingFunction",
      "type": null
     },
     {
      "params": [],
      "name": "popContainingFunction",
      "type": null
     },
     {
      "params": [],
      "name": "getNamedContainingFunction",
      "type": "Name"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "graph",
      "type": "NameReferenceGraph"
     },
     {
      "name": "unknownNameUse",
      "type": "Multimap"
     },
     {
      "name": "CONSERVATIVE",
      "type": "boolean"
     },
     {
      "name": "currentFunctionStack",
      "type": "ArrayList"
     }
    ],
    "name": "NameReferenceGraphConstruction"
   }
  ]
 },
 {
  "filename": "AmbiguateProperties.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "addInvalidatingType",
      "type": null
     },
     {
      "params": [],
      "name": "getRenamingMap",
      "type": "Map"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "getIntForType",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "getRelatedTypesOnNonUnion",
      "type": "BitSet"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "computeRelatedTypes",
      "type": null
     },
     {
      "params": [
       {
        "name": "constructor",
        "type": "FunctionType"
       },
       {
        "name": "related",
        "type": "JSTypeBitSet"
       }
      ],
      "name": "addRelatedInstance",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "isInvalidatingType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getProperty",
      "type": "Property"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getJSType",
      "type": "JSType"
     }
    ],
    "fields": [
     {
      "name": "logger",
      "type": "Logger"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "stringNodesToRename",
      "type": "List"
     },
     {
      "name": "reservedCharacters",
      "type": "char"
     },
     {
      "name": "propertyMap",
      "type": "Map"
     },
     {
      "name": "externedNames",
      "type": "Set"
     },
     {
      "name": "quotedNames",
      "type": "Set"
     },
     {
      "name": "renamingMap",
      "type": "Map"
     },
     {
      "name": "FREQUENCY_COMPARATOR",
      "type": "Comparator"
     },
     {
      "name": "intForType",
      "type": "BiMap"
     },
     {
      "name": "relatedBitsets",
      "type": "Map"
     },
     {
      "name": "invalidatingTypes",
      "type": "Set"
     },
     {
      "name": "SKIP_PREFIX",
      "type": "String"
     }
    ],
    "name": "AmbiguateProperties"
   }
  ]
 },
 {
  "filename": "CodeConsumer.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "startSourceMapping",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "endSourceMapping",
      "type": null
     },
     {
      "params": [],
      "name": "continueProcessing",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getLastChar",
      "type": "char"
     },
     {
      "params": [
       {
        "name": "identifier",
        "type": "String"
       }
      ],
      "name": "addIdentifier",
      "type": null
     },
     {
      "params": [
       {
        "name": "str",
        "type": "String"
       }
      ],
      "name": "append",
      "type": null
     },
     {
      "params": [],
      "name": "appendBlockStart",
      "type": null
     },
     {
      "params": [],
      "name": "appendBlockEnd",
      "type": null
     },
     {
      "params": [],
      "name": "startNewLine",
      "type": null
     },
     {
      "params": [],
      "name": "maybeLineBreak",
      "type": null
     },
     {
      "params": [],
      "name": "maybeCutLine",
      "type": null
     },
     {
      "params": [],
      "name": "endLine",
      "type": null
     },
     {
      "params": [],
      "name": "notePreferredLineBreak",
      "type": null
     },
     {
      "params": [],
      "name": "beginBlock",
      "type": null
     },
     {
      "params": [],
      "name": "endBlock",
      "type": null
     },
     {
      "params": [
       {
        "name": "shouldEndLine",
        "type": "boolean"
       }
      ],
      "name": "endBlock",
      "type": null
     },
     {
      "params": [],
      "name": "listSeparator",
      "type": null
     },
     {
      "params": [],
      "name": "endStatement",
      "type": null
     },
     {
      "params": [
       {
        "name": "needSemiColon",
        "type": "boolean"
       }
      ],
      "name": "endStatement",
      "type": null
     },
     {
      "params": [],
      "name": "maybeEndStatement",
      "type": null
     },
     {
      "params": [],
      "name": "endFunction",
      "type": null
     },
     {
      "params": [
       {
        "name": "statementContext",
        "type": "boolean"
       }
      ],
      "name": "endFunction",
      "type": null
     },
     {
      "params": [],
      "name": "beginCaseBody",
      "type": null
     },
     {
      "params": [],
      "name": "endCaseBody",
      "type": null
     },
     {
      "params": [
       {
        "name": "newcode",
        "type": "String"
       }
      ],
      "name": "add",
      "type": null
     },
     {
      "params": [
       {
        "name": "op",
        "type": "String"
       },
       {
        "name": "binOp",
        "type": "boolean"
       }
      ],
      "name": "appendOp",
      "type": null
     },
     {
      "params": [
       {
        "name": "op",
        "type": "String"
       },
       {
        "name": "binOp",
        "type": "boolean"
       }
      ],
      "name": "addOp",
      "type": null
     },
     {
      "params": [
       {
        "name": "x",
        "type": "double"
       }
      ],
      "name": "addNumber",
      "type": null
     },
     {
      "params": [
       {
        "name": "ch",
        "type": "char"
       }
      ],
      "name": "isWordChar",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "shouldPreserveExtraBlocks",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "statementContext",
        "type": "boolean"
       }
      ],
      "name": "breakAfterBlockFor",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "endFile",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "statementNeedsEnded",
      "type": "boolean"
     },
     {
      "name": "statementStarted",
      "type": "boolean"
     },
     {
      "name": "sawFunction",
      "type": "boolean"
     }
    ],
    "name": "CodeConsumer"
   }
  ]
 },
 {
  "filename": "NameAnonymousFunctionsMapped.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "getFunctionMap",
      "type": "VariableMap"
     }
    ],
    "fields": [
     {
      "name": "logger",
      "type": "Logger"
     },
     {
      "name": "PREFIX",
      "type": "char"
     },
     {
      "name": "PREFIX_STRING",
      "type": "String"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "nameGenerator",
      "type": "NameGenerator"
     },
     {
      "name": "renameMap",
      "type": "Map"
     },
     {
      "name": "namedCount",
      "type": "int"
     },
     {
      "name": "bytesUsed",
      "type": "int"
     }
    ],
    "name": "NameAnonymousFunctionsMapped"
   }
  ]
 },
 {
  "filename": "AliasStrings.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "string",
        "type": "String"
       }
      ],
      "name": "getOrCreateStringInfo",
      "type": "StringInfo"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isInThrowExpression",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "replaceStringsWithAliases",
      "type": null
     },
     {
      "params": [],
      "name": "addAliasDeclarationNodes",
      "type": null
     },
     {
      "params": [
       {
        "name": "str",
        "type": "String"
       },
       {
        "name": "info",
        "type": "StringInfo"
       }
      ],
      "name": "shouldReplaceWithAlias",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "occurrence",
        "type": "StringOccurrence"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "info",
        "type": "StringInfo"
       }
      ],
      "name": "replaceStringWithAliasName",
      "type": null
     },
     {
      "params": [],
      "name": "outputStringUsage",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "logger",
      "type": "Logger"
     },
     {
      "name": "STRING_ALIAS_PREFIX",
      "type": "String"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "moduleGraph",
      "type": "JSModuleGraph"
     },
     {
      "name": "blacklist",
      "type": "Matcher"
     },
     {
      "name": "aliasableStrings",
      "type": "Set"
     },
     {
      "name": "outputStringUsage",
      "type": "boolean"
     },
     {
      "name": "stringInfoMap",
      "type": "SortedMap"
     },
     {
      "name": "usedHashedAliases",
      "type": "Set"
     },
     {
      "name": "moduleVarParentMap",
      "type": "Map"
     },
     {
      "name": "unitTestHashReductionMask",
      "type": "long"
     }
    ],
    "name": "AliasStrings"
   }
  ]
 },
 {
  "filename": "SimpleFunctionAliasAnalysis.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "functionNode",
        "type": "Node"
       }
      ],
      "name": "isAliased",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "functionNode",
        "type": "Node"
       }
      ],
      "name": "isExposedToCallOrApply",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "finder",
        "type": "SimpleDefinitionFinder"
       }
      ],
      "name": "analyze",
      "type": null
     },
     {
      "params": [
       {
        "name": "function",
        "type": "Node"
       },
       {
        "name": "useNode",
        "type": "Node"
       }
      ],
      "name": "updateFunctionForUse",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "aliasedFunctions",
      "type": "Set"
     },
     {
      "name": "functionsExposedToCallOrApply",
      "type": "Set"
     }
    ],
    "name": "SimpleFunctionAliasAnalysis"
   }
  ]
 },
 {
  "filename": "ErrorFormat.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "source",
        "type": "SourceExcerptProvider"
       },
       {
        "name": "colorize",
        "type": "boolean"
       }
      ],
      "name": "toFormatter",
      "type": "MessageFormatter"
     }
    ],
    "fields": [],
    "name": "ErrorFormat"
   }
  ]
 },
 {
  "filename": "SyntacticScopeCreator.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Scope"
       }
      ],
      "name": "createScope",
      "type": "Scope"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Scope"
       }
      ],
      "name": "scanRoot",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "scanVars",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "declareVar",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "origVar",
        "type": "Scope"
       }
      ],
      "name": "hasDuplicateDeclarationSuppression",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "generateUntypedTopScope",
      "type": "Scope"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "scope",
      "type": "Scope"
     },
     {
      "name": "inputId",
      "type": "InputId"
     },
     {
      "name": "redeclarationHandler",
      "type": "RedeclarationHandler"
     },
     {
      "name": "ARGUMENTS",
      "type": "String"
     },
     {
      "name": "VAR_MULTIPLY_DECLARED_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "VAR_ARGUMENTS_SHADOWED_ERROR",
      "type": "DiagnosticType"
     }
    ],
    "name": "SyntacticScopeCreator"
   }
  ]
 },
 {
  "filename": "CheckMissingGetCssName.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "insideGetCssNameCall",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "insideGetUniqueIdCall",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "insideAssignmentToIdConstant",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "isIdName",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "level",
      "type": "CheckLevel"
     },
     {
      "name": "blacklist",
      "type": "Matcher"
     },
     {
      "name": "GET_CSS_NAME_FUNCTION",
      "type": "String"
     },
     {
      "name": "GET_UNIQUE_ID_FUNCTION",
      "type": "String"
     },
     {
      "name": "MISSING_GETCSSNAME",
      "type": "DiagnosticType"
     }
    ],
    "name": "CheckMissingGetCssName"
   }
  ]
 },
 {
  "filename": "AnalyzeNameReferences.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "getGraph",
      "type": "NameReferenceGraph"
     },
     {
      "params": [
       {
        "name": "symbol",
        "type": "Name"
       }
      ],
      "name": "getInfo",
      "type": "NameInfo"
     }
    ],
    "fields": [
     {
      "name": "graph",
      "type": "NameReferenceGraph"
     },
     {
      "name": "moduleGraph",
      "type": "JSModuleGraph"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "AnalyzeNameReferences"
   }
  ]
 },
 {
  "filename": "GroupVariableDeclarations.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "enterScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "exitScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "nodeTraversal",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "shouldTraverse",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "firstVar",
        "type": "Node"
       },
       {
        "name": "groupVar",
        "type": "Node"
       }
      ],
      "name": "applyGroupingToVar",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "GroupVariableDeclarations"
   }
  ]
 },
 {
  "filename": "BasicErrorManager.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       },
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "report",
      "type": null
     },
     {
      "params": [],
      "name": "generateReport",
      "type": null
     },
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       },
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "println",
      "type": null
     },
     {
      "params": [],
      "name": "printSummary",
      "type": null
     },
     {
      "params": [],
      "name": "getErrorCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "getWarningCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "getErrors",
      "type": "JSError"
     },
     {
      "params": [],
      "name": "getWarnings",
      "type": "JSError"
     },
     {
      "params": [
       {
        "name": "typedPercent",
        "type": "double"
       }
      ],
      "name": "setTypedPercent",
      "type": null
     },
     {
      "params": [],
      "name": "getTypedPercent",
      "type": "double"
     },
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       }
      ],
      "name": "toArray",
      "type": "JSError"
     }
    ],
    "fields": [
     {
      "name": "messages",
      "type": "SortedSet"
     },
     {
      "name": "errorCount",
      "type": "int"
     },
     {
      "name": "warningCount",
      "type": "int"
     },
     {
      "name": "typedPercent",
      "type": "double"
     }
    ],
    "name": "BasicErrorManager"
   }
  ]
 },
 {
  "filename": "MinimizeExitPoints.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "exitType",
        "type": "int"
       },
       {
        "name": "labelName",
        "type": "String"
       }
      ],
      "name": "tryMinimizeExits",
      "type": null
     },
     {
      "params": [
       {
        "name": "srcBlock",
        "type": "Node"
       },
       {
        "name": "destBlock",
        "type": "Node"
       },
       {
        "name": "ifNode",
        "type": "Node"
       },
       {
        "name": "exitType",
        "type": "int"
       },
       {
        "name": "labelName",
        "type": "String"
       }
      ],
      "name": "tryMinimizeIfBlockExits",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "int"
       },
       {
        "name": "labelName",
        "type": "String"
       }
      ],
      "name": "matchingExitNode",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "start",
        "type": "Node"
       },
       {
        "name": "srcParent",
        "type": "Node"
       },
       {
        "name": "destParent",
        "type": "Node"
       }
      ],
      "name": "moveAllFollowing",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "MinimizeExitPoints"
   }
  ]
 },
 {
  "filename": "ProcessDefines.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "namespace",
        "type": "GlobalNamespace"
       }
      ],
      "name": "injectNamespace",
      "type": "ProcessDefines"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "allDefines",
        "type": "Map"
       }
      ],
      "name": "overrideDefines",
      "type": null
     },
     {
      "params": [
       {
        "name": "format",
        "type": "MessageFormat"
       },
       {
        "name": "params",
        "type": "Object"
       }
      ],
      "name": "format",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "expression",
        "type": "JSTypeExpression"
       }
      ],
      "name": "isValidDefineType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       },
       {
        "name": "namespace",
        "type": "GlobalNamespace"
       }
      ],
      "name": "collectDefines",
      "type": "Map"
     }
    ],
    "fields": [
     {
      "name": "KNOWN_DEFINES",
      "type": "Set"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "dominantReplacements",
      "type": "Map"
     },
     {
      "name": "namespace",
      "type": "GlobalNamespace"
     },
     {
      "name": "UNKNOWN_DEFINE_WARNING",
      "type": "DiagnosticType"
     },
     {
      "name": "INVALID_DEFINE_TYPE_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "INVALID_DEFINE_INIT_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "NON_GLOBAL_DEFINE_INIT_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "DEFINE_NOT_ASSIGNABLE_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "REASON_DEFINE_NOT_ASSIGNABLE",
      "type": "MessageFormat"
     }
    ],
    "name": "ProcessDefines"
   }
  ]
 },
 {
  "filename": "PureFunctionIdentifier.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externsAst",
        "type": "Node"
       },
       {
        "name": "srcAst",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "getDebugReport",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "definitionProvider",
        "type": "DefinitionProvider"
       },
       {
        "name": "name",
        "type": "Node"
       }
      ],
      "name": "getCallableDefinitions",
      "type": "Collection"
     },
     {
      "params": [],
      "name": "propagateSideEffects",
      "type": null
     },
     {
      "params": [],
      "name": "markPureFunctionCalls",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isIncDec",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "Node"
       }
      ],
      "name": "isKnownLocalValue",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "callSite",
        "type": "Node"
       }
      ],
      "name": "getCallThisObject",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "callSite",
        "type": "Node"
       }
      ],
      "name": "isCallOrApply",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "INVALID_NO_SIDE_EFFECT_ANNOTATION",
      "type": "DiagnosticType"
     },
     {
      "name": "INVALID_MODIFIES_ANNOTATION",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "definitionProvider",
      "type": "DefinitionProvider"
     },
     {
      "name": "functionSideEffectMap",
      "type": "Map"
     },
     {
      "name": "allFunctionCalls",
      "type": "List"
     },
     {
      "name": "externs",
      "type": "Node"
     },
     {
      "name": "root",
      "type": "Node"
     }
    ],
    "name": "PureFunctionIdentifier"
   }
  ]
 },
 {
  "filename": "CustomPassExecutionTime.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [],
    "fields": [],
    "name": "CustomPassExecutionTime"
   }
  ]
 },
 {
  "filename": "CreateSyntheticBlocks.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "marker",
        "type": "Marker"
       }
      ],
      "name": "addBlocks",
      "type": null
     },
     {
      "params": [
       {
        "name": "src",
        "type": "Node"
       },
       {
        "name": "dest",
        "type": "Node"
       },
       {
        "name": "start",
        "type": "Node"
       },
       {
        "name": "end",
        "type": "Node"
       }
      ],
      "name": "moveSiblingExclusive",
      "type": null
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "siblingBefore",
        "type": "Node"
       }
      ],
      "name": "childAfter",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "siblingBefore",
        "type": "Node"
       }
      ],
      "name": "removeChildAfter",
      "type": "Node"
     }
    ],
    "fields": [
     {
      "name": "UNMATCHED_START_MARKER",
      "type": "DiagnosticType"
     },
     {
      "name": "UNMATCHED_END_MARKER",
      "type": "DiagnosticType"
     },
     {
      "name": "INVALID_MARKER_USAGE",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "startMarkerName",
      "type": "String"
     },
     {
      "name": "endMarkerName",
      "type": "String"
     },
     {
      "name": "markerStack",
      "type": "Deque"
     },
     {
      "name": "validMarkers",
      "type": "List"
     }
    ],
    "name": "CreateSyntheticBlocks"
   }
  ]
 },
 {
  "filename": "ComposeWarningsGuard.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "guard",
        "type": "WarningsGuard"
       }
      ],
      "name": "addGuard",
      "type": null
     },
     {
      "params": [
       {
        "name": "guards",
        "type": "Iterable"
       }
      ],
      "name": "addGuards",
      "type": null
     },
     {
      "params": [
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "level",
      "type": "CheckLevel"
     },
     {
      "params": [
       {
        "name": "group",
        "type": "DiagnosticGroup"
       }
      ],
      "name": "disables",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "group",
        "type": "DiagnosticGroup"
       }
      ],
      "name": "enables",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getGuards",
      "type": "List"
     },
     {
      "params": [],
      "name": "makeEmergencyFailSafeGuard",
      "type": "ComposeWarningsGuard"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "orderOfAddition",
      "type": "Map"
     },
     {
      "name": "numberOfAdds",
      "type": "int"
     },
     {
      "name": "guardComparator",
      "type": "Comparator"
     },
     {
      "name": "guards",
      "type": "TreeSet"
     }
    ],
    "name": "ComposeWarningsGuard"
   }
  ]
 },
 {
  "filename": "ControlStructureCheck.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "scriptRoot",
        "type": "Node"
       },
       {
        "name": "originalRoot",
        "type": "Node"
       }
      ],
      "name": "hotSwapScript",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "check",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "error",
        "type": "DiagnosticType"
       }
      ],
      "name": "report",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "USE_OF_WITH",
      "type": "DiagnosticType"
     }
    ],
    "name": "ControlStructureCheck"
   }
  ]
 },
 {
  "filename": "PeepholeOptimizationsPass.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getCompiler",
      "type": "AbstractCompiler"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "beginTraversal",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "endTraversal",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "peepholeOptimizations",
      "type": "AbstractPeepholeOptimization"
     }
    ],
    "name": "PeepholeOptimizationsPass"
   }
  ]
 },
 {
  "filename": "VariableNameGenerator.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getNextNewName",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "names",
      "type": "NameGenerator"
     },
     {
      "name": "scope",
      "type": "Scope"
     }
    ],
    "name": "VariableNameGenerator"
   }
  ]
 },
 {
  "filename": "SourceExcerptProvider.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "lineNumber",
        "type": "int"
       }
      ],
      "name": "getSourceLine",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "lineNumber",
        "type": "int"
       }
      ],
      "name": "getSourceRegion",
      "type": "Region"
     }
    ],
    "fields": [],
    "name": "SourceExcerptProvider"
   }
  ]
 },
 {
  "filename": "RuntimeTypeCheck.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "addBoilerplateCode",
      "type": null
     },
     {
      "params": [
       {
        "name": "prop",
        "type": "String"
       }
      ],
      "name": "jsCode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       },
       {
        "name": "logFunction",
        "type": "String"
       }
      ],
      "name": "getBoilerplateCode",
      "type": "Node"
     }
    ],
    "fields": [
     {
      "name": "ALPHA",
      "type": "Comparator"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "logFunction",
      "type": "String"
     }
    ],
    "name": "RuntimeTypeCheck"
   }
  ]
 },
 {
  "filename": "WarningLevel.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "setOptionsForWarningLevel",
      "type": null
     },
     {
      "params": [
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "silenceAllWarnings",
      "type": null
     },
     {
      "params": [
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "addDefaultWarnings",
      "type": null
     },
     {
      "params": [
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "addVerboseWarnings",
      "type": null
     }
    ],
    "fields": [],
    "name": "WarningLevel"
   }
  ]
 },
 {
  "filename": "CompilationLevel.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "setOptionsForCompilationLevel",
      "type": null
     },
     {
      "params": [
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "setDebugOptionsForCompilationLevel",
      "type": null
     },
     {
      "params": [
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "applyBasicCompilationOptions",
      "type": null
     },
     {
      "params": [
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "applySafeCompilationOptions",
      "type": null
     },
     {
      "params": [
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "applyFullCompilationOptions",
      "type": null
     }
    ],
    "fields": [],
    "name": "CompilationLevel"
   }
  ]
 },
 {
  "filename": "CheckUnreachableCode.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "enterScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "shouldTraverse",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "controlFlowGraph",
        "type": "ControlFlowGraph"
       }
      ],
      "name": "initScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "exitScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "UNREACHABLE_CODE",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "level",
      "type": "CheckLevel"
     }
    ],
    "name": "CheckUnreachableCode"
   }
  ]
 },
 {
  "filename": "InferJSDocInfo.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       },
       {
        "name": "originalRoot",
        "type": "Node"
       }
      ],
      "name": "hotSwapScript",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "dereferenceToObject",
      "type": "ObjectType"
     },
     {
      "params": [
       {
        "name": "objType",
        "type": "ObjectType"
       },
       {
        "name": "docInfo",
        "type": "JSDocInfo"
       },
       {
        "name": "qName",
        "type": "String"
       }
      ],
      "name": "attachJSDocInfoToNominalTypeOrShape",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "inExterns",
      "type": "boolean"
     }
    ],
    "name": "InferJSDocInfo"
   }
  ]
 },
 {
  "filename": "ExpressionDecomposer.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "expression",
        "type": "Node"
       }
      ],
      "name": "maybeDecomposeExpression",
      "type": null
     },
     {
      "params": [
       {
        "name": "expression",
        "type": "Node"
       }
      ],
      "name": "exposeExpression",
      "type": null
     },
     {
      "params": [
       {
        "name": "expression",
        "type": "Node"
       }
      ],
      "name": "moveExpression",
      "type": null
     },
     {
      "params": [
       {
        "name": "expressionRoot",
        "type": "Node"
       },
       {
        "name": "subExpression",
        "type": "Node"
       }
      ],
      "name": "exposeExpression",
      "type": null
     },
     {
      "params": [],
      "name": "allowObjectCallDecomposing",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "maybeExternMethod",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "subExpression",
        "type": "Node"
       },
       {
        "name": "expressionRoot",
        "type": "Node"
       }
      ],
      "name": "findNonconditionalParent",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "Node"
       },
       {
        "name": "stopNode",
        "type": "Node"
       },
       {
        "name": "state",
        "type": "DecompositionState"
       }
      ],
      "name": "decomposeObjectLiteralKeys",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "stopNode",
        "type": "Node"
       },
       {
        "name": "state",
        "type": "DecompositionState"
       }
      ],
      "name": "decomposeSubExpressions",
      "type": null
     },
     {
      "params": [
       {
        "name": "expr",
        "type": "Node"
       },
       {
        "name": "injectionPoint",
        "type": "Node"
       },
       {
        "name": "needResult",
        "type": "boolean"
       }
      ],
      "name": "extractConditional",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "expr",
        "type": "Node"
       },
       {
        "name": "needResult",
        "type": "boolean"
       },
       {
        "name": "tempName",
        "type": "String"
       }
      ],
      "name": "buildResultExpression",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "knownConstants",
        "type": "Set"
       }
      ],
      "name": "isConstantName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "expr",
        "type": "Node"
       },
       {
        "name": "injectionPoint",
        "type": "Node"
       }
      ],
      "name": "extractExpression",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "call",
        "type": "Node"
       },
       {
        "name": "state",
        "type": "DecompositionState"
       }
      ],
      "name": "rewriteCallExpression",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "tempNamePrefix",
        "type": "String"
       }
      ],
      "name": "setTempNamePrefix",
      "type": null
     },
     {
      "params": [],
      "name": "getTempValueName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getTempConstantValueName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "subExpression",
        "type": "Node"
       }
      ],
      "name": "findInjectionPoint",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isConditionalOp",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "subExpression",
        "type": "Node"
       }
      ],
      "name": "findExpressionRoot",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "subExpression",
        "type": "Node"
       }
      ],
      "name": "canExposeExpression",
      "type": "DecompositionType"
     },
     {
      "params": [
       {
        "name": "expressionRoot",
        "type": "Node"
       },
       {
        "name": "subExpression",
        "type": "Node"
       }
      ],
      "name": "isSubexpressionMovable",
      "type": "DecompositionType"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "seenSideEffects",
        "type": "boolean"
       }
      ],
      "name": "isSafeAssign",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "followingSideEffectsExist",
        "type": "boolean"
       }
      ],
      "name": "isExpressionTreeUnsafe",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "safeNameIdSupplier",
      "type": "Supplier"
     },
     {
      "name": "knownConstants",
      "type": "Set"
     },
     {
      "name": "MAX_INTERATIONS",
      "type": "int"
     },
     {
      "name": "tempNamePrefix",
      "type": "String"
     }
    ],
    "name": "ExpressionDecomposer"
   }
  ]
 },
 {
  "filename": "ExternExportsPass.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "initExportMethods",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "getGeneratedExterns",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "handleSymbolExport",
      "type": null
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "handlePropertyExport",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE",
      "type": "DiagnosticType"
     },
     {
      "name": "EXPORTED_FUNCTION_UNKNOWN_RETURN_TYPE",
      "type": "DiagnosticType"
     },
     {
      "name": "exports",
      "type": "List"
     },
     {
      "name": "definitionMap",
      "type": "Map"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "externsRoot",
      "type": "Node"
     },
     {
      "name": "mappedPaths",
      "type": "Map"
     },
     {
      "name": "alreadyExportedPaths",
      "type": "Set"
     },
     {
      "name": "exportSymbolFunctionNames",
      "type": "List"
     },
     {
      "name": "exportPropertyFunctionNames",
      "type": "List"
     }
    ],
    "name": "ExternExportsPass"
   }
  ]
 },
 {
  "filename": "VerboseMessageFormatter.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "formatError",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "warning",
        "type": "JSError"
       }
      ],
      "name": "formatWarning",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "message",
        "type": "JSError"
       }
      ],
      "name": "format",
      "type": "String"
     }
    ],
    "fields": [],
    "name": "VerboseMessageFormatter"
   }
  ]
 },
 {
  "filename": "CallGraph.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externsRoot",
        "type": "Node"
       },
       {
        "name": "jsRoot",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "functionNode",
        "type": "Node"
       }
      ],
      "name": "getFunctionForAstNode",
      "type": "Function"
     },
     {
      "params": [],
      "name": "getMainFunction",
      "type": "Function"
     },
     {
      "params": [],
      "name": "getAllFunctions",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "desiredName",
        "type": "String"
       }
      ],
      "name": "getUniqueFunctionWithName",
      "type": "Function"
     },
     {
      "params": [
       {
        "name": "callsiteNode",
        "type": "Node"
       }
      ],
      "name": "getCallsiteForAstNode",
      "type": "Callsite"
     },
     {
      "params": [],
      "name": "getAllCallsites",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "jsRoot",
        "type": "Node"
       },
       {
        "name": "provider",
        "type": "DefinitionProvider"
       }
      ],
      "name": "createFunctionsAndCallsites",
      "type": null
     },
     {
      "params": [
       {
        "name": "functionNode",
        "type": "Node"
       }
      ],
      "name": "createFunction",
      "type": "Function"
     },
     {
      "params": [
       {
        "name": "callsiteNode",
        "type": "Node"
       }
      ],
      "name": "createCallsite",
      "type": "Callsite"
     },
     {
      "params": [
       {
        "name": "callsite",
        "type": "Callsite"
       },
       {
        "name": "definitionProvider",
        "type": "DefinitionProvider"
       }
      ],
      "name": "connectCallsiteToTargets",
      "type": null
     },
     {
      "params": [
       {
        "name": "provider",
        "type": "DefinitionProvider"
       }
      ],
      "name": "fillInFunctionInformation",
      "type": null
     },
     {
      "params": [
       {
        "name": "function",
        "type": "Function"
       },
       {
        "name": "name",
        "type": "Name"
       }
      ],
      "name": "updateFunctionForName",
      "type": null
     },
     {
      "params": [
       {
        "name": "function",
        "type": "Function"
       },
       {
        "name": "useNode",
        "type": "Node"
       }
      ],
      "name": "updateFunctionForUse",
      "type": null
     },
     {
      "params": [
       {
        "name": "definition",
        "type": "Definition"
       }
      ],
      "name": "lookupFunctionForDefinition",
      "type": "Function"
     },
     {
      "params": [],
      "name": "getForwardDirectedGraph",
      "type": "DiGraph"
     },
     {
      "params": [],
      "name": "getBackwardDirectedGraph",
      "type": "DiGraph"
     },
     {
      "params": [
       {
        "name": "digraph",
        "type": "DiGraph"
       },
       {
        "name": "caller",
        "type": "Function"
       },
       {
        "name": "callsite",
        "type": "Callsite"
       },
       {
        "name": "callee",
        "type": "Function"
       },
       {
        "name": "forward",
        "type": "boolean"
       }
      ],
      "name": "digraphConnect",
      "type": null
     },
     {
      "params": [
       {
        "name": "forward",
        "type": "boolean"
       }
      ],
      "name": "constructDirectedGraph",
      "type": "DiGraph"
     },
     {
      "params": [
       {
        "name": "externsRoot",
        "type": "Node"
       },
       {
        "name": "jsRoot",
        "type": "Node"
       }
      ],
      "name": "constructDefinitionProvider",
      "type": "DefinitionProvider"
     },
     {
      "params": [
       {
        "name": "callsite",
        "type": "Node"
       },
       {
        "name": "definitionProvider",
        "type": "DefinitionProvider"
       }
      ],
      "name": "lookupDefinitionsForTargetsOfCall",
      "type": "Collection"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "callsitesByNode",
      "type": "Map"
     },
     {
      "name": "functionsByNode",
      "type": "Map"
     },
     {
      "name": "computeBackwardGraph",
      "type": "boolean"
     },
     {
      "name": "computeForwardGraph",
      "type": "boolean"
     },
     {
      "name": "useNameReferenceGraph",
      "type": "boolean"
     },
     {
      "name": "alreadyRun",
      "type": "boolean"
     },
     {
      "name": "MAIN_FUNCTION_NAME",
      "type": "String"
     },
     {
      "name": "mainFunction",
      "type": "Function"
     }
    ],
    "name": "CallGraph"
   }
  ]
 },
 {
  "filename": "SourceAst.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "getAstRoot",
      "type": "Node"
     },
     {
      "params": [],
      "name": "clearAst",
      "type": null
     },
     {
      "params": [],
      "name": "getInputId",
      "type": "InputId"
     },
     {
      "params": [],
      "name": "getSourceFile",
      "type": "SourceFile"
     },
     {
      "params": [
       {
        "name": "file",
        "type": "SourceFile"
       }
      ],
      "name": "setSourceFile",
      "type": null
     }
    ],
    "fields": [],
    "name": "SourceAst"
   }
  ]
 },
 {
  "filename": "JSSourceFile.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       },
       {
        "name": "charSet",
        "type": "Charset"
       }
      ],
      "name": "fromFile",
      "type": "JSSourceFile"
     },
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       }
      ],
      "name": "fromFile",
      "type": "JSSourceFile"
     },
     {
      "params": [
       {
        "name": "file",
        "type": "File"
       },
       {
        "name": "charSet",
        "type": "Charset"
       }
      ],
      "name": "fromFile",
      "type": "JSSourceFile"
     },
     {
      "params": [
       {
        "name": "file",
        "type": "File"
       }
      ],
      "name": "fromFile",
      "type": "JSSourceFile"
     },
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       },
       {
        "name": "code",
        "type": "String"
       }
      ],
      "name": "fromCode",
      "type": "JSSourceFile"
     },
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       },
       {
        "name": "s",
        "type": "InputStream"
       }
      ],
      "name": "fromInputStream",
      "type": "JSSourceFile"
     },
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       },
       {
        "name": "generator",
        "type": "Generator"
       }
      ],
      "name": "fromGenerator",
      "type": "JSSourceFile"
     },
     {
      "params": [],
      "name": "getCode",
      "type": "String"
     },
     {
      "params": [],
      "name": "clearCachedSource",
      "type": null
     },
     {
      "params": [],
      "name": "getCodeNoCache",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "referenced",
      "type": "SourceFile"
     }
    ],
    "name": "JSSourceFile"
   }
  ]
 },
 {
  "filename": "Region.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getSourceExcerpt",
      "type": "String"
     },
     {
      "params": [],
      "name": "getBeginningLineNumber",
      "type": "int"
     },
     {
      "params": [],
      "name": "getEndingLineNumber",
      "type": "int"
     }
    ],
    "fields": [],
    "name": "Region"
   }
  ]
 },
 {
  "filename": "HotSwapCompilerPass.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "scriptRoot",
        "type": "Node"
       },
       {
        "name": "originalRoot",
        "type": "Node"
       }
      ],
      "name": "hotSwapScript",
      "type": null
     }
    ],
    "fields": [],
    "name": "HotSwapCompilerPass"
   }
  ]
 },
 {
  "filename": "CheckRequiresForConstructors.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "scriptRoot",
        "type": "Node"
       },
       {
        "name": "originalRoot",
        "type": "Node"
       }
      ],
      "name": "hotSwapScript",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "codingConvention",
      "type": "CodingConvention"
     },
     {
      "name": "level",
      "type": "CheckLevel"
     },
     {
      "name": "MISSING_REQUIRE_WARNING",
      "type": "DiagnosticType"
     }
    ],
    "name": "CheckRequiresForConstructors"
   }
  ]
 },
 {
  "filename": "JSModule.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getProvides",
      "type": "List"
     },
     {
      "params": [],
      "name": "getRequires",
      "type": "List"
     },
     {
      "params": [],
      "name": "getPathRelativeToClosureBase",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "file",
        "type": "JSSourceFile"
       }
      ],
      "name": "add",
      "type": null
     },
     {
      "params": [
       {
        "name": "file",
        "type": "JSSourceFile"
       }
      ],
      "name": "addFirst",
      "type": null
     },
     {
      "params": [
       {
        "name": "input",
        "type": "CompilerInput"
       }
      ],
      "name": "add",
      "type": null
     },
     {
      "params": [
       {
        "name": "input",
        "type": "CompilerInput"
       }
      ],
      "name": "addFirst",
      "type": null
     },
     {
      "params": [
       {
        "name": "input",
        "type": "CompilerInput"
       },
       {
        "name": "other",
        "type": "CompilerInput"
       }
      ],
      "name": "addAfter",
      "type": null
     },
     {
      "params": [
       {
        "name": "dep",
        "type": "JSModule"
       }
      ],
      "name": "addDependency",
      "type": null
     },
     {
      "params": [
       {
        "name": "input",
        "type": "CompilerInput"
       }
      ],
      "name": "remove",
      "type": null
     },
     {
      "params": [],
      "name": "removeAll",
      "type": null
     },
     {
      "params": [],
      "name": "getDependencies",
      "type": "List"
     },
     {
      "params": [],
      "name": "getSortedDependencyNames",
      "type": "List"
     },
     {
      "params": [],
      "name": "getAllDependencies",
      "type": "Set"
     },
     {
      "params": [],
      "name": "getThisAndAllDependencies",
      "type": "Set"
     },
     {
      "params": [],
      "name": "getInputs",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getByName",
      "type": "CompilerInput"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "removeByName",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "clearAsts",
      "type": null
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "Compiler"
       }
      ],
      "name": "sortInputsByDeps",
      "type": null
     },
     {
      "params": [
       {
        "name": "modules",
        "type": "Collection"
       }
      ],
      "name": "sortJsModules",
      "type": "JSModule"
     },
     {
      "params": [
       {
        "name": "dep",
        "type": "int"
       }
      ],
      "name": "setDepth",
      "type": null
     },
     {
      "params": [],
      "name": "getDepth",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "CIRCULAR_DEPENDENCY_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "name",
      "type": "String"
     },
     {
      "name": "inputs",
      "type": "List"
     },
     {
      "name": "deps",
      "type": "List"
     },
     {
      "name": "depth",
      "type": "int"
     }
    ],
    "name": "JSModule"
   }
  ]
 },
 {
  "filename": "RhinoErrorReporter.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "replacePlaceHolders",
      "type": "Pattern"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "forNewRhino",
      "type": "com"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "forOldRhino",
      "type": "ErrorReporter"
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "warning",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "error",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "lineOffset",
        "type": "int"
       },
       {
        "name": "defaultLevel",
        "type": "CheckLevel"
       }
      ],
      "name": "makeError",
      "type": "JSError"
     }
    ],
    "fields": [
     {
      "name": "PARSE_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "TYPE_PARSE_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "EXTRA_FILEOVERVIEW",
      "type": "DiagnosticType"
     },
     {
      "name": "TRAILING_COMMA",
      "type": "DiagnosticType"
     },
     {
      "name": "DUPLICATE_PARAM",
      "type": "DiagnosticType"
     },
     {
      "name": "BAD_JSDOC_ANNOTATION",
      "type": "DiagnosticType"
     },
     {
      "name": "typeMap",
      "type": "Map"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "RhinoErrorReporter"
   }
  ]
 },
 {
  "filename": "AstParallelizer.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       },
       {
        "name": "globalPass",
        "type": "boolean"
       }
      ],
      "name": "createNewFunctionLevelAstParallelizer",
      "type": "AstParallelizer"
     },
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "createNewFileLevelAstParallelizer",
      "type": "AstParallelizer"
     },
     {
      "params": [
       {
        "name": "placeHolder",
        "type": "Node"
       },
       {
        "name": "before",
        "type": "Node"
       },
       {
        "name": "orginal",
        "type": "Node"
       }
      ],
      "name": "recordSplitPoint",
      "type": null
     },
     {
      "params": [],
      "name": "split",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "split",
      "type": null
     },
     {
      "params": [],
      "name": "join",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "TEMP_NAME",
      "type": "String"
     },
     {
      "name": "shouldSplit",
      "type": "Predicate"
     },
     {
      "name": "placeHolderProvider",
      "type": "Supplier"
     },
     {
      "name": "forest",
      "type": "List"
     },
     {
      "name": "root",
      "type": "Node"
     },
     {
      "name": "includeRoot",
      "type": "boolean"
     },
     {
      "name": "detachPointList",
      "type": "List"
     }
    ],
    "name": "AstParallelizer"
   }
  ]
 },
 {
  "filename": "PassConfig.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "regenerateGlobalTypedScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       },
       {
        "name": "scriptRoot",
        "type": "Node"
       }
      ],
      "name": "patchGlobalTypedScope",
      "type": null
     },
     {
      "params": [],
      "name": "getTypedScopeCreator",
      "type": "MemoizedScopeCreator"
     },
     {
      "params": [],
      "name": "getTopScope",
      "type": "Scope"
     },
     {
      "params": [],
      "name": "getChecks",
      "type": "List"
     },
     {
      "params": [],
      "name": "getOptimizations",
      "type": "List"
     },
     {
      "params": [],
      "name": "getPassGraph",
      "type": "GraphvizGraph"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "makeTypeInference",
      "type": "TypeInferencePass"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "makeInferJsDocInfo",
      "type": "InferJSDocInfo"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "makeTypeCheck",
      "type": "TypeCheck"
     },
     {
      "params": [
       {
        "name": "factoryList",
        "type": "List"
       },
       {
        "name": "factory",
        "type": "PassFactory"
       },
       {
        "name": "passName",
        "type": "String"
       }
      ],
      "name": "addPassFactoryBefore",
      "type": null
     },
     {
      "params": [
       {
        "name": "factoryList",
        "type": "List"
       },
       {
        "name": "factory",
        "type": "PassFactory"
       }
      ],
      "name": "replacePassFactory",
      "type": null
     },
     {
      "params": [
       {
        "name": "factoryList",
        "type": "List"
       },
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "findPassIndexByName",
      "type": "int"
     },
     {
      "params": [],
      "name": "getBasePassConfig",
      "type": "PassConfig"
     },
     {
      "params": [],
      "name": "getIntermediateState",
      "type": "State"
     },
     {
      "params": [
       {
        "name": "state",
        "type": "State"
       }
      ],
      "name": "setIntermediateState",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "options",
      "type": "CompilerOptions"
     },
     {
      "name": "typedScopeCreator",
      "type": "MemoizedScopeCreator"
     },
     {
      "name": "internalScopeCreator",
      "type": "TypedScopeCreator"
     },
     {
      "name": "topScope",
      "type": "Scope"
     }
    ],
    "name": "PassConfig"
   }
  ]
 },
 {
  "filename": "StrictWarningsGuard.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "level",
      "type": "CheckLevel"
     },
     {
      "params": [],
      "name": "getPriority",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "UNRAISABLE_WARNING",
      "type": "DiagnosticType"
     }
    ],
    "name": "StrictWarningsGuard"
   }
  ]
 },
 {
  "filename": "FunctionRewriter.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "reducer",
        "type": "Reducer"
       }
      ],
      "name": "parseHelperCode",
      "type": "Node"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "SAVINGS_THRESHOLD",
      "type": "int"
     }
    ],
    "name": "FunctionRewriter"
   }
  ]
 },
 {
  "filename": "ControlFlowAnalysis.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getCfg",
      "type": "ControlFlowGraph"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "DiGraphNode"
       }
      ],
      "name": "prioritizeFromEntryNode",
      "type": null
     },
     {
      "params": [
       {
        "name": "nodeTraversal",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "shouldTraverse",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "handleIf",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "handleWhile",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "handleDo",
      "type": null
     },
     {
      "params": [
       {
        "name": "forNode",
        "type": "Node"
       }
      ],
      "name": "handleFor",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "handleSwitch",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "handleCase",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "handleDefault",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "handleWith",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "handleStmtList",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "handleFunction",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "handleExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "handleThrow",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "handleTry",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "handleCatch",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "handleBreak",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "handleContinue",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "handleReturn",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "handleStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "cfa",
        "type": "ControlFlowAnalysis"
       }
      ],
      "name": "computeFollowNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "computeFollowNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "fromNode",
        "type": "Node"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "cfa",
        "type": "ControlFlowAnalysis"
       }
      ],
      "name": "computeFollowNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "computeFallThrough",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "fromNode",
        "type": "Node"
       },
       {
        "name": "branch",
        "type": "ControlFlowGraph"
       },
       {
        "name": "toNode",
        "type": "Node"
       }
      ],
      "name": "createEdge",
      "type": null
     },
     {
      "params": [
       {
        "name": "cfgNode",
        "type": "Node"
       },
       {
        "name": "target",
        "type": "Node"
       }
      ],
      "name": "connectToPossibleExceptionHandler",
      "type": null
     },
     {
      "params": [
       {
        "name": "first",
        "type": "Node"
       },
       {
        "name": "types",
        "type": "int"
       }
      ],
      "name": "getNextSiblingOfType",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "target",
        "type": "Node"
       },
       {
        "name": "label",
        "type": "String"
       }
      ],
      "name": "isBreakTarget",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "target",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "label",
        "type": "String"
       }
      ],
      "name": "isContinueTarget",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "target",
        "type": "Node"
       },
       {
        "name": "label",
        "type": "String"
       }
      ],
      "name": "matchLabel",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "mayThrowException",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "labeled",
        "type": "boolean"
       }
      ],
      "name": "isBreakStructure",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isContinueStructure",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getExceptionHandler",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "block",
        "type": "Node"
       }
      ],
      "name": "getCatchHandlerForBlock",
      "type": "Node"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "cfg",
      "type": "ControlFlowGraph"
     },
     {
      "name": "astPosition",
      "type": "Map"
     },
     {
      "name": "nodePriorities",
      "type": "Map"
     },
     {
      "name": "priorityComparator",
      "type": "Comparator"
     },
     {
      "name": "astPositionCounter",
      "type": "int"
     },
     {
      "name": "priorityCounter",
      "type": "int"
     },
     {
      "name": "shouldTraverseFunctions",
      "type": "boolean"
     },
     {
      "name": "edgeAnnotations",
      "type": "boolean"
     },
     {
      "name": "root",
      "type": "Node"
     },
     {
      "name": "exceptionHandler",
      "type": "Deque"
     },
     {
      "name": "finallyMap",
      "type": "Multimap"
     }
    ],
    "name": "ControlFlowAnalysis"
   }
  ]
 },
 {
  "filename": "ErrorManager.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       },
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "report",
      "type": null
     },
     {
      "params": [],
      "name": "generateReport",
      "type": null
     },
     {
      "params": [],
      "name": "getErrorCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "getWarningCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "getErrors",
      "type": "JSError"
     },
     {
      "params": [],
      "name": "getWarnings",
      "type": "JSError"
     },
     {
      "params": [
       {
        "name": "typedPercent",
        "type": "double"
       }
      ],
      "name": "setTypedPercent",
      "type": null
     },
     {
      "params": [],
      "name": "getTypedPercent",
      "type": "double"
     }
    ],
    "fields": [],
    "name": "ErrorManager"
   }
  ]
 },
 {
  "filename": "MoveFunctionDeclarations.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "shouldTraverse",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "functions",
      "type": "Map"
     }
    ],
    "name": "MoveFunctionDeclarations"
   }
  ]
 },
 {
  "filename": "AstValidator.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateRoot",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateCodeRoot",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateScript",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateStatement",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateExpression",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateBlock",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateSyntheticBlock",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateIsSynthetic",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateHasSourceName",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateHasInputId",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateLabel",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateLabelName",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateNonEmptyString",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateNonNullString",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateName",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateOptionalName",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateFunctionStatement",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateFunctionExpression",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateParameters",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateCall",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateNew",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateVar",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateFor",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateVarOrOptionalExpression",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateVarOrAssignmentTarget",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateWith",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateWhile",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateDo",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateIf",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateExprStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateReturn",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateThrow",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateBreak",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateContinue",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateTry",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateCatch",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateSwitch",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateSwitchMember",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateDefault",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateCase",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateOptionalExpression",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateChildless",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateAssignmentExpression",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateAssignmentTarget",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateGetProp",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateRegExpLit",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateString",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateNumber",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateArrayLit",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateObjectLit",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateObjectLitKey",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateObjectLitGetKey",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateObjectLitSetKey",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateObjectLitStringKey",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateObjectLiteralKeyName",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateUnaryOp",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateBinaryOp",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateTrinaryOp",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "violation",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "int"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "validateNodeType",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "i",
        "type": "int"
       }
      ],
      "name": "validateChildCount",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "i",
        "type": "int"
       }
      ],
      "name": "validateMinimumChildCount",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "i",
        "type": "int"
       }
      ],
      "name": "validateMaximumChildCount",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "violationHandler",
      "type": "ViolationHandler"
     }
    ],
    "name": "AstValidator"
   }
  ]
 },
 {
  "filename": "CheckAccessControls.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "scriptRoot",
        "type": "Node"
       },
       {
        "name": "originalRoot",
        "type": "Node"
       }
      ],
      "name": "hotSwapScript",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "enterScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "exitScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "getClassOfMethod",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "normalizeClassType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "shouldTraverse",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "checkConstructorDeprecation",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "checkNameDeprecation",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "checkPropertyDeprecation",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "name",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "checkNameVisibility",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "getprop",
        "type": "Node"
       }
      ],
      "name": "checkConstantProperty",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "getprop",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "checkPropertyVisibility",
      "type": null
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "isValidPrivateConstructorAccess",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "shouldEmitDeprecationWarning",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "canAccessDeprecatedTypes",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "isDeprecatedFunction",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "getTypeDeprecationInfo",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "objectType",
        "type": "ObjectType"
       },
       {
        "name": "prop",
        "type": "String"
       }
      ],
      "name": "isPropertyDeclaredConstant",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "ObjectType"
       },
       {
        "name": "prop",
        "type": "String"
       }
      ],
      "name": "getPropertyDeprecationInfo",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "dereference",
      "type": "JSType"
     }
    ],
    "fields": [
     {
      "name": "DEPRECATED_NAME",
      "type": "DiagnosticType"
     },
     {
      "name": "DEPRECATED_NAME_REASON",
      "type": "DiagnosticType"
     },
     {
      "name": "DEPRECATED_PROP",
      "type": "DiagnosticType"
     },
     {
      "name": "DEPRECATED_PROP_REASON",
      "type": "DiagnosticType"
     },
     {
      "name": "DEPRECATED_CLASS",
      "type": "DiagnosticType"
     },
     {
      "name": "DEPRECATED_CLASS_REASON",
      "type": "DiagnosticType"
     },
     {
      "name": "BAD_PRIVATE_GLOBAL_ACCESS",
      "type": "DiagnosticType"
     },
     {
      "name": "BAD_PRIVATE_PROPERTY_ACCESS",
      "type": "DiagnosticType"
     },
     {
      "name": "BAD_PROTECTED_PROPERTY_ACCESS",
      "type": "DiagnosticType"
     },
     {
      "name": "PRIVATE_OVERRIDE",
      "type": "DiagnosticType"
     },
     {
      "name": "VISIBILITY_MISMATCH",
      "type": "DiagnosticType"
     },
     {
      "name": "CONST_PROPERTY_REASSIGNED_VALUE",
      "type": "DiagnosticType"
     },
     {
      "name": "CONST_PROPERTY_DELETED",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "validator",
      "type": "TypeValidator"
     },
     {
      "name": "deprecatedDepth",
      "type": "int"
     },
     {
      "name": "methodDepth",
      "type": "int"
     },
     {
      "name": "currentClass",
      "type": "JSType"
     },
     {
      "name": "initializedConstantProperties",
      "type": "Multimap"
     }
    ],
    "name": "CheckAccessControls"
   }
  ]
 },
 {
  "filename": "ExploitAssigns.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "subtree",
        "type": "Node"
       }
      ],
      "name": "optimizeSubtree",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "assign",
        "type": "Node"
       },
       {
        "name": "expr",
        "type": "Node"
       },
       {
        "name": "exprParent",
        "type": "Node"
       }
      ],
      "name": "collapseAssign",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "Node"
       },
       {
        "name": "isLValue",
        "type": "boolean"
       }
      ],
      "name": "isCollapsibleValue",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "expr",
        "type": "Node"
       },
       {
        "name": "exprParent",
        "type": "Node"
       },
       {
        "name": "value",
        "type": "Node"
       }
      ],
      "name": "collapseAssignEqualTo",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "replacement",
        "type": "Node"
       }
      ],
      "name": "isSafeReplacement",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "isNameAssignedTo",
      "type": "boolean"
     }
    ],
    "fields": [],
    "name": "ExploitAssigns"
   }
  ]
 },
 {
  "filename": "CrossModuleCodeMotion.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "moveCode",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "hasConditionalAncestor",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "v",
        "type": "Var"
       }
      ],
      "name": "getNamedInfo",
      "type": "NamedInfo"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "info",
        "type": "NamedInfo"
       },
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "processReference",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "name",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "info",
        "type": "NamedInfo"
       }
      ],
      "name": "maybeProcessDeclaration",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "canMoveValue",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "logger",
      "type": "Logger"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "graph",
      "type": "JSModuleGraph"
     },
     {
      "name": "moduleVarParentMap",
      "type": "Map"
     },
     {
      "name": "namedInfo",
      "type": "Map"
     }
    ],
    "name": "CrossModuleCodeMotion"
   }
  ]
 },
 {
  "filename": "ClosureReverseAbstractInterpreter.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "condition",
        "type": "Node"
       },
       {
        "name": "blindScope",
        "type": "FlowScope"
       },
       {
        "name": "outcome",
        "type": "boolean"
       }
      ],
      "name": "getPreciserScopeKnowingConditionOutcome",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "parameter",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "blindScope",
        "type": "FlowScope"
       },
       {
        "name": "restriction",
        "type": "Function"
       },
       {
        "name": "outcome",
        "type": "boolean"
       }
      ],
      "name": "restrictParameter",
      "type": "FlowScope"
     }
    ],
    "fields": [
     {
      "name": "restrictToArrayVisitor",
      "type": "Visitor"
     },
     {
      "name": "restrictToNotArrayVisitor",
      "type": "Visitor"
     },
     {
      "name": "restrictToObjectVisitor",
      "type": "Visitor"
     },
     {
      "name": "restrictToNotObjectVisitor",
      "type": "Visitor"
     },
     {
      "name": "restricters",
      "type": "Map"
     }
    ],
    "name": "ClosureReverseAbstractInterpreter"
   }
  ]
 },
 {
  "filename": "NodeNameExtractor.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "getName",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "delimiter",
      "type": "char"
     },
     {
      "name": "nextUniqueInt",
      "type": "int"
     }
    ],
    "name": "NodeNameExtractor"
   }
  ]
 },
 {
  "filename": "SanityCheck.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "sanityCheckAst",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "sanityCheckVars",
      "type": null
     },
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "sanityCheckCodeGeneration",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "sanityCheckNormalization",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "CANNOT_PARSE_GENERATED_CODE",
      "type": "DiagnosticType"
     },
     {
      "name": "GENERATED_BAD_CODE",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "astValidator",
      "type": "AstValidator"
     }
    ],
    "name": "SanityCheck"
   }
  ]
 },
 {
  "filename": "MaybeReachingVariableUse.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "isForward",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "createEntryLattice",
      "type": "ReachingUses"
     },
     {
      "params": [],
      "name": "createInitialEstimateLattice",
      "type": "ReachingUses"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "input",
        "type": "ReachingUses"
       }
      ],
      "name": "flowThrough",
      "type": "ReachingUses"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "cfgNode",
        "type": "Node"
       },
       {
        "name": "output",
        "type": "ReachingUses"
       },
       {
        "name": "conditional",
        "type": "boolean"
       }
      ],
      "name": "computeMayUse",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "use",
        "type": "ReachingUses"
       }
      ],
      "name": "addToUseIfLocal",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "use",
        "type": "ReachingUses"
       }
      ],
      "name": "removeFromUseIfLocal",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "defNode",
        "type": "Node"
       }
      ],
      "name": "getUses",
      "type": "Collection"
     }
    ],
    "fields": [
     {
      "name": "jsScope",
      "type": "Scope"
     },
     {
      "name": "escaped",
      "type": "Set"
     }
    ],
    "name": "MaybeReachingVariableUse"
   }
  ]
 },
 {
  "filename": "OptimizeParameters.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       },
       {
        "name": "definitions",
        "type": "SimpleDefinitionFinder"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "definitionSite",
        "type": "DefinitionSite"
       },
       {
        "name": "defFinder",
        "type": "SimpleDefinitionFinder"
       }
      ],
      "name": "canChangeSignature",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "defSite",
        "type": "DefinitionSite"
       },
       {
        "name": "defFinder",
        "type": "SimpleDefinitionFinder"
       }
      ],
      "name": "tryEliminateOptionalArgs",
      "type": null
     },
     {
      "params": [
       {
        "name": "defSite",
        "type": "DefinitionSite"
       },
       {
        "name": "defFinder",
        "type": "SimpleDefinitionFinder"
       }
      ],
      "name": "tryEliminateConstantArgs",
      "type": null
     },
     {
      "params": [
       {
        "name": "parameters",
        "type": "List"
       }
      ],
      "name": "adjustForSideEffects",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parameters",
        "type": "List"
       },
       {
        "name": "cur",
        "type": "Node"
       }
      ],
      "name": "findFixedParameters",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parameters",
        "type": "List"
       },
       {
        "name": "cur",
        "type": "Node"
       },
       {
        "name": "s",
        "type": "Scope"
       }
      ],
      "name": "buildParameterList",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "p",
        "type": "Parameter"
       },
       {
        "name": "value",
        "type": "Node"
       }
      ],
      "name": "setParameterSideEffectInfo",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "s",
        "type": "Scope"
       }
      ],
      "name": "isMovableValue",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parameters",
        "type": "List"
       },
       {
        "name": "function",
        "type": "Node"
       }
      ],
      "name": "optimizeFunctionDefinition",
      "type": null
     },
     {
      "params": [
       {
        "name": "defFinder",
        "type": "SimpleDefinitionFinder"
       },
       {
        "name": "parameters",
        "type": "List"
       },
       {
        "name": "call",
        "type": "Node"
       }
      ],
      "name": "optimizeCallSite",
      "type": null
     },
     {
      "params": [
       {
        "name": "function",
        "type": "Node"
       },
       {
        "name": "varName",
        "type": "Node"
       },
       {
        "name": "value",
        "type": "Node"
       }
      ],
      "name": "addVariableToFunction",
      "type": null
     },
     {
      "params": [
       {
        "name": "function",
        "type": "Node"
       },
       {
        "name": "argIndex",
        "type": "int"
       }
      ],
      "name": "eliminateParamsAfter",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "fnNode",
        "type": "Node"
       },
       {
        "name": "argNode",
        "type": "Node"
       }
      ],
      "name": "eliminateParamsAfter",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "function",
        "type": "Node"
       },
       {
        "name": "argIndex",
        "type": "int"
       }
      ],
      "name": "eliminateFunctionParamAt",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "defFinder",
        "type": "SimpleDefinitionFinder"
       },
       {
        "name": "p",
        "type": "Parameter"
       },
       {
        "name": "call",
        "type": "Node"
       },
       {
        "name": "argIndex",
        "type": "int"
       }
      ],
      "name": "eliminateCallParamAt",
      "type": "Node"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "removedNodes",
      "type": "List"
     }
    ],
    "name": "OptimizeParameters"
   }
  ]
 },
 {
  "filename": "ProcessClosurePrimitives.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getExportedVariableNames",
      "type": "Set"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "scriptRoot",
        "type": "Node"
       },
       {
        "name": "originalRoot",
        "type": "Node"
       }
      ],
      "name": "hotSwapScript",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "processRequireCall",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "processProvideCall",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "handleTypedefDefinition",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "handleCandidateProvideDefinition",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "processBaseClassCall",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "getEnclosingDeclNameNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "extraMessage",
        "type": "String"
       }
      ],
      "name": "reportBadBaseClassUse",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "processProvideFromPreviousPass",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "processSetCssNameMapping",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "trySimplifyNewDate",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "methodName",
        "type": "Node"
       },
       {
        "name": "arg",
        "type": "Node"
       }
      ],
      "name": "verifyProvide",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "methodName",
        "type": "Node"
       },
       {
        "name": "arg",
        "type": "Node"
       }
      ],
      "name": "verifyArgument",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "methodName",
        "type": "Node"
       },
       {
        "name": "arg",
        "type": "Node"
       },
       {
        "name": "desiredType",
        "type": "int"
       }
      ],
      "name": "verifyArgument",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "methodName",
        "type": "Node"
       },
       {
        "name": "firstArg",
        "type": "Node"
       }
      ],
      "name": "verifySetCssNameMapping",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "ns",
        "type": "String"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "module",
        "type": "JSModule"
       }
      ],
      "name": "registerAnyProvidedPrefixes",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isNamespacePlaceholder",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "maybeAddStringNodeToSymbolTable",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "maybeAddToSymbolTable",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "NULL_ARGUMENT_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "EXPECTED_OBJECTLIT_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "EXPECTED_STRING_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "INVALID_ARGUMENT_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "INVALID_STYLE_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "TOO_MANY_ARGUMENTS_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "DUPLICATE_NAMESPACE_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "FUNCTION_NAMESPACE_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "MISSING_PROVIDE_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "LATE_PROVIDE_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "INVALID_PROVIDE_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "XMODULE_REQUIRE_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "INVALID_CSS_RENAMING_MAP",
      "type": "DiagnosticType"
     },
     {
      "name": "BASE_CLASS_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "GOOG",
      "type": "String"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "moduleGraph",
      "type": "JSModuleGraph"
     },
     {
      "name": "providedNames",
      "type": "Map"
     },
     {
      "name": "unrecognizedRequires",
      "type": "List"
     },
     {
      "name": "exportedVariables",
      "type": "Set"
     },
     {
      "name": "requiresLevel",
      "type": "CheckLevel"
     },
     {
      "name": "rewriteNewDateGoogNow",
      "type": "boolean"
     },
     {
      "name": "preprocessorSymbolTable",
      "type": "PreprocessorSymbolTable"
     }
    ],
    "name": "ProcessClosurePrimitives"
   }
  ]
 },
 {
  "filename": "JsMessageVisitor.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "traversal",
        "type": "NodeTraversal"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "msgName",
        "type": "String"
       },
       {
        "name": "msgNode",
        "type": "Node"
       }
      ],
      "name": "checkIfMessageDuplicated",
      "type": null
     },
     {
      "params": [
       {
        "name": "builder",
        "type": "Builder"
       },
       {
        "name": "nameNode",
        "type": "Node"
       },
       {
        "name": "parentNode",
        "type": "Node"
       },
       {
        "name": "grandParentNode",
        "type": "Node"
       }
      ],
      "name": "extractMessageFromVariable",
      "type": null
     },
     {
      "params": [
       {
        "name": "builder",
        "type": "Builder"
       },
       {
        "name": "getPropNode",
        "type": "Node"
       },
       {
        "name": "assignNode",
        "type": "Node"
       }
      ],
      "name": "extractMessageFromProperty",
      "type": null
     },
     {
      "params": [
       {
        "name": "builder",
        "type": "Builder"
       },
       {
        "name": "varNode",
        "type": "Node"
       },
       {
        "name": "parentOfVarNode",
        "type": "Node"
       }
      ],
      "name": "maybeInitMetaDataFromJsDocOrHelpVar",
      "type": null
     },
     {
      "params": [
       {
        "name": "builder",
        "type": "Builder"
       },
       {
        "name": "sibling",
        "type": "Node"
       }
      ],
      "name": "maybeInitMetaDataFromHelpVar",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "builder",
        "type": "Builder"
       },
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "maybeInitMetaDataFromJsDoc",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "extractStringFromStringExprNode",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "builder",
        "type": "Builder"
       },
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "extractFromFunctionNode",
      "type": null
     },
     {
      "params": [
       {
        "name": "builder",
        "type": "Builder"
       },
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "extractFromReturnDescendant",
      "type": null
     },
     {
      "params": [
       {
        "name": "builder",
        "type": "Builder"
       },
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "extractFromCallNode",
      "type": null
     },
     {
      "params": [
       {
        "name": "builder",
        "type": "Builder"
       },
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "parseMessageTextNode",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "JsMessage"
       },
       {
        "name": "definition",
        "type": "JsMessageDefinition"
       }
      ],
      "name": "processJsMessage",
      "type": null
     },
     {
      "params": [
       {
        "name": "identifier",
        "type": "String"
       },
       {
        "name": "isNewStyleMessage",
        "type": "boolean"
       }
      ],
      "name": "isMessageName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "identifier",
        "type": "String"
       }
      ],
      "name": "isUnnamedMessageName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "input",
        "type": "String"
       }
      ],
      "name": "isLowerCamelCaseWithNumericSuffixes",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "getReadableTokenName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "input",
        "type": "String"
       }
      ],
      "name": "toLowerCamelCaseWithNumericSuffixes",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "MSG_FUNCTION_NAME",
      "type": "String"
     },
     {
      "name": "MESSAGE_HAS_NO_DESCRIPTION",
      "type": "DiagnosticType"
     },
     {
      "name": "MESSAGE_HAS_NO_TEXT",
      "type": "DiagnosticType"
     },
     {
      "name": "MESSAGE_TREE_MALFORMED",
      "type": "DiagnosticType"
     },
     {
      "name": "MESSAGE_HAS_NO_VALUE",
      "type": "DiagnosticType"
     },
     {
      "name": "MESSAGE_DUPLICATE_KEY",
      "type": "DiagnosticType"
     },
     {
      "name": "MESSAGE_NODE_IS_ORPHANED",
      "type": "DiagnosticType"
     },
     {
      "name": "MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX",
      "type": "DiagnosticType"
     },
     {
      "name": "PH_JS_PREFIX",
      "type": "String"
     },
     {
      "name": "PH_JS_SUFFIX",
      "type": "String"
     },
     {
      "name": "MSG_PREFIX",
      "type": "String"
     },
     {
      "name": "MSG_UNNAMED_PATTERN",
      "type": "Pattern"
     },
     {
      "name": "CAMELCASE_PATTERN",
      "type": "Pattern"
     },
     {
      "name": "HIDDEN_DESC_PREFIX",
      "type": "String"
     },
     {
      "name": "DESC_SUFFIX",
      "type": "String"
     },
     {
      "name": "needToCheckDuplications",
      "type": "boolean"
     },
     {
      "name": "style",
      "type": "JsMessage"
     },
     {
      "name": "idGenerator",
      "type": "JsMessage"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "messageNames",
      "type": "Map"
     },
     {
      "name": "googMsgNodes",
      "type": "Map"
     },
     {
      "name": "checkLevel",
      "type": "CheckLevel"
     }
    ],
    "name": "JsMessageVisitor"
   }
  ]
 },
 {
  "filename": "LightweightMessageFormatter.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "withoutSource",
      "type": "LightweightMessageFormatter"
     },
     {
      "params": [
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "formatError",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "warning",
        "type": "JSError"
       }
      ],
      "name": "formatWarning",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "error",
        "type": "JSError"
       },
       {
        "name": "warning",
        "type": "boolean"
       }
      ],
      "name": "format",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "excerpt",
      "type": "SourceExcerpt"
     },
     {
      "name": "excerptFormatter",
      "type": "ExcerptFormatter"
     }
    ],
    "name": "LightweightMessageFormatter"
   }
  ]
 },
 {
  "filename": "ReplaceCssNames.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "getCssRenamingMap",
      "type": "CssRenamingMap"
     }
    ],
    "fields": [
     {
      "name": "GET_CSS_NAME_FUNCTION",
      "type": "String"
     },
     {
      "name": "INVALID_NUM_ARGUMENTS_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "STRING_LITERAL_EXPECTED_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "UNEXPECTED_STRING_LITERAL_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "UNKNOWN_SYMBOL_WARNING",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "cssNames",
      "type": "Map"
     },
     {
      "name": "symbolMap",
      "type": "CssRenamingMap"
     },
     {
      "name": "nativeStringType",
      "type": "JSType"
     }
    ],
    "name": "ReplaceCssNames"
   }
  ]
 },
 {
  "filename": "SpecializationAwareCompilerPass.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "state",
        "type": "SpecializeModule"
       }
      ],
      "name": "enableSpecialization",
      "type": null
     }
    ],
    "fields": [],
    "name": "SpecializationAwareCompilerPass"
   }
  ]
 },
 {
  "filename": "RenameVars.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getNewGlobalName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getNewLocalName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "recordPseudoName",
      "type": null
     },
     {
      "params": [],
      "name": "reusePreviouslyUsedVariableMap",
      "type": null
     },
     {
      "params": [
       {
        "name": "varsToRename",
        "type": "Set"
       }
      ],
      "name": "assignNames",
      "type": null
     },
     {
      "params": [
       {
        "name": "a",
        "type": "Assignment"
       },
       {
        "name": "newName",
        "type": "String"
       }
      ],
      "name": "finalizeNameAssignment",
      "type": null
     },
     {
      "params": [],
      "name": "getVariableMap",
      "type": "VariableMap"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "isLocal",
        "type": "boolean"
       }
      ],
      "name": "okToRenameVar",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "v",
        "type": "Var"
       }
      ],
      "name": "getLocalVarIndex",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "globalNameNodes",
      "type": "ArrayList"
     },
     {
      "name": "localNameNodes",
      "type": "ArrayList"
     },
     {
      "name": "pseudoNameMap",
      "type": "Map"
     },
     {
      "name": "externNames",
      "type": "Set"
     },
     {
      "name": "reservedNames",
      "type": "Set"
     },
     {
      "name": "renameMap",
      "type": "Map"
     },
     {
      "name": "prevUsedRenameMap",
      "type": "VariableMap"
     },
     {
      "name": "prefix",
      "type": "String"
     },
     {
      "name": "assignmentCount",
      "type": "int"
     },
     {
      "name": "assignmentLog",
      "type": "StringBuilder"
     },
     {
      "name": "localBleedingFunctions",
      "type": "Set"
     },
     {
      "name": "localBleedingFunctionsPerScope",
      "type": "ArrayListMultimap"
     },
     {
      "name": "assignments",
      "type": "SortedMap"
     },
     {
      "name": "localRenamingOnly",
      "type": "boolean"
     },
     {
      "name": "preserveFunctionExpressionNames",
      "type": "boolean"
     },
     {
      "name": "shouldShadow",
      "type": "boolean"
     },
     {
      "name": "reservedCharacters",
      "type": "char"
     },
     {
      "name": "LOCAL_VAR_PREFIX",
      "type": "String"
     },
     {
      "name": "FREQUENCY_COMPARATOR",
      "type": "Comparator"
     },
     {
      "name": "ORDER_OF_OCCURRENCE_COMPARATOR",
      "type": "Comparator"
     }
    ],
    "name": "RenameVars"
   }
  ]
 },
 {
  "filename": "TypeValidator.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getMismatches",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "report",
        "type": "boolean"
       }
      ],
      "name": "setShouldReport",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "msg",
        "type": "String"
       }
      ],
      "name": "expectObject",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "msg",
        "type": "String"
       }
      ],
      "name": "expectActualObject",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "msg",
        "type": "String"
       }
      ],
      "name": "expectAnyObject",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "msg",
        "type": "String"
       }
      ],
      "name": "expectString",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "msg",
        "type": "String"
       }
      ],
      "name": "expectNumber",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "msg",
        "type": "String"
       }
      ],
      "name": "expectBitwiseable",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "msg",
        "type": "String"
       }
      ],
      "name": "expectStringOrNumber",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "msg",
        "type": "String"
       },
       {
        "name": "expectedType",
        "type": "JSType"
       }
      ],
      "name": "expectNotNullOrUndefined",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "containsForwardDeclaredUnresolvedName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "switchType",
        "type": "JSType"
       },
       {
        "name": "caseType",
        "type": "JSType"
       }
      ],
      "name": "expectSwitchMatchesCase",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "objType",
        "type": "JSType"
       },
       {
        "name": "indexType",
        "type": "JSType"
       }
      ],
      "name": "expectIndexMatch",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "rightType",
        "type": "JSType"
       },
       {
        "name": "leftType",
        "type": "JSType"
       },
       {
        "name": "owner",
        "type": "Node"
       },
       {
        "name": "propName",
        "type": "String"
       }
      ],
      "name": "expectCanAssignToPropertyOf",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "rightType",
        "type": "JSType"
       },
       {
        "name": "leftType",
        "type": "JSType"
       },
       {
        "name": "msg",
        "type": "String"
       }
      ],
      "name": "expectCanAssignTo",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "rightType",
        "type": "JSType"
       },
       {
        "name": "leftType",
        "type": "JSType"
       }
      ],
      "name": "bothIntrinsics",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "argType",
        "type": "JSType"
       },
       {
        "name": "paramType",
        "type": "JSType"
       },
       {
        "name": "callNode",
        "type": "Node"
       },
       {
        "name": "ordinal",
        "type": "int"
       }
      ],
      "name": "expectArgumentMatchesParameter",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "overridingType",
        "type": "JSType"
       },
       {
        "name": "hiddenType",
        "type": "JSType"
       },
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "ownerType",
        "type": "JSType"
       }
      ],
      "name": "expectCanOverride",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "superObject",
        "type": "ObjectType"
       },
       {
        "name": "subObject",
        "type": "ObjectType"
       }
      ],
      "name": "expectSuperType",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "castType",
        "type": "JSType"
       }
      ],
      "name": "expectCanCast",
      "type": null
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "var",
        "type": "Var"
       },
       {
        "name": "variableName",
        "type": "String"
       },
       {
        "name": "newType",
        "type": "JSType"
       }
      ],
      "name": "expectUndeclaredVariable",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "FunctionType"
       }
      ],
      "name": "expectAllInterfaceProperties",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "instance",
        "type": "ObjectType"
       },
       {
        "name": "implementedInterface",
        "type": "ObjectType"
       },
       {
        "name": "prop",
        "type": "String"
       }
      ],
      "name": "expectInterfaceProperty",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "msg",
        "type": "String"
       },
       {
        "name": "found",
        "type": "JSType"
       },
       {
        "name": "required",
        "type": "JSType"
       }
      ],
      "name": "mismatch",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "msg",
        "type": "String"
       },
       {
        "name": "found",
        "type": "JSType"
       },
       {
        "name": "required",
        "type": "JSTypeNative"
       }
      ],
      "name": "mismatch",
      "type": null
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "msg",
        "type": "String"
       },
       {
        "name": "found",
        "type": "JSType"
       },
       {
        "name": "required",
        "type": "JSType"
       }
      ],
      "name": "mismatch",
      "type": null
     },
     {
      "params": [
       {
        "name": "found",
        "type": "JSType"
       },
       {
        "name": "required",
        "type": "JSType"
       },
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "registerMismatch",
      "type": null
     },
     {
      "params": [
       {
        "name": "found",
        "type": "JSType"
       },
       {
        "name": "required",
        "type": "JSType"
       },
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "registerIfMismatch",
      "type": null
     },
     {
      "params": [
       {
        "name": "description",
        "type": "String"
       },
       {
        "name": "found",
        "type": "JSType"
       },
       {
        "name": "required",
        "type": "JSType"
       }
      ],
      "name": "formatFoundRequired",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "dereference",
        "type": "boolean"
       }
      ],
      "name": "getReadableJSTypeName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getJSType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "typeId",
        "type": "JSTypeNative"
       }
      ],
      "name": "getNativeType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "report",
      "type": "JSError"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "typeRegistry",
      "type": "JSTypeRegistry"
     },
     {
      "name": "allValueTypes",
      "type": "JSType"
     },
     {
      "name": "shouldReport",
      "type": "boolean"
     },
     {
      "name": "recordErrors",
      "type": "boolean"
     },
     {
      "name": "nullOrUndefined",
      "type": "JSType"
     },
     {
      "name": "mismatches",
      "type": "List"
     },
     {
      "name": "FOUND_REQUIRED",
      "type": "String"
     },
     {
      "name": "INVALID_CAST",
      "type": "DiagnosticType"
     },
     {
      "name": "TYPE_MISMATCH_WARNING",
      "type": "DiagnosticType"
     },
     {
      "name": "MISSING_EXTENDS_TAG_WARNING",
      "type": "DiagnosticType"
     },
     {
      "name": "DUP_VAR_DECLARATION",
      "type": "DiagnosticType"
     },
     {
      "name": "HIDDEN_PROPERTY_MISMATCH",
      "type": "DiagnosticType"
     },
     {
      "name": "INTERFACE_METHOD_NOT_IMPLEMENTED",
      "type": "DiagnosticType"
     },
     {
      "name": "HIDDEN_INTERFACE_PROPERTY_MISMATCH",
      "type": "DiagnosticType"
     },
     {
      "name": "ALL_DIAGNOSTICS",
      "type": "DiagnosticGroup"
     }
    ],
    "name": "TypeValidator"
   }
  ]
 },
 {
  "filename": "DefinitionSite.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "node",
      "type": "Node"
     },
     {
      "name": "definition",
      "type": "Definition"
     },
     {
      "name": "module",
      "type": "JSModule"
     },
     {
      "name": "inGlobalScope",
      "type": "boolean"
     },
     {
      "name": "inExterns",
      "type": "boolean"
     }
    ],
    "name": "DefinitionSite"
   }
  ]
 },
 {
  "filename": "DisambiguateProperties.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "forJSTypeSystem",
      "type": "DisambiguateProperties"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       },
       {
        "name": "tt",
        "type": "TightenTypes"
       }
      ],
      "name": "forConcreteTypeSystem",
      "type": "DisambiguateProperties"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "JSType"
       },
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "recordInvalidationError",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "addInvalidatingType",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getProperty",
      "type": "Property"
     },
     {
      "params": [
       {
        "name": "field",
        "type": "String"
       },
       {
        "name": "type",
        "type": "T"
       }
      ],
      "name": "getTypeWithProperty",
      "type": "T"
     },
     {
      "params": [],
      "name": "renameProperties",
      "type": null
     },
     {
      "params": [
       {
        "name": "types",
        "type": "UnionFind"
       },
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "buildPropNames",
      "type": "Map"
     },
     {
      "params": [],
      "name": "getRenamedTypesForTesting",
      "type": "Multimap"
     }
    ],
    "fields": [
     {
      "name": "logger",
      "type": "Logger"
     },
     {
      "name": "showInvalidationWarnings",
      "type": "boolean"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "typeSystem",
      "type": "TypeSystem"
     },
     {
      "name": "invalidationMap",
      "type": "Multimap"
     },
     {
      "name": "properties",
      "type": "Map"
     }
    ],
    "name": "DisambiguateProperties"
   }
  ]
 },
 {
  "filename": "VariableShadowDeclarationCheck.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "SHADOW_VAR_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "checkLevel",
      "type": "CheckLevel"
     },
     {
      "name": "externalNoShadowVariableNames",
      "type": "Set"
     }
    ],
    "name": "VariableShadowDeclarationCheck"
   }
  ]
 },
 {
  "filename": "CollapseVariableDeclarations.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "applyCollapses",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "collapses",
      "type": "List"
     },
     {
      "name": "nodesToCollapse",
      "type": "Set"
     }
    ],
    "name": "CollapseVariableDeclarations"
   }
  ]
 },
 {
  "filename": "NameReferenceGraphReport.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getHtmlReport",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "getSourceFile",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "builder",
        "type": "StringBuilder"
       },
       {
        "name": "declarationNode",
        "type": "DiGraphNode"
       }
      ],
      "name": "generateDeclarationReport",
      "type": null
     },
     {
      "params": [
       {
        "name": "builder",
        "type": "StringBuilder"
       }
      ],
      "name": "generateHtmlReportHeader",
      "type": null
     },
     {
      "params": [
       {
        "name": "builder",
        "type": "StringBuilder"
       }
      ],
      "name": "generateHtmlReportFooter",
      "type": null
     },
     {
      "params": [
       {
        "name": "builder",
        "type": "StringBuilder"
       },
       {
        "name": "referencedDecl",
        "type": "Name"
       },
       {
        "name": "edge",
        "type": "DiGraphEdge"
       }
      ],
      "name": "generateEdgeReport",
      "type": null
     },
     {
      "params": [
       {
        "name": "builder",
        "type": "StringBuilder"
       },
       {
        "name": "sourceFile",
        "type": "String"
       },
       {
        "name": "lineNumber",
        "type": "int"
       },
       {
        "name": "columnNumber",
        "type": "int"
       }
      ],
      "name": "generateSourceReferenceLink",
      "type": null
     },
     {
      "params": [
       {
        "name": "builder",
        "type": "StringBuilder"
       },
       {
        "name": "defType",
        "type": "JSType"
       }
      ],
      "name": "generateType",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "graph",
      "type": "NameReferenceGraph"
     }
    ],
    "name": "NameReferenceGraphReport"
   }
  ]
 },
 {
  "filename": "SyntheticAst.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "getAstRoot",
      "type": "Node"
     },
     {
      "params": [],
      "name": "clearAst",
      "type": null
     },
     {
      "params": [],
      "name": "getInputId",
      "type": "InputId"
     },
     {
      "params": [],
      "name": "getSourceFile",
      "type": "SourceFile"
     },
     {
      "params": [
       {
        "name": "file",
        "type": "SourceFile"
       }
      ],
      "name": "setSourceFile",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "inputId",
      "type": "InputId"
     },
     {
      "name": "sourceFile",
      "type": "SourceFile"
     },
     {
      "name": "root",
      "type": "Node"
     }
    ],
    "name": "SyntheticAst"
   }
  ]
 },
 {
  "filename": "DefinitionsRemover.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "isExtern",
        "type": "boolean"
       }
      ],
      "name": "getDefinition",
      "type": "Definition"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isDefinitionNode",
      "type": "boolean"
     }
    ],
    "fields": [],
    "name": "DefinitionsRemover"
   }
  ]
 },
 {
  "filename": "UnfoldCompoundAssignments.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "nodeTraversal",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "shouldTraverse",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "isIncrement",
        "type": "boolean"
       }
      ],
      "name": "unfoldIncrDecr",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "valueIsDiscarded",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "isPrefix",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "unfoldCompoundAssignment",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "UnfoldCompoundAssignments"
   }
  ]
 },
 {
  "filename": "LineNumberCheck.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "setCheckSubTree",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "shouldTraverse",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "MISSING_LINE_INFO",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "requiresLineNumbers",
      "type": "boolean"
     }
    ],
    "name": "LineNumberCheck"
   }
  ]
 },
 {
  "filename": "MessageFormatter.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "formatError",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "warning",
        "type": "JSError"
       }
      ],
      "name": "formatWarning",
      "type": "String"
     }
    ],
    "fields": [],
    "name": "MessageFormatter"
   }
  ]
 },
 {
  "filename": "ReorderConstantExpression.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "ReorderConstantExpression"
   }
  ]
 },
 {
  "filename": "ReplaceStrings.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getResult",
      "type": "List"
     },
     {
      "params": [],
      "name": "getStringMap",
      "type": "VariableMap"
     },
     {
      "params": [
       {
        "name": "original",
        "type": "String"
       }
      ],
      "name": "escapeForVariableMap",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "findMatching",
      "type": "Config"
     },
     {
      "params": [
       {
        "name": "callClassType",
        "type": "JSType"
       },
       {
        "name": "declarationNames",
        "type": "Collection"
       }
      ],
      "name": "findMatchingClass",
      "type": "Config"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "config",
        "type": "Config"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "doSubstitutions",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "expr",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "replaceExpression",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "String"
       }
      ],
      "name": "getReplacement",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "key",
        "type": "String"
       },
       {
        "name": "replacement",
        "type": "String"
       }
      ],
      "name": "recordReplacement",
      "type": null
     },
     {
      "params": [
       {
        "name": "expr",
        "type": "Node"
       },
       {
        "name": "prefix",
        "type": "Node"
       },
       {
        "name": "keyBuilder",
        "type": "StringBuilder"
       }
      ],
      "name": "buildReplacement",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "fullDeclarationName",
        "type": "String"
       }
      ],
      "name": "getMethodFromDeclarationName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "fullDeclarationName",
        "type": "String"
       }
      ],
      "name": "getClassFromDeclarationName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "functionsToInspect",
        "type": "List"
       }
      ],
      "name": "parseConfiguration",
      "type": null
     },
     {
      "params": [
       {
        "name": "function",
        "type": "String"
       }
      ],
      "name": "parseConfiguration",
      "type": "Config"
     },
     {
      "params": [
       {
        "name": "reservedNames",
        "type": "Set"
       }
      ],
      "name": "createNameGenerator",
      "type": "NameGenerator"
     }
    ],
    "fields": [
     {
      "name": "BAD_REPLACEMENT_CONFIGURATION",
      "type": "DiagnosticType"
     },
     {
      "name": "DEFAULT_PLACEHOLDER_TOKEN",
      "type": "String"
     },
     {
      "name": "placeholderToken",
      "type": "String"
     },
     {
      "name": "REPLACE_ONE_MARKER",
      "type": "String"
     },
     {
      "name": "REPLACE_ALL_MARKER",
      "type": "String"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "registry",
      "type": "JSTypeRegistry"
     },
     {
      "name": "functions",
      "type": "Map"
     },
     {
      "name": "methods",
      "type": "Multimap"
     },
     {
      "name": "nameGenerator",
      "type": "NameGenerator"
     },
     {
      "name": "results",
      "type": "Map"
     }
    ],
    "name": "ReplaceStrings"
   }
  ]
 },
 {
  "filename": "CollapseProperties.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "namespace",
        "type": "GlobalNamespace"
       }
      ],
      "name": "inlineAliases",
      "type": null
     },
     {
      "params": [
       {
        "name": "alias",
        "type": "Ref"
       },
       {
        "name": "namespace",
        "type": "GlobalNamespace"
       }
      ],
      "name": "inlineAliasIfPossible",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "checkNamespaces",
      "type": null
     },
     {
      "params": [
       {
        "name": "nameObj",
        "type": "Name"
       },
       {
        "name": "ref",
        "type": "Ref"
       }
      ],
      "name": "warnAboutNamespaceAliasing",
      "type": null
     },
     {
      "params": [
       {
        "name": "nameObj",
        "type": "Name"
       },
       {
        "name": "ref",
        "type": "Ref"
       }
      ],
      "name": "warnAboutNamespaceRedefinition",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Name"
       },
       {
        "name": "alias",
        "type": "String"
       }
      ],
      "name": "flattenReferencesToCollapsibleDescendantNames",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "Name"
       },
       {
        "name": "alias",
        "type": "String"
       }
      ],
      "name": "flattenSimpleStubDeclaration",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Name"
       },
       {
        "name": "alias",
        "type": "String"
       }
      ],
      "name": "flattenReferencesTo",
      "type": null
     },
     {
      "params": [
       {
        "name": "alias",
        "type": "String"
       },
       {
        "name": "n",
        "type": "Name"
       },
       {
        "name": "depth",
        "type": "int"
       }
      ],
      "name": "flattenPrefixes",
      "type": null
     },
     {
      "params": [
       {
        "name": "alias",
        "type": "String"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "depth",
        "type": "int"
       },
       {
        "name": "originalName",
        "type": "String"
       }
      ],
      "name": "flattenNameRefAtDepth",
      "type": null
     },
     {
      "params": [
       {
        "name": "alias",
        "type": "String"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "originalName",
        "type": "String"
       }
      ],
      "name": "flattenNameRef",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Name"
       },
       {
        "name": "alias",
        "type": "String"
       }
      ],
      "name": "collapseDeclarationOfNameAndDescendants",
      "type": null
     },
     {
      "params": [
       {
        "name": "alias",
        "type": "String"
       },
       {
        "name": "refName",
        "type": "Name"
       },
       {
        "name": "ref",
        "type": "Ref"
       }
      ],
      "name": "updateSimpleDeclaration",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Name"
       },
       {
        "name": "alias",
        "type": "String"
       },
       {
        "name": "canCollapseChildNames",
        "type": "boolean"
       }
      ],
      "name": "updateObjLitOrFunctionDeclaration",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Name"
       },
       {
        "name": "alias",
        "type": "String"
       },
       {
        "name": "canCollapseChildNames",
        "type": "boolean"
       }
      ],
      "name": "updateObjLitOrFunctionDeclarationAtAssignNode",
      "type": null
     },
     {
      "params": [
       {
        "name": "function",
        "type": "Node"
       },
       {
        "name": "docInfo",
        "type": "JSDocInfo"
       },
       {
        "name": "name",
        "type": "Name"
       }
      ],
      "name": "checkForHosedThisReferences",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Name"
       },
       {
        "name": "canCollapseChildNames",
        "type": "boolean"
       }
      ],
      "name": "updateObjLitOrFunctionDeclarationAtVarNode",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Name"
       },
       {
        "name": "canCollapseChildNames",
        "type": "boolean"
       }
      ],
      "name": "updateFunctionDeclarationAtFunctionNode",
      "type": null
     },
     {
      "params": [
       {
        "name": "objlitName",
        "type": "Name"
       },
       {
        "name": "alias",
        "type": "String"
       },
       {
        "name": "objlit",
        "type": "Node"
       },
       {
        "name": "varNode",
        "type": "Node"
       },
       {
        "name": "nameToAddAfter",
        "type": "Node"
       },
       {
        "name": "varParent",
        "type": "Node"
       }
      ],
      "name": "declareVarsForObjLitValues",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Name"
       },
       {
        "name": "alias",
        "type": "String"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "addAfter",
        "type": "Node"
       }
      ],
      "name": "addStubsForUndeclaredProperties",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "root",
        "type": "String"
       },
       {
        "name": "prop",
        "type": "String"
       }
      ],
      "name": "appendPropForAlias",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "UNSAFE_NAMESPACE_WARNING",
      "type": "DiagnosticType"
     },
     {
      "name": "NAMESPACE_REDEFINED_WARNING",
      "type": "DiagnosticType"
     },
     {
      "name": "UNSAFE_THIS",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "globalNames",
      "type": "List"
     },
     {
      "name": "nameMap",
      "type": "Map"
     },
     {
      "name": "collapsePropertiesOnExternTypes",
      "type": "boolean"
     },
     {
      "name": "inlineAliases",
      "type": "boolean"
     }
    ],
    "name": "CollapseProperties"
   }
  ]
 },
 {
  "filename": "CompilerPass.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [],
    "name": "CompilerPass"
   }
  ]
 },
 {
  "filename": "ObjectPropertyStringPostprocess.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "ObjectPropertyStringPostprocess"
   }
  ]
 },
 {
  "filename": "VarCheck.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "scriptRoot",
        "type": "Node"
       },
       {
        "name": "originalRoot",
        "type": "Node"
       }
      ],
      "name": "hotSwapScript",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "varName",
        "type": "String"
       }
      ],
      "name": "createSynthesizedExternVar",
      "type": null
     },
     {
      "params": [],
      "name": "getSynthesizedExternsInput",
      "type": "CompilerInput"
     },
     {
      "params": [],
      "name": "getSynthesizedExternsRoot",
      "type": "Node"
     }
    ],
    "fields": [
     {
      "name": "SYNTHETIC_VARS_DECLAR",
      "type": "String"
     },
     {
      "name": "UNDEFINED_VAR_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "VIOLATED_MODULE_DEP_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "MISSING_MODULE_DEP_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "STRICT_MODULE_DEP_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "NAME_REFERENCE_IN_EXTERNS_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "UNDEFINED_EXTERN_VAR_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "INVALID_FUNCTION_DECL",
      "type": "DiagnosticType"
     },
     {
      "name": "synthesizedExternsInput",
      "type": "CompilerInput"
     },
     {
      "name": "synthesizedExternsRoot",
      "type": "Node"
     },
     {
      "name": "varsToDeclareInExterns",
      "type": "Set"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "sanityCheck",
      "type": "boolean"
     },
     {
      "name": "strictExternCheck",
      "type": "boolean"
     }
    ],
    "name": "VarCheck"
   }
  ]
 },
 {
  "filename": "StatementFusion.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "optimizeSubtree",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "block",
        "type": "Node"
       }
      ],
      "name": "canFuseIntoOneStatement",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "block",
        "type": "Node"
       }
      ],
      "name": "fuseIntoOneStatement",
      "type": null
     },
     {
      "params": [
       {
        "name": "exp1",
        "type": "Node"
       },
       {
        "name": "exp2",
        "type": "Node"
       }
      ],
      "name": "fuseExpressionIntoExpression",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "exp",
        "type": "Node"
       },
       {
        "name": "stmt",
        "type": "Node"
       }
      ],
      "name": "fuseExpresssonIntoFirstChild",
      "type": null
     },
     {
      "params": [
       {
        "name": "exp",
        "type": "Node"
       },
       {
        "name": "stmt",
        "type": "Node"
       }
      ],
      "name": "fuseExpresssonIntoSecondChild",
      "type": null
     }
    ],
    "fields": [],
    "name": "StatementFusion"
   }
  ]
 },
 {
  "filename": "ConcreteType.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "types",
        "type": "Collection"
       }
      ],
      "name": "createForTypes",
      "type": "ConcreteType"
     },
     {
      "params": [],
      "name": "isNone",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isFunction",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isInstance",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isUnion",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isAll",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isSingleton",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toFunction",
      "type": "ConcreteFunctionType"
     },
     {
      "params": [],
      "name": "toInstance",
      "type": "ConcreteInstanceType"
     },
     {
      "params": [],
      "name": "toUnion",
      "type": "ConcreteUnionType"
     },
     {
      "params": [],
      "name": "getScope",
      "type": "StaticScope"
     },
     {
      "params": [
       {
        "name": "other",
        "type": "ConcreteType"
       }
      ],
      "name": "unionWith",
      "type": "ConcreteType"
     },
     {
      "params": [
       {
        "name": "other",
        "type": "ConcreteType"
       }
      ],
      "name": "intersectWith",
      "type": "ConcreteType"
     },
     {
      "params": [
       {
        "name": "filter",
        "type": "TypeFilter"
       }
      ],
      "name": "getMatchingTypes",
      "type": "List"
     },
     {
      "params": [],
      "name": "getFunctions",
      "type": "List"
     },
     {
      "params": [],
      "name": "getInstances",
      "type": "List"
     },
     {
      "params": [],
      "name": "getFunctionInstanceTypes",
      "type": "List"
     },
     {
      "params": [],
      "name": "getPrototypeTypes",
      "type": "List"
     },
     {
      "params": [],
      "name": "getSuperclassTypes",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "index",
        "type": "int"
       }
      ],
      "name": "getParameterSlots",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getPropertySlots",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getPropertyType",
      "type": "ConcreteType"
     }
    ],
    "fields": [
     {
      "name": "NONE",
      "type": "ConcreteType"
     },
     {
      "name": "ALL",
      "type": "ConcreteType"
     },
     {
      "name": "NO_FUNCTIONS",
      "type": "List"
     },
     {
      "name": "NO_INSTANCES",
      "type": "List"
     },
     {
      "name": "NO_SLOTS",
      "type": "List"
     }
    ],
    "name": "ConcreteType"
   }
  ]
 },
 {
  "filename": "OptimizeReturns.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       },
       {
        "name": "definitions",
        "type": "SimpleDefinitionFinder"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "defFinder",
        "type": "SimpleDefinitionFinder"
       },
       {
        "name": "definitionSite",
        "type": "DefinitionSite"
       }
      ],
      "name": "callResultsMaybeUsed",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "isValueUsed",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "defFinder",
        "type": "SimpleDefinitionFinder"
       },
       {
        "name": "fnNode",
        "type": "Node"
       }
      ],
      "name": "rewriteReturns",
      "type": null
     },
     {
      "params": [
       {
        "name": "site",
        "type": "UseSite"
       }
      ],
      "name": "isCall",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "OptimizeReturns"
   }
  ]
 },
 {
  "filename": "SpecializeModule.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "createSpecializingPasses",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "module",
        "type": "JSModule"
       }
      ],
      "name": "copyModuleInputs",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "original",
        "type": "Node"
       },
       {
        "name": "toBeSpecialized",
        "type": "Node"
       }
      ],
      "name": "matchTopLevelFunctions",
      "type": null
     },
     {
      "params": [],
      "name": "replaceOriginalModuleInputsWithSpecialized",
      "type": null
     },
     {
      "params": [
       {
        "name": "module",
        "type": "JSModule"
       }
      ],
      "name": "addDummyVarDeclarationsToInitialModule",
      "type": null
     },
     {
      "params": [
       {
        "name": "module",
        "type": "JSModule"
       }
      ],
      "name": "addOriginalFunctionVersionsToDependentModules",
      "type": null
     },
     {
      "params": [
       {
        "name": "module",
        "type": "JSModule"
       }
      ],
      "name": "getDirectDependents",
      "type": "Collection"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "specializedInputRootsByOriginal",
      "type": "Map"
     },
     {
      "name": "functionInfoBySpecializedFunctionNode",
      "type": "Map"
     },
     {
      "name": "specializationState",
      "type": "SpecializationState"
     },
     {
      "name": "specializationPassFactories",
      "type": "PassFactory"
     }
    ],
    "name": "SpecializeModule"
   }
  ]
 },
 {
  "filename": "ClosureCodingConvention.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "parentCtor",
        "type": "FunctionType"
       },
       {
        "name": "childCtor",
        "type": "FunctionType"
       },
       {
        "name": "type",
        "type": "SubclassType"
       }
      ],
      "name": "applySubclassRelationship",
      "type": null
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "getClassesDefinedByCall",
      "type": "SubclassRelationship"
     },
     {
      "params": [
       {
        "name": "callName",
        "type": "Node"
       }
      ],
      "name": "typeofClassDefiningName",
      "type": "SubclassType"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "isSuperClassReference",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "qualifiedName",
        "type": "Node"
       }
      ],
      "name": "endsWithPrototype",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "extractClassNameIfProvide",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "extractClassNameIfRequire",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "functionName",
        "type": "String"
       }
      ],
      "name": "extractClassNameIfGoog",
      "type": "String"
     },
     {
      "params": [],
      "name": "getExportPropertyFunction",
      "type": "String"
     },
     {
      "params": [],
      "name": "getExportSymbolFunction",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "identifyTypeDeclarationCall",
      "type": "List"
     },
     {
      "params": [],
      "name": "getAbstractMethodName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "getSingletonGetterClassName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "functionType",
        "type": "FunctionType"
       },
       {
        "name": "getterType",
        "type": "FunctionType"
       },
       {
        "name": "objectType",
        "type": "ObjectType"
       }
      ],
      "name": "applySingletonGetter",
      "type": null
     },
     {
      "params": [],
      "name": "getGlobalObject",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "call",
        "type": "Node"
       }
      ],
      "name": "isPropertyTestFunction",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "getObjectLiteralCast",
      "type": "ObjectLiteralCast"
     },
     {
      "params": [
       {
        "name": "parameter",
        "type": "Node"
       }
      ],
      "name": "isOptionalParameter",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parameter",
        "type": "Node"
       }
      ],
      "name": "isVarArgsParameter",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "isPrivate",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getAssertionFunctions",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "describeFunctionBind",
      "type": "Bind"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "safeNext",
      "type": "Node"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "OBJECTLIT_EXPECTED",
      "type": "DiagnosticType"
     },
     {
      "name": "propertyTestFunctions",
      "type": "Set"
     }
    ],
    "name": "ClosureCodingConvention"
   }
  ]
 },
 {
  "filename": "FunctionTypeBuilder.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "sourceNode",
        "type": "Node"
       }
      ],
      "name": "setSourceNode",
      "type": "FunctionTypeBuilder"
     },
     {
      "params": [
       {
        "name": "oldType",
        "type": "FunctionType"
       },
       {
        "name": "paramsParent",
        "type": "Node"
       }
      ],
      "name": "inferFromOverriddenFunction",
      "type": "FunctionTypeBuilder"
     },
     {
      "params": [
       {
        "name": "info",
        "type": "JSDocInfo"
       }
      ],
      "name": "inferReturnType",
      "type": "FunctionTypeBuilder"
     },
     {
      "params": [
       {
        "name": "functionBlock",
        "type": "Node"
       }
      ],
      "name": "inferReturnStatementsAsLastResort",
      "type": "FunctionTypeBuilder"
     },
     {
      "params": [
       {
        "name": "info",
        "type": "JSDocInfo"
       }
      ],
      "name": "inferInheritance",
      "type": "FunctionTypeBuilder"
     },
     {
      "params": [
       {
        "name": "info",
        "type": "JSDocInfo"
       },
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "inferThisType",
      "type": "FunctionTypeBuilder"
     },
     {
      "params": [
       {
        "name": "info",
        "type": "JSDocInfo"
       },
       {
        "name": "owner",
        "type": "Node"
       }
      ],
      "name": "inferThisType",
      "type": "FunctionTypeBuilder"
     },
     {
      "params": [
       {
        "name": "info",
        "type": "JSDocInfo"
       }
      ],
      "name": "inferParameterTypes",
      "type": "FunctionTypeBuilder"
     },
     {
      "params": [
       {
        "name": "argsParent",
        "type": "Node"
       },
       {
        "name": "info",
        "type": "JSDocInfo"
       }
      ],
      "name": "inferParameterTypes",
      "type": "FunctionTypeBuilder"
     },
     {
      "params": [
       {
        "name": "param",
        "type": "Node"
       },
       {
        "name": "info",
        "type": "JSDocInfo"
       }
      ],
      "name": "isOptionalParameter",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "param",
        "type": "Node"
       },
       {
        "name": "info",
        "type": "JSDocInfo"
       }
      ],
      "name": "isVarArgsParameter",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "info",
        "type": "JSDocInfo"
       }
      ],
      "name": "inferTemplateTypeName",
      "type": "FunctionTypeBuilder"
     },
     {
      "params": [
       {
        "name": "builder",
        "type": "FunctionParamBuilder"
       },
       {
        "name": "paramType",
        "type": "JSType"
       },
       {
        "name": "warnedAboutArgList",
        "type": "boolean"
       },
       {
        "name": "isOptional",
        "type": "boolean"
       },
       {
        "name": "isVarArgs",
        "type": "boolean"
       }
      ],
      "name": "addParameter",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "buildAndRegister",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "fnType",
        "type": "FunctionType"
       }
      ],
      "name": "maybeSetBaseType",
      "type": null
     },
     {
      "params": [],
      "name": "getOrCreateConstructor",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "warning",
        "type": "DiagnosticType"
       },
       {
        "name": "args",
        "type": "String"
       }
      ],
      "name": "reportWarning",
      "type": null
     },
     {
      "params": [
       {
        "name": "error",
        "type": "DiagnosticType"
       },
       {
        "name": "args",
        "type": "String"
       }
      ],
      "name": "reportError",
      "type": null
     },
     {
      "params": [
       {
        "name": "info",
        "type": "JSDocInfo"
       }
      ],
      "name": "isFunctionTypeDeclaration",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getScopeDeclaredIn",
      "type": "Scope"
     },
     {
      "params": [
       {
        "name": "objectType",
        "type": "ObjectType"
       }
      ],
      "name": "hasMoreTagsToResolve",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "fnName",
      "type": "String"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "codingConvention",
      "type": "CodingConvention"
     },
     {
      "name": "typeRegistry",
      "type": "JSTypeRegistry"
     },
     {
      "name": "errorRoot",
      "type": "Node"
     },
     {
      "name": "sourceName",
      "type": "String"
     },
     {
      "name": "scope",
      "type": "Scope"
     },
     {
      "name": "returnType",
      "type": "JSType"
     },
     {
      "name": "returnTypeInferred",
      "type": "boolean"
     },
     {
      "name": "implementedInterfaces",
      "type": "List"
     },
     {
      "name": "extendedInterfaces",
      "type": "List"
     },
     {
      "name": "baseType",
      "type": "ObjectType"
     },
     {
      "name": "thisType",
      "type": "ObjectType"
     },
     {
      "name": "isConstructor",
      "type": "boolean"
     },
     {
      "name": "isInterface",
      "type": "boolean"
     },
     {
      "name": "parametersNode",
      "type": "Node"
     },
     {
      "name": "sourceNode",
      "type": "Node"
     },
     {
      "name": "templateTypeName",
      "type": "String"
     },
     {
      "name": "EXTENDS_WITHOUT_TYPEDEF",
      "type": "DiagnosticType"
     },
     {
      "name": "EXTENDS_NON_OBJECT",
      "type": "DiagnosticType"
     },
     {
      "name": "RESOLVED_TAG_EMPTY",
      "type": "DiagnosticType"
     },
     {
      "name": "IMPLEMENTS_WITHOUT_CONSTRUCTOR",
      "type": "DiagnosticType"
     },
     {
      "name": "VAR_ARGS_MUST_BE_LAST",
      "type": "DiagnosticType"
     },
     {
      "name": "OPTIONAL_ARG_AT_END",
      "type": "DiagnosticType"
     },
     {
      "name": "INEXISTANT_PARAM",
      "type": "DiagnosticType"
     },
     {
      "name": "TYPE_REDEFINITION",
      "type": "DiagnosticType"
     },
     {
      "name": "TEMPLATE_TYPE_DUPLICATED",
      "type": "DiagnosticType"
     },
     {
      "name": "TEMPLATE_TYPE_EXPECTED",
      "type": "DiagnosticType"
     },
     {
      "name": "THIS_TYPE_NON_OBJECT",
      "type": "DiagnosticType"
     }
    ],
    "name": "FunctionTypeBuilder"
   }
  ]
 },
 {
  "filename": "SemanticReverseAbstractInterpreter.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "condition",
        "type": "Node"
       },
       {
        "name": "blindScope",
        "type": "FlowScope"
       },
       {
        "name": "outcome",
        "type": "boolean"
       }
      ],
      "name": "getPreciserScopeKnowingConditionOutcome",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "condition",
        "type": "Node"
       },
       {
        "name": "blindScope",
        "type": "FlowScope"
       },
       {
        "name": "merging",
        "type": "Function"
       }
      ],
      "name": "caseEquality",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       },
       {
        "name": "blindScope",
        "type": "FlowScope"
       },
       {
        "name": "merging",
        "type": "Function"
       }
      ],
      "name": "caseEquality",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       },
       {
        "name": "blindScope",
        "type": "FlowScope"
       },
       {
        "name": "condition",
        "type": "boolean"
       }
      ],
      "name": "caseAndOrNotShortCircuiting",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       },
       {
        "name": "blindScope",
        "type": "FlowScope"
       },
       {
        "name": "condition",
        "type": "boolean"
       }
      ],
      "name": "caseAndOrMaybeShortCircuiting",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "Node"
       },
       {
        "name": "blindScope",
        "type": "FlowScope"
       },
       {
        "name": "outcome",
        "type": "boolean"
       }
      ],
      "name": "caseNameOrGetProp",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "value",
        "type": "String"
       },
       {
        "name": "resultEqualsValue",
        "type": "boolean"
       },
       {
        "name": "blindScope",
        "type": "FlowScope"
       }
      ],
      "name": "caseTypeOf",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       },
       {
        "name": "blindScope",
        "type": "FlowScope"
       },
       {
        "name": "outcome",
        "type": "boolean"
       }
      ],
      "name": "caseInstanceOf",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "object",
        "type": "Node"
       },
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "blindScope",
        "type": "FlowScope"
       }
      ],
      "name": "caseIn",
      "type": "FlowScope"
     }
    ],
    "fields": [
     {
      "name": "EQ",
      "type": "Function"
     },
     {
      "name": "NE",
      "type": "Function"
     },
     {
      "name": "SHEQ",
      "type": "Function"
     },
     {
      "name": "SHNE",
      "type": "Function"
     },
     {
      "name": "INEQ",
      "type": "Function"
     }
    ],
    "name": "SemanticReverseAbstractInterpreter"
   }
  ]
 },
 {
  "filename": "CodingConvention.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "variableName",
        "type": "String"
       }
      ],
      "name": "isConstant",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "keyName",
        "type": "String"
       }
      ],
      "name": "isConstantKey",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "String"
       }
      ],
      "name": "isValidEnumKey",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parameter",
        "type": "Node"
       }
      ],
      "name": "isOptionalParameter",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parameter",
        "type": "Node"
       }
      ],
      "name": "isVarArgsParameter",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "local",
        "type": "boolean"
       }
      ],
      "name": "isExported",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "isExported",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "isPrivate",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "getClassesDefinedByCall",
      "type": "SubclassRelationship"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "isSuperClassReference",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "extractClassNameIfProvide",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "extractClassNameIfRequire",
      "type": "String"
     },
     {
      "params": [],
      "name": "getExportPropertyFunction",
      "type": "String"
     },
     {
      "params": [],
      "name": "getExportSymbolFunction",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "identifyTypeDeclarationCall",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "parentCtor",
        "type": "FunctionType"
       },
       {
        "name": "childCtor",
        "type": "FunctionType"
       },
       {
        "name": "type",
        "type": "SubclassType"
       }
      ],
      "name": "applySubclassRelationship",
      "type": null
     },
     {
      "params": [],
      "name": "getAbstractMethodName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "getSingletonGetterClassName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "functionType",
        "type": "FunctionType"
       },
       {
        "name": "getterType",
        "type": "FunctionType"
       },
       {
        "name": "objectType",
        "type": "ObjectType"
       }
      ],
      "name": "applySingletonGetter",
      "type": null
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "getDelegateRelationship",
      "type": "DelegateRelationship"
     },
     {
      "params": [
       {
        "name": "delegateSuperclass",
        "type": "ObjectType"
       },
       {
        "name": "delegateBase",
        "type": "ObjectType"
       },
       {
        "name": "delegator",
        "type": "ObjectType"
       },
       {
        "name": "delegateProxy",
        "type": "FunctionType"
       },
       {
        "name": "findDelegate",
        "type": "FunctionType"
       }
      ],
      "name": "applyDelegateRelationship",
      "type": null
     },
     {
      "params": [],
      "name": "getDelegateSuperclassName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "delegateCallingConventions",
        "type": "Map"
       }
      ],
      "name": "checkForCallingConventionDefiningCalls",
      "type": null
     },
     {
      "params": [
       {
        "name": "registry",
        "type": "JSTypeRegistry"
       },
       {
        "name": "scope",
        "type": "Scope"
       },
       {
        "name": "delegateProxyPrototypes",
        "type": "List"
       },
       {
        "name": "delegateCallingConventions",
        "type": "Map"
       }
      ],
      "name": "defineDelegateProxyPrototypeProperties",
      "type": null
     },
     {
      "params": [],
      "name": "getGlobalObject",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "describeFunctionBind",
      "type": "Bind"
     },
     {
      "params": [
       {
        "name": "call",
        "type": "Node"
       }
      ],
      "name": "isPropertyTestFunction",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "getObjectLiteralCast",
      "type": "ObjectLiteralCast"
     },
     {
      "params": [],
      "name": "getAssertionFunctions",
      "type": "Collection"
     }
    ],
    "fields": [],
    "name": "CodingConvention"
   }
  ]
 },
 {
  "filename": "PeepholeFoldWithTypes.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "subtree",
        "type": "Node"
       }
      ],
      "name": "optimizeSubtree",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "typeofNode",
        "type": "Node"
       }
      ],
      "name": "tryFoldTypeof",
      "type": "Node"
     }
    ],
    "fields": [],
    "name": "PeepholeFoldWithTypes"
   }
  ]
 },
 {
  "filename": "CheckProvides.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "scriptRoot",
        "type": "Node"
       },
       {
        "name": "originalRoot",
        "type": "Node"
       }
      ],
      "name": "hotSwapScript",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "checkLevel",
      "type": "CheckLevel"
     },
     {
      "name": "codingConvention",
      "type": "CodingConvention"
     },
     {
      "name": "MISSING_PROVIDE_WARNING",
      "type": "DiagnosticType"
     }
    ],
    "name": "CheckProvides"
   }
  ]
 },
 {
  "filename": "JoinOp.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [],
    "fields": [],
    "name": "JoinOp"
   }
  ]
 },
 {
  "filename": "ConstCheck.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "var",
        "type": "Scope"
       }
      ],
      "name": "isConstant",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "reportError",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "CONST_REASSIGNED_VALUE_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "initializedConstants",
      "type": "Set"
     }
    ],
    "name": "ConstCheck"
   }
  ]
 },
 {
  "filename": "CheckSideEffects.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "USELESS_CODE_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "level",
      "type": "CheckLevel"
     }
    ],
    "name": "CheckSideEffects"
   }
  ]
 },
 {
  "filename": "InlineObjectLiterals.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "VAR_PREFIX",
      "type": "String"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "safeNameIdSupplier",
      "type": "Supplier"
     }
    ],
    "name": "InlineObjectLiterals"
   }
  ]
 },
 {
  "filename": "CodeChangeHandler.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "reportChange",
      "type": null
     }
    ],
    "fields": [],
    "name": "CodeChangeHandler"
   }
  ]
 },
 {
  "filename": "SourceInformationAnnotator.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "setOriginalName",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "sourceFile",
      "type": "String"
     },
     {
      "name": "doSanityChecks",
      "type": "boolean"
     }
    ],
    "name": "SourceInformationAnnotator"
   }
  ]
 },
 {
  "filename": "CrossModuleMethodMotion.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externRoot",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "allNameInfo",
        "type": "Collection"
       }
      ],
      "name": "moveMethods",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "logger",
      "type": "Logger"
     },
     {
      "name": "NULL_COMMON_MODULE_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "idGenerator",
      "type": "IdGenerator"
     },
     {
      "name": "analyzer",
      "type": "AnalyzePrototypeProperties"
     },
     {
      "name": "moduleGraph",
      "type": "JSModuleGraph"
     },
     {
      "name": "STUB_METHOD_NAME",
      "type": "String"
     },
     {
      "name": "UNSTUB_METHOD_NAME",
      "type": "String"
     },
     {
      "name": "STUB_DECLARATIONS",
      "type": "String"
     }
    ],
    "name": "CrossModuleMethodMotion"
   }
  ]
 },
 {
  "filename": "CollapseAnonymousFunctions.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     }
    ],
    "name": "CollapseAnonymousFunctions"
   }
  ]
 },
 {
  "filename": "VariableMap.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       }
      ],
      "name": "lookupNewName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "newName",
        "type": "String"
       }
      ],
      "name": "lookupSourceName",
      "type": "String"
     },
     {
      "params": [],
      "name": "initReverseMap",
      "type": null
     },
     {
      "params": [],
      "name": "getOriginalNameToNewNameMap",
      "type": "Map"
     },
     {
      "params": [],
      "name": "getNewNameToOriginalNameMap",
      "type": "Map"
     },
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "save",
      "type": null
     },
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "load",
      "type": "VariableMap"
     },
     {
      "params": [],
      "name": "toBytes",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "bytes",
        "type": "byte"
       }
      ],
      "name": "fromBytes",
      "type": "VariableMap"
     },
     {
      "params": [
       {
        "name": "map",
        "type": "Map"
       }
      ],
      "name": "fromMap",
      "type": "VariableMap"
     }
    ],
    "fields": [
     {
      "name": "map",
      "type": "Map"
     },
     {
      "name": "reverseMap",
      "type": "Map"
     },
     {
      "name": "SEPARATOR",
      "type": "char"
     }
    ],
    "name": "VariableMap"
   }
  ]
 },
 {
  "filename": "NodeIterators.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [],
    "fields": [],
    "name": "NodeIterators"
   }
  ]
 },
 {
  "filename": "PeepholeSubstituteAlternateSyntax.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "optimizeSubtree",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryFoldImmediateCallToBoundFunction",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "parameterList",
        "type": "Node"
       },
       {
        "name": "after",
        "type": "Node"
       }
      ],
      "name": "addParameterAfter",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryFoldComma",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryReplaceIf",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryReplaceUndefined",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryReduceReturn",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryReplaceExitWithBreak",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryRemoveRedundantExit",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isPure",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "skipFinallyNodes",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "nodeThis",
        "type": "Node"
       },
       {
        "name": "nodeThat",
        "type": "Node"
       }
      ],
      "name": "areMatchingExits",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isExceptionPossible",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getExceptionHandler",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryMinimizeNot",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryMinimizeIf",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryRemoveRepeatedStatements",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isFoldableExpressBlock",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getBlockExpression",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isReturnBlock",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isReturnExpressBlock",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isReturnExpression",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getBlockReturnExpression",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isVarBlock",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getBlockVar",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "consumesDanglingElse",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "precedence",
        "type": "int"
       }
      ],
      "name": "isLowerPrecedenceInExpression",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "precedence",
        "type": "int"
       }
      ],
      "name": "isLowerPrecedence",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "precedence",
        "type": "int"
       }
      ],
      "name": "isHigherPrecedence",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isPropertyAssignmentInExpression",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryMinimizeCondition",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "num",
        "type": "int"
       }
      ],
      "name": "maybeReplaceChildWithNumber",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryFoldStandardConstructors",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryFoldLiteralConstructor",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "arg",
        "type": "Node"
       }
      ],
      "name": "isSafeToFoldArrayConstructor",
      "type": "FoldArrayAction"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryFoldRegularExpressionConstructor",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "reduceTrueFalse",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryMinimizeArrayLiteral",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryMinimizeStringArrayLiteral",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "flags",
        "type": "String"
       }
      ],
      "name": "areValidRegexpFlags",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "flags",
        "type": "String"
       }
      ],
      "name": "areSafeFlagsToFold",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "makeForwardSlashBracketSafe",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "containsUnicodeEscape",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "AND_PRECEDENCE",
      "type": "int"
     },
     {
      "name": "OR_PRECEDENCE",
      "type": "int"
     },
     {
      "name": "NOT_PRECEDENCE",
      "type": "int"
     },
     {
      "name": "late",
      "type": "boolean"
     },
     {
      "name": "STRING_SPLIT_OVERHEAD",
      "type": "int"
     },
     {
      "name": "INVALID_REGULAR_EXPRESSION_FLAGS",
      "type": "DiagnosticType"
     },
     {
      "name": "DONT_TRAVERSE_FUNCTIONS_PREDICATE",
      "type": "Predicate"
     },
     {
      "name": "STANDARD_OBJECT_CONSTRUCTORS",
      "type": "ImmutableSet"
     },
     {
      "name": "REGEXP_FLAGS_RE",
      "type": "Pattern"
     }
    ],
    "name": "PeepholeSubstituteAlternateSyntax"
   }
  ]
 },
 {
  "filename": "JsMessage.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getSourceName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getKey",
      "type": "String"
     },
     {
      "params": [],
      "name": "isAnonymous",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isExternal",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getId",
      "type": "String"
     },
     {
      "params": [],
      "name": "getDesc",
      "type": "String"
     },
     {
      "params": [],
      "name": "getMeaning",
      "type": "String"
     },
     {
      "params": [],
      "name": "isHidden",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "parts",
      "type": "List"
     },
     {
      "params": [],
      "name": "placeholders",
      "type": "Set"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "isEmpty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "o",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "MESSAGE_REPRESENTATION_FORMAT",
      "type": "String"
     },
     {
      "name": "key",
      "type": "String"
     },
     {
      "name": "id",
      "type": "String"
     },
     {
      "name": "parts",
      "type": "List"
     },
     {
      "name": "placeholders",
      "type": "Set"
     },
     {
      "name": "desc",
      "type": "String"
     },
     {
      "name": "hidden",
      "type": "boolean"
     },
     {
      "name": "meaning",
      "type": "String"
     },
     {
      "name": "sourceName",
      "type": "String"
     },
     {
      "name": "isAnonymous",
      "type": "boolean"
     },
     {
      "name": "isExternal",
      "type": "boolean"
     }
    ],
    "name": "JsMessage"
   }
  ]
 },
 {
  "filename": "PeepholeReplaceKnownMethods.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "subtree",
        "type": "Node"
       }
      ],
      "name": "optimizeSubtree",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "subtree",
        "type": "Node"
       }
      ],
      "name": "tryFoldKnownMethods",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "subtree",
        "type": "Node"
       }
      ],
      "name": "tryFoldKnownStringMethods",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "subtree",
        "type": "Node"
       }
      ],
      "name": "tryFoldKnownNumericMethods",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "subtree",
        "type": "Node"
       },
       {
        "name": "stringNode",
        "type": "Node"
       }
      ],
      "name": "tryFoldStringToLowerCase",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "subtree",
        "type": "Node"
       },
       {
        "name": "stringNode",
        "type": "Node"
       }
      ],
      "name": "tryFoldStringToUpperCase",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "input",
        "type": "String"
       }
      ],
      "name": "normalizeNumericString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "functionName",
        "type": "String"
       },
       {
        "name": "firstArg",
        "type": "Node"
       }
      ],
      "name": "tryFoldParseNumber",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "functionName",
        "type": "String"
       },
       {
        "name": "lstringNode",
        "type": "Node"
       },
       {
        "name": "firstArg",
        "type": "Node"
       }
      ],
      "name": "tryFoldStringIndexOf",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryFoldArrayJoin",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "stringNode",
        "type": "Node"
       },
       {
        "name": "arg1",
        "type": "Node"
       }
      ],
      "name": "tryFoldStringSubstr",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "stringNode",
        "type": "Node"
       },
       {
        "name": "arg1",
        "type": "Node"
       }
      ],
      "name": "tryFoldStringSubstring",
      "type": "Node"
     }
    ],
    "fields": [
     {
      "name": "ROOT_LOCALE",
      "type": "Locale"
     }
    ],
    "name": "PeepholeReplaceKnownMethods"
   }
  ]
 },
 {
  "filename": "CoalesceVariableNames.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "enterScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "exitScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "cfg",
        "type": "ControlFlowGraph"
       },
       {
        "name": "escaped",
        "type": "Set"
       }
      ],
      "name": "computeVariableNamesInterferenceGraph",
      "type": "UndiGraph"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "Node"
       }
      ],
      "name": "removeVarDeclaration",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "colorings",
      "type": "Deque"
     },
     {
      "name": "usePseudoNames",
      "type": "boolean"
     },
     {
      "name": "coloringTieBreaker",
      "type": "Comparator"
     }
    ],
    "name": "CoalesceVariableNames"
   }
  ]
 },
 {
  "filename": "CommandLineRunner.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "args",
        "type": "String"
       }
      ],
      "name": "processArgs",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "err",
        "type": "PrintStream"
       }
      ],
      "name": "processFlagFile",
      "type": null
     },
     {
      "params": [
       {
        "name": "args",
        "type": "String"
       },
       {
        "name": "err",
        "type": "PrintStream"
       }
      ],
      "name": "initConfigFromFlags",
      "type": null
     },
     {
      "params": [],
      "name": "createOptions",
      "type": "CompilerOptions"
     },
     {
      "params": [],
      "name": "createCompiler",
      "type": "Compiler"
     },
     {
      "params": [],
      "name": "createExterns",
      "type": "List"
     },
     {
      "params": [],
      "name": "getDefaultExterns",
      "type": "List"
     },
     {
      "params": [],
      "name": "shouldRunCompiler",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "args",
        "type": "String"
       }
      ],
      "name": "main",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "flags",
      "type": "Flags"
     },
     {
      "name": "configResource",
      "type": "String"
     },
     {
      "name": "isConfigValid",
      "type": "boolean"
     },
     {
      "name": "DEFAULT_EXTERNS_NAMES",
      "type": "List"
     }
    ],
    "name": "CommandLineRunner"
   }
  ]
 },
 {
  "filename": "TightenTypes.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getTopScope",
      "type": "ConcreteScope"
     },
     {
      "params": [],
      "name": "getTypeRegistry",
      "type": "JSTypeRegistry"
     },
     {
      "params": [
       {
        "name": "externRoot",
        "type": "Node"
       },
       {
        "name": "jsRoot",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "recvType",
        "type": "ConcreteType"
       },
       {
        "name": "thisType",
        "type": "ConcreteType"
       },
       {
        "name": "argTypes",
        "type": "List"
       }
      ],
      "name": "getFunctionCallAssignments",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "Node"
       },
       {
        "name": "scope",
        "type": "ConcreteScope"
       }
      ],
      "name": "createType",
      "type": "ConcreteType"
     },
     {
      "params": [
       {
        "name": "jsType",
        "type": "JSType"
       }
      ],
      "name": "createType",
      "type": "ConcreteType"
     },
     {
      "params": [
       {
        "name": "jsType",
        "type": "JSType"
       }
      ],
      "name": "createTypeWithSubTypes",
      "type": "ConcreteType"
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "ConcreteScope"
       },
       {
        "name": "expr",
        "type": "Node"
       }
      ],
      "name": "inferConcreteType",
      "type": "ConcreteType"
     },
     {
      "params": [
       {
        "name": "concreteType",
        "type": "ConcreteType"
       },
       {
        "name": "jsType",
        "type": "JSType"
       }
      ],
      "name": "createTypeIntersection",
      "type": "ConcreteType"
     },
     {
      "params": [
       {
        "name": "decl",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "StaticScope"
       }
      ],
      "name": "createConcreteFunction",
      "type": "ConcreteFunctionType"
     },
     {
      "params": [
       {
        "name": "instanceType",
        "type": "ObjectType"
       }
      ],
      "name": "createConcreteInstance",
      "type": "ConcreteInstanceType"
     },
     {
      "params": [
       {
        "name": "decl",
        "type": "Node"
       }
      ],
      "name": "getConcreteFunction",
      "type": "ConcreteFunctionType"
     },
     {
      "params": [
       {
        "name": "functionType",
        "type": "FunctionType"
       }
      ],
      "name": "getConcreteFunction",
      "type": "ConcreteFunctionType"
     },
     {
      "params": [
       {
        "name": "instanceType",
        "type": "ObjectType"
       }
      ],
      "name": "getConcreteInstance",
      "type": "ConcreteInstanceType"
     },
     {
      "params": [
       {
        "name": "decl",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "StaticScope"
       }
      ],
      "name": "createFunctionScope",
      "type": "StaticScope"
     },
     {
      "params": [
       {
        "name": "instanceType",
        "type": "ObjectType"
       }
      ],
      "name": "createInstanceScope",
      "type": "StaticScope"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "ConcreteType"
       }
      ],
      "name": "createUnionWithSubTypes",
      "type": "ConcreteType"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "ConcreteInstanceType"
       }
      ],
      "name": "getSubTypes",
      "type": "Set"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "FunctionType"
       },
       {
        "name": "set",
        "type": "Set"
       }
      ],
      "name": "getSubTypes",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "NON_HALTING_ERROR_MSG",
      "type": "String"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "functionFromDeclaration",
      "type": "Map"
     },
     {
      "name": "functionFromJSType",
      "type": "Map"
     },
     {
      "name": "instanceFromJSType",
      "type": "Map"
     },
     {
      "name": "typeIntersectionMemos",
      "type": "Map"
     },
     {
      "name": "topScope",
      "type": "ConcreteScope"
     },
     {
      "name": "allInstantiatedTypes",
      "type": "Set"
     }
    ],
    "name": "TightenTypes"
   }
  ]
 },
 {
  "filename": "InlineFunctions.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "fnName",
        "type": "String"
       }
      ],
      "name": "getOrCreateFunctionState",
      "type": "FunctionState"
     },
     {
      "params": [
       {
        "name": "specializationState",
        "type": "SpecializeModule"
       }
      ],
      "name": "enableSpecialization",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "fn",
        "type": "Function"
       },
       {
        "name": "module",
        "type": "JSModule"
       }
      ],
      "name": "maybeAddFunction",
      "type": null
     },
     {
      "params": [
       {
        "name": "fnNode",
        "type": "Node"
       }
      ],
      "name": "hasLocalNames",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "getContainingFunction",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "fn",
        "type": "Function"
       }
      ],
      "name": "isCandidateFunction",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "Node"
       }
      ],
      "name": "isCandidateUsage",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "trimCanidatesNotMeetingMinimumRequirements",
      "type": null
     },
     {
      "params": [],
      "name": "trimCanidatesUsingOnCost",
      "type": null
     },
     {
      "params": [
       {
        "name": "fs",
        "type": "FunctionState"
       }
      ],
      "name": "mimimizeCost",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "fs",
        "type": "FunctionState"
       }
      ],
      "name": "inliningLowersCost",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "resolveInlineConflicts",
      "type": null
     },
     {
      "params": [
       {
        "name": "fs",
        "type": "FunctionState"
       }
      ],
      "name": "resolveInlineConflictsForFunction",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "findCalledFunctions",
      "type": "Set"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "changed",
        "type": "Set"
       }
      ],
      "name": "findCalledFunctions",
      "type": null
     },
     {
      "params": [
       {
        "name": "fnNames",
        "type": "Set"
       }
      ],
      "name": "decomposeExpressions",
      "type": null
     },
     {
      "params": [],
      "name": "removeInlinedFunctions",
      "type": null
     },
     {
      "params": [
       {
        "name": "fs",
        "type": "FunctionState"
       }
      ],
      "name": "verifyAllReferencesInlined",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "fns",
      "type": "Map"
     },
     {
      "name": "anonFns",
      "type": "Map"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "injector",
      "type": "FunctionInjector"
     },
     {
      "name": "blockFunctionInliningEnabled",
      "type": "boolean"
     },
     {
      "name": "inlineGlobalFunctions",
      "type": "boolean"
     },
     {
      "name": "inlineLocalFunctions",
      "type": "boolean"
     },
     {
      "name": "specializationState",
      "type": "SpecializeModule"
     }
    ],
    "name": "InlineFunctions"
   }
  ]
 },
 {
  "filename": "AbstractCommandLineRunner.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externsSupplier",
        "type": "Supplier"
       },
       {
        "name": "inputsSupplier",
        "type": "Supplier"
       },
       {
        "name": "modulesSupplier",
        "type": "Supplier"
       },
       {
        "name": "exitCodeReceiver",
        "type": "Function"
       }
      ],
      "name": "enableTestMode",
      "type": null
     },
     {
      "params": [],
      "name": "isInTestMode",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getCommandLineConfig",
      "type": "CommandLineConfig"
     },
     {
      "params": [],
      "name": "createCompiler",
      "type": "A"
     },
     {
      "params": [],
      "name": "createOptions",
      "type": "B"
     },
     {
      "params": [],
      "name": "getDiagnosticGroups",
      "type": "DiagnosticGroups"
     },
     {
      "params": [
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "initOptionsFromFlags",
      "type": null
     },
     {
      "params": [
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "setRunOptions",
      "type": null
     },
     {
      "params": [],
      "name": "getCompiler",
      "type": "A"
     },
     {
      "params": [],
      "name": "run",
      "type": null
     },
     {
      "params": [],
      "name": "getErrorPrintStream",
      "type": "PrintStream"
     },
     {
      "params": [
       {
        "name": "files",
        "type": "List"
       },
       {
        "name": "allowStdIn",
        "type": "boolean"
       }
      ],
      "name": "createInputs",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "files",
        "type": "List"
       }
      ],
      "name": "createSourceInputs",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "files",
        "type": "List"
       }
      ],
      "name": "createExternInputs",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "specs",
        "type": "List"
       },
       {
        "name": "jsFiles",
        "type": "List"
       }
      ],
      "name": "createJsModules",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "checkModuleName",
      "type": null
     },
     {
      "params": [
       {
        "name": "specs",
        "type": "List"
       },
       {
        "name": "modules",
        "type": "List"
       }
      ],
      "name": "parseModuleWrappers",
      "type": "Map"
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "compiler",
        "type": "Compiler"
       },
       {
        "name": "code",
        "type": "String"
       },
       {
        "name": "wrapper",
        "type": "String"
       },
       {
        "name": "codePlaceholder",
        "type": "String"
       }
      ],
      "name": "writeOutput",
      "type": null
     },
     {
      "params": [
       {
        "name": "pathPrefix",
        "type": "String"
       }
      ],
      "name": "maybeCreateDirsForPath",
      "type": null
     },
     {
      "params": [],
      "name": "doRun",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "result",
        "type": "Result"
       },
       {
        "name": "modules",
        "type": "List"
       },
       {
        "name": "options",
        "type": "B"
       }
      ],
      "name": "processResults",
      "type": "int"
     },
     {
      "params": [],
      "name": "getInputCharset",
      "type": "Charset"
     },
     {
      "params": [],
      "name": "getOutputCharset",
      "type": "String"
     },
     {
      "params": [],
      "name": "createExterns",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "options",
        "type": "B"
       }
      ],
      "name": "shouldGenerateMapPerModule",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "options",
        "type": "B"
       },
       {
        "name": "path",
        "type": "String"
       }
      ],
      "name": "openExternExportsStream",
      "type": "Writer"
     },
     {
      "params": [
       {
        "name": "path",
        "type": "String"
       },
       {
        "name": "forModule",
        "type": "JSModule"
       }
      ],
      "name": "expandCommandLinePath",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "options",
        "type": "B"
       },
       {
        "name": "forModule",
        "type": "JSModule"
       }
      ],
      "name": "expandSourceMapPath",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       }
      ],
      "name": "fileNameToOutputWriter",
      "type": "Writer"
     },
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       }
      ],
      "name": "filenameToOutputStream",
      "type": "OutputStream"
     },
     {
      "params": [
       {
        "name": "stream",
        "type": "OutputStream"
       }
      ],
      "name": "streamToOutputWriter",
      "type": "Writer"
     },
     {
      "params": [
       {
        "name": "options",
        "type": "B"
       },
       {
        "name": "associatedName",
        "type": "String"
       }
      ],
      "name": "outputSourceMap",
      "type": null
     },
     {
      "params": [
       {
        "name": "outputFile",
        "type": "String"
       }
      ],
      "name": "getMapPath",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "options",
        "type": "B"
       }
      ],
      "name": "outputNameMaps",
      "type": null
     },
     {
      "params": [
       {
        "name": "definitions",
        "type": "List"
       },
       {
        "name": "options",
        "type": "CompilerOptions"
       },
       {
        "name": "tweaks",
        "type": "boolean"
       }
      ],
      "name": "createDefineOrTweakReplacements",
      "type": null
     },
     {
      "params": [
       {
        "name": "output",
        "type": "String"
       }
      ],
      "name": "shouldGenerateOutputPerModule",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "outputManifest",
      "type": null
     },
     {
      "params": [],
      "name": "outputBundle",
      "type": null
     },
     {
      "params": [
       {
        "name": "outputFiles",
        "type": "List"
       },
       {
        "name": "isManifest",
        "type": "boolean"
       }
      ],
      "name": "outputManifestOrBundle",
      "type": null
     },
     {
      "params": [
       {
        "name": "graph",
        "type": "JSModuleGraph"
       },
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "isManifest",
        "type": "boolean"
       }
      ],
      "name": "printModuleGraphManifestOrBundleTo",
      "type": null
     },
     {
      "params": [
       {
        "name": "inputs",
        "type": "Iterable"
       },
       {
        "name": "out",
        "type": "Appendable"
       }
      ],
      "name": "printManifestTo",
      "type": null
     },
     {
      "params": [
       {
        "name": "inputs",
        "type": "Iterable"
       },
       {
        "name": "out",
        "type": "Appendable"
       }
      ],
      "name": "printBundleTo",
      "type": null
     },
     {
      "params": [],
      "name": "constructRootRelativePathsMap",
      "type": "Map"
     }
    ],
    "fields": [
     {
      "name": "config",
      "type": "CommandLineConfig"
     },
     {
      "name": "jsOutput",
      "type": "Appendable"
     },
     {
      "name": "err",
      "type": "PrintStream"
     },
     {
      "name": "compiler",
      "type": "A"
     },
     {
      "name": "inputCharset",
      "type": "Charset"
     },
     {
      "name": "outputCharset",
      "type": "String"
     },
     {
      "name": "testMode",
      "type": "boolean"
     },
     {
      "name": "externsSupplierForTesting",
      "type": "Supplier"
     },
     {
      "name": "inputsSupplierForTesting",
      "type": "Supplier"
     },
     {
      "name": "modulesSupplierForTesting",
      "type": "Supplier"
     },
     {
      "name": "exitCodeReceiverForTesting",
      "type": "Function"
     },
     {
      "name": "rootRelativePathsMap",
      "type": "Map"
     },
     {
      "name": "NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER",
      "type": "int"
     },
     {
      "name": "OUTPUT_WRAPPER_MARKER",
      "type": "String"
     },
     {
      "name": "runTimeStats",
      "type": "RunTimeStats"
     }
    ],
    "name": "AbstractCommandLineRunner"
   }
  ]
 },
 {
  "filename": "OptimizeArgumentsArray.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "traversal",
        "type": "NodeTraversal"
       }
      ],
      "name": "enterScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "traversal",
        "type": "NodeTraversal"
       }
      ],
      "name": "exitScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "nodeTraversal",
        "type": "NodeTraversal"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "shouldTraverse",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "traversal",
        "type": "NodeTraversal"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "Scope"
       }
      ],
      "name": "tryReplaceArguments",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getNewName",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "ARGUMENTS",
      "type": "String"
     },
     {
      "name": "PARAMETER_PREFIX",
      "type": "String"
     },
     {
      "name": "paramPredix",
      "type": "String"
     },
     {
      "name": "uniqueId",
      "type": "int"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "argumentsAccessStack",
      "type": "Deque"
     },
     {
      "name": "currentArgumentsAccess",
      "type": "List"
     }
    ],
    "name": "OptimizeArgumentsArray"
   }
  ]
 },
 {
  "filename": "AstChangeProxy.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "listener",
        "type": "ChangeListener"
       }
      ],
      "name": "registerListener",
      "type": null
     },
     {
      "params": [
       {
        "name": "listener",
        "type": "ChangeListener"
       }
      ],
      "name": "unregisterListener",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "notifyOfRemoval",
      "type": null
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "removeChild",
      "type": null
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "replacement",
        "type": "Node"
       }
      ],
      "name": "replaceWith",
      "type": null
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "replacements",
        "type": "List"
       }
      ],
      "name": "replaceWith",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "listeners",
      "type": "List"
     }
    ],
    "name": "AstChangeProxy"
   }
  ]
 },
 {
  "filename": "DotFormatter.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "toDot",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "inCFG",
        "type": "ControlFlowGraph"
       },
       {
        "name": "printAnnotations",
        "type": "boolean"
       }
      ],
      "name": "toDot",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "inCFG",
        "type": "ControlFlowGraph"
       }
      ],
      "name": "toDot",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "inCFG",
        "type": "ControlFlowGraph"
       },
       {
        "name": "builder",
        "type": "Appendable"
       }
      ],
      "name": "appendDot",
      "type": null
     },
     {
      "params": [],
      "name": "newInstanceForTesting",
      "type": "DotFormatter"
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "traverseNodes",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "key",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "name",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "Integer"
       }
      ],
      "name": "formatNodeName",
      "type": "String"
     },
     {
      "params": [],
      "name": "formatPreamble",
      "type": null
     },
     {
      "params": [],
      "name": "formatConclusion",
      "type": null
     },
     {
      "params": [
       {
        "name": "graph",
        "type": "GraphvizGraph"
       }
      ],
      "name": "toDot",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "INDENT",
      "type": "String"
     },
     {
      "name": "ARROW",
      "type": "String"
     },
     {
      "name": "LINE",
      "type": "String"
     },
     {
      "name": "assignments",
      "type": "HashMap"
     },
     {
      "name": "keyCount",
      "type": "int"
     },
     {
      "name": "builder",
      "type": "Appendable"
     },
     {
      "name": "cfg",
      "type": "ControlFlowGraph"
     },
     {
      "name": "printAnnotations",
      "type": "boolean"
     }
    ],
    "name": "DotFormatter"
   }
  ]
 },
 {
  "filename": "PerformanceTracker.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getCodeChangeHandler",
      "type": "CodeChangeHandler"
     },
     {
      "params": [
       {
        "name": "passName",
        "type": "String"
       }
      ],
      "name": "recordPassStart",
      "type": null
     },
     {
      "params": [
       {
        "name": "passName",
        "type": "String"
       },
       {
        "name": "result",
        "type": "long"
       }
      ],
      "name": "recordPassStop",
      "type": null
     },
     {
      "params": [
       {
        "name": "oldSize",
        "type": "int"
       },
       {
        "name": "newSize",
        "type": "int"
       },
       {
        "name": "passName",
        "type": "String"
       },
       {
        "name": "record",
        "type": "Map"
       }
      ],
      "name": "recordSizeChange",
      "type": "int"
     },
     {
      "params": [],
      "name": "getRuntimeRecord",
      "type": "ImmutableMap"
     },
     {
      "params": [],
      "name": "getCodeSizeRecord",
      "type": "ImmutableMap"
     },
     {
      "params": [],
      "name": "getZippedCodeSizeRecord",
      "type": "ImmutableMap"
     },
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "estimateCodeSize",
      "type": "CodeSizeEstimatePrinter"
     }
    ],
    "fields": [
     {
      "name": "jsRoot",
      "type": "Node"
     },
     {
      "name": "trackGzippedSize",
      "type": "boolean"
     },
     {
      "name": "codeChange",
      "type": "RecentChange"
     },
     {
      "name": "curCodeSizeEstimate",
      "type": "int"
     },
     {
      "name": "curZippedCodeSizeEstimate",
      "type": "int"
     },
     {
      "name": "currentRunningPass",
      "type": "Deque"
     },
     {
      "name": "runtimeRecord",
      "type": "Map"
     },
     {
      "name": "codeSizeRecord",
      "type": "Map"
     },
     {
      "name": "zippedCodeSizeRecord",
      "type": "Map"
     }
    ],
    "name": "PerformanceTracker"
   }
  ]
 },
 {
  "filename": "MakeDeclaredNamesUnique.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "getContextualRenameInverter",
      "type": "CompilerPass"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "enterScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "exitScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "shouldTraverse",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "oldName",
        "type": "String"
       }
      ],
      "name": "getReplacementName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "renamer",
        "type": "Renamer"
       }
      ],
      "name": "findDeclaredNames",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "ARGUMENTS",
      "type": "String"
     },
     {
      "name": "nameStack",
      "type": "Deque"
     },
     {
      "name": "rootRenamer",
      "type": "Renamer"
     }
    ],
    "name": "MakeDeclaredNamesUnique"
   }
  ]
 },
 {
  "filename": "LiveVariablesAnalysis.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getEscapedLocals",
      "type": "Set"
     },
     {
      "params": [
       {
        "name": "var",
        "type": "String"
       }
      ],
      "name": "getVarIndex",
      "type": "int"
     },
     {
      "params": [],
      "name": "isForward",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "createEntryLattice",
      "type": "LiveVariableLattice"
     },
     {
      "params": [],
      "name": "createInitialEstimateLattice",
      "type": "LiveVariableLattice"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "input",
        "type": "LiveVariableLattice"
       }
      ],
      "name": "flowThrough",
      "type": "LiveVariableLattice"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "gen",
        "type": "BitSet"
       },
       {
        "name": "kill",
        "type": "BitSet"
       },
       {
        "name": "conditional",
        "type": "boolean"
       }
      ],
      "name": "computeGenKill",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "set",
        "type": "BitSet"
       }
      ],
      "name": "addToSetIfLocal",
      "type": null
     },
     {
      "params": [],
      "name": "markAllParametersEscaped",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isArgumentsName",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "ARGUMENT_ARRAY_ALIAS",
      "type": "String"
     },
     {
      "name": "jsScope",
      "type": "Scope"
     },
     {
      "name": "escaped",
      "type": "Set"
     }
    ],
    "name": "LiveVariablesAnalysis"
   }
  ]
 },
 {
  "filename": "CheckPropertyOrder.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isConstructor",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "func",
        "type": "Node"
       },
       {
        "name": "objType",
        "type": "ObjectType"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "funcName",
        "type": "String"
       }
      ],
      "name": "checkConstructor",
      "type": null
     },
     {
      "params": [
       {
        "name": "srcName",
        "type": "String"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "DiagnosticType"
       },
       {
        "name": "args",
        "type": "String"
       }
      ],
      "name": "report",
      "type": null
     },
     {
      "params": [
       {
        "name": "seq",
        "type": "List"
       }
      ],
      "name": "reverse",
      "type": "List"
     }
    ],
    "fields": [
     {
      "name": "UNASSIGNED_PROPERTY",
      "type": "DiagnosticType"
     },
     {
      "name": "UNEQUAL_PROPERTIES",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "level",
      "type": "CheckLevel"
     },
     {
      "name": "onlyOneError",
      "type": "boolean"
     },
     {
      "name": "errorCount",
      "type": "int"
     }
    ],
    "name": "CheckPropertyOrder"
   }
  ]
 },
 {
  "filename": "StripCode.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "enableTweakStripping",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "stripTypes",
      "type": "Set"
     },
     {
      "name": "stripNameSuffixes",
      "type": "Set"
     },
     {
      "name": "stripTypePrefixes",
      "type": "Set"
     },
     {
      "name": "stripNamePrefixes",
      "type": "Set"
     },
     {
      "name": "varsToRemove",
      "type": "Set"
     },
     {
      "name": "STRIP_TYPE_INHERIT_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "STRIP_ASSIGNMENT_ERROR",
      "type": "DiagnosticType"
     }
    ],
    "name": "StripCode"
   }
  ]
 },
 {
  "filename": "UseSite.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "o",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "node",
      "type": "Node"
     },
     {
      "name": "scope",
      "type": "Scope"
     },
     {
      "name": "module",
      "type": "JSModule"
     }
    ],
    "name": "UseSite"
   }
  ]
 },
 {
  "filename": "FunctionInjector.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "fnName",
        "type": "String"
       },
       {
        "name": "fnNode",
        "type": "Node"
       }
      ],
      "name": "doesFunctionMeetMinimumRequirements",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "callNode",
        "type": "Node"
       },
       {
        "name": "fnNode",
        "type": "Node"
       },
       {
        "name": "needAliases",
        "type": "Set"
       },
       {
        "name": "mode",
        "type": "InliningMode"
       },
       {
        "name": "referencesThis",
        "type": "boolean"
       },
       {
        "name": "containsFunctions",
        "type": "boolean"
       }
      ],
      "name": "canInlineReferenceToFunction",
      "type": "CanInlineResult"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "isSupportedCallType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "callNode",
        "type": "Node"
       },
       {
        "name": "fnName",
        "type": "String"
       },
       {
        "name": "fnNode",
        "type": "Node"
       },
       {
        "name": "mode",
        "type": "InliningMode"
       }
      ],
      "name": "inline",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       },
       {
        "name": "fnNode",
        "type": "Node"
       }
      ],
      "name": "inlineReturnValue",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "classifyCallSite",
      "type": "CallSiteType"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       },
       {
        "name": "fnNode",
        "type": "Node"
       },
       {
        "name": "fnName",
        "type": "String"
       }
      ],
      "name": "inlineFunction",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "fnNode",
        "type": "Node"
       }
      ],
      "name": "isDirectCallNodeReplacementPossible",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "callNode",
        "type": "Node"
       },
       {
        "name": "fnNode",
        "type": "Node"
       },
       {
        "name": "namesToAlias",
        "type": "Set"
       }
      ],
      "name": "canInlineReferenceAsStatementBlock",
      "type": "CanInlineResult"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "callNode",
        "type": "Node"
       },
       {
        "name": "fnNode",
        "type": "Node"
       },
       {
        "name": "namesToAlias",
        "type": "Set"
       }
      ],
      "name": "callMeetsBlockInliningRequirements",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       },
       {
        "name": "fnNode",
        "type": "Node"
       }
      ],
      "name": "canInlineReferenceDirectly",
      "type": "CanInlineResult"
     },
     {
      "params": [],
      "name": "getUniqueResultName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "fnModule",
        "type": "JSModule"
       },
       {
        "name": "fnNode",
        "type": "Node"
       },
       {
        "name": "refs",
        "type": "Collection"
       },
       {
        "name": "namesToAlias",
        "type": "Set"
       },
       {
        "name": "isRemovable",
        "type": "boolean"
       },
       {
        "name": "referencesThis",
        "type": "boolean"
       }
      ],
      "name": "inliningLowersCost",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "fnNode",
        "type": "Node"
       },
       {
        "name": "callCost",
        "type": "int"
       },
       {
        "name": "directInlines",
        "type": "int"
       },
       {
        "name": "costDeltaDirect",
        "type": "int"
       },
       {
        "name": "blockInlines",
        "type": "int"
       },
       {
        "name": "costDeltaBlock",
        "type": "int"
       },
       {
        "name": "removable",
        "type": "boolean"
       }
      ],
      "name": "doesLowerCost",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "fnNode",
        "type": "Node"
       },
       {
        "name": "referencesThis",
        "type": "boolean"
       }
      ],
      "name": "estimateCallCost",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "fnNode",
        "type": "Node"
       },
       {
        "name": "namesToAlias",
        "type": "Set"
       },
       {
        "name": "mode",
        "type": "InliningMode"
       }
      ],
      "name": "inlineCostDelta",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "knownConstants",
        "type": "Set"
       }
      ],
      "name": "setKnownConstants",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "safeNameIdSupplier",
      "type": "Supplier"
     },
     {
      "name": "allowDecomposition",
      "type": "boolean"
     },
     {
      "name": "knownConstants",
      "type": "Set"
     },
     {
      "name": "assumeStrictThis",
      "type": "boolean"
     },
     {
      "name": "NAME_COST_ESTIMATE",
      "type": "int"
     },
     {
      "name": "COMMA_COST",
      "type": "int"
     },
     {
      "name": "PAREN_COST",
      "type": "int"
     }
    ],
    "name": "FunctionInjector"
   }
  ]
 },
 {
  "filename": "ReplaceIdGenerators.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [],
      "name": "getIdGeneratorMap",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "NON_GLOBAL_ID_GENERATOR_CALL",
      "type": "DiagnosticType"
     },
     {
      "name": "CONDITIONAL_ID_GENERATOR_CALL",
      "type": "DiagnosticType"
     },
     {
      "name": "CONFLICTING_GENERATOR_TYPE",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "nameGenerators",
      "type": "Map"
     },
     {
      "name": "consistNameGenerators",
      "type": "Map"
     },
     {
      "name": "consistNameMap",
      "type": "Map"
     },
     {
      "name": "idGeneratorMaps",
      "type": "Map"
     }
    ],
    "name": "ReplaceIdGenerators"
   }
  ]
 },
 {
  "filename": "ControlFlowGraph.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getImplicitReturn",
      "type": "DiGraphNode"
     },
     {
      "params": [],
      "name": "getEntry",
      "type": "DiGraphNode"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "DiGraphNode"
       }
      ],
      "name": "isImplicitReturn",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "srcValue",
        "type": "N"
       },
       {
        "name": "edgeValue",
        "type": "Branch"
       }
      ],
      "name": "connectToImplicitReturn",
      "type": null
     },
     {
      "params": [
       {
        "name": "isForward",
        "type": "boolean"
       }
      ],
      "name": "getOptionalNodeComparator",
      "type": "Comparator"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isEnteringNewCfgNode",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "implicitReturn",
      "type": "DiGraphNode"
     },
     {
      "name": "entry",
      "type": "DiGraphNode"
     }
    ],
    "name": "ControlFlowGraph"
   }
  ]
 },
 {
  "filename": "NameGenerator.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "chars",
        "type": "char"
       },
       {
        "name": "reservedCharacters",
        "type": "char"
       }
      ],
      "name": "reserveCharacters",
      "type": "char"
     },
     {
      "params": [
       {
        "name": "prefix",
        "type": "String"
       }
      ],
      "name": "checkPrefix",
      "type": null
     },
     {
      "params": [
       {
        "name": "arr",
        "type": "char"
       },
       {
        "name": "c",
        "type": "char"
       }
      ],
      "name": "contains",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "generateNextName",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "FIRST_CHAR",
      "type": "char"
     },
     {
      "name": "NONFIRST_CHAR",
      "type": "char"
     },
     {
      "name": "reservedNames",
      "type": "Set"
     },
     {
      "name": "prefix",
      "type": "String"
     },
     {
      "name": "nameCount",
      "type": "int"
     },
     {
      "name": "firstChars",
      "type": "char"
     },
     {
      "name": "nonFirstChars",
      "type": "char"
     }
    ],
    "name": "NameGenerator"
   }
  ]
 },
 {
  "filename": "PeepholeRemoveDeadCode.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "subtree",
        "type": "Node"
       }
      ],
      "name": "optimizeSubtree",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryFoldTry",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "subtree",
        "type": "Node"
       }
      ],
      "name": "tryFoldAssignment",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "subtree",
        "type": "Node"
       }
      ],
      "name": "tryFoldExpr",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "trySimplifyUnusedResult",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "removeUnused",
        "type": "boolean"
       }
      ],
      "name": "trySimplifyUnusedResult",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryOptimizeSwitch",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryOptimizeDefaultCase",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "switchNode",
        "type": "Node"
       },
       {
        "name": "caseNode",
        "type": "Node"
       }
      ],
      "name": "removeCase",
      "type": null
     },
     {
      "params": [
       {
        "name": "caseNode",
        "type": "Node"
       },
       {
        "name": "previousCase",
        "type": "Node"
       }
      ],
      "name": "isUselessCase",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isExit",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryFoldComma",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryOptimizeBlock",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryOptimizeConditionalAfterAssign",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isSimpleAssignment",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getSimpleAssignmentName",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getSimpleAssignmentValue",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isConditionalStatement",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isExprConditional",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getConditionalStatementCondition",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryFoldIf",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryFoldHook",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryFoldWhile",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryFoldFor",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "tryFoldDo",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "hasBreakOrContinue",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "forCondition",
        "type": "Node"
       }
      ],
      "name": "tryFoldForCondition",
      "type": null
     }
    ],
    "fields": [],
    "name": "PeepholeRemoveDeadCode"
   }
  ]
 },
 {
  "filename": "DefinitionProvider.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "useSite",
        "type": "Node"
       }
      ],
      "name": "getDefinitionsReferencedAt",
      "type": "Collection"
     }
    ],
    "fields": [],
    "name": "DefinitionProvider"
   }
  ]
 },
 {
  "filename": "FlowScope.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "createChildFlowScope",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "symbol",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "inferSlotType",
      "type": null
     },
     {
      "params": [
       {
        "name": "symbol",
        "type": "String"
       },
       {
        "name": "bottomType",
        "type": "JSType"
       },
       {
        "name": "inferredType",
        "type": "JSType"
       }
      ],
      "name": "inferQualifiedSlot",
      "type": null
     },
     {
      "params": [],
      "name": "optimize",
      "type": "FlowScope"
     },
     {
      "params": [
       {
        "name": "blindScope",
        "type": "FlowScope"
       }
      ],
      "name": "findUniqueRefinedSlot",
      "type": "StaticSlot"
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "Scope"
       }
      ],
      "name": "completeScope",
      "type": null
     }
    ],
    "fields": [],
    "name": "FlowScope"
   }
  ]
 },
 {
  "filename": "RemoveUnusedPrototypeProperties.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "state",
        "type": "SpecializeModule"
       }
      ],
      "name": "enableSpecialization",
      "type": null
     },
     {
      "params": [
       {
        "name": "externRoot",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "allNameInfo",
        "type": "Collection"
       }
      ],
      "name": "removeUnusedSymbols",
      "type": null
     },
     {
      "params": [
       {
        "name": "symbol",
        "type": "Symbol"
       }
      ],
      "name": "getSpecializableFunctionFromSymbol",
      "type": "Node"
     }
    ],
    "fields": [
     {
      "name": "logger",
      "type": "Logger"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "canModifyExterns",
      "type": "boolean"
     },
     {
      "name": "anchorUnusedVars",
      "type": "boolean"
     },
     {
      "name": "specializationState",
      "type": "SpecializeModule"
     }
    ],
    "name": "RemoveUnusedPrototypeProperties"
   }
  ]
 },
 {
  "filename": "PrintStreamErrorManager.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       },
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "println",
      "type": null
     },
     {
      "params": [
       {
        "name": "summaryDetailLevel",
        "type": "int"
       }
      ],
      "name": "setSummaryDetailLevel",
      "type": null
     },
     {
      "params": [],
      "name": "printSummary",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "formatter",
      "type": "MessageFormatter"
     },
     {
      "name": "stream",
      "type": "PrintStream"
     },
     {
      "name": "summaryDetailLevel",
      "type": "int"
     }
    ],
    "name": "PrintStreamErrorManager"
   }
  ]
 },
 {
  "filename": "ScopedAliases.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       },
       {
        "name": "originalRoot",
        "type": "Node"
       }
      ],
      "name": "hotSwapScript",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "SCOPING_METHOD_NAME",
      "type": "String"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "preprocessorSymbolTable",
      "type": "PreprocessorSymbolTable"
     },
     {
      "name": "transformationHandler",
      "type": "AliasTransformationHandler"
     },
     {
      "name": "GOOG_SCOPE_USED_IMPROPERLY",
      "type": "DiagnosticType"
     },
     {
      "name": "GOOG_SCOPE_HAS_BAD_PARAMETERS",
      "type": "DiagnosticType"
     },
     {
      "name": "GOOG_SCOPE_REFERENCES_THIS",
      "type": "DiagnosticType"
     },
     {
      "name": "GOOG_SCOPE_USES_RETURN",
      "type": "DiagnosticType"
     },
     {
      "name": "GOOG_SCOPE_USES_THROW",
      "type": "DiagnosticType"
     },
     {
      "name": "GOOG_SCOPE_ALIAS_REDEFINED",
      "type": "DiagnosticType"
     },
     {
      "name": "GOOG_SCOPE_NON_ALIAS_LOCAL",
      "type": "DiagnosticType"
     }
    ],
    "name": "ScopedAliases"
   }
  ]
 },
 {
  "filename": "Strings.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "string",
        "type": "String"
       }
      ],
      "name": "isEmpty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "string",
        "type": "String"
       }
      ],
      "name": "makeSafe",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "string",
        "type": "String"
       },
       {
        "name": "count",
        "type": "int"
       }
      ],
      "name": "repeat",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "source",
        "type": "String"
       },
       {
        "name": "maxLength",
        "type": "int"
       },
       {
        "name": "addEllipsis",
        "type": "boolean"
       }
      ],
      "name": "truncateAtMaxLength",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "str",
        "type": "String"
       },
       {
        "name": "index",
        "type": "int"
       }
      ],
      "name": "unicodePreservingIndex",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "str",
        "type": "String"
       },
       {
        "name": "begin",
        "type": "int"
       },
       {
        "name": "end",
        "type": "int"
       }
      ],
      "name": "unicodePreservingSubstring",
      "type": "String"
     }
    ],
    "fields": [],
    "name": "Strings"
   }
  ]
 },
 {
  "filename": "GatherSideEffectSubexpressionsCallback.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "callNode",
        "type": "Node"
       }
      ],
      "name": "isClassDefiningCall",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "traversal",
        "type": "NodeTraversal"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "shouldTraverse",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "processShortCircuitExpression",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "processHook",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "processFunctionCall",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "processConstructorCall",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "traversal",
        "type": "NodeTraversal"
       },
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "visit",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "FORBIDDEN_TYPES",
      "type": "Set"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "accumulator",
      "type": "SideEffectAccumulator"
     }
    ],
    "name": "GatherSideEffectSubexpressionsCallback"
   }
  ]
 },
 {
  "filename": "ShowByPathWarningsGuard.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "level",
      "type": "CheckLevel"
     },
     {
      "params": [],
      "name": "getPriority",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "paths",
      "type": "String"
     },
     {
      "name": "showType",
      "type": "ShowType"
     }
    ],
    "name": "ShowByPathWarningsGuard"
   }
  ]
 },
 {
  "filename": "NameAnalyzer.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "fromName",
        "type": "String"
       },
       {
        "name": "toName",
        "type": "String"
       }
      ],
      "name": "recordAlias",
      "type": null
     },
     {
      "params": [
       {
        "name": "fromName",
        "type": "String"
       },
       {
        "name": "toName",
        "type": "String"
       },
       {
        "name": "depType",
        "type": "RefType"
       }
      ],
      "name": "recordReference",
      "type": null
     },
     {
      "params": [],
      "name": "removeUnreferenced",
      "type": null
     },
     {
      "params": [],
      "name": "getHtmlReport",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "sb",
        "type": "StringBuilder"
       },
       {
        "name": "text",
        "type": "String"
       }
      ],
      "name": "appendListItem",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "nameLink",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "nameAnchor",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "canCreate",
        "type": "boolean"
       }
      ],
      "name": "getName",
      "type": "JsName"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "createName",
      "type": null
     },
     {
      "params": [],
      "name": "referenceAliases",
      "type": null
     },
     {
      "params": [],
      "name": "referenceParentNames",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "createNameInformation",
      "type": "NameInformation"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "scope",
        "type": "Scope"
       },
       {
        "name": "rootNameNode",
        "type": "Node"
       }
      ],
      "name": "createNameInformation",
      "type": "NameInformation"
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "Scope"
       },
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "isExternallyReferenceable",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getDependencyScope",
      "type": "NameInformation"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "NodeTraversal"
       }
      ],
      "name": "getEnclosingFunctionDependencyScope",
      "type": "NameInformation"
     },
     {
      "params": [],
      "name": "calculateReferences",
      "type": null
     },
     {
      "params": [
       {
        "name": "isClass",
        "type": "TriState"
       },
       {
        "name": "referenced",
        "type": "TriState"
       }
      ],
      "name": "countOf",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getSideEffectNodes",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "replaceWithRhs",
      "type": null
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "replaceTopLevelExpressionWithRhs",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "valueConsumedByParent",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "replacements",
        "type": "List"
       }
      ],
      "name": "collapseReplacements",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getRhsSubexpressions",
      "type": "List"
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "allNames",
      "type": "Map"
     },
     {
      "name": "referenceGraph",
      "type": "DiGraph"
     },
     {
      "name": "scopes",
      "type": "Map"
     },
     {
      "name": "PROTOTYPE_SUBSTRING",
      "type": "String"
     },
     {
      "name": "PROTOTYPE_SUBSTRING_LEN",
      "type": "int"
     },
     {
      "name": "PROTOTYPE_SUFFIX_LEN",
      "type": "int"
     },
     {
      "name": "WINDOW",
      "type": "String"
     },
     {
      "name": "FUNCTION",
      "type": "String"
     },
     {
      "name": "DEFAULT_GLOBAL_NAMES",
      "type": "Set"
     },
     {
      "name": "removeUnreferenced",
      "type": "boolean"
     },
     {
      "name": "globalNames",
      "type": "Set"
     },
     {
      "name": "changeProxy",
      "type": "AstChangeProxy"
     },
     {
      "name": "externalNames",
      "type": "Set"
     },
     {
      "name": "refNodes",
      "type": "List"
     },
     {
      "name": "aliases",
      "type": "Map"
     },
     {
      "name": "NON_LOCAL_RESULT_PREDICATE",
      "type": "Predicate"
     }
    ],
    "name": "NameAnalyzer"
   }
  ]
 },
 {
  "filename": "DevirtualizePrototypeMethods.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "state",
        "type": "SpecializeModule"
       }
      ],
      "name": "enableSpecialization",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "externs",
        "type": "Node"
       },
       {
        "name": "root",
        "type": "Node"
       },
       {
        "name": "definitions",
        "type": "SimpleDefinitionFinder"
       }
      ],
      "name": "process",
      "type": null
     },
     {
      "params": [
       {
        "name": "site",
        "type": "UseSite"
       }
      ],
      "name": "isCall",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "isPrototypeMethodDefinition",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "orginalMethodName",
        "type": "String"
       }
      ],
      "name": "getRewrittenMethodName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "defSite",
        "type": "DefinitionSite"
       },
       {
        "name": "defFinder",
        "type": "SimpleDefinitionFinder"
       }
      ],
      "name": "rewriteDefinitionIfEligible",
      "type": null
     },
     {
      "params": [
       {
        "name": "defFinder",
        "type": "SimpleDefinitionFinder"
       },
       {
        "name": "definitionSite",
        "type": "DefinitionSite"
       }
      ],
      "name": "isEligibleDefinition",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "defFinder",
        "type": "SimpleDefinitionFinder"
       },
       {
        "name": "definition",
        "type": "Definition"
       },
       {
        "name": "newMethodName",
        "type": "String"
       }
      ],
      "name": "rewriteCallSites",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "newMethodName",
        "type": "String"
       }
      ],
      "name": "rewriteDefinition",
      "type": null
     },
     {
      "params": [
       {
        "name": "functionNode",
        "type": "Node"
       }
      ],
      "name": "fixFunctionType",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "replaceReferencesToThis",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "specializationState",
      "type": "SpecializeModule"
     }
    ],
    "name": "DevirtualizePrototypeMethods"
   }
  ]
 },
 {
  "filename": "TypedScopeCreator.java",
  "package_name": "com.google.javascript.jscomp",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       },
       {
        "name": "parent",
        "type": "Scope"
       }
      ],
      "name": "createScope",
      "type": "Scope"
     },
     {
      "params": [
       {
        "name": "globalScope",
        "type": "Scope"
       },
       {
        "name": "scriptRoot",
        "type": "Node"
       }
      ],
      "name": "patchGlobalScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "createInitialScope",
      "type": "Scope"
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "Scope"
       },
       {
        "name": "tId",
        "type": "JSTypeNative"
       }
      ],
      "name": "declareNativeFunctionType",
      "type": null
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "Scope"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "tId",
        "type": "JSTypeNative"
       }
      ],
      "name": "declareNativeValueType",
      "type": null
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "Scope"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "t",
        "type": "JSType"
       }
      ],
      "name": "declareNativeType",
      "type": null
     },
     {
      "params": [
       {
        "name": "nativeType",
        "type": "JSTypeNative"
       }
      ],
      "name": "getNativeType",
      "type": "JSType"
     }
    ],
    "fields": [
     {
      "name": "DELEGATE_PROXY_SUFFIX",
      "type": "String"
     },
     {
      "name": "MALFORMED_TYPEDEF",
      "type": "DiagnosticType"
     },
     {
      "name": "ENUM_INITIALIZER",
      "type": "DiagnosticType"
     },
     {
      "name": "CTOR_INITIALIZER",
      "type": "DiagnosticType"
     },
     {
      "name": "IFACE_INITIALIZER",
      "type": "DiagnosticType"
     },
     {
      "name": "CONSTRUCTOR_EXPECTED",
      "type": "DiagnosticType"
     },
     {
      "name": "UNKNOWN_LENDS",
      "type": "DiagnosticType"
     },
     {
      "name": "LENDS_ON_NON_OBJECT",
      "type": "DiagnosticType"
     },
     {
      "name": "compiler",
      "type": "AbstractCompiler"
     },
     {
      "name": "typeParsingErrorReporter",
      "type": "ErrorReporter"
     },
     {
      "name": "validator",
      "type": "TypeValidator"
     },
     {
      "name": "codingConvention",
      "type": "CodingConvention"
     },
     {
      "name": "typeRegistry",
      "type": "JSTypeRegistry"
     },
     {
      "name": "delegateProxyPrototypes",
      "type": "List"
     },
     {
      "name": "delegateCallingConventions",
      "type": "Map"
     }
    ],
    "name": "TypedScopeCreator"
   }
  ]
 },
 {
  "filename": "JsDocTokenStream.java",
  "package_name": "com.google.javascript.jscomp.parsing",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getJsDocToken",
      "type": "JsDocToken"
     },
     {
      "params": [],
      "name": "getRemainingJSDocLine",
      "type": "String"
     },
     {
      "params": [],
      "name": "getLineno",
      "type": "int"
     },
     {
      "params": [],
      "name": "getCharno",
      "type": "int"
     },
     {
      "params": [],
      "name": "getString",
      "type": "String"
     },
     {
      "params": [],
      "name": "eof",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getStringFromBuffer",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "int"
       }
      ],
      "name": "addToString",
      "type": null
     },
     {
      "params": [
       {
        "name": "c",
        "type": "int"
       }
      ],
      "name": "ungetChar",
      "type": null
     },
     {
      "params": [
       {
        "name": "test",
        "type": "int"
       }
      ],
      "name": "matchChar",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "int"
       }
      ],
      "name": "isAlpha",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "int"
       }
      ],
      "name": "isJSDocString",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "int"
       }
      ],
      "name": "isJSSpace",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "int"
       }
      ],
      "name": "isJSFormatChar",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "update",
      "type": null
     },
     {
      "params": [],
      "name": "peekChar",
      "type": "int"
     },
     {
      "params": [],
      "name": "getChar",
      "type": "int"
     },
     {
      "params": [],
      "name": "getCharIgnoreLineEnd",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "int"
       }
      ],
      "name": "ungetCharIgnoreLineEnd",
      "type": null
     },
     {
      "params": [],
      "name": "getOffset",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "EOF_CHAR",
      "type": "int"
     },
     {
      "name": "string",
      "type": "String"
     },
     {
      "name": "stringBuffer",
      "type": "char"
     },
     {
      "name": "stringBufferTop",
      "type": "int"
     },
     {
      "name": "ungetBuffer",
      "type": "int"
     },
     {
      "name": "ungetCursor",
      "type": "int"
     },
     {
      "name": "hitEOF",
      "type": "boolean"
     },
     {
      "name": "lineStart",
      "type": "int"
     },
     {
      "name": "lineEndChar",
      "type": "int"
     },
     {
      "name": "lineno",
      "type": "int"
     },
     {
      "name": "charno",
      "type": "int"
     },
     {
      "name": "initCharno",
      "type": "int"
     },
     {
      "name": "initLineno",
      "type": "int"
     },
     {
      "name": "sourceString",
      "type": "String"
     },
     {
      "name": "sourceEnd",
      "type": "int"
     },
     {
      "name": "sourceCursor",
      "type": "int"
     },
     {
      "name": "cursor",
      "type": "int"
     },
     {
      "name": "tokenBeg",
      "type": "int"
     },
     {
      "name": "tokenEnd",
      "type": "int"
     }
    ],
    "name": "JsDocTokenStream"
   }
  ]
 },
 {
  "filename": "Annotation.java",
  "package_name": "com.google.javascript.jscomp.parsing",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "recognizedAnnotations",
      "type": "Map"
     }
    ],
    "name": "Annotation"
   }
  ]
 },
 {
  "filename": "ParserRunner.java",
  "package_name": "com.google.javascript.jscomp.parsing",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "isIdeMode",
        "type": "boolean"
       }
      ],
      "name": "createConfig",
      "type": "Config"
     },
     {
      "params": [
       {
        "name": "isIdeMode",
        "type": "boolean"
       },
       {
        "name": "languageMode",
        "type": "LanguageMode"
       },
       {
        "name": "acceptConstKeyword",
        "type": "boolean"
       }
      ],
      "name": "createConfig",
      "type": "Config"
     },
     {
      "params": [
       {
        "name": "isIdeMode",
        "type": "boolean"
       },
       {
        "name": "languageMode",
        "type": "LanguageMode"
       },
       {
        "name": "acceptConstKeyword",
        "type": "boolean"
       },
       {
        "name": "extraAnnotationNames",
        "type": "Set"
       }
      ],
      "name": "createConfig",
      "type": "Config"
     },
     {
      "params": [],
      "name": "initResourceConfig",
      "type": null
     },
     {
      "params": [
       {
        "name": "configProp",
        "type": "String"
       }
      ],
      "name": "extractList",
      "type": "Set"
     },
     {
      "params": [
       {
        "name": "sourceFile",
        "type": "StaticSourceFile"
       },
       {
        "name": "sourceString",
        "type": "String"
       },
       {
        "name": "config",
        "type": "Config"
       },
       {
        "name": "errorReporter",
        "type": "ErrorReporter"
       },
       {
        "name": "logger",
        "type": "Logger"
       }
      ],
      "name": "parse",
      "type": "Node"
     }
    ],
    "fields": [
     {
      "name": "configResource",
      "type": "String"
     },
     {
      "name": "annotationNames",
      "type": "Set"
     },
     {
      "name": "suppressionNames",
      "type": "Set"
     }
    ],
    "name": "ParserRunner"
   }
  ]
 },
 {
  "filename": "JsDocToken.java",
  "package_name": "com.google.javascript.jscomp.parsing",
  "classes": [
   {
    "methods": [],
    "fields": [],
    "name": "JsDocToken"
   }
  ]
 },
 {
  "filename": "JsDocInfoParser.java",
  "package_name": "com.google.javascript.jscomp.parsing",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "fileLevelJsDocBuilder",
        "type": "Node"
       }
      ],
      "name": "setFileLevelJsDocBuilder",
      "type": null
     },
     {
      "params": [
       {
        "name": "fileOverviewJSDocInfo",
        "type": "JSDocInfo"
       }
      ],
      "name": "setFileOverviewJSDocInfo",
      "type": null
     },
     {
      "params": [
       {
        "name": "typeString",
        "type": "String"
       }
      ],
      "name": "parseTypeString",
      "type": "Node"
     },
     {
      "params": [],
      "name": "parse",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "extendedTypes",
        "type": "List"
       }
      ],
      "name": "checkExtendedTypes",
      "type": null
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseSuppressTag",
      "type": "JsDocToken"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseModifiesTag",
      "type": "JsDocToken"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseAndRecordTypeNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       },
       {
        "name": "matchingLC",
        "type": "boolean"
       }
      ],
      "name": "parseAndRecordTypeNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "startCharno",
        "type": "int"
       },
       {
        "name": "matchingLC",
        "type": "boolean"
       }
      ],
      "name": "parseAndRecordTypeNameNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseAndRecordParamTypeNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "startCharno",
        "type": "int"
       },
       {
        "name": "matchingLC",
        "type": "boolean"
       },
       {
        "name": "onlyParseSimpleNames",
        "type": "boolean"
       }
      ],
      "name": "parseAndRecordTypeNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "createJSTypeExpression",
      "type": "JSTypeExpression"
     },
     {
      "params": [],
      "name": "extractSingleLineBlock",
      "type": "ExtractionInfo"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "extractMultilineTextualBlock",
      "type": "ExtractionInfo"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       },
       {
        "name": "option",
        "type": "WhitespaceOption"
       }
      ],
      "name": "extractMultilineTextualBlock",
      "type": "ExtractionInfo"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "extractBlockComment",
      "type": "ExtractionInfo"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "trimEnd",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseTypeExpressionAnnotation",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseParamTypeExpressionAnnotation",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseTypeNameAnnotation",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseTopLevelTypeExpression",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseTypeExpressionList",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseTypeExpression",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseBasicTypeExpression",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseTypeName",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseFunctionType",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseParametersType",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseResultType",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseUnionType",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       },
       {
        "name": "alternate",
        "type": "Node"
       }
      ],
      "name": "parseUnionTypeWithAlternate",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseArrayType",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseRecordType",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseFieldTypeList",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseFieldType",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "parseFieldName",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "int"
       },
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "wrapNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "int"
       }
      ],
      "name": "newNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "newStringNode",
      "type": "Node"
     },
     {
      "params": [],
      "name": "createTemplateNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "warning",
        "type": "String"
       }
      ],
      "name": "reportTypeSyntaxWarning",
      "type": "Node"
     },
     {
      "params": [],
      "name": "reportGenericTypeSyntaxWarning",
      "type": "Node"
     },
     {
      "params": [],
      "name": "eatTokensUntilEOL",
      "type": "JsDocToken"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "eatTokensUntilEOL",
      "type": "JsDocToken"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "restoreLookAhead",
      "type": null
     },
     {
      "params": [
       {
        "name": "token",
        "type": "JsDocToken"
       }
      ],
      "name": "match",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "token1",
        "type": "JsDocToken"
       },
       {
        "name": "token2",
        "type": "JsDocToken"
       }
      ],
      "name": "match",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "next",
      "type": "JsDocToken"
     },
     {
      "params": [],
      "name": "current",
      "type": "JsDocToken"
     },
     {
      "params": [],
      "name": "skipEOLs",
      "type": null
     },
     {
      "params": [],
      "name": "hasParsedFileOverviewDocInfo",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hasParsedJSDocInfo",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "retrieveAndResetParsedJSDocInfo",
      "type": "JSDocInfo"
     },
     {
      "params": [],
      "name": "getFileOverviewJSDocInfo",
      "type": "JSDocInfo"
     },
     {
      "params": [],
      "name": "lookAheadForTypeAnnotation",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "stream",
      "type": "JsDocTokenStream"
     },
     {
      "name": "jsdocBuilder",
      "type": "JSDocInfoBuilder"
     },
     {
      "name": "sourceName",
      "type": "String"
     },
     {
      "name": "associatedNode",
      "type": "Node"
     },
     {
      "name": "errorReporter",
      "type": "ErrorReporter"
     },
     {
      "name": "parser",
      "type": "ErrorReporterParser"
     },
     {
      "name": "templateNode",
      "type": "Node"
     },
     {
      "name": "fileOverviewJSDocInfo",
      "type": "JSDocInfo"
     },
     {
      "name": "state",
      "type": "State"
     },
     {
      "name": "annotationNames",
      "type": "Map"
     },
     {
      "name": "suppressionNames",
      "type": "Set"
     },
     {
      "name": "modifiesAnnotationKeywords",
      "type": "Set"
     },
     {
      "name": "fileLevelJsDocBuilder",
      "type": "Node"
     },
     {
      "name": "NO_UNREAD_TOKEN",
      "type": "JsDocToken"
     },
     {
      "name": "unreadToken",
      "type": "JsDocToken"
     }
    ],
    "name": "JsDocInfoParser"
   }
  ]
 },
 {
  "filename": "Config.java",
  "package_name": "com.google.javascript.jscomp.parsing",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "annotationWhitelist",
        "type": "Set"
       }
      ],
      "name": "buildAnnotationNames",
      "type": "Map"
     }
    ],
    "fields": [
     {
      "name": "parseJsDocDocumentation",
      "type": "boolean"
     },
     {
      "name": "isIdeMode",
      "type": "boolean"
     },
     {
      "name": "annotationNames",
      "type": "Map"
     },
     {
      "name": "suppressionNames",
      "type": "Set"
     },
     {
      "name": "languageMode",
      "type": "LanguageMode"
     },
     {
      "name": "acceptConstKeyword",
      "type": "boolean"
     }
    ],
    "name": "Config"
   }
  ]
 },
 {
  "filename": "IRFactory.java",
  "package_name": "com.google.javascript.jscomp.parsing",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "createTemplateNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "AstRoot"
       },
       {
        "name": "sourceFile",
        "type": "StaticSourceFile"
       },
       {
        "name": "sourceString",
        "type": "String"
       },
       {
        "name": "config",
        "type": "Config"
       },
       {
        "name": "errorReporter",
        "type": "ErrorReporter"
       }
      ],
      "name": "transformTree",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "irNode",
        "type": "Node"
       }
      ],
      "name": "setFileOverviewJsDoc",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "AstNode"
       }
      ],
      "name": "transformBlock",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "comment",
        "type": "Comment"
       }
      ],
      "name": "handleBlockComment",
      "type": null
     },
     {
      "params": [
       {
        "name": "jsDocParser",
        "type": "JsDocInfoParser"
       }
      ],
      "name": "handlePossibleFileOverviewJsDoc",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "comment",
        "type": "Comment"
       },
       {
        "name": "irNode",
        "type": "Node"
       }
      ],
      "name": "handlePossibleFileOverviewJsDoc",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "AstNode"
       },
       {
        "name": "irNode",
        "type": "Node"
       }
      ],
      "name": "handleJsDoc",
      "type": "JSDocInfo"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "AstNode"
       }
      ],
      "name": "transform",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Name"
       }
      ],
      "name": "transformNameAsString",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "literalNode",
        "type": "NumberLiteral"
       }
      ],
      "name": "transformNumberAsString",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "double"
       }
      ],
      "name": "getStringValue",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "irNode",
        "type": "Node"
       },
       {
        "name": "node",
        "type": "AstNode"
       }
      ],
      "name": "setSourceInfo",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Comment"
       },
       {
        "name": "irNode",
        "type": "Node"
       }
      ],
      "name": "createJsDocInfoParser",
      "type": "JsDocInfoParser"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "source",
        "type": "AstNode"
       }
      ],
      "name": "maybeSetLengthFrom",
      "type": null
     },
     {
      "params": [
       {
        "name": "position",
        "type": "int"
       }
      ],
      "name": "position2charno",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "AstNode"
       }
      ],
      "name": "justTransform",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "int"
       }
      ],
      "name": "transformTokenType",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "int"
       }
      ],
      "name": "newNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "int"
       },
       {
        "name": "child1",
        "type": "Node"
       }
      ],
      "name": "newNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "int"
       },
       {
        "name": "child1",
        "type": "Node"
       },
       {
        "name": "child2",
        "type": "Node"
       }
      ],
      "name": "newNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "int"
       },
       {
        "name": "child1",
        "type": "Node"
       },
       {
        "name": "child2",
        "type": "Node"
       },
       {
        "name": "child3",
        "type": "Node"
       }
      ],
      "name": "newNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "String"
       }
      ],
      "name": "newStringNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "int"
       },
       {
        "name": "value",
        "type": "String"
       }
      ],
      "name": "newStringNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "Double"
       }
      ],
      "name": "newNumberNode",
      "type": "Node"
     }
    ],
    "fields": [
     {
      "name": "SUSPICIOUS_COMMENT_WARNING",
      "type": "String"
     },
     {
      "name": "sourceString",
      "type": "String"
     },
     {
      "name": "sourceFile",
      "type": "StaticSourceFile"
     },
     {
      "name": "sourceName",
      "type": "String"
     },
     {
      "name": "config",
      "type": "Config"
     },
     {
      "name": "errorReporter",
      "type": "ErrorReporter"
     },
     {
      "name": "transformDispatcher",
      "type": "TransformDispatcher"
     },
     {
      "name": "ALLOWED_DIRECTIVES",
      "type": "Set"
     },
     {
      "name": "ES5_RESERVED_KEYWORDS",
      "type": "Set"
     },
     {
      "name": "ES5_STRICT_RESERVED_KEYWORDS",
      "type": "Set"
     },
     {
      "name": "reservedKeywords",
      "type": "Set"
     },
     {
      "name": "rootNodeJsDocHolder",
      "type": "Node"
     },
     {
      "name": "fileLevelJsDocBuilder",
      "type": "Node"
     },
     {
      "name": "fileOverviewInfo",
      "type": "JSDocInfo"
     },
     {
      "name": "templateNode",
      "type": "Node"
     }
    ],
    "name": "IRFactory"
   }
  ]
 },
 {
  "filename": "NullErrorReporter.java",
  "package_name": "com.google.javascript.jscomp.parsing",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "error",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "warning",
      "type": null
     },
     {
      "params": [],
      "name": "forOldRhino",
      "type": "ErrorReporter"
     },
     {
      "params": [],
      "name": "forNewRhino",
      "type": "com"
     }
    ],
    "fields": [],
    "name": "NullErrorReporter"
   }
  ]
 },
 {
  "filename": "TypeSafeDispatcher.java",
  "package_name": "com.google.javascript.jscomp.parsing",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "literalNode",
        "type": "ArrayLiteral"
       }
      ],
      "name": "processArrayLiteral",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "assignmentNode",
        "type": "Assignment"
       }
      ],
      "name": "processAssignment",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "rootNode",
        "type": "AstRoot"
       }
      ],
      "name": "processAstRoot",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "blockNode",
        "type": "Block"
       }
      ],
      "name": "processBlock",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "statementNode",
        "type": "BreakStatement"
       }
      ],
      "name": "processBreakStatement",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "clauseNode",
        "type": "CatchClause"
       }
      ],
      "name": "processCatchClause",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "exprNode",
        "type": "ConditionalExpression"
       }
      ],
      "name": "processConditionalExpression",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "statementNode",
        "type": "ContinueStatement"
       }
      ],
      "name": "processContinueStatement",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "loopNode",
        "type": "DoLoop"
       }
      ],
      "name": "processDoLoop",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "getNode",
        "type": "ElementGet"
       }
      ],
      "name": "processElementGet",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "exprNode",
        "type": "EmptyExpression"
       }
      ],
      "name": "processEmptyExpression",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "statementNode",
        "type": "ExpressionStatement"
       }
      ],
      "name": "processExpressionStatement",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "loopNode",
        "type": "ForInLoop"
       }
      ],
      "name": "processForInLoop",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "loopNode",
        "type": "ForLoop"
       }
      ],
      "name": "processForLoop",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "callNode",
        "type": "FunctionCall"
       }
      ],
      "name": "processFunctionCall",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "functionNode",
        "type": "FunctionNode"
       }
      ],
      "name": "processFunctionNode",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "statementNode",
        "type": "IfStatement"
       }
      ],
      "name": "processIfStatement",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "exprNode",
        "type": "InfixExpression"
       }
      ],
      "name": "processInfixExpression",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "literalNode",
        "type": "KeywordLiteral"
       }
      ],
      "name": "processKeywordLiteral",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "labelNode",
        "type": "Label"
       }
      ],
      "name": "processLabel",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "statementNode",
        "type": "LabeledStatement"
       }
      ],
      "name": "processLabeledStatement",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "nameNode",
        "type": "Name"
       }
      ],
      "name": "processName",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "exprNode",
        "type": "NewExpression"
       }
      ],
      "name": "processNewExpression",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "literalNode",
        "type": "NumberLiteral"
       }
      ],
      "name": "processNumberLiteral",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "literalNode",
        "type": "ObjectLiteral"
       }
      ],
      "name": "processObjectLiteral",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "propertyNode",
        "type": "ObjectProperty"
       }
      ],
      "name": "processObjectProperty",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "exprNode",
        "type": "ParenthesizedExpression"
       }
      ],
      "name": "processParenthesizedExpression",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "getNode",
        "type": "PropertyGet"
       }
      ],
      "name": "processPropertyGet",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "literalNode",
        "type": "RegExpLiteral"
       }
      ],
      "name": "processRegExpLiteral",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "statementNode",
        "type": "ReturnStatement"
       }
      ],
      "name": "processReturnStatement",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "scopeNode",
        "type": "Scope"
       }
      ],
      "name": "processScope",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "literalNode",
        "type": "StringLiteral"
       }
      ],
      "name": "processStringLiteral",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "caseNode",
        "type": "SwitchCase"
       }
      ],
      "name": "processSwitchCase",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "statementNode",
        "type": "SwitchStatement"
       }
      ],
      "name": "processSwitchStatement",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "statementNode",
        "type": "ThrowStatement"
       }
      ],
      "name": "processThrowStatement",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "statementNode",
        "type": "TryStatement"
       }
      ],
      "name": "processTryStatement",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "exprNode",
        "type": "UnaryExpression"
       }
      ],
      "name": "processUnaryExpression",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "declarationNode",
        "type": "VariableDeclaration"
       }
      ],
      "name": "processVariableDeclaration",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "initializerNode",
        "type": "VariableInitializer"
       }
      ],
      "name": "processVariableInitializer",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "loopNode",
        "type": "WhileLoop"
       }
      ],
      "name": "processWhileLoop",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "statementNode",
        "type": "WithStatement"
       }
      ],
      "name": "processWithStatement",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "AstNode"
       }
      ],
      "name": "processIllegalToken",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "AstNode"
       }
      ],
      "name": "process",
      "type": "T"
     }
    ],
    "fields": [],
    "name": "TypeSafeDispatcher"
   }
  ]
 },
 {
  "filename": "GraphReachability.java",
  "package_name": "com.google.javascript.jscomp.graph",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "entry",
        "type": "N"
       }
      ],
      "name": "compute",
      "type": null
     },
     {
      "params": [
       {
        "name": "reachableNode",
        "type": "N"
       }
      ],
      "name": "recompute",
      "type": null
     },
     {
      "params": [
       {
        "name": "source",
        "type": "N"
       },
       {
        "name": "e",
        "type": "E"
       },
       {
        "name": "destination",
        "type": "N"
       }
      ],
      "name": "traverseEdge",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "graph",
      "type": "DiGraph"
     },
     {
      "name": "edgePredicate",
      "type": "Predicate"
     },
     {
      "name": "REACHABLE",
      "type": "Annotation"
     }
    ],
    "name": "GraphReachability"
   }
  ]
 },
 {
  "filename": "FixedPointGraphTraversal.java",
  "package_name": "com.google.javascript.jscomp.graph",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "callback",
        "type": "EdgeCallback"
       }
      ],
      "name": "newTraversal",
      "type": "FixedPointGraphTraversal"
     },
     {
      "params": [
       {
        "name": "graph",
        "type": "DiGraph"
       }
      ],
      "name": "computeFixedPoint",
      "type": null
     },
     {
      "params": [
       {
        "name": "graph",
        "type": "DiGraph"
       },
       {
        "name": "entry",
        "type": "N"
       }
      ],
      "name": "computeFixedPoint",
      "type": null
     },
     {
      "params": [
       {
        "name": "graph",
        "type": "DiGraph"
       },
       {
        "name": "entrySet",
        "type": "Set"
       }
      ],
      "name": "computeFixedPoint",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "callback",
      "type": "EdgeCallback"
     },
     {
      "name": "NON_HALTING_ERROR_MSG",
      "type": "String"
     }
    ],
    "name": "FixedPointGraphTraversal"
   }
  ]
 },
 {
  "filename": "Graph.java",
  "package_name": "com.google.javascript.jscomp.graph",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "edge",
        "type": "E"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "connect",
      "type": null
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "disconnect",
      "type": null
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "edge",
        "type": "E"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "connectIfNotFound",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "N"
       }
      ],
      "name": "createNode",
      "type": "GraphNode"
     },
     {
      "params": [],
      "name": "getNodes",
      "type": "Collection"
     },
     {
      "params": [],
      "name": "getEdges",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "N"
       }
      ],
      "name": "getNodeDegree",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "N"
       }
      ],
      "name": "getWeight",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "N"
       }
      ],
      "name": "getNeighborNodes",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "N"
       }
      ],
      "name": "getNeighborNodesIterator",
      "type": "Iterator"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "getEdges",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "getFirstEdge",
      "type": "GraphEdge"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "N"
       }
      ],
      "name": "hasNode",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "isConnected",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "e",
        "type": "E"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "isConnected",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "val",
        "type": "N"
       }
      ],
      "name": "getNodeOrFail",
      "type": "T"
     },
     {
      "params": [],
      "name": "clearNodeAnnotations",
      "type": null
     },
     {
      "params": [],
      "name": "clearEdgeAnnotations",
      "type": null
     },
     {
      "params": [],
      "name": "pushNodeAnnotations",
      "type": null
     },
     {
      "params": [],
      "name": "popNodeAnnotations",
      "type": null
     },
     {
      "params": [],
      "name": "pushEdgeAnnotations",
      "type": null
     },
     {
      "params": [],
      "name": "popEdgeAnnotations",
      "type": null
     },
     {
      "params": [
       {
        "name": "stack",
        "type": "Deque"
       },
       {
        "name": "haveAnnotations",
        "type": "Collection"
       }
      ],
      "name": "pushAnnotations",
      "type": null
     },
     {
      "params": [
       {
        "name": "stack",
        "type": "Deque"
       }
      ],
      "name": "popAnnotations",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "nodeAnnotationStack",
      "type": "Deque"
     },
     {
      "name": "edgeAnnotationStack",
      "type": "Deque"
     }
    ],
    "name": "Graph"
   }
  ]
 },
 {
  "filename": "DiGraph.java",
  "package_name": "com.google.javascript.jscomp.graph",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getDirectedGraphNodes",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "nodeValue",
        "type": "N"
       }
      ],
      "name": "getOutEdges",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "nodeValue",
        "type": "N"
       }
      ],
      "name": "getInEdges",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "DiGraphNode"
       }
      ],
      "name": "getDirectedPredNodes",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "DiGraphNode"
       }
      ],
      "name": "getDirectedSuccNodes",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "nodeValue",
        "type": "N"
       }
      ],
      "name": "getDirectedPredNodes",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "nodeValue",
        "type": "N"
       }
      ],
      "name": "getDirectedSuccNodes",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "nodeValue",
        "type": "N"
       }
      ],
      "name": "createDirectedGraphNode",
      "type": "DiGraphNode"
     },
     {
      "params": [
       {
        "name": "nodeValue",
        "type": "N"
       }
      ],
      "name": "getDirectedGraphNode",
      "type": "DiGraphNode"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "getDirectedGraphEdges",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "disconnectInDirection",
      "type": null
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "isConnectedInDirection",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "edgeValue",
        "type": "E"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "isConnectedInDirection",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "isConnected",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "e",
        "type": "E"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "isConnected",
      "type": "boolean"
     }
    ],
    "fields": [],
    "name": "DiGraph"
   }
  ]
 },
 {
  "filename": "SubGraph.java",
  "package_name": "com.google.javascript.jscomp.graph",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "node",
        "type": "N"
       }
      ],
      "name": "isIndependentOf",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "N"
       }
      ],
      "name": "addNode",
      "type": null
     }
    ],
    "fields": [],
    "name": "SubGraph"
   }
  ]
 },
 {
  "filename": "StandardUnionFind.java",
  "package_name": "com.google.javascript.jscomp.graph",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "e",
        "type": "E"
       }
      ],
      "name": "add",
      "type": null
     },
     {
      "params": [
       {
        "name": "a",
        "type": "E"
       },
       {
        "name": "b",
        "type": "E"
       }
      ],
      "name": "union",
      "type": "E"
     },
     {
      "params": [
       {
        "name": "e",
        "type": "E"
       }
      ],
      "name": "find",
      "type": "E"
     },
     {
      "params": [
       {
        "name": "a",
        "type": "E"
       },
       {
        "name": "b",
        "type": "E"
       }
      ],
      "name": "areEquivalent",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "elements",
      "type": "Set"
     },
     {
      "params": [],
      "name": "allEquivalenceClasses",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "e",
        "type": "E"
       }
      ],
      "name": "findRootOrCreateNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "findRoot",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "E"
       }
      ],
      "name": "findAll",
      "type": "Set"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "elmap",
      "type": "Map"
     }
    ],
    "name": "StandardUnionFind"
   }
  ]
 },
 {
  "filename": "AdjacencyGraph.java",
  "package_name": "com.google.javascript.jscomp.graph",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getNodes",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "N"
       }
      ],
      "name": "getNode",
      "type": "GraphNode"
     },
     {
      "params": [],
      "name": "newSubGraph",
      "type": "SubGraph"
     },
     {
      "params": [],
      "name": "clearNodeAnnotations",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "N"
       }
      ],
      "name": "getWeight",
      "type": "int"
     }
    ],
    "fields": [],
    "name": "AdjacencyGraph"
   }
  ]
 },
 {
  "filename": "LinkedDirectedGraph.java",
  "package_name": "com.google.javascript.jscomp.graph",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "newSubGraph",
      "type": "SubGraph"
     },
     {
      "params": [],
      "name": "createWithoutAnnotations",
      "type": "LinkedDirectedGraph"
     },
     {
      "params": [],
      "name": "createWithNodeAnnotations",
      "type": "LinkedDirectedGraph"
     },
     {
      "params": [],
      "name": "createWithEdgeAnnotations",
      "type": "LinkedDirectedGraph"
     },
     {
      "params": [],
      "name": "create",
      "type": "LinkedDirectedGraph"
     },
     {
      "params": [
       {
        "name": "srcValue",
        "type": "N"
       },
       {
        "name": "edgeValue",
        "type": "E"
       },
       {
        "name": "destValue",
        "type": "N"
       }
      ],
      "name": "connect",
      "type": null
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "disconnect",
      "type": null
     },
     {
      "params": [
       {
        "name": "srcValue",
        "type": "N"
       },
       {
        "name": "destValue",
        "type": "N"
       }
      ],
      "name": "disconnectInDirection",
      "type": null
     },
     {
      "params": [],
      "name": "getDirectedGraphNodes",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "nodeValue",
        "type": "N"
       }
      ],
      "name": "getDirectedGraphNode",
      "type": "DiGraphNode"
     },
     {
      "params": [
       {
        "name": "nodeValue",
        "type": "N"
       }
      ],
      "name": "getNode",
      "type": "GraphNode"
     },
     {
      "params": [
       {
        "name": "nodeValue",
        "type": "N"
       }
      ],
      "name": "getInEdges",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "nodeValue",
        "type": "N"
       }
      ],
      "name": "getOutEdges",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "nodeValue",
        "type": "N"
       }
      ],
      "name": "createDirectedGraphNode",
      "type": "DiGraphNode"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "getEdges",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "getFirstEdge",
      "type": "GraphEdge"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "N"
       }
      ],
      "name": "createNode",
      "type": "GraphNode"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "getDirectedGraphEdges",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "isConnectedInDirection",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "edgeValue",
        "type": "E"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "isConnectedInDirection",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "edgeMatcher",
        "type": "Predicate"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "isConnectedInDirection",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "nodeValue",
        "type": "N"
       }
      ],
      "name": "getDirectedPredNodes",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "nodeValue",
        "type": "N"
       }
      ],
      "name": "getDirectedSuccNodes",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "dNode",
        "type": "DiGraphNode"
       }
      ],
      "name": "getDirectedPredNodes",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "dNode",
        "type": "DiGraphNode"
       }
      ],
      "name": "getDirectedSuccNodes",
      "type": "List"
     },
     {
      "params": [],
      "name": "getGraphvizEdges",
      "type": "List"
     },
     {
      "params": [],
      "name": "getGraphvizNodes",
      "type": "List"
     },
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "isDirected",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getNodes",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "N"
       }
      ],
      "name": "getNeighborNodes",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "DiGraphNode"
       }
      ],
      "name": "getNeighborNodes",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "N"
       }
      ],
      "name": "getNeighborNodesIterator",
      "type": "Iterator"
     },
     {
      "params": [],
      "name": "getEdges",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "N"
       }
      ],
      "name": "getNodeDegree",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "nodes",
      "type": "Map"
     },
     {
      "name": "useNodeAnnotations",
      "type": "boolean"
     },
     {
      "name": "useEdgeAnnotations",
      "type": "boolean"
     }
    ],
    "name": "LinkedDirectedGraph"
   }
  ]
 },
 {
  "filename": "GraphColoring.java",
  "package_name": "com.google.javascript.jscomp.graph",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "color",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "N"
       }
      ],
      "name": "getPartitionSuperNode",
      "type": "N"
     },
     {
      "params": [],
      "name": "getGraph",
      "type": "AdjacencyGraph"
     }
    ],
    "fields": [
     {
      "name": "colorToNodeMap",
      "type": "N"
     },
     {
      "name": "graph",
      "type": "AdjacencyGraph"
     }
    ],
    "name": "GraphColoring"
   }
  ]
 },
 {
  "filename": "Annotation.java",
  "package_name": "com.google.javascript.jscomp.graph",
  "classes": [
   {
    "methods": [],
    "fields": [],
    "name": "Annotation"
   }
  ]
 },
 {
  "filename": "UnionFind.java",
  "package_name": "com.google.javascript.jscomp.graph",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "e",
        "type": "E"
       }
      ],
      "name": "add",
      "type": null
     },
     {
      "params": [
       {
        "name": "a",
        "type": "E"
       },
       {
        "name": "b",
        "type": "E"
       }
      ],
      "name": "union",
      "type": "E"
     },
     {
      "params": [
       {
        "name": "e",
        "type": "E"
       }
      ],
      "name": "find",
      "type": "E"
     },
     {
      "params": [
       {
        "name": "a",
        "type": "E"
       },
       {
        "name": "b",
        "type": "E"
       }
      ],
      "name": "areEquivalent",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "elements",
      "type": "Set"
     },
     {
      "params": [],
      "name": "allEquivalenceClasses",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "E"
       }
      ],
      "name": "findAll",
      "type": "Set"
     }
    ],
    "fields": [],
    "name": "UnionFind"
   }
  ]
 },
 {
  "filename": "Annotatable.java",
  "package_name": "com.google.javascript.jscomp.graph",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "data",
        "type": "Annotation"
       }
      ],
      "name": "setAnnotation",
      "type": null
     },
     {
      "params": [],
      "name": "getAnnotation",
      "type": "A"
     }
    ],
    "fields": [],
    "name": "Annotatable"
   }
  ]
 },
 {
  "filename": "GraphNode.java",
  "package_name": "com.google.javascript.jscomp.graph",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getValue",
      "type": "N"
     }
    ],
    "fields": [],
    "name": "GraphNode"
   }
  ]
 },
 {
  "filename": "LinkedUndirectedGraph.java",
  "package_name": "com.google.javascript.jscomp.graph",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "newSubGraph",
      "type": "SubGraph"
     },
     {
      "params": [],
      "name": "createWithoutAnnotations",
      "type": "LinkedUndirectedGraph"
     },
     {
      "params": [],
      "name": "createWithNodeAnnotations",
      "type": "LinkedUndirectedGraph"
     },
     {
      "params": [],
      "name": "createWithEdgeAnnotations",
      "type": "LinkedUndirectedGraph"
     },
     {
      "params": [],
      "name": "create",
      "type": "LinkedUndirectedGraph"
     },
     {
      "params": [
       {
        "name": "srcValue",
        "type": "N"
       },
       {
        "name": "edgeValue",
        "type": "E"
       },
       {
        "name": "destValue",
        "type": "N"
       }
      ],
      "name": "connect",
      "type": null
     },
     {
      "params": [
       {
        "name": "srcValue",
        "type": "N"
       },
       {
        "name": "destValue",
        "type": "N"
       }
      ],
      "name": "disconnect",
      "type": null
     },
     {
      "params": [
       {
        "name": "nodeValue",
        "type": "N"
       }
      ],
      "name": "createUndirectedGraphNode",
      "type": "UndiGraphNode"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "N"
       }
      ],
      "name": "getNeighborNodes",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "N"
       }
      ],
      "name": "getNeighborNodesIterator",
      "type": "Iterator"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "getUndirectedGraphEdges",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "nodeValue",
        "type": "N"
       }
      ],
      "name": "getUndirectedGraphNode",
      "type": "UndiGraphNode"
     },
     {
      "params": [],
      "name": "getUndirectedGraphNodes",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "N"
       }
      ],
      "name": "createNode",
      "type": "GraphNode"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "getEdges",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "getFirstEdge",
      "type": "GraphEdge"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "N"
       }
      ],
      "name": "getNode",
      "type": "GraphNode"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "isConnected",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "e",
        "type": "E"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "isConnected",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "edgePredicate",
        "type": "Predicate"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "isConnected",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getGraphvizEdges",
      "type": "List"
     },
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getGraphvizNodes",
      "type": "List"
     },
     {
      "params": [],
      "name": "isDirected",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getNodes",
      "type": "Collection"
     },
     {
      "params": [],
      "name": "getEdges",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "N"
       }
      ],
      "name": "getNodeDegree",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "nodes",
      "type": "Map"
     },
     {
      "name": "useNodeAnnotations",
      "type": "boolean"
     },
     {
      "name": "useEdgeAnnotations",
      "type": "boolean"
     }
    ],
    "name": "LinkedUndirectedGraph"
   }
  ]
 },
 {
  "filename": "UndiGraph.java",
  "package_name": "com.google.javascript.jscomp.graph",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getUndirectedGraphNodes",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "nodeValue",
        "type": "N"
       }
      ],
      "name": "createUndirectedGraphNode",
      "type": "UndiGraphNode"
     },
     {
      "params": [
       {
        "name": "nodeValue",
        "type": "N"
       }
      ],
      "name": "getUndirectedGraphNode",
      "type": "UndiGraphNode"
     },
     {
      "params": [
       {
        "name": "n1",
        "type": "N"
       },
       {
        "name": "n2",
        "type": "N"
       }
      ],
      "name": "getUndirectedGraphEdges",
      "type": "List"
     }
    ],
    "fields": [],
    "name": "UndiGraph"
   }
  ]
 },
 {
  "filename": "GraphPruner.java",
  "package_name": "com.google.javascript.jscomp.graph",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "keep",
        "type": "Predicate"
       }
      ],
      "name": "prune",
      "type": "LinkedDirectedGraph"
     },
     {
      "params": [
       {
        "name": "graph",
        "type": "DiGraph"
       }
      ],
      "name": "cloneGraph",
      "type": "LinkedDirectedGraph"
     }
    ],
    "fields": [
     {
      "name": "graph",
      "type": "DiGraph"
     }
    ],
    "name": "GraphPruner"
   }
  ]
 },
 {
  "filename": "GraphvizGraph.java",
  "package_name": "com.google.javascript.jscomp.graph",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "isDirected",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getGraphvizNodes",
      "type": "List"
     },
     {
      "params": [],
      "name": "getGraphvizEdges",
      "type": "List"
     }
    ],
    "fields": [],
    "name": "GraphvizGraph"
   }
  ]
 },
 {
  "filename": "CompileTask.java",
  "package_name": "com.google.javascript.jscomp.ant",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "value",
        "type": "String"
       }
      ],
      "name": "setWarning",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setDebug",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "String"
       }
      ],
      "name": "setCompilationLevel",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setManageDependencies",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setCustomExternsOnly",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "File"
       }
      ],
      "name": "setOutput",
      "type": null
     },
     {
      "params": [
       {
        "name": "encoding",
        "type": "String"
       }
      ],
      "name": "setEncoding",
      "type": null
     },
     {
      "params": [
       {
        "name": "outputEncoding",
        "type": "String"
       }
      ],
      "name": "setOutputEncoding",
      "type": null
     },
     {
      "params": [
       {
        "name": "pretty",
        "type": "boolean"
       }
      ],
      "name": "setPrettyPrint",
      "type": null
     },
     {
      "params": [
       {
        "name": "print",
        "type": "boolean"
       }
      ],
      "name": "setPrintInputDelimiter",
      "type": null
     },
     {
      "params": [
       {
        "name": "generateExports",
        "type": "boolean"
       }
      ],
      "name": "setGenerateExports",
      "type": null
     },
     {
      "params": [
       {
        "name": "list",
        "type": "FileList"
       }
      ],
      "name": "addExterns",
      "type": null
     },
     {
      "params": [
       {
        "name": "list",
        "type": "FileList"
       }
      ],
      "name": "addSources",
      "type": null
     },
     {
      "params": [],
      "name": "execute",
      "type": null
     },
     {
      "params": [],
      "name": "createCompilerOptions",
      "type": "CompilerOptions"
     },
     {
      "params": [
       {
        "name": "options",
        "type": "CompilerOptions"
       }
      ],
      "name": "createCompiler",
      "type": "Compiler"
     },
     {
      "params": [],
      "name": "findExternFiles",
      "type": "JSSourceFile"
     },
     {
      "params": [],
      "name": "findSourceFiles",
      "type": "JSSourceFile"
     },
     {
      "params": [
       {
        "name": "fileList",
        "type": "FileList"
       }
      ],
      "name": "findJavaScriptFiles",
      "type": "List"
     },
     {
      "params": [],
      "name": "getDefaultExterns",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "source",
        "type": "String"
       }
      ],
      "name": "writeResult",
      "type": null
     },
     {
      "params": [],
      "name": "isStale",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "fileLists",
        "type": "List"
       }
      ],
      "name": "getLastModifiedTime",
      "type": "long"
     }
    ],
    "fields": [
     {
      "name": "warningLevel",
      "type": "WarningLevel"
     },
     {
      "name": "debugOptions",
      "type": "boolean"
     },
     {
      "name": "encoding",
      "type": "String"
     },
     {
      "name": "outputEncoding",
      "type": "String"
     },
     {
      "name": "compilationLevel",
      "type": "CompilationLevel"
     },
     {
      "name": "customExternsOnly",
      "type": "boolean"
     },
     {
      "name": "manageDependencies",
      "type": "boolean"
     },
     {
      "name": "prettyPrint",
      "type": "boolean"
     },
     {
      "name": "printInputDelimiter",
      "type": "boolean"
     },
     {
      "name": "generateExports",
      "type": "boolean"
     },
     {
      "name": "outputFile",
      "type": "File"
     },
     {
      "name": "externFileLists",
      "type": "List"
     },
     {
      "name": "sourceFileLists",
      "type": "List"
     }
    ],
    "name": "CompileTask"
   }
  ]
 },
 {
  "filename": "AntErrorManager.java",
  "package_name": "com.google.javascript.jscomp.ant",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "level",
        "type": "CheckLevel"
       },
       {
        "name": "error",
        "type": "JSError"
       }
      ],
      "name": "println",
      "type": null
     },
     {
      "params": [],
      "name": "printSummary",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "formatter",
      "type": "MessageFormatter"
     },
     {
      "name": "task",
      "type": "Task"
     }
    ],
    "name": "AntErrorManager"
   }
  ]
 },
 {
  "filename": "Reader.java",
  "package_name": "com.google.javascript.jscomp.jsonml",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "rootElement",
        "type": "JsonML"
       }
      ],
      "name": "setRootElement",
      "type": null
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "parse",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "attr",
        "type": "TagAttr"
       },
       {
        "name": "type",
        "type": "Class"
       }
      ],
      "name": "getOptionalAttribute",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "attr",
        "type": "TagAttr"
       },
       {
        "name": "type",
        "type": "Class"
       }
      ],
      "name": "getAttribute",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "attr",
        "type": "TagAttr"
       },
       {
        "name": "type",
        "type": "Class"
       },
       {
        "name": "optional",
        "type": "boolean"
       }
      ],
      "name": "getAttribute",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "attr",
        "type": "TagAttr"
       }
      ],
      "name": "getObjectAttribute",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "attr",
        "type": "TagAttr"
       }
      ],
      "name": "getStringAttribute",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validate",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformElement",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "newState",
        "type": "boolean"
       }
      ],
      "name": "transformAllChildren",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformAllChildren",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "fromIndex",
        "type": "int"
       },
       {
        "name": "newState",
        "type": "boolean"
       }
      ],
      "name": "transformAllChildrenFromIndex",
      "type": null
     },
     {
      "params": [
       {
        "name": "elements",
        "type": "List"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "newState",
        "type": "boolean"
       }
      ],
      "name": "transformElements",
      "type": null
     },
     {
      "params": [
       {
        "name": "elements",
        "type": "List"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformElements",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformExpr",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "childno",
        "type": "int"
       }
      ],
      "name": "transformForLoop",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "int"
       }
      ],
      "name": "transformJumpStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "int"
       }
      ],
      "name": "transformLogicalExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "type",
        "type": "int"
       }
      ],
      "name": "transformTwoArgumentExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformPotentiallyUnwrappedBlock",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformArrayExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformAssignExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformBinaryExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformBlock",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "start",
        "type": "int"
       }
      ],
      "name": "transformBlock",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "start",
        "type": "int"
       },
       {
        "name": "end",
        "type": "int"
       }
      ],
      "name": "transformBlock",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformBreakStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformCallExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformCase",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformCatchClause",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformConditionalExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformContinueStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformCountExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformDataProp",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformGetterProp",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformSetterProp",
      "type": null
     },
     {
      "params": [
       {
        "name": "tokenType",
        "type": "int"
       },
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformProp",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformDefaultCase",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformDeleteExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformDoWhileStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformEmpty",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformEmptyStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformEvalExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformForInStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformForStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "needsName",
        "type": "boolean"
       }
      ],
      "name": "transformFunction",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformFunctionDecl",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformFunctionExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformIdExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformInitPatt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformIdPatt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformIfStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformInvokeExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformLabelledStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformLiteralExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformLogicalAndExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformLogicalOrExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformMemberExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformNewExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformObjectExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformParamDecl",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformProgram",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformPrologueDecl",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformRegExpExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformReturnStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformSwitchStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformThisExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformThrowStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformTryStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformTypeofExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformUnaryExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformVarDecl",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformWhileStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "parent",
        "type": "Node"
       }
      ],
      "name": "transformWithStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "int"
       },
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "createNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "setPosition",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "JSONML_SYNTAX",
      "type": "DiagnosticType"
     },
     {
      "name": "rootElement",
      "type": "JsonML"
     },
     {
      "name": "sourceName",
      "type": "String"
     },
     {
      "name": "errorReporter",
      "type": "ErrorReporter"
     },
     {
      "name": "ALLOWED_DIRECTIVES",
      "type": "Set"
     },
     {
      "name": "nodeIndex",
      "type": "int"
     },
     {
      "name": "insertExprResultState",
      "type": "boolean"
     }
    ],
    "name": "Reader"
   }
  ]
 },
 {
  "filename": "ErrorLevel.java",
  "package_name": "com.google.javascript.jscomp.jsonml",
  "classes": [
   {
    "methods": [],
    "fields": [],
    "name": "ErrorLevel"
   }
  ]
 },
 {
  "filename": "SecureCompiler.java",
  "package_name": "com.google.javascript.jscomp.jsonml",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getJsonML",
      "type": "JsonML"
     },
     {
      "params": [],
      "name": "getString",
      "type": "String"
     },
     {
      "params": [],
      "name": "getReport",
      "type": "Report"
     },
     {
      "params": [
       {
        "name": "source",
        "type": "JsonML"
       }
      ],
      "name": "compile",
      "type": null
     },
     {
      "params": [],
      "name": "getSecureCompilerOptions",
      "type": "CompilerOptions"
     },
     {
      "params": [],
      "name": "enableFoldConstant",
      "type": null
     },
     {
      "params": [
       {
        "name": "result",
        "type": "Result"
       }
      ],
      "name": "generateReport",
      "type": "Report"
     }
    ],
    "fields": [
     {
      "name": "COMPILATION_UNCOMPLETED_MSG",
      "type": "String"
     },
     {
      "name": "COMPILATION_UNSUCCESSFUL_MSG",
      "type": "String"
     },
     {
      "name": "COMPILATION_ALREADY_COMPLETED_MSG",
      "type": "String"
     },
     {
      "name": "compiler",
      "type": "Compiler"
     },
     {
      "name": "options",
      "type": "CompilerOptions"
     },
     {
      "name": "sourceAst",
      "type": "JsonMLAst"
     },
     {
      "name": "report",
      "type": "Report"
     }
    ],
    "name": "SecureCompiler"
   }
  ]
 },
 {
  "filename": "JsonML.java",
  "package_name": "com.google.javascript.jscomp.jsonml",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "index",
        "type": "int"
       },
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "addChild",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "appendChild",
      "type": null
     },
     {
      "params": [
       {
        "name": "elements",
        "type": "Collection"
       }
      ],
      "name": "appendChildren",
      "type": null
     },
     {
      "params": [],
      "name": "childrenSize",
      "type": "int"
     },
     {
      "params": [],
      "name": "clearChildren",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "TagAttr"
       }
      ],
      "name": "getAttribute",
      "type": "Object"
     },
     {
      "params": [],
      "name": "getAttributes",
      "type": "Map"
     },
     {
      "params": [
       {
        "name": "index",
        "type": "int"
       }
      ],
      "name": "getChild",
      "type": "JsonML"
     },
     {
      "params": [],
      "name": "getChildren",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "fromIndex",
        "type": "int"
       },
       {
        "name": "toIndex",
        "type": "int"
       }
      ],
      "name": "getChildren",
      "type": "List"
     },
     {
      "params": [],
      "name": "getType",
      "type": "TagType"
     },
     {
      "params": [],
      "name": "hasChildren",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "TagAttr"
       },
       {
        "name": "value",
        "type": "Object"
       }
      ],
      "name": "setAttribute",
      "type": null
     },
     {
      "params": [
       {
        "name": "attributes",
        "type": "Map"
       }
      ],
      "name": "setAttributes",
      "type": null
     },
     {
      "params": [
       {
        "name": "index",
        "type": "int"
       },
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "setChild",
      "type": null
     },
     {
      "params": [
       {
        "name": "children",
        "type": "JsonML"
       }
      ],
      "name": "setChildren",
      "type": null
     },
     {
      "params": [
       {
        "name": "children",
        "type": "List"
       }
      ],
      "name": "setChildren",
      "type": null
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "sb",
        "type": "StringBuilder"
       },
       {
        "name": "printAttributes",
        "type": "boolean"
       },
       {
        "name": "printChildren",
        "type": "boolean"
       }
      ],
      "name": "toString",
      "type": null
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       },
       {
        "name": "sb",
        "type": "StringBuilder"
       }
      ],
      "name": "escapeStringOnto",
      "type": null
     },
     {
      "params": [],
      "name": "toStringTree",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "level",
        "type": "int"
       },
       {
        "name": "sb",
        "type": "StringBuilder"
       }
      ],
      "name": "toStringTreeHelper",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "type",
      "type": "TagType"
     },
     {
      "name": "attributes",
      "type": "Map"
     },
     {
      "name": "children",
      "type": "List"
     }
    ],
    "name": "JsonML"
   }
  ]
 },
 {
  "filename": "JsonMLAst.java",
  "package_name": "com.google.javascript.jscomp.jsonml",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "clearAst",
      "type": null
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "getAstRoot",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getSourceFile",
      "type": "SourceFile"
     },
     {
      "params": [
       {
        "name": "file",
        "type": "SourceFile"
       }
      ],
      "name": "setSourceFile",
      "type": null
     },
     {
      "params": [],
      "name": "getSourceName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "compiler",
        "type": "AbstractCompiler"
       }
      ],
      "name": "createAst",
      "type": null
     },
     {
      "params": [],
      "name": "convertToJsonML",
      "type": "JsonML"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "int"
       }
      ],
      "name": "getElementPreOrder",
      "type": "JsonML"
     },
     {
      "params": [],
      "name": "getInputId",
      "type": "InputId"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "DEFAULT_SOURCE_NAME",
      "type": "String"
     },
     {
      "name": "jsonml",
      "type": "JsonML"
     },
     {
      "name": "root",
      "type": "Node"
     },
     {
      "name": "sourceFile",
      "type": "SourceFile"
     },
     {
      "name": "inputId",
      "type": "InputId"
     }
    ],
    "name": "JsonMLAst"
   }
  ]
 },
 {
  "filename": "NodeUtil.java",
  "package_name": "com.google.javascript.jscomp.jsonml",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isForIn",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isStatement",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isFunctionDeclaration",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "isHoistedFunctionDeclaration",
      "type": "boolean"
     }
    ],
    "fields": [],
    "name": "NodeUtil"
   }
  ]
 },
 {
  "filename": "JsonMLError.java",
  "package_name": "com.google.javascript.jscomp.jsonml",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "type",
        "type": "DiagnosticType"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "lineNumber",
        "type": "int"
       },
       {
        "name": "level",
        "type": "ErrorLevel"
       },
       {
        "name": "arguments",
        "type": "String"
       }
      ],
      "name": "make",
      "type": "JsonMLError"
     },
     {
      "params": [
       {
        "name": "error",
        "type": "JSError"
       },
       {
        "name": "ast",
        "type": "JsonMLAst"
       }
      ],
      "name": "make",
      "type": "JsonMLError"
     }
    ],
    "fields": [
     {
      "name": "description",
      "type": "String"
     },
     {
      "name": "sourceName",
      "type": "String"
     },
     {
      "name": "element",
      "type": "JsonML"
     },
     {
      "name": "lineNumber",
      "type": "int"
     },
     {
      "name": "level",
      "type": "ErrorLevel"
     }
    ],
    "name": "JsonMLError"
   }
  ]
 },
 {
  "filename": "JsonMLException.java",
  "package_name": "com.google.javascript.jscomp.jsonml",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "JsonMLException"
   }
  ]
 },
 {
  "filename": "Writer.java",
  "package_name": "com.google.javascript.jscomp.jsonml",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "root",
        "type": "Node"
       }
      ],
      "name": "processAst",
      "type": "JsonML"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processNode",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       },
       {
        "name": "op",
        "type": "String"
       }
      ],
      "name": "processAssignExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processArrayLiteral",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       },
       {
        "name": "op",
        "type": "String"
       }
      ],
      "name": "processBinaryExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processBlock",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processCall",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       },
       {
        "name": "type",
        "type": "TagType"
       }
      ],
      "name": "processCase",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processCatch",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processEmpty",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processExprResult",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processForLoop",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processFunction",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processHook",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processIf",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       },
       {
        "name": "op",
        "type": "String"
       }
      ],
      "name": "processIncrDecrExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       },
       {
        "name": "type",
        "type": "TagType"
       }
      ],
      "name": "processJmp",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processLabel",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processLiteral",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       },
       {
        "name": "op",
        "type": "String"
       }
      ],
      "name": "processLogicalExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       },
       {
        "name": "type",
        "type": "TagType"
       }
      ],
      "name": "processLoop",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       },
       {
        "name": "op",
        "type": "String"
       }
      ],
      "name": "processMemberExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processName",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       },
       {
        "name": "type",
        "type": "TagType"
       }
      ],
      "name": "processNew",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processObjectLiteral",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processRegExp",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processSwitch",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processThis",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processThrow",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processTry",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       },
       {
        "name": "type",
        "type": "TagType"
       }
      ],
      "name": "processTwoArgExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       },
       {
        "name": "type",
        "type": "TagType"
       },
       {
        "name": "op",
        "type": "String"
       }
      ],
      "name": "processTwoArgExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       },
       {
        "name": "op",
        "type": "String"
       }
      ],
      "name": "processUnaryExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processVar",
      "type": null
     },
     {
      "params": [
       {
        "name": "currentNode",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processReturn",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processScript",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processWith",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       }
      ],
      "name": "processChildren",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currectParent",
        "type": "JsonML"
       }
      ],
      "name": "processDirectives",
      "type": null
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "currentParent",
        "type": "JsonML"
       },
       {
        "name": "type",
        "type": "TagType"
       }
      ],
      "name": "processOneArgExpr",
      "type": null
     }
    ],
    "fields": [],
    "name": "Writer"
   }
  ]
 },
 {
  "filename": "Validator.java",
  "package_name": "com.google.javascript.jscomp.jsonml",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validate",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "doValidate",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateAssignExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateBinaryExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateCase",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateCatchClause",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateConditionalExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateCountExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateProp",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateDeleteExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateDoWhileStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateEmptyStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateForInStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateForStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateFunctionDecl",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateFunctionExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateIdExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateIdPatt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateIfStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateInvokeExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateJmpStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateLabelledStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateLiteralExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateLogicalExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateMemberExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateNewExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateObjectExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateParamDecl",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateRegExpExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateReturnStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateSwitchStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateThisExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateThrowStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateTryStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "needsName",
        "type": "boolean"
       }
      ],
      "name": "validateFunction",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateTypeofExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateUnaryExpr",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateVarDecl",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateWhileStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "validateWithStmt",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "attr",
        "type": "TagAttr"
       }
      ],
      "name": "validateArgument",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "expected",
        "type": "int"
       }
      ],
      "name": "validateChildrenSize",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "min",
        "type": "int"
       },
       {
        "name": "max",
        "type": "int"
       }
      ],
      "name": "validateChildrenSize",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "min",
        "type": "int"
       }
      ],
      "name": "validateMinChildrenSize",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "max",
        "type": "int"
       }
      ],
      "name": "validateMaxChildrenSize",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "index",
        "type": "int"
       }
      ],
      "name": "validateIsChildExpression",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "expected",
        "type": "TagType"
       },
       {
        "name": "index",
        "type": "int"
       }
      ],
      "name": "validateChildType",
      "type": null
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       },
       {
        "name": "expected",
        "type": "TagType"
       },
       {
        "name": "index",
        "type": "int"
       }
      ],
      "name": "validateChildType",
      "type": null
     },
     {
      "params": [
       {
        "name": "line",
        "type": "String"
       }
      ],
      "name": "appendLine",
      "type": null
     },
     {
      "params": [
       {
        "name": "list",
        "type": "Object"
       }
      ],
      "name": "printList",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "MISSING_ARGUMENT",
      "type": "String"
     },
     {
      "name": "NOT_ENOUGH_CHILDREN_FMT",
      "type": "String"
     },
     {
      "name": "TOO_MANY_CHILDREN_FMT",
      "type": "String"
     },
     {
      "name": "WRONG_CHILD_TYPE_FMT",
      "type": "String"
     },
     {
      "name": "exprTypes",
      "type": "TagType"
     },
     {
      "name": "b",
      "type": "StringBuilder"
     },
     {
      "name": "error",
      "type": "boolean"
     }
    ],
    "name": "Validator"
   }
  ]
 },
 {
  "filename": "JsonMLUtil.java",
  "package_name": "com.google.javascript.jscomp.jsonml",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "element",
        "type": "JsonML"
       }
      ],
      "name": "isExpression",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "jsonml",
        "type": "String"
       }
      ],
      "name": "parseString",
      "type": "JsonML"
     },
     {
      "params": [
       {
        "name": "element",
        "type": "JSONArray"
       }
      ],
      "name": "parseElement",
      "type": "JsonML"
     },
     {
      "params": [
       {
        "name": "tree1",
        "type": "JsonML"
       },
       {
        "name": "tree2",
        "type": "JsonML"
       }
      ],
      "name": "compare",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "tree1",
        "type": "JsonML"
       },
       {
        "name": "tree2",
        "type": "JsonML"
       }
      ],
      "name": "compareSilent",
      "type": "boolean"
     }
    ],
    "fields": [],
    "name": "JsonMLUtil"
   }
  ]
 },
 {
  "filename": "TagType.java",
  "package_name": "com.google.javascript.jscomp.jsonml",
  "classes": [
   {
    "methods": [],
    "fields": [],
    "name": "TagType"
   }
  ]
 },
 {
  "filename": "TagAttr.java",
  "package_name": "com.google.javascript.jscomp.jsonml",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "get",
      "type": "TagAttr"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "name",
      "type": "String"
     },
     {
      "name": "lookup",
      "type": "Map"
     }
    ],
    "name": "TagAttr"
   }
  ]
 },
 {
  "filename": "SortedDependencies.java",
  "package_name": "com.google.javascript.jscomp.deps",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "symbol",
        "type": "String"
       }
      ],
      "name": "getInputProviding",
      "type": "INPUT"
     },
     {
      "params": [
       {
        "name": "subGraph",
        "type": "List"
       },
       {
        "name": "deps",
        "type": "Multimap"
       }
      ],
      "name": "findCycle",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "current",
        "type": "INPUT"
       },
       {
        "name": "subGraph",
        "type": "Set"
       },
       {
        "name": "deps",
        "type": "Multimap"
       },
       {
        "name": "covered",
        "type": "Set"
       }
      ],
      "name": "findCycle",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "input",
        "type": "INPUT"
       },
       {
        "name": "subGraph",
        "type": "Set"
       }
      ],
      "name": "findRequireInSubGraphOrFail",
      "type": "INPUT"
     },
     {
      "params": [
       {
        "name": "cycle",
        "type": "List"
       }
      ],
      "name": "cycleToString",
      "type": "String"
     },
     {
      "params": [],
      "name": "getSortedList",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "roots",
        "type": "List"
       }
      ],
      "name": "getSortedDependenciesOf",
      "type": "List"
     },
     {
      "params": [],
      "name": "getInputsWithoutProvides",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "items",
        "type": "List"
       },
       {
        "name": "deps",
        "type": "Multimap"
       }
      ],
      "name": "topologicalStableSort",
      "type": "List"
     }
    ],
    "fields": [
     {
      "name": "inputs",
      "type": "List"
     },
     {
      "name": "sortedList",
      "type": "List"
     },
     {
      "name": "noProvides",
      "type": "List"
     },
     {
      "name": "provideMap",
      "type": "Map"
     }
    ],
    "name": "SortedDependencies"
   }
  ]
 },
 {
  "filename": "JsFunctionParser.java",
  "package_name": "com.google.javascript.jscomp.deps",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "functions",
        "type": "Collection"
       }
      ],
      "name": "getPattern",
      "type": "Pattern"
     },
     {
      "params": [
       {
        "name": "filePath",
        "type": "String"
       },
       {
        "name": "fileContents",
        "type": "String"
       }
      ],
      "name": "parseFile",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "filePath",
        "type": "String"
       },
       {
        "name": "fileContents",
        "type": "Reader"
       }
      ],
      "name": "parseReader",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "line",
        "type": "String"
       }
      ],
      "name": "parseLine",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "logger",
      "type": "Logger"
     },
     {
      "name": "pattern",
      "type": "Pattern"
     },
     {
      "name": "matcher",
      "type": "Matcher"
     },
     {
      "name": "symbols",
      "type": "Collection"
     },
     {
      "name": "functionsToParse",
      "type": "Collection"
     }
    ],
    "name": "JsFunctionParser"
   }
  ]
 },
 {
  "filename": "SimpleDependencyInfo.java",
  "package_name": "com.google.javascript.jscomp.deps",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getPathRelativeToClosureBase",
      "type": "String"
     },
     {
      "params": [],
      "name": "getProvides",
      "type": "Collection"
     },
     {
      "params": [],
      "name": "getRequires",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "obj",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "provides",
      "type": "List"
     },
     {
      "name": "requires",
      "type": "List"
     },
     {
      "name": "srcPathRelativeToClosure",
      "type": "String"
     },
     {
      "name": "pathOfDefiningFile",
      "type": "String"
     }
    ],
    "name": "SimpleDependencyInfo"
   }
  ]
 },
 {
  "filename": "PathUtil.java",
  "package_name": "com.google.javascript.jscomp.deps",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "path",
        "type": "String"
       }
      ],
      "name": "collapseDots",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "path",
        "type": "String"
       }
      ],
      "name": "isAbsolute",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "removeExtraneousSlashes",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "path",
        "type": "String"
       }
      ],
      "name": "makeAbsolute",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "path",
        "type": "String"
       },
       {
        "name": "rootPath",
        "type": "String"
       }
      ],
      "name": "makeAbsolute",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "basePath",
        "type": "String"
       },
       {
        "name": "targetPath",
        "type": "String"
       }
      ],
      "name": "makeRelative",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "SLASH_MATCHER",
      "type": "CharMatcher"
     },
     {
      "name": "NON_SLASH_MATCHER",
      "type": "CharMatcher"
     }
    ],
    "name": "PathUtil"
   }
  ]
 },
 {
  "filename": "DependencyInfo.java",
  "package_name": "com.google.javascript.jscomp.deps",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getPathRelativeToClosureBase",
      "type": "String"
     },
     {
      "params": [],
      "name": "getProvides",
      "type": "Collection"
     },
     {
      "params": [],
      "name": "getRequires",
      "type": "Collection"
     }
    ],
    "fields": [],
    "name": "DependencyInfo"
   }
  ]
 },
 {
  "filename": "JsFileParser.java",
  "package_name": "com.google.javascript.jscomp.deps",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "filePath",
        "type": "String"
       },
       {
        "name": "closureRelativePath",
        "type": "String"
       }
      ],
      "name": "parseFile",
      "type": "DependencyInfo"
     },
     {
      "params": [
       {
        "name": "filePath",
        "type": "String"
       },
       {
        "name": "closureRelativePath",
        "type": "String"
       },
       {
        "name": "fileContents",
        "type": "String"
       }
      ],
      "name": "parseFile",
      "type": "DependencyInfo"
     },
     {
      "params": [
       {
        "name": "filePath",
        "type": "String"
       },
       {
        "name": "closureRelativePath",
        "type": "String"
       },
       {
        "name": "fileContents",
        "type": "Reader"
       }
      ],
      "name": "parseReader",
      "type": "DependencyInfo"
     },
     {
      "params": [
       {
        "name": "line",
        "type": "String"
       }
      ],
      "name": "parseLine",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "logger",
      "type": "Logger"
     },
     {
      "name": "GOOG_PROVIDE_REQUIRE_PATTERN",
      "type": "Pattern"
     },
     {
      "name": "googMatcher",
      "type": "Matcher"
     },
     {
      "name": "provides",
      "type": "List"
     },
     {
      "name": "requires",
      "type": "List"
     }
    ],
    "name": "JsFileParser"
   }
  ]
 },
 {
  "filename": "DepsGenerator.java",
  "package_name": "com.google.javascript.jscomp.deps",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "computeDependencyCalls",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "depsFiles",
        "type": "Map"
       },
       {
        "name": "jsFiles",
        "type": "Map"
       }
      ],
      "name": "cleanUpDuplicatedFiles",
      "type": null
     },
     {
      "params": [
       {
        "name": "preparsedFileDepedencies",
        "type": "Iterable"
       },
       {
        "name": "parsedFileDependencies",
        "type": "Iterable"
       }
      ],
      "name": "validateDependencies",
      "type": null
     },
     {
      "params": [
       {
        "name": "namespace",
        "type": "String"
       },
       {
        "name": "depInfo",
        "type": "DependencyInfo"
       }
      ],
      "name": "reportSameFile",
      "type": null
     },
     {
      "params": [
       {
        "name": "namespace",
        "type": "String"
       },
       {
        "name": "depInfo",
        "type": "DependencyInfo"
       }
      ],
      "name": "reportUndefinedNamespace",
      "type": null
     },
     {
      "params": [
       {
        "name": "namespace",
        "type": "String"
       },
       {
        "name": "firstDep",
        "type": "DependencyInfo"
       },
       {
        "name": "secondDep",
        "type": "DependencyInfo"
       }
      ],
      "name": "reportDuplicateProvide",
      "type": null
     },
     {
      "params": [
       {
        "name": "namespace",
        "type": "String"
       },
       {
        "name": "depInfo",
        "type": "DependencyInfo"
       }
      ],
      "name": "reportDuplicateRequire",
      "type": null
     },
     {
      "params": [
       {
        "name": "filePath",
        "type": "String"
       }
      ],
      "name": "reportNoDepsInDepsFile",
      "type": null
     },
     {
      "params": [
       {
        "name": "depInfos",
        "type": "Iterable"
       },
       {
        "name": "providesMap",
        "type": "Map"
       }
      ],
      "name": "addToProvideMap",
      "type": null
     },
     {
      "params": [],
      "name": "createDepsFileParser",
      "type": "DepsFileParser"
     },
     {
      "params": [
       {
        "name": "file",
        "type": "SourceFile"
       }
      ],
      "name": "shouldSkipDepsFile",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "parseDepsFiles",
      "type": "Map"
     },
     {
      "params": [
       {
        "name": "preparsedFiles",
        "type": "Set"
       }
      ],
      "name": "parseSources",
      "type": "Map"
     },
     {
      "params": [
       {
        "name": "depsFiles",
        "type": "Map"
       },
       {
        "name": "jsFiles",
        "type": "Map"
       },
       {
        "name": "out",
        "type": "PrintStream"
       }
      ],
      "name": "writeDepsContent",
      "type": null
     },
     {
      "params": [
       {
        "name": "path",
        "type": "String"
       }
      ],
      "name": "formatPathToDepsFile",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "out",
        "type": "PrintStream"
       },
       {
        "name": "depInfos",
        "type": "Collection"
       }
      ],
      "name": "writeDepInfos",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "PrintStream"
       },
       {
        "name": "values",
        "type": "Collection"
       }
      ],
      "name": "writeJsArray",
      "type": null
     },
     {
      "params": [
       {
        "name": "paths",
        "type": "Collection"
       }
      ],
      "name": "createSourceFilesFromPaths",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "paths",
        "type": "String"
       }
      ],
      "name": "createSourceFilesFromPaths",
      "type": "List"
     }
    ],
    "fields": [
     {
      "name": "logger",
      "type": "Logger"
     },
     {
      "name": "srcs",
      "type": "Collection"
     },
     {
      "name": "deps",
      "type": "Collection"
     },
     {
      "name": "closurePathAbs",
      "type": "String"
     },
     {
      "name": "mergeStrategy",
      "type": "InclusionStrategy"
     },
     {
      "name": "errorManager",
      "type": "ErrorManager"
     },
     {
      "name": "SAME_FILE_WARNING",
      "type": "DiagnosticType"
     },
     {
      "name": "NEVER_PROVIDED_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "DUPE_PROVIDES_WARNING",
      "type": "DiagnosticType"
     },
     {
      "name": "MULTIPLE_PROVIDES_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "DUPE_REQUIRE_WARNING",
      "type": "DiagnosticType"
     },
     {
      "name": "NO_DEPS_WARNING",
      "type": "DiagnosticType"
     }
    ],
    "name": "DepsGenerator"
   }
  ]
 },
 {
  "filename": "DepsFileParser.java",
  "package_name": "com.google.javascript.jscomp.deps",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "filePath",
        "type": "String"
       }
      ],
      "name": "parseFile",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "filePath",
        "type": "String"
       },
       {
        "name": "fileContents",
        "type": "String"
       }
      ],
      "name": "parseFile",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "filePath",
        "type": "String"
       },
       {
        "name": "reader",
        "type": "Reader"
       }
      ],
      "name": "parseFileReader",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "line",
        "type": "String"
       }
      ],
      "name": "parseLine",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "logger",
      "type": "Logger"
     },
     {
      "name": "depMatcher",
      "type": "Matcher"
     },
     {
      "name": "depArgsMatch",
      "type": "Matcher"
     },
     {
      "name": "depInfos",
      "type": "List"
     },
     {
      "name": "pathTranslator",
      "type": "Function"
     }
    ],
    "name": "DepsFileParser"
   }
  ]
 },
 {
  "filename": "JsFileLineParser.java",
  "package_name": "com.google.javascript.jscomp.deps",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "mode",
        "type": "boolean"
       }
      ],
      "name": "setShortcutMode",
      "type": null
     },
     {
      "params": [],
      "name": "didParseSucceed",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "filePath",
        "type": "String"
       },
       {
        "name": "fileContents",
        "type": "Reader"
       }
      ],
      "name": "doParse",
      "type": null
     },
     {
      "params": [
       {
        "name": "line",
        "type": "String"
       }
      ],
      "name": "parseLine",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "jsStringLiteral",
        "type": "String"
       }
      ],
      "name": "parseJsString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "input",
        "type": "String"
       }
      ],
      "name": "parseJsStringArray",
      "type": "List"
     }
    ],
    "fields": [
     {
      "name": "PARSE_WARNING",
      "type": "DiagnosticType"
     },
     {
      "name": "PARSE_ERROR",
      "type": "DiagnosticType"
     },
     {
      "name": "shortcutMode",
      "type": "boolean"
     },
     {
      "name": "STRING_LITERAL_PATTERN",
      "type": "Pattern"
     },
     {
      "name": "valueMatcher",
      "type": "Matcher"
     },
     {
      "name": "filePath",
      "type": "String"
     },
     {
      "name": "lineNum",
      "type": "int"
     },
     {
      "name": "errorManager",
      "type": "ErrorManager"
     },
     {
      "name": "parseSucceeded",
      "type": "boolean"
     }
    ],
    "name": "JsFileLineParser"
   }
  ]
 },
 {
  "filename": "SimpleSourceExcerptProvider.java",
  "package_name": "com.google.javascript.jscomp.testing",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "lineNumber",
        "type": "int"
       }
      ],
      "name": "getSourceLine",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "lineNumber",
        "type": "int"
       }
      ],
      "name": "getSourceRegion",
      "type": "Region"
     }
    ],
    "fields": [
     {
      "name": "sourceFile",
      "type": "SourceFile"
     }
    ],
    "name": "SimpleSourceExcerptProvider"
   }
  ]
 },
 {
  "filename": "TestErrorReporter.java",
  "package_name": "com.google.javascript.jscomp.testing",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "error",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "warning",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "runtimeError",
      "type": "EvaluatorException"
     },
     {
      "params": [],
      "name": "hasEncounteredAllWarnings",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hasEncounteredAllErrors",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "errors",
      "type": "String"
     },
     {
      "name": "warnings",
      "type": "String"
     },
     {
      "name": "errorsIndex",
      "type": "int"
     },
     {
      "name": "warningsIndex",
      "type": "int"
     }
    ],
    "name": "TestErrorReporter"
   }
  ]
 },
 {
  "filename": "CaseCanonicalize.java",
  "package_name": "com.google.javascript.jscomp.regex",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "caseCanonicalize",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "ch",
        "type": "char"
       }
      ],
      "name": "caseCanonicalize",
      "type": "char"
     },
     {
      "params": [
       {
        "name": "ranges",
        "type": "CharRanges"
       }
      ],
      "name": "expandToAllMatched",
      "type": "CharRanges"
     },
     {
      "params": [
       {
        "name": "ranges",
        "type": "CharRanges"
       }
      ],
      "name": "reduceToMinimum",
      "type": "CharRanges"
     }
    ],
    "fields": [
     {
      "name": "CASE_SENSITIVE",
      "type": "CharRanges"
     },
     {
      "name": "UCASE_ASCII_LETTERS",
      "type": "CharRanges"
     },
     {
      "name": "DELTA_SETS",
      "type": "ImmutableList"
     },
     {
      "name": "CANON_DELTA_SETS",
      "type": "ImmutableList"
     }
    ],
    "name": "CaseCanonicalize"
   }
  ]
 },
 {
  "filename": "CharRanges.java",
  "package_name": "com.google.javascript.jscomp.regex",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "start",
        "type": "int"
       },
       {
        "name": "end",
        "type": "int"
       }
      ],
      "name": "inclusive",
      "type": "CharRanges"
     },
     {
      "params": [
       {
        "name": "members",
        "type": "int"
       }
      ],
      "name": "withMembers",
      "type": "CharRanges"
     },
     {
      "params": [
       {
        "name": "ranges",
        "type": "int"
       }
      ],
      "name": "withRanges",
      "type": "CharRanges"
     },
     {
      "params": [
       {
        "name": "members",
        "type": "int"
       }
      ],
      "name": "intArrayToRanges",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "bit",
        "type": "int"
       }
      ],
      "name": "contains",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "minSetBit",
      "type": "int"
     },
     {
      "params": [],
      "name": "isEmpty",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getNumRanges",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "i",
        "type": "int"
       }
      ],
      "name": "start",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "i",
        "type": "int"
       }
      ],
      "name": "end",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "other",
        "type": "CharRanges"
       }
      ],
      "name": "union",
      "type": "CharRanges"
     },
     {
      "params": [
       {
        "name": "other",
        "type": "CharRanges"
       }
      ],
      "name": "intersection",
      "type": "CharRanges"
     },
     {
      "params": [
       {
        "name": "subtrahendRanges",
        "type": "CharRanges"
       }
      ],
      "name": "difference",
      "type": "CharRanges"
     },
     {
      "params": [
       {
        "name": "sub",
        "type": "CharRanges"
       }
      ],
      "name": "containsAll",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "delta",
        "type": "int"
       }
      ],
      "name": "shift",
      "type": "CharRanges"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "o",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "ranges",
      "type": "int"
     },
     {
      "name": "EMPTY",
      "type": "CharRanges"
     },
     {
      "name": "ALL_CODE_UNITS",
      "type": "CharRanges"
     }
    ],
    "name": "CharRanges"
   }
  ]
 },
 {
  "filename": "RegExpTree.java",
  "package_name": "com.google.javascript.jscomp.regex",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "flags",
        "type": "String"
       }
      ],
      "name": "simplify",
      "type": "RegExpTree"
     },
     {
      "params": [],
      "name": "isCaseSensitive",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "containsAnchor",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hasCapturingGroup",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "numCapturingGroups",
      "type": "int"
     },
     {
      "params": [],
      "name": "children",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "sb",
        "type": "StringBuilder"
       }
      ],
      "name": "appendSourceCode",
      "type": null
     },
     {
      "params": [
       {
        "name": "sb",
        "type": "StringBuilder"
       }
      ],
      "name": "appendDebugInfo",
      "type": null
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "toDebugString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "sb",
        "type": "StringBuilder"
       }
      ],
      "name": "appendDebugString",
      "type": null
     },
     {
      "params": [
       {
        "name": "o",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "pattern",
        "type": "String"
       },
       {
        "name": "flags",
        "type": "String"
       }
      ],
      "name": "parseRegExp",
      "type": "RegExpTree"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "RegExpTree"
       },
       {
        "name": "flags",
        "type": "String"
       }
      ],
      "name": "matchesWholeInput",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "ch",
        "type": "char"
       },
       {
        "name": "sb",
        "type": "StringBuilder"
       }
      ],
      "name": "escapeCharOnto",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "NEVER_MATCHES",
      "type": "RegExpTree"
     },
     {
      "name": "DIGITS",
      "type": "CharRanges"
     },
     {
      "name": "UCASE_LETTERS",
      "type": "CharRanges"
     },
     {
      "name": "LCASE_LETTERS",
      "type": "CharRanges"
     },
     {
      "name": "LETTERS",
      "type": "CharRanges"
     },
     {
      "name": "WORD_CHARS",
      "type": "CharRanges"
     },
     {
      "name": "INVERSE_WORD_CHARS",
      "type": "CharRanges"
     },
     {
      "name": "SPACE_CHARS",
      "type": "CharRanges"
     },
     {
      "name": "IE_SPACE_CHARS",
      "type": "CharRanges"
     },
     {
      "name": "IE_SPEC_ERRORS",
      "type": "CharRanges"
     },
     {
      "name": "NAMED_CHAR_GROUPS",
      "type": "ImmutableMap"
     },
     {
      "name": "DOT_CHARSET",
      "type": "Charset"
     }
    ],
    "name": "RegExpTree"
   }
  ]
 },
 {
  "filename": "Decompiler.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getEncodedSource",
      "type": "String"
     },
     {
      "params": [],
      "name": "getCurrentOffset",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "functionType",
        "type": "int"
       }
      ],
      "name": "markFunctionStart",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "functionStart",
        "type": "int"
       }
      ],
      "name": "markFunctionEnd",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "int"
       }
      ],
      "name": "addToken",
      "type": null
     },
     {
      "params": [
       {
        "name": "token",
        "type": "int"
       }
      ],
      "name": "addEOL",
      "type": null
     },
     {
      "params": [
       {
        "name": "str",
        "type": "String"
       }
      ],
      "name": "addName",
      "type": null
     },
     {
      "params": [
       {
        "name": "str",
        "type": "String"
       }
      ],
      "name": "addString",
      "type": null
     },
     {
      "params": [
       {
        "name": "regexp",
        "type": "String"
       },
       {
        "name": "flags",
        "type": "String"
       }
      ],
      "name": "addRegexp",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "double"
       }
      ],
      "name": "addNumber",
      "type": null
     },
     {
      "params": [
       {
        "name": "str",
        "type": "String"
       }
      ],
      "name": "appendString",
      "type": null
     },
     {
      "params": [
       {
        "name": "c",
        "type": "char"
       }
      ],
      "name": "append",
      "type": null
     },
     {
      "params": [
       {
        "name": "minimalCapacity",
        "type": "int"
       }
      ],
      "name": "increaseSourceCapacity",
      "type": null
     },
     {
      "params": [
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "sourceToString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "source",
        "type": "String"
       },
       {
        "name": "flags",
        "type": "int"
       },
       {
        "name": "properties",
        "type": "UintMap"
       }
      ],
      "name": "decompile",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "source",
        "type": "String"
       },
       {
        "name": "length",
        "type": "int"
       },
       {
        "name": "i",
        "type": "int"
       }
      ],
      "name": "getNext",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "source",
        "type": "String"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "getSourceStringEnd",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "source",
        "type": "String"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "asQuotedString",
        "type": "boolean"
       },
       {
        "name": "sb",
        "type": "StringBuffer"
       }
      ],
      "name": "printSourceString",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "source",
        "type": "String"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "sb",
        "type": "StringBuffer"
       }
      ],
      "name": "printSourceNumber",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "ONLY_BODY_FLAG",
      "type": "int"
     },
     {
      "name": "TO_SOURCE_FLAG",
      "type": "int"
     },
     {
      "name": "INITIAL_INDENT_PROP",
      "type": "int"
     },
     {
      "name": "INDENT_GAP_PROP",
      "type": "int"
     },
     {
      "name": "CASE_GAP_PROP",
      "type": "int"
     },
     {
      "name": "FUNCTION_END",
      "type": "int"
     },
     {
      "name": "sourceBuffer",
      "type": "char"
     },
     {
      "name": "sourceTop",
      "type": "int"
     },
     {
      "name": "printSource",
      "type": "boolean"
     }
    ],
    "name": "Decompiler"
   }
  ]
 },
 {
  "filename": "ScriptRuntime.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "c",
        "type": "int"
       }
      ],
      "name": "isJSLineTerminator",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       },
       {
        "name": "start",
        "type": "int"
       },
       {
        "name": "radix",
        "type": "int"
       }
      ],
      "name": "stringToNumber",
      "type": "double"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "escapeString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       },
       {
        "name": "escapeQuote",
        "type": "char"
       }
      ],
      "name": "escapeString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "isValidIdentifierName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "val",
        "type": "Object"
       }
      ],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "d",
        "type": "double"
       },
       {
        "name": "base",
        "type": "int"
       }
      ],
      "name": "numberToString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "str",
        "type": "String"
       }
      ],
      "name": "testUint32String",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "isSpecialProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       }
      ],
      "name": "getMessage0",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       },
       {
        "name": "arg1",
        "type": "Object"
       }
      ],
      "name": "getMessage1",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       },
       {
        "name": "arg1",
        "type": "Object"
       },
       {
        "name": "arg2",
        "type": "Object"
       }
      ],
      "name": "getMessage2",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       },
       {
        "name": "arg1",
        "type": "Object"
       },
       {
        "name": "arg2",
        "type": "Object"
       },
       {
        "name": "arg3",
        "type": "Object"
       }
      ],
      "name": "getMessage3",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       },
       {
        "name": "arg1",
        "type": "Object"
       },
       {
        "name": "arg2",
        "type": "Object"
       },
       {
        "name": "arg3",
        "type": "Object"
       },
       {
        "name": "arg4",
        "type": "Object"
       }
      ],
      "name": "getMessage4",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       },
       {
        "name": "arguments",
        "type": "Object"
       }
      ],
      "name": "getMessage",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "error",
        "type": "String"
       },
       {
        "name": "message",
        "type": "String"
       }
      ],
      "name": "constructError",
      "type": "EcmaError"
     },
     {
      "params": [
       {
        "name": "error",
        "type": "String"
       },
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "lineNumber",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "columnNumber",
        "type": "int"
       }
      ],
      "name": "constructError",
      "type": "EcmaError"
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       }
      ],
      "name": "typeError",
      "type": "EcmaError"
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       }
      ],
      "name": "typeError0",
      "type": "EcmaError"
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       },
       {
        "name": "arg1",
        "type": "String"
       }
      ],
      "name": "typeError1",
      "type": "EcmaError"
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       },
       {
        "name": "arg1",
        "type": "String"
       },
       {
        "name": "arg2",
        "type": "String"
       }
      ],
      "name": "typeError2",
      "type": "EcmaError"
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       },
       {
        "name": "arg1",
        "type": "String"
       },
       {
        "name": "arg2",
        "type": "String"
       },
       {
        "name": "arg3",
        "type": "String"
       }
      ],
      "name": "typeError3",
      "type": "EcmaError"
     },
     {
      "params": [
       {
        "name": "object",
        "type": "Object"
       },
       {
        "name": "id",
        "type": "Object"
       }
      ],
      "name": "undefReadError",
      "type": "RuntimeException"
     },
     {
      "params": [
       {
        "name": "object",
        "type": "Object"
       },
       {
        "name": "id",
        "type": "Object"
       }
      ],
      "name": "undefCallError",
      "type": "RuntimeException"
     },
     {
      "params": [
       {
        "name": "object",
        "type": "Object"
       },
       {
        "name": "id",
        "type": "Object"
       },
       {
        "name": "value",
        "type": "Object"
       }
      ],
      "name": "undefWriteError",
      "type": "RuntimeException"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "Object"
       }
      ],
      "name": "notFunctionError",
      "type": "RuntimeException"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "Object"
       },
       {
        "name": "messageHelper",
        "type": "Object"
       }
      ],
      "name": "notFunctionError",
      "type": "RuntimeException"
     },
     {
      "params": [
       {
        "name": "cx",
        "type": "Context"
       }
      ],
      "name": "lastIndexResult",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "cx",
        "type": "Context"
       },
       {
        "name": "value",
        "type": "long"
       }
      ],
      "name": "storeUint32Result",
      "type": null
     },
     {
      "params": [
       {
        "name": "cx",
        "type": "Context"
       }
      ],
      "name": "lastUint32Result",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "isEval",
        "type": "boolean"
       },
       {
        "name": "masterScriptUrl",
        "type": "String"
       },
       {
        "name": "masterScriptLine",
        "type": "int"
       }
      ],
      "name": "makeUrlForGeneratedScript",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "sourceUrl",
        "type": "String"
       }
      ],
      "name": "isGeneratedScript",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "NaN",
      "type": "double"
     },
     {
      "name": "negativeZero",
      "type": "double"
     },
     {
      "name": "NaNobj",
      "type": "Double"
     },
     {
      "name": "emptyArgs",
      "type": "Object"
     },
     {
      "name": "emptyStrings",
      "type": "String"
     }
    ],
    "name": "ScriptRuntime"
   }
  ]
 },
 {
  "filename": "Token.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "shouldPrintTrees",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "int"
       }
      ],
      "name": "name",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "printTrees",
      "type": "boolean"
     },
     {
      "name": "printNames",
      "type": "boolean"
     },
     {
      "name": "ERROR",
      "type": "int"
     },
     {
      "name": "EOF",
      "type": "int"
     },
     {
      "name": "EOL",
      "type": "int"
     },
     {
      "name": "FIRST_BYTECODE_TOKEN",
      "type": "int"
     },
     {
      "name": "ENTERWITH",
      "type": "int"
     },
     {
      "name": "LEAVEWITH",
      "type": "int"
     },
     {
      "name": "RETURN",
      "type": "int"
     },
     {
      "name": "GOTO",
      "type": "int"
     },
     {
      "name": "IFEQ",
      "type": "int"
     },
     {
      "name": "IFNE",
      "type": "int"
     },
     {
      "name": "SETNAME",
      "type": "int"
     },
     {
      "name": "BITOR",
      "type": "int"
     },
     {
      "name": "BITXOR",
      "type": "int"
     },
     {
      "name": "BITAND",
      "type": "int"
     },
     {
      "name": "EQ",
      "type": "int"
     },
     {
      "name": "NE",
      "type": "int"
     },
     {
      "name": "LT",
      "type": "int"
     },
     {
      "name": "LE",
      "type": "int"
     },
     {
      "name": "GT",
      "type": "int"
     },
     {
      "name": "GE",
      "type": "int"
     },
     {
      "name": "LSH",
      "type": "int"
     },
     {
      "name": "RSH",
      "type": "int"
     },
     {
      "name": "URSH",
      "type": "int"
     },
     {
      "name": "ADD",
      "type": "int"
     },
     {
      "name": "SUB",
      "type": "int"
     },
     {
      "name": "MUL",
      "type": "int"
     },
     {
      "name": "DIV",
      "type": "int"
     },
     {
      "name": "MOD",
      "type": "int"
     },
     {
      "name": "NOT",
      "type": "int"
     },
     {
      "name": "BITNOT",
      "type": "int"
     },
     {
      "name": "POS",
      "type": "int"
     },
     {
      "name": "NEG",
      "type": "int"
     },
     {
      "name": "NEW",
      "type": "int"
     },
     {
      "name": "DELPROP",
      "type": "int"
     },
     {
      "name": "TYPEOF",
      "type": "int"
     },
     {
      "name": "GETPROP",
      "type": "int"
     },
     {
      "name": "SETPROP",
      "type": "int"
     },
     {
      "name": "GETELEM",
      "type": "int"
     },
     {
      "name": "SETELEM",
      "type": "int"
     },
     {
      "name": "CALL",
      "type": "int"
     },
     {
      "name": "NAME",
      "type": "int"
     },
     {
      "name": "NUMBER",
      "type": "int"
     },
     {
      "name": "STRING",
      "type": "int"
     },
     {
      "name": "NULL",
      "type": "int"
     },
     {
      "name": "THIS",
      "type": "int"
     },
     {
      "name": "FALSE",
      "type": "int"
     },
     {
      "name": "TRUE",
      "type": "int"
     },
     {
      "name": "SHEQ",
      "type": "int"
     },
     {
      "name": "SHNE",
      "type": "int"
     },
     {
      "name": "REGEXP",
      "type": "int"
     },
     {
      "name": "BINDNAME",
      "type": "int"
     },
     {
      "name": "THROW",
      "type": "int"
     },
     {
      "name": "RETHROW",
      "type": "int"
     },
     {
      "name": "IN",
      "type": "int"
     },
     {
      "name": "INSTANCEOF",
      "type": "int"
     },
     {
      "name": "LOCAL_LOAD",
      "type": "int"
     },
     {
      "name": "GETVAR",
      "type": "int"
     },
     {
      "name": "SETVAR",
      "type": "int"
     },
     {
      "name": "CATCH_SCOPE",
      "type": "int"
     },
     {
      "name": "ENUM_INIT_KEYS",
      "type": "int"
     },
     {
      "name": "ENUM_INIT_VALUES",
      "type": "int"
     },
     {
      "name": "ENUM_NEXT",
      "type": "int"
     },
     {
      "name": "ENUM_ID",
      "type": "int"
     },
     {
      "name": "THISFN",
      "type": "int"
     },
     {
      "name": "RETURN_RESULT",
      "type": "int"
     },
     {
      "name": "ARRAYLIT",
      "type": "int"
     },
     {
      "name": "OBJECTLIT",
      "type": "int"
     },
     {
      "name": "GET_REF",
      "type": "int"
     },
     {
      "name": "SET_REF",
      "type": "int"
     },
     {
      "name": "DEL_REF",
      "type": "int"
     },
     {
      "name": "REF_CALL",
      "type": "int"
     },
     {
      "name": "REF_SPECIAL",
      "type": "int"
     },
     {
      "name": "DEFAULTNAMESPACE",
      "type": "int"
     },
     {
      "name": "ESCXMLATTR",
      "type": "int"
     },
     {
      "name": "ESCXMLTEXT",
      "type": "int"
     },
     {
      "name": "REF_MEMBER",
      "type": "int"
     },
     {
      "name": "REF_NS_MEMBER",
      "type": "int"
     },
     {
      "name": "REF_NAME",
      "type": "int"
     },
     {
      "name": "REF_NS_NAME",
      "type": "int"
     },
     {
      "name": "LAST_BYTECODE_TOKEN",
      "type": "int"
     },
     {
      "name": "TRY",
      "type": "int"
     },
     {
      "name": "SEMI",
      "type": "int"
     },
     {
      "name": "LB",
      "type": "int"
     },
     {
      "name": "RB",
      "type": "int"
     },
     {
      "name": "LC",
      "type": "int"
     },
     {
      "name": "RC",
      "type": "int"
     },
     {
      "name": "LP",
      "type": "int"
     },
     {
      "name": "RP",
      "type": "int"
     },
     {
      "name": "COMMA",
      "type": "int"
     },
     {
      "name": "ASSIGN",
      "type": "int"
     },
     {
      "name": "ASSIGN_BITOR",
      "type": "int"
     },
     {
      "name": "ASSIGN_BITXOR",
      "type": "int"
     },
     {
      "name": "ASSIGN_BITAND",
      "type": "int"
     },
     {
      "name": "ASSIGN_LSH",
      "type": "int"
     },
     {
      "name": "ASSIGN_RSH",
      "type": "int"
     },
     {
      "name": "ASSIGN_URSH",
      "type": "int"
     },
     {
      "name": "ASSIGN_ADD",
      "type": "int"
     },
     {
      "name": "ASSIGN_SUB",
      "type": "int"
     },
     {
      "name": "ASSIGN_MUL",
      "type": "int"
     },
     {
      "name": "ASSIGN_DIV",
      "type": "int"
     },
     {
      "name": "ASSIGN_MOD",
      "type": "int"
     },
     {
      "name": "FIRST_ASSIGN",
      "type": "int"
     },
     {
      "name": "LAST_ASSIGN",
      "type": "int"
     },
     {
      "name": "HOOK",
      "type": "int"
     },
     {
      "name": "COLON",
      "type": "int"
     },
     {
      "name": "OR",
      "type": "int"
     },
     {
      "name": "AND",
      "type": "int"
     },
     {
      "name": "INC",
      "type": "int"
     },
     {
      "name": "DEC",
      "type": "int"
     },
     {
      "name": "DOT",
      "type": "int"
     },
     {
      "name": "FUNCTION",
      "type": "int"
     },
     {
      "name": "EXPORT",
      "type": "int"
     },
     {
      "name": "IMPORT",
      "type": "int"
     },
     {
      "name": "IF",
      "type": "int"
     },
     {
      "name": "ELSE",
      "type": "int"
     },
     {
      "name": "SWITCH",
      "type": "int"
     },
     {
      "name": "CASE",
      "type": "int"
     },
     {
      "name": "DEFAULT",
      "type": "int"
     },
     {
      "name": "WHILE",
      "type": "int"
     },
     {
      "name": "DO",
      "type": "int"
     },
     {
      "name": "FOR",
      "type": "int"
     },
     {
      "name": "BREAK",
      "type": "int"
     },
     {
      "name": "CONTINUE",
      "type": "int"
     },
     {
      "name": "VAR",
      "type": "int"
     },
     {
      "name": "WITH",
      "type": "int"
     },
     {
      "name": "CATCH",
      "type": "int"
     },
     {
      "name": "FINALLY",
      "type": "int"
     },
     {
      "name": "VOID",
      "type": "int"
     },
     {
      "name": "RESERVED",
      "type": "int"
     },
     {
      "name": "EMPTY",
      "type": "int"
     },
     {
      "name": "BLOCK",
      "type": "int"
     },
     {
      "name": "LABEL",
      "type": "int"
     },
     {
      "name": "TARGET",
      "type": "int"
     },
     {
      "name": "LOOP",
      "type": "int"
     },
     {
      "name": "EXPR_VOID",
      "type": "int"
     },
     {
      "name": "EXPR_RESULT",
      "type": "int"
     },
     {
      "name": "JSR",
      "type": "int"
     },
     {
      "name": "SCRIPT",
      "type": "int"
     },
     {
      "name": "TYPEOFNAME",
      "type": "int"
     },
     {
      "name": "USE_STACK",
      "type": "int"
     },
     {
      "name": "SETPROP_OP",
      "type": "int"
     },
     {
      "name": "SETELEM_OP",
      "type": "int"
     },
     {
      "name": "LOCAL_BLOCK",
      "type": "int"
     },
     {
      "name": "SET_REF_OP",
      "type": "int"
     },
     {
      "name": "DOTDOT",
      "type": "int"
     },
     {
      "name": "COLONCOLON",
      "type": "int"
     },
     {
      "name": "XML",
      "type": "int"
     },
     {
      "name": "DOTQUERY",
      "type": "int"
     },
     {
      "name": "XMLATTR",
      "type": "int"
     },
     {
      "name": "XMLEND",
      "type": "int"
     },
     {
      "name": "TO_OBJECT",
      "type": "int"
     },
     {
      "name": "TO_DOUBLE",
      "type": "int"
     },
     {
      "name": "GET",
      "type": "int"
     },
     {
      "name": "SET",
      "type": "int"
     },
     {
      "name": "CONST",
      "type": "int"
     },
     {
      "name": "SETCONST",
      "type": "int"
     },
     {
      "name": "SETCONSTVAR",
      "type": "int"
     },
     {
      "name": "DEBUGGER",
      "type": "int"
     },
     {
      "name": "LABEL_NAME",
      "type": "int"
     },
     {
      "name": "LAST_TOKEN",
      "type": "int"
     },
     {
      "name": "ANNOTATION",
      "type": "int"
     },
     {
      "name": "PIPE",
      "type": "int"
     },
     {
      "name": "STAR",
      "type": "int"
     },
     {
      "name": "EOC",
      "type": "int"
     },
     {
      "name": "QMARK",
      "type": "int"
     },
     {
      "name": "ELLIPSIS",
      "type": "int"
     },
     {
      "name": "BANG",
      "type": "int"
     },
     {
      "name": "EQUALS",
      "type": "int"
     }
    ],
    "name": "Token"
   }
  ]
 },
 {
  "filename": "ErrorReporter.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "warning",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "error",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "runtimeError",
      "type": "EvaluatorException"
     }
    ],
    "fields": [],
    "name": "ErrorReporter"
   }
  ]
 },
 {
  "filename": "FunctionNode.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getFunctionName",
      "type": "String"
     },
     {
      "params": [],
      "name": "requiresActivation",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getIgnoreDynamicScope",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getFunctionType",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "FUNCTION_STATEMENT",
      "type": "int"
     },
     {
      "name": "FUNCTION_EXPRESSION",
      "type": "int"
     },
     {
      "name": "FUNCTION_EXPRESSION_STATEMENT",
      "type": "int"
     },
     {
      "name": "functionName",
      "type": "String"
     },
     {
      "name": "itsNeedsActivation",
      "type": "boolean"
     },
     {
      "name": "itsFunctionType",
      "type": "int"
     },
     {
      "name": "itsIgnoreDynamicScope",
      "type": "boolean"
     }
    ],
    "name": "FunctionNode"
   }
  ]
 },
 {
  "filename": "ObjArray.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "isSealed",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "seal",
      "type": null
     },
     {
      "params": [],
      "name": "isEmpty",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "size",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "newSize",
        "type": "int"
       }
      ],
      "name": "setSize",
      "type": null
     },
     {
      "params": [
       {
        "name": "index",
        "type": "int"
       }
      ],
      "name": "get",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "index",
        "type": "int"
       },
       {
        "name": "value",
        "type": "Object"
       }
      ],
      "name": "set",
      "type": null
     },
     {
      "params": [
       {
        "name": "index",
        "type": "int"
       }
      ],
      "name": "getImpl",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "index",
        "type": "int"
       },
       {
        "name": "value",
        "type": "Object"
       }
      ],
      "name": "setImpl",
      "type": null
     },
     {
      "params": [
       {
        "name": "obj",
        "type": "Object"
       }
      ],
      "name": "indexOf",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "obj",
        "type": "Object"
       }
      ],
      "name": "lastIndexOf",
      "type": "int"
     },
     {
      "params": [],
      "name": "peek",
      "type": "Object"
     },
     {
      "params": [],
      "name": "pop",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "Object"
       }
      ],
      "name": "push",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "Object"
       }
      ],
      "name": "add",
      "type": null
     },
     {
      "params": [
       {
        "name": "index",
        "type": "int"
       },
       {
        "name": "value",
        "type": "Object"
       }
      ],
      "name": "add",
      "type": null
     },
     {
      "params": [
       {
        "name": "index",
        "type": "int"
       }
      ],
      "name": "remove",
      "type": null
     },
     {
      "params": [],
      "name": "clear",
      "type": null
     },
     {
      "params": [],
      "name": "toArray",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "array",
        "type": "Object"
       }
      ],
      "name": "toArray",
      "type": null
     },
     {
      "params": [
       {
        "name": "array",
        "type": "Object"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "toArray",
      "type": null
     },
     {
      "params": [
       {
        "name": "minimalCapacity",
        "type": "int"
       }
      ],
      "name": "ensureCapacity",
      "type": null
     },
     {
      "params": [
       {
        "name": "index",
        "type": "int"
       },
       {
        "name": "upperBound",
        "type": "int"
       }
      ],
      "name": "onInvalidIndex",
      "type": "RuntimeException"
     },
     {
      "params": [],
      "name": "onEmptyStackTopRead",
      "type": "RuntimeException"
     },
     {
      "params": [],
      "name": "onSeledMutation",
      "type": "RuntimeException"
     },
     {
      "params": [
       {
        "name": "os",
        "type": "ObjectOutputStream"
       }
      ],
      "name": "writeObject",
      "type": null
     },
     {
      "params": [
       {
        "name": "is",
        "type": "ObjectInputStream"
       }
      ],
      "name": "readObject",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "size",
      "type": "int"
     },
     {
      "name": "sealed",
      "type": "boolean"
     },
     {
      "name": "FIELDS_STORE_SIZE",
      "type": "int"
     },
     {
      "name": "f0",
      "type": "Object"
     },
     {
      "name": "f1",
      "type": "Object"
     },
     {
      "name": "f2",
      "type": "Object"
     },
     {
      "name": "f3",
      "type": "Object"
     },
     {
      "name": "f4",
      "type": "Object"
     },
     {
      "name": "data",
      "type": "Object"
     }
    ],
    "name": "ObjArray"
   }
  ]
 },
 {
  "filename": "TokenStream.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "token",
        "type": "int"
       }
      ],
      "name": "tokenToString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "isKeyword",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "stringToKeyword",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "isJSIdentifier",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getLineno",
      "type": "int"
     },
     {
      "params": [],
      "name": "getCharno",
      "type": "int"
     },
     {
      "params": [],
      "name": "getString",
      "type": "String"
     },
     {
      "params": [],
      "name": "getNumber",
      "type": "double"
     },
     {
      "params": [],
      "name": "eof",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getToken",
      "type": "int"
     },
     {
      "params": [],
      "name": "getJSDocToken",
      "type": "int"
     },
     {
      "params": [],
      "name": "getRemainingJSDocLine",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "int"
       }
      ],
      "name": "isJSDocString",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "int"
       }
      ],
      "name": "isAlpha",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "int"
       }
      ],
      "name": "isDigit",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "int"
       }
      ],
      "name": "isJSSpace",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "int"
       }
      ],
      "name": "isJSFormatChar",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getAndResetJSDocInfo",
      "type": "JSDocInfo"
     },
     {
      "params": [],
      "name": "getFileOverviewJSDocInfo",
      "type": "JSDocInfo"
     },
     {
      "params": [],
      "name": "isPopulated",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "startToken",
        "type": "int"
       }
      ],
      "name": "readRegExp",
      "type": null
     },
     {
      "params": [],
      "name": "isXMLAttribute",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getFirstXMLToken",
      "type": "int"
     },
     {
      "params": [],
      "name": "getNextXMLToken",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "quote",
        "type": "int"
       }
      ],
      "name": "readQuotedString",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "readXmlComment",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "readCDATA",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "readEntity",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "readPI",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getStringFromBuffer",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "int"
       }
      ],
      "name": "addToString",
      "type": null
     },
     {
      "params": [],
      "name": "getTokenno",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "int"
       }
      ],
      "name": "ungetChar",
      "type": null
     },
     {
      "params": [
       {
        "name": "test",
        "type": "int"
       }
      ],
      "name": "matchChar",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "peekChar",
      "type": "int"
     },
     {
      "params": [],
      "name": "getChar",
      "type": "int"
     },
     {
      "params": [],
      "name": "skipLine",
      "type": null
     },
     {
      "params": [],
      "name": "getOffset",
      "type": "int"
     },
     {
      "params": [],
      "name": "getLine",
      "type": "String"
     },
     {
      "params": [],
      "name": "fillSourceBuffer",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "fileLevelJsDocBuilder",
        "type": "Node"
       }
      ],
      "name": "setFileLevelJsDocBuilder",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "EOF_CHAR",
      "type": "int"
     },
     {
      "name": "dirtyLine",
      "type": "boolean"
     },
     {
      "name": "regExpFlags",
      "type": "String"
     },
     {
      "name": "pushbackToken",
      "type": "int"
     },
     {
      "name": "tokenno",
      "type": "int"
     },
     {
      "name": "string",
      "type": "String"
     },
     {
      "name": "number",
      "type": "double"
     },
     {
      "name": "stringBuffer",
      "type": "char"
     },
     {
      "name": "stringBufferTop",
      "type": "int"
     },
     {
      "name": "allStrings",
      "type": "ObjToIntMap"
     },
     {
      "name": "ungetBuffer",
      "type": "int"
     },
     {
      "name": "ungetCursor",
      "type": "int"
     },
     {
      "name": "hitEOF",
      "type": "boolean"
     },
     {
      "name": "lineStart",
      "type": "int"
     },
     {
      "name": "lineno",
      "type": "int"
     },
     {
      "name": "charno",
      "type": "int"
     },
     {
      "name": "lineEndChar",
      "type": "int"
     },
     {
      "name": "sourceString",
      "type": "String"
     },
     {
      "name": "sourceReader",
      "type": "Reader"
     },
     {
      "name": "sourceBuffer",
      "type": "char"
     },
     {
      "name": "sourceEnd",
      "type": "int"
     },
     {
      "name": "sourceCursor",
      "type": "int"
     },
     {
      "name": "xmlIsAttribute",
      "type": "boolean"
     },
     {
      "name": "xmlIsTagContent",
      "type": "boolean"
     },
     {
      "name": "xmlOpenTagsCount",
      "type": "int"
     },
     {
      "name": "parser",
      "type": "Parser"
     }
    ],
    "name": "TokenStream"
   }
  ]
 },
 {
  "filename": "Context.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "enter",
      "type": "Context"
     },
     {
      "params": [
       {
        "name": "cx",
        "type": "Context"
       }
      ],
      "name": "enter",
      "type": "Context"
     },
     {
      "params": [],
      "name": "exit",
      "type": null
     },
     {
      "params": [],
      "name": "getCurrentContext",
      "type": "Context"
     },
     {
      "params": [
       {
        "name": "cx",
        "type": "Context"
       }
      ],
      "name": "setThreadContext",
      "type": null
     },
     {
      "params": [],
      "name": "isSealed",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "sealKey",
        "type": "Object"
       }
      ],
      "name": "seal",
      "type": null
     },
     {
      "params": [
       {
        "name": "sealKey",
        "type": "Object"
       }
      ],
      "name": "unseal",
      "type": null
     },
     {
      "params": [],
      "name": "onSealedMutation",
      "type": null
     },
     {
      "params": [],
      "name": "getLanguageVersion",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "version",
        "type": "int"
       }
      ],
      "name": "setLanguageVersion",
      "type": null
     },
     {
      "params": [
       {
        "name": "version",
        "type": "int"
       }
      ],
      "name": "isValidLanguageVersion",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "version",
        "type": "int"
       }
      ],
      "name": "checkLanguageVersion",
      "type": null
     },
     {
      "params": [],
      "name": "getImplementationVersion",
      "type": "String"
     },
     {
      "params": [],
      "name": "getErrorReporter",
      "type": "ErrorReporter"
     },
     {
      "params": [
       {
        "name": "reporter",
        "type": "ErrorReporter"
       }
      ],
      "name": "setErrorReporter",
      "type": "ErrorReporter"
     },
     {
      "params": [],
      "name": "getLocale",
      "type": "Locale"
     },
     {
      "params": [
       {
        "name": "loc",
        "type": "Locale"
       }
      ],
      "name": "setLocale",
      "type": "Locale"
     },
     {
      "params": [
       {
        "name": "l",
        "type": "PropertyChangeListener"
       }
      ],
      "name": "addPropertyChangeListener",
      "type": null
     },
     {
      "params": [
       {
        "name": "l",
        "type": "PropertyChangeListener"
       }
      ],
      "name": "removePropertyChangeListener",
      "type": null
     },
     {
      "params": [
       {
        "name": "property",
        "type": "String"
       },
       {
        "name": "oldValue",
        "type": "Object"
       },
       {
        "name": "newValue",
        "type": "Object"
       }
      ],
      "name": "firePropertyChange",
      "type": null
     },
     {
      "params": [
       {
        "name": "listeners",
        "type": "Object"
       },
       {
        "name": "property",
        "type": "String"
       },
       {
        "name": "oldValue",
        "type": "Object"
       },
       {
        "name": "newValue",
        "type": "Object"
       }
      ],
      "name": "firePropertyChangeImpl",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "reportWarning",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       }
      ],
      "name": "reportWarning",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "reportError",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       }
      ],
      "name": "reportError",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "reportRuntimeError",
      "type": "EvaluatorException"
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       }
      ],
      "name": "reportRuntimeError0",
      "type": "EvaluatorException"
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       },
       {
        "name": "arg1",
        "type": "Object"
       }
      ],
      "name": "reportRuntimeError1",
      "type": "EvaluatorException"
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       },
       {
        "name": "arg1",
        "type": "Object"
       },
       {
        "name": "arg2",
        "type": "Object"
       }
      ],
      "name": "reportRuntimeError2",
      "type": "EvaluatorException"
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       },
       {
        "name": "arg1",
        "type": "Object"
       },
       {
        "name": "arg2",
        "type": "Object"
       },
       {
        "name": "arg3",
        "type": "Object"
       }
      ],
      "name": "reportRuntimeError3",
      "type": "EvaluatorException"
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       },
       {
        "name": "arg1",
        "type": "Object"
       },
       {
        "name": "arg2",
        "type": "Object"
       },
       {
        "name": "arg3",
        "type": "Object"
       },
       {
        "name": "arg4",
        "type": "Object"
       }
      ],
      "name": "reportRuntimeError4",
      "type": "EvaluatorException"
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       }
      ],
      "name": "reportRuntimeError",
      "type": "EvaluatorException"
     },
     {
      "params": [],
      "name": "isGeneratingDebug",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isGeneratingSource",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "generatingSource",
        "type": "boolean"
       }
      ],
      "name": "setGeneratingSource",
      "type": null
     },
     {
      "params": [],
      "name": "getOptimizationLevel",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "optimizationLevel",
        "type": "int"
       }
      ],
      "name": "isValidOptimizationLevel",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "optimizationLevel",
        "type": "int"
       }
      ],
      "name": "checkOptimizationLevel",
      "type": null
     },
     {
      "params": [
       {
        "name": "key",
        "type": "Object"
       }
      ],
      "name": "getThreadLocal",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "Object"
       },
       {
        "name": "value",
        "type": "Object"
       }
      ],
      "name": "putThreadLocal",
      "type": null
     },
     {
      "params": [
       {
        "name": "key",
        "type": "Object"
       }
      ],
      "name": "removeThreadLocal",
      "type": null
     },
     {
      "params": [],
      "name": "hasCompileFunctionsWithDynamicScope",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "flag",
        "type": "boolean"
       }
      ],
      "name": "setCompileFunctionsWithDynamicScope",
      "type": null
     },
     {
      "params": [],
      "name": "getDebuggerContextData",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "featureIndex",
        "type": "int"
       }
      ],
      "name": "hasFeature",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getInstructionObserverThreshold",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "threshold",
        "type": "int"
       }
      ],
      "name": "setInstructionObserverThreshold",
      "type": null
     },
     {
      "params": [],
      "name": "getContext",
      "type": "Context"
     },
     {
      "params": [],
      "name": "isVersionECMA1",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "linep",
        "type": "int"
       }
      ],
      "name": "getSourcePositionFromStack",
      "type": "String"
     },
     {
      "params": [],
      "name": "isGeneratingDebugChanged",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "addActivationName",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "isActivationNeeded",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "removeActivationName",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "VERSION_UNKNOWN",
      "type": "int"
     },
     {
      "name": "VERSION_DEFAULT",
      "type": "int"
     },
     {
      "name": "VERSION_1_0",
      "type": "int"
     },
     {
      "name": "VERSION_1_1",
      "type": "int"
     },
     {
      "name": "VERSION_1_2",
      "type": "int"
     },
     {
      "name": "VERSION_1_3",
      "type": "int"
     },
     {
      "name": "VERSION_1_4",
      "type": "int"
     },
     {
      "name": "VERSION_1_5",
      "type": "int"
     },
     {
      "name": "VERSION_1_6",
      "type": "int"
     },
     {
      "name": "FEATURE_NON_ECMA_GET_YEAR",
      "type": "int"
     },
     {
      "name": "FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME",
      "type": "int"
     },
     {
      "name": "FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER",
      "type": "int"
     },
     {
      "name": "FEATURE_TO_STRING_AS_SOURCE",
      "type": "int"
     },
     {
      "name": "FEATURE_PARENT_PROTO_PROPRTIES",
      "type": "int"
     },
     {
      "name": "FEATURE_E4X",
      "type": "int"
     },
     {
      "name": "FEATURE_DYNAMIC_SCOPE",
      "type": "int"
     },
     {
      "name": "FEATURE_STRICT_VARS",
      "type": "int"
     },
     {
      "name": "FEATURE_STRICT_EVAL",
      "type": "int"
     },
     {
      "name": "FEATURE_LOCATION_INFORMATION_IN_ERROR",
      "type": "int"
     },
     {
      "name": "FEATURE_STRICT_MODE",
      "type": "int"
     },
     {
      "name": "FEATURE_WARNING_AS_ERROR",
      "type": "int"
     },
     {
      "name": "languageVersionProperty",
      "type": "String"
     },
     {
      "name": "errorReporterProperty",
      "type": "String"
     },
     {
      "name": "emptyArgs",
      "type": "Object"
     },
     {
      "name": "threadContexts",
      "type": "ThreadLocal"
     },
     {
      "name": "implementationVersion",
      "type": "String"
     },
     {
      "name": "sealed",
      "type": "boolean"
     },
     {
      "name": "sealKey",
      "type": "Object"
     },
     {
      "name": "iterating",
      "type": "ObjToIntMap"
     },
     {
      "name": "interpreterSecurityDomain",
      "type": "Object"
     },
     {
      "name": "version",
      "type": "int"
     },
     {
      "name": "errorReporter",
      "type": "ErrorReporter"
     },
     {
      "name": "locale",
      "type": "Locale"
     },
     {
      "name": "generatingDebug",
      "type": "boolean"
     },
     {
      "name": "generatingDebugChanged",
      "type": "boolean"
     },
     {
      "name": "generatingSource",
      "type": "boolean"
     },
     {
      "name": "compileFunctionsWithDynamicScopeFlag",
      "type": "boolean"
     },
     {
      "name": "useDynamicScope",
      "type": "boolean"
     },
     {
      "name": "debuggerData",
      "type": "Object"
     },
     {
      "name": "enterCount",
      "type": "int"
     },
     {
      "name": "optimizationLevel",
      "type": "int"
     },
     {
      "name": "propertyListeners",
      "type": "Object"
     },
     {
      "name": "hashtable",
      "type": "Hashtable"
     },
     {
      "name": "activationNames",
      "type": "Hashtable"
     },
     {
      "name": "lastInterpreterFrame",
      "type": "Object"
     },
     {
      "name": "previousInterpreterInvocations",
      "type": "ObjArray"
     },
     {
      "name": "instructionCount",
      "type": "int"
     },
     {
      "name": "instructionThreshold",
      "type": "int"
     },
     {
      "name": "scratchIndex",
      "type": "int"
     },
     {
      "name": "scratchUint32",
      "type": "long"
     }
    ],
    "name": "Context"
   }
  ]
 },
 {
  "filename": "RhinoException.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getMessage",
      "type": "String"
     },
     {
      "params": [],
      "name": "details",
      "type": "String"
     },
     {
      "params": [],
      "name": "sourceName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       }
      ],
      "name": "initSourceName",
      "type": null
     },
     {
      "params": [],
      "name": "lineNumber",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "lineNumber",
        "type": "int"
       }
      ],
      "name": "initLineNumber",
      "type": null
     },
     {
      "params": [],
      "name": "columnNumber",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "columnNumber",
        "type": "int"
       }
      ],
      "name": "initColumnNumber",
      "type": null
     },
     {
      "params": [],
      "name": "lineSource",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "lineSource",
        "type": "String"
       }
      ],
      "name": "initLineSource",
      "type": null
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "lineNumber",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "columnNumber",
        "type": "int"
       }
      ],
      "name": "recordErrorOrigin",
      "type": null
     },
     {
      "params": [],
      "name": "generateStackTrace",
      "type": "String"
     },
     {
      "params": [],
      "name": "getScriptStackTrace",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "filter",
        "type": "FilenameFilter"
       }
      ],
      "name": "getScriptStackTrace",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "PrintWriter"
       }
      ],
      "name": "printStackTrace",
      "type": null
     },
     {
      "params": [
       {
        "name": "s",
        "type": "PrintStream"
       }
      ],
      "name": "printStackTrace",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "sourceName",
      "type": "String"
     },
     {
      "name": "lineNumber",
      "type": "int"
     },
     {
      "name": "lineSource",
      "type": "String"
     },
     {
      "name": "columnNumber",
      "type": "int"
     },
     {
      "name": "interpreterStackInfo",
      "type": "Object"
     },
     {
      "name": "interpreterLineData",
      "type": "int"
     }
    ],
    "name": "RhinoException"
   }
  ]
 },
 {
  "filename": "Node.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "propType",
        "type": "int"
       }
      ],
      "name": "propToString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "number",
        "type": "double"
       }
      ],
      "name": "newNumber",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "number",
        "type": "double"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "newNumber",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "str",
        "type": "String"
       }
      ],
      "name": "newString",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "int"
       },
       {
        "name": "str",
        "type": "String"
       }
      ],
      "name": "newString",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "str",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "newString",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "int"
       },
       {
        "name": "str",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "newString",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getType",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "int"
       }
      ],
      "name": "setType",
      "type": null
     },
     {
      "params": [],
      "name": "hasChildren",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getFirstChild",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getLastChild",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getNext",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "child",
        "type": "Node"
       }
      ],
      "name": "getChildBefore",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "i",
        "type": "int"
       }
      ],
      "name": "getChildAtIndex",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "child",
        "type": "Node"
       }
      ],
      "name": "getIndexOfChild",
      "type": "int"
     },
     {
      "params": [],
      "name": "getLastSibling",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "child",
        "type": "Node"
       }
      ],
      "name": "addChildToFront",
      "type": null
     },
     {
      "params": [
       {
        "name": "child",
        "type": "Node"
       }
      ],
      "name": "addChildToBack",
      "type": null
     },
     {
      "params": [
       {
        "name": "children",
        "type": "Node"
       }
      ],
      "name": "addChildrenToFront",
      "type": null
     },
     {
      "params": [
       {
        "name": "children",
        "type": "Node"
       }
      ],
      "name": "addChildrenToBack",
      "type": null
     },
     {
      "params": [
       {
        "name": "newChild",
        "type": "Node"
       },
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "addChildBefore",
      "type": null
     },
     {
      "params": [
       {
        "name": "newChild",
        "type": "Node"
       },
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "addChildAfter",
      "type": null
     },
     {
      "params": [
       {
        "name": "child",
        "type": "Node"
       }
      ],
      "name": "removeChild",
      "type": null
     },
     {
      "params": [
       {
        "name": "child",
        "type": "Node"
       },
       {
        "name": "newChild",
        "type": "Node"
       }
      ],
      "name": "replaceChild",
      "type": null
     },
     {
      "params": [
       {
        "name": "prevChild",
        "type": "Node"
       },
       {
        "name": "newChild",
        "type": "Node"
       }
      ],
      "name": "replaceChildAfter",
      "type": null
     },
     {
      "params": [
       {
        "name": "propType",
        "type": "int"
       }
      ],
      "name": "lookupProperty",
      "type": "PropListItem"
     },
     {
      "params": [
       {
        "name": "other",
        "type": "Node"
       }
      ],
      "name": "clonePropsFrom",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "propType",
        "type": "int"
       }
      ],
      "name": "removeProp",
      "type": null
     },
     {
      "params": [
       {
        "name": "item",
        "type": "PropListItem"
       },
       {
        "name": "propType",
        "type": "int"
       }
      ],
      "name": "removeProp",
      "type": "PropListItem"
     },
     {
      "params": [
       {
        "name": "propType",
        "type": "int"
       }
      ],
      "name": "getProp",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "propType",
        "type": "int"
       }
      ],
      "name": "getBooleanProp",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propType",
        "type": "int"
       }
      ],
      "name": "getIntProp",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "propType",
        "type": "int"
       }
      ],
      "name": "getExistingIntProp",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "propType",
        "type": "int"
       },
       {
        "name": "value",
        "type": "Object"
       }
      ],
      "name": "putProp",
      "type": null
     },
     {
      "params": [
       {
        "name": "propType",
        "type": "int"
       },
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "putBooleanProp",
      "type": null
     },
     {
      "params": [
       {
        "name": "propType",
        "type": "int"
       },
       {
        "name": "value",
        "type": "int"
       }
      ],
      "name": "putIntProp",
      "type": null
     },
     {
      "params": [
       {
        "name": "propType",
        "type": "int"
       },
       {
        "name": "value",
        "type": "Object"
       },
       {
        "name": "next",
        "type": "PropListItem"
       }
      ],
      "name": "createProp",
      "type": "PropListItem"
     },
     {
      "params": [
       {
        "name": "propType",
        "type": "int"
       },
       {
        "name": "value",
        "type": "int"
       },
       {
        "name": "next",
        "type": "PropListItem"
       }
      ],
      "name": "createProp",
      "type": "PropListItem"
     },
     {
      "params": [],
      "name": "getSortedPropTypes",
      "type": "int"
     },
     {
      "params": [],
      "name": "getDouble",
      "type": "double"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "double"
       }
      ],
      "name": "setDouble",
      "type": null
     },
     {
      "params": [],
      "name": "getString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "setString",
      "type": null
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "printSource",
        "type": "boolean"
       },
       {
        "name": "printAnnotations",
        "type": "boolean"
       },
       {
        "name": "printType",
        "type": "boolean"
       }
      ],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "sb",
        "type": "StringBuilder"
       },
       {
        "name": "printSource",
        "type": "boolean"
       },
       {
        "name": "printAnnotations",
        "type": "boolean"
       },
       {
        "name": "printType",
        "type": "boolean"
       }
      ],
      "name": "toString",
      "type": null
     },
     {
      "params": [],
      "name": "toStringTree",
      "type": "String"
     },
     {
      "params": [],
      "name": "toStringTreeImpl",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "appendable",
        "type": "Appendable"
       }
      ],
      "name": "appendStringTree",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "level",
        "type": "int"
       },
       {
        "name": "sb",
        "type": "Appendable"
       }
      ],
      "name": "toStringTreeHelper",
      "type": null
     },
     {
      "params": [
       {
        "name": "file",
        "type": "StaticSourceFile"
       }
      ],
      "name": "setStaticSourceFile",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "setSourceFileForTesting",
      "type": null
     },
     {
      "params": [],
      "name": "getSourceFileName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getStaticSourceFile",
      "type": "StaticSourceFile"
     },
     {
      "params": [
       {
        "name": "inputId",
        "type": "InputId"
       }
      ],
      "name": "setInputId",
      "type": null
     },
     {
      "params": [],
      "name": "getInputId",
      "type": "InputId"
     },
     {
      "params": [],
      "name": "isFromExterns",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getLength",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "setLength",
      "type": null
     },
     {
      "params": [],
      "name": "getLineno",
      "type": "int"
     },
     {
      "params": [],
      "name": "getCharno",
      "type": "int"
     },
     {
      "params": [],
      "name": "getSourceOffset",
      "type": "int"
     },
     {
      "params": [],
      "name": "getSourcePosition",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "lineno",
        "type": "int"
       }
      ],
      "name": "setLineno",
      "type": null
     },
     {
      "params": [
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "setCharno",
      "type": null
     },
     {
      "params": [
       {
        "name": "sourcePosition",
        "type": "int"
       }
      ],
      "name": "setSourceEncodedPosition",
      "type": null
     },
     {
      "params": [
       {
        "name": "sourcePosition",
        "type": "int"
       }
      ],
      "name": "setSourceEncodedPositionForTree",
      "type": null
     },
     {
      "params": [
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "mergeLineCharNo",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "lineCharNo",
        "type": "int"
       }
      ],
      "name": "extractLineno",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "lineCharNo",
        "type": "int"
       }
      ],
      "name": "extractCharno",
      "type": "int"
     },
     {
      "params": [],
      "name": "children",
      "type": "Iterable"
     },
     {
      "params": [],
      "name": "siblings",
      "type": "Iterable"
     },
     {
      "params": [],
      "name": "getPropListHeadForTesting",
      "type": "PropListItem"
     },
     {
      "params": [],
      "name": "getParent",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "level",
        "type": "int"
       }
      ],
      "name": "getAncestor",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getAncestors",
      "type": "AncestorIterable"
     },
     {
      "params": [],
      "name": "hasOneChild",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hasMoreThanOneChild",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getChildCount",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "child",
        "type": "Node"
       }
      ],
      "name": "hasChild",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node2",
        "type": "Node"
       }
      ],
      "name": "checkTreeEquals",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "getNodeClass",
      "type": "Class"
     },
     {
      "params": [
       {
        "name": "node2",
        "type": "Node"
       }
      ],
      "name": "checkTreeEqualsImpl",
      "type": "NodeMismatch"
     },
     {
      "params": [
       {
        "name": "node2",
        "type": "Node"
       }
      ],
      "name": "checkTreeTypeAwareEqualsImpl",
      "type": "NodeMismatch"
     },
     {
      "params": [
       {
        "name": "token",
        "type": "int"
       }
      ],
      "name": "tokenToName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "isEquivalentTo",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "isEquivalentToTyped",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       },
       {
        "name": "compareJsType",
        "type": "boolean"
       },
       {
        "name": "recurse",
        "type": "boolean"
       }
      ],
      "name": "isEquivalentTo",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hasSideEffects",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getQualifiedName",
      "type": "String"
     },
     {
      "params": [],
      "name": "isQualifiedName",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isUnscopedQualifiedName",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "detachFromParent",
      "type": "Node"
     },
     {
      "params": [],
      "name": "removeFirstChild",
      "type": "Node"
     },
     {
      "params": [],
      "name": "removeChildren",
      "type": "Node"
     },
     {
      "params": [],
      "name": "detachChildren",
      "type": null
     },
     {
      "params": [
       {
        "name": "prev",
        "type": "Node"
       }
      ],
      "name": "removeChildAfter",
      "type": "Node"
     },
     {
      "params": [],
      "name": "cloneNode",
      "type": "Node"
     },
     {
      "params": [],
      "name": "cloneTree",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "other",
        "type": "Node"
       }
      ],
      "name": "copyInformationFrom",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "other",
        "type": "Node"
       }
      ],
      "name": "copyInformationFromForTree",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "other",
        "type": "Node"
       }
      ],
      "name": "useSourceInfoFrom",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "other",
        "type": "Node"
       }
      ],
      "name": "useSourceInfoFromForTree",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "other",
        "type": "Node"
       }
      ],
      "name": "useSourceInfoIfMissingFrom",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "other",
        "type": "Node"
       }
      ],
      "name": "useSourceInfoIfMissingFromForTree",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getJSType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "jsType",
        "type": "JSType"
       }
      ],
      "name": "setJSType",
      "type": null
     },
     {
      "params": [],
      "name": "getJsDocBuilderForNode",
      "type": "FileLevelJsDocBuilder"
     },
     {
      "params": [],
      "name": "getJSDocInfo",
      "type": "JSDocInfo"
     },
     {
      "params": [
       {
        "name": "info",
        "type": "JSDocInfo"
       }
      ],
      "name": "setJSDocInfo",
      "type": null
     },
     {
      "params": [
       {
        "name": "varArgs",
        "type": "boolean"
       }
      ],
      "name": "setVarArgs",
      "type": null
     },
     {
      "params": [],
      "name": "isVarArgs",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "optionalArg",
        "type": "boolean"
       }
      ],
      "name": "setOptionalArg",
      "type": null
     },
     {
      "params": [],
      "name": "isOptionalArg",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "val",
        "type": "boolean"
       }
      ],
      "name": "setIsSyntheticBlock",
      "type": null
     },
     {
      "params": [],
      "name": "isSyntheticBlock",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "val",
        "type": "Set"
       }
      ],
      "name": "setDirectives",
      "type": null
     },
     {
      "params": [],
      "name": "getDirectives",
      "type": "Set"
     },
     {
      "params": [
       {
        "name": "warning",
        "type": "String"
       }
      ],
      "name": "addSuppression",
      "type": null
     },
     {
      "params": [
       {
        "name": "val",
        "type": "boolean"
       }
      ],
      "name": "setWasEmptyNode",
      "type": null
     },
     {
      "params": [],
      "name": "wasEmptyNode",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "flags",
        "type": "int"
       }
      ],
      "name": "setSideEffectFlags",
      "type": null
     },
     {
      "params": [
       {
        "name": "flags",
        "type": "SideEffectFlags"
       }
      ],
      "name": "setSideEffectFlags",
      "type": null
     },
     {
      "params": [],
      "name": "getSideEffectFlags",
      "type": "int"
     },
     {
      "params": [],
      "name": "isOnlyModifiesThisCall",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNoSideEffectsCall",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isLocalResultCall",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "int"
       },
       {
        "name": "flags",
        "type": "int"
       }
      ],
      "name": "areBitFlagsSet",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isQuotedString",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "setQuotedString",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "LOCAL_BLOCK_PROP",
      "type": "int"
     },
     {
      "name": "OBJECT_IDS_PROP",
      "type": "int"
     },
     {
      "name": "CATCH_SCOPE_PROP",
      "type": "int"
     },
     {
      "name": "LABEL_ID_PROP",
      "type": "int"
     },
     {
      "name": "TARGET_PROP",
      "type": "int"
     },
     {
      "name": "BREAK_PROP",
      "type": "int"
     },
     {
      "name": "CONTINUE_PROP",
      "type": "int"
     },
     {
      "name": "ENUM_PROP",
      "type": "int"
     },
     {
      "name": "FUNCTION_PROP",
      "type": "int"
     },
     {
      "name": "TEMP_PROP",
      "type": "int"
     },
     {
      "name": "LOCAL_PROP",
      "type": "int"
     },
     {
      "name": "CODEOFFSET_PROP",
      "type": "int"
     },
     {
      "name": "FIXUPS_PROP",
      "type": "int"
     },
     {
      "name": "VARS_PROP",
      "type": "int"
     },
     {
      "name": "USES_PROP",
      "type": "int"
     },
     {
      "name": "REGEXP_PROP",
      "type": "int"
     },
     {
      "name": "CASES_PROP",
      "type": "int"
     },
     {
      "name": "DEFAULT_PROP",
      "type": "int"
     },
     {
      "name": "CASEARRAY_PROP",
      "type": "int"
     },
     {
      "name": "SOURCENAME_PROP",
      "type": "int"
     },
     {
      "name": "TYPE_PROP",
      "type": "int"
     },
     {
      "name": "SPECIAL_PROP_PROP",
      "type": "int"
     },
     {
      "name": "LABEL_PROP",
      "type": "int"
     },
     {
      "name": "FINALLY_PROP",
      "type": "int"
     },
     {
      "name": "LOCALCOUNT_PROP",
      "type": "int"
     },
     {
      "name": "TARGETBLOCK_PROP",
      "type": "int"
     },
     {
      "name": "VARIABLE_PROP",
      "type": "int"
     },
     {
      "name": "LASTUSE_PROP",
      "type": "int"
     },
     {
      "name": "ISNUMBER_PROP",
      "type": "int"
     },
     {
      "name": "DIRECTCALL_PROP",
      "type": "int"
     },
     {
      "name": "SPECIALCALL_PROP",
      "type": "int"
     },
     {
      "name": "DEBUGSOURCE_PROP",
      "type": "int"
     },
     {
      "name": "JSDOC_INFO_PROP",
      "type": "int"
     },
     {
      "name": "VAR_ARGS_NAME",
      "type": "int"
     },
     {
      "name": "SKIP_INDEXES_PROP",
      "type": "int"
     },
     {
      "name": "INCRDECR_PROP",
      "type": "int"
     },
     {
      "name": "MEMBER_TYPE_PROP",
      "type": "int"
     },
     {
      "name": "NAME_PROP",
      "type": "int"
     },
     {
      "name": "PARENTHESIZED_PROP",
      "type": "int"
     },
     {
      "name": "QUOTED_PROP",
      "type": "int"
     },
     {
      "name": "OPT_ARG_NAME",
      "type": "int"
     },
     {
      "name": "SYNTHETIC_BLOCK_PROP",
      "type": "int"
     },
     {
      "name": "EMPTY_BLOCK",
      "type": "int"
     },
     {
      "name": "ORIGINALNAME_PROP",
      "type": "int"
     },
     {
      "name": "BRACELESS_TYPE",
      "type": "int"
     },
     {
      "name": "SIDE_EFFECT_FLAGS",
      "type": "int"
     },
     {
      "name": "IS_CONSTANT_NAME",
      "type": "int"
     },
     {
      "name": "IS_OPTIONAL_PARAM",
      "type": "int"
     },
     {
      "name": "IS_VAR_ARGS_PARAM",
      "type": "int"
     },
     {
      "name": "IS_NAMESPACE",
      "type": "int"
     },
     {
      "name": "IS_DISPATCHER",
      "type": "int"
     },
     {
      "name": "DIRECTIVES",
      "type": "int"
     },
     {
      "name": "DIRECT_EVAL",
      "type": "int"
     },
     {
      "name": "FREE_CALL",
      "type": "int"
     },
     {
      "name": "STATIC_SOURCE_FILE",
      "type": "int"
     },
     {
      "name": "LENGTH",
      "type": "int"
     },
     {
      "name": "INPUT_ID",
      "type": "int"
     },
     {
      "name": "LAST_PROP",
      "type": "int"
     },
     {
      "name": "BOTH",
      "type": "int"
     },
     {
      "name": "LEFT",
      "type": "int"
     },
     {
      "name": "RIGHT",
      "type": "int"
     },
     {
      "name": "NON_SPECIALCALL",
      "type": "int"
     },
     {
      "name": "SPECIALCALL_EVAL",
      "type": "int"
     },
     {
      "name": "SPECIALCALL_WITH",
      "type": "int"
     },
     {
      "name": "DECR_FLAG",
      "type": "int"
     },
     {
      "name": "POST_FLAG",
      "type": "int"
     },
     {
      "name": "PROPERTY_FLAG",
      "type": "int"
     },
     {
      "name": "ATTRIBUTE_FLAG",
      "type": "int"
     },
     {
      "name": "DESCENDANTS_FLAG",
      "type": "int"
     },
     {
      "name": "type",
      "type": "int"
     },
     {
      "name": "next",
      "type": "Node"
     },
     {
      "name": "first",
      "type": "Node"
     },
     {
      "name": "last",
      "type": "Node"
     },
     {
      "name": "propListHead",
      "type": "PropListItem"
     },
     {
      "name": "COLUMN_BITS",
      "type": "int"
     },
     {
      "name": "MAX_COLUMN_NUMBER",
      "type": "int"
     },
     {
      "name": "COLUMN_MASK",
      "type": "int"
     },
     {
      "name": "sourcePosition",
      "type": "int"
     },
     {
      "name": "jsType",
      "type": "JSType"
     },
     {
      "name": "parent",
      "type": "Node"
     },
     {
      "name": "FLAG_GLOBAL_STATE_UNMODIFIED",
      "type": "int"
     },
     {
      "name": "FLAG_THIS_UNMODIFIED",
      "type": "int"
     },
     {
      "name": "FLAG_ARGUMENTS_UNMODIFIED",
      "type": "int"
     },
     {
      "name": "FLAG_NO_THROWS",
      "type": "int"
     },
     {
      "name": "FLAG_LOCAL_RESULTS",
      "type": "int"
     },
     {
      "name": "SIDE_EFFECTS_FLAGS_MASK",
      "type": "int"
     },
     {
      "name": "SIDE_EFFECTS_ALL",
      "type": "int"
     },
     {
      "name": "NO_SIDE_EFFECTS",
      "type": "int"
     }
    ],
    "name": "Node"
   }
  ]
 },
 {
  "filename": "EvaluatorException.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "EvaluatorException"
   }
  ]
 },
 {
  "filename": "JavaScriptException.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getValue",
      "type": "Object"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "value",
      "type": "Object"
     }
    ],
    "name": "JavaScriptException"
   }
  ]
 },
 {
  "filename": "JSDocInfoBuilder.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "sourceComment",
        "type": "String"
       }
      ],
      "name": "recordOriginalCommentString",
      "type": null
     },
     {
      "params": [],
      "name": "shouldParseDocumentation",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isPopulated",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isPopulatedWithFileOverview",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isDescriptionRecorded",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "associatedNode",
        "type": "Node"
       }
      ],
      "name": "build",
      "type": "JSDocInfo"
     },
     {
      "params": [
       {
        "name": "info",
        "type": "JSDocInfo"
       }
      ],
      "name": "populateDefaults",
      "type": null
     },
     {
      "params": [
       {
        "name": "annotation",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "markAnnotation",
      "type": null
     },
     {
      "params": [
       {
        "name": "text",
        "type": "String"
       },
       {
        "name": "startLineno",
        "type": "int"
       },
       {
        "name": "startCharno",
        "type": "int"
       },
       {
        "name": "endLineno",
        "type": "int"
       },
       {
        "name": "endCharno",
        "type": "int"
       }
      ],
      "name": "markText",
      "type": null
     },
     {
      "params": [
       {
        "name": "typeNode",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "startCharno",
        "type": "int"
       },
       {
        "name": "endCharno",
        "type": "int"
       },
       {
        "name": "hasLC",
        "type": "boolean"
       }
      ],
      "name": "markTypeNode",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "markName",
      "type": null
     },
     {
      "params": [
       {
        "name": "description",
        "type": "String"
       }
      ],
      "name": "recordBlockDescription",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "visibility",
        "type": "Visibility"
       }
      ],
      "name": "recordVisibility",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parameterName",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSTypeExpression"
       }
      ],
      "name": "recordParameter",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parameterName",
        "type": "String"
       },
       {
        "name": "description",
        "type": "String"
       }
      ],
      "name": "recordParameterDescription",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "recordTemplateTypeName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSTypeExpression"
       }
      ],
      "name": "recordThrowType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSTypeExpression"
       },
       {
        "name": "description",
        "type": "String"
       }
      ],
      "name": "recordThrowDescription",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "author",
        "type": "String"
       }
      ],
      "name": "addAuthor",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "reference",
        "type": "String"
       }
      ],
      "name": "addReference",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "recordConsistentIdGenerator",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "version",
        "type": "String"
       }
      ],
      "name": "recordVersion",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "reason",
        "type": "String"
       }
      ],
      "name": "recordDeprecationReason",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "suppressions",
        "type": "Set"
       }
      ],
      "name": "recordSuppressions",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "modifies",
        "type": "Set"
       }
      ],
      "name": "recordModifies",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSTypeExpression"
       }
      ],
      "name": "recordType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSTypeExpression"
       }
      ],
      "name": "recordTypedef",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "recordIdGenerator",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "jsType",
        "type": "JSTypeExpression"
       }
      ],
      "name": "recordReturnType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "description",
        "type": "String"
       }
      ],
      "name": "recordReturnDescription",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSTypeExpression"
       }
      ],
      "name": "recordDefineType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSTypeExpression"
       }
      ],
      "name": "recordEnumParameterType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSTypeExpression"
       }
      ],
      "name": "recordThisType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "jsType",
        "type": "JSTypeExpression"
       }
      ],
      "name": "recordBaseType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "recordConstancy",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "description",
        "type": "String"
       }
      ],
      "name": "recordDescription",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "meaning",
        "type": "String"
       }
      ],
      "name": "recordMeaning",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "description",
        "type": "String"
       }
      ],
      "name": "recordFileOverview",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "recordHiddenness",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "recordNoCompile",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "recordNoTypeCheck",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "recordConstructor",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isConstructorRecorded",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "recordJavaDispatch",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isJavaDispatch",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "recordPreserveTry",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "recordOverride",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "recordNoAlias",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "recordDeprecated",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "recordInterface",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "recordExport",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "recordNoShadow",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "recordImplicitCast",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "recordNoSideEffects",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "recordExterns",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isInterfaceRecorded",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "hasParameter",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "interfaceName",
        "type": "JSTypeExpression"
       }
      ],
      "name": "recordImplementedInterface",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "interfaceType",
        "type": "JSTypeExpression"
       }
      ],
      "name": "recordExtendedInterface",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "recordLends",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hasAnyTypeRelatedTags",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hasAnySingletonTypeTags",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hasAnySingletonSideEffectTags",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "currentInfo",
      "type": "JSDocInfo"
     },
     {
      "name": "populated",
      "type": "boolean"
     },
     {
      "name": "parseDocumentation",
      "type": "boolean"
     },
     {
      "name": "currentMarker",
      "type": "JSDocInfo"
     }
    ],
    "name": "JSDocInfoBuilder"
   }
  ]
 },
 {
  "filename": "InputId.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getIdName",
      "type": "String"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "obj",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "id",
      "type": "String"
     }
    ],
    "name": "InputId"
   }
  ]
 },
 {
  "filename": "Kit.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "className",
        "type": "String"
       }
      ],
      "name": "classOrNull",
      "type": "Class"
     },
     {
      "params": [
       {
        "name": "loader",
        "type": "ClassLoader"
       },
       {
        "name": "className",
        "type": "String"
       }
      ],
      "name": "classOrNull",
      "type": "Class"
     },
     {
      "params": [
       {
        "name": "cl",
        "type": "Class"
       }
      ],
      "name": "newInstanceOrNull",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "ex",
        "type": "RuntimeException"
       },
       {
        "name": "cause",
        "type": "Throwable"
       }
      ],
      "name": "initCause",
      "type": "RuntimeException"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "semicolonSplit",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "int"
       },
       {
        "name": "accumulator",
        "type": "int"
       }
      ],
      "name": "xDigitToInt",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "bag",
        "type": "Object"
       },
       {
        "name": "listener",
        "type": "Object"
       }
      ],
      "name": "addListener",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "bag",
        "type": "Object"
       },
       {
        "name": "listener",
        "type": "Object"
       }
      ],
      "name": "removeListener",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "bag",
        "type": "Object"
       },
       {
        "name": "index",
        "type": "int"
       }
      ],
      "name": "getListener",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "h",
        "type": "Hashtable"
       },
       {
        "name": "key",
        "type": "K"
       },
       {
        "name": "initialValue",
        "type": "V"
       }
      ],
      "name": "initHash",
      "type": "V"
     },
     {
      "params": [
       {
        "name": "key1",
        "type": "Object"
       },
       {
        "name": "key2",
        "type": "Object"
       }
      ],
      "name": "makeHashKeyFromPair",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "r",
        "type": "Reader"
       }
      ],
      "name": "readReader",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "is",
        "type": "InputStream"
       },
       {
        "name": "initialBufferCapacity",
        "type": "int"
       }
      ],
      "name": "readStream",
      "type": "byte"
     },
     {
      "params": [],
      "name": "codeBug",
      "type": "RuntimeException"
     }
    ],
    "fields": [
     {
      "name": "Throwable_initCause",
      "type": "Method"
     }
    ],
    "name": "Kit"
   }
  ]
 },
 {
  "filename": "ObjToIntMap.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "isEmpty",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "size",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "Object"
       }
      ],
      "name": "has",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "Object"
       },
       {
        "name": "defaultValue",
        "type": "int"
       }
      ],
      "name": "get",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "Object"
       }
      ],
      "name": "getExisting",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "Object"
       },
       {
        "name": "value",
        "type": "int"
       }
      ],
      "name": "put",
      "type": null
     },
     {
      "params": [
       {
        "name": "keyArg",
        "type": "Object"
       }
      ],
      "name": "intern",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "Object"
       }
      ],
      "name": "remove",
      "type": null
     },
     {
      "params": [],
      "name": "clear",
      "type": null
     },
     {
      "params": [],
      "name": "newIterator",
      "type": "Iterator"
     },
     {
      "params": [
       {
        "name": "i",
        "type": "Iterator"
       }
      ],
      "name": "initIterator",
      "type": null
     },
     {
      "params": [],
      "name": "getKeys",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "array",
        "type": "Object"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "getKeys",
      "type": null
     },
     {
      "params": [
       {
        "name": "fraction",
        "type": "int"
       },
       {
        "name": "mask",
        "type": "int"
       },
       {
        "name": "power",
        "type": "int"
       }
      ],
      "name": "tableLookupStep",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "Object"
       }
      ],
      "name": "findIndex",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "Object"
       },
       {
        "name": "hash",
        "type": "int"
       }
      ],
      "name": "insertNewKey",
      "type": "int"
     },
     {
      "params": [],
      "name": "rehashTable",
      "type": null
     },
     {
      "params": [
       {
        "name": "key",
        "type": "Object"
       }
      ],
      "name": "ensureIndex",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "out",
        "type": "ObjectOutputStream"
       }
      ],
      "name": "writeObject",
      "type": null
     },
     {
      "params": [
       {
        "name": "in",
        "type": "ObjectInputStream"
       }
      ],
      "name": "readObject",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "A",
      "type": "int"
     },
     {
      "name": "DELETED",
      "type": "Object"
     },
     {
      "name": "keys",
      "type": "Object"
     },
     {
      "name": "values",
      "type": "int"
     },
     {
      "name": "power",
      "type": "int"
     },
     {
      "name": "keyCount",
      "type": "int"
     },
     {
      "name": "occupiedCount",
      "type": "int"
     },
     {
      "name": "check",
      "type": "boolean"
     }
    ],
    "name": "ObjToIntMap"
   }
  ]
 },
 {
  "filename": "UniqueTag.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "readResolve",
      "type": "Object"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "ID_NOT_FOUND",
      "type": "int"
     },
     {
      "name": "ID_NULL_VALUE",
      "type": "int"
     },
     {
      "name": "ID_DOUBLE_MARK",
      "type": "int"
     },
     {
      "name": "NOT_FOUND",
      "type": "UniqueTag"
     },
     {
      "name": "NULL_VALUE",
      "type": "UniqueTag"
     },
     {
      "name": "DOUBLE_MARK",
      "type": "UniqueTag"
     },
     {
      "name": "tagId",
      "type": "int"
     }
    ],
    "name": "UniqueTag"
   }
  ]
 },
 {
  "filename": "SimpleErrorReporter.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "warning",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "error",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "runtimeError",
      "type": "EvaluatorException"
     },
     {
      "params": [],
      "name": "errors",
      "type": "List"
     },
     {
      "params": [],
      "name": "warnings",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "formatDetailedMessage",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "warnings",
      "type": "List"
     },
     {
      "name": "errors",
      "type": "List"
     }
    ],
    "name": "SimpleErrorReporter"
   }
  ]
 },
 {
  "filename": "JSDocInfo.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setConsistentIdGenerator",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setConstant",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setConstructor",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setDefine",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setHidden",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setNoCheck",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setShouldPreserveTry",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setOverride",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setNoAlias",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setDeprecated",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setInterface",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setExport",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setNoShadow",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setIdGenerator",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setImplicitCast",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setNoSideEffects",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setExterns",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setJavaDispatch",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       }
      ],
      "name": "setNoCompile",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "boolean"
       },
       {
        "name": "mask",
        "type": "int"
       }
      ],
      "name": "setFlag",
      "type": null
     },
     {
      "params": [],
      "name": "isConsistentIdGenerator",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isConstant",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isConstructor",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isDefine",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isHidden",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNoTypeCheck",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "shouldPreserveTry",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isOverride",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNoAlias",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isDeprecated",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isInterface",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isExport",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNoShadow",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isIdGenerator",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isImplicitCast",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNoSideEffects",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isExterns",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isJavaDispatch",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNoCompile",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "containsDeclaration",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "mask",
        "type": "int"
       }
      ],
      "name": "getFlag",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "visibility",
        "type": "Visibility"
       }
      ],
      "name": "setVisibility",
      "type": null
     },
     {
      "params": [],
      "name": "lazyInitInfo",
      "type": null
     },
     {
      "params": [],
      "name": "lazyInitDocumentation",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "addMarker",
      "type": "Marker"
     },
     {
      "params": [
       {
        "name": "reason",
        "type": "String"
       }
      ],
      "name": "setDeprecationReason",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "suppression",
        "type": "String"
       }
      ],
      "name": "addSuppression",
      "type": null
     },
     {
      "params": [
       {
        "name": "suppressions",
        "type": "Set"
       }
      ],
      "name": "setSuppressions",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "modifies",
        "type": "String"
       }
      ],
      "name": "addModifies",
      "type": null
     },
     {
      "params": [
       {
        "name": "modifies",
        "type": "Set"
       }
      ],
      "name": "setModifies",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "version",
        "type": "String"
       }
      ],
      "name": "documentVersion",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "reference",
        "type": "String"
       }
      ],
      "name": "documentReference",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "author",
        "type": "String"
       }
      ],
      "name": "documentAuthor",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSTypeExpression"
       },
       {
        "name": "throwsDescription",
        "type": "String"
       }
      ],
      "name": "documentThrows",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parameter",
        "type": "String"
       },
       {
        "name": "description",
        "type": "String"
       }
      ],
      "name": "documentParam",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "description",
        "type": "String"
       }
      ],
      "name": "documentBlock",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "description",
        "type": "String"
       }
      ],
      "name": "documentFileOverview",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "description",
        "type": "String"
       }
      ],
      "name": "documentReturn",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "jsType",
        "type": "JSTypeExpression"
       },
       {
        "name": "parameter",
        "type": "String"
       }
      ],
      "name": "declareParam",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "templateTypeName",
        "type": "String"
       }
      ],
      "name": "declareTemplateTypeName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "jsType",
        "type": "JSTypeExpression"
       }
      ],
      "name": "declareThrows",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getVisibility",
      "type": "Visibility"
     },
     {
      "params": [
       {
        "name": "parameter",
        "type": "String"
       }
      ],
      "name": "getParameterType",
      "type": "JSTypeExpression"
     },
     {
      "params": [
       {
        "name": "parameter",
        "type": "String"
       }
      ],
      "name": "hasParameter",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "parameter",
        "type": "String"
       }
      ],
      "name": "hasParameterType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getParameterNames",
      "type": "Set"
     },
     {
      "params": [],
      "name": "getParameterCount",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSTypeExpression"
       }
      ],
      "name": "setType",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSTypeExpression"
       }
      ],
      "name": "setReturnType",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSTypeExpression"
       }
      ],
      "name": "setEnumParameterType",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSTypeExpression"
       }
      ],
      "name": "setTypedefType",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSTypeExpression"
       },
       {
        "name": "mask",
        "type": "int"
       }
      ],
      "name": "setType",
      "type": null
     },
     {
      "params": [],
      "name": "getThrownTypes",
      "type": "List"
     },
     {
      "params": [],
      "name": "hasType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hasEnumParameterType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hasTypedefType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hasReturnType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "mask",
        "type": "int"
       }
      ],
      "name": "hasType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getType",
      "type": "JSTypeExpression"
     },
     {
      "params": [],
      "name": "getReturnType",
      "type": "JSTypeExpression"
     },
     {
      "params": [],
      "name": "getEnumParameterType",
      "type": "JSTypeExpression"
     },
     {
      "params": [],
      "name": "getTypedefType",
      "type": "JSTypeExpression"
     },
     {
      "params": [
       {
        "name": "typefield",
        "type": "int"
       }
      ],
      "name": "getType",
      "type": "JSTypeExpression"
     },
     {
      "params": [],
      "name": "getThisType",
      "type": "JSTypeExpression"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSTypeExpression"
       }
      ],
      "name": "setThisType",
      "type": null
     },
     {
      "params": [],
      "name": "hasThisType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSTypeExpression"
       }
      ],
      "name": "setBaseType",
      "type": null
     },
     {
      "params": [],
      "name": "getBaseType",
      "type": "JSTypeExpression"
     },
     {
      "params": [],
      "name": "getDescription",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "desc",
        "type": "String"
       }
      ],
      "name": "setDescription",
      "type": null
     },
     {
      "params": [],
      "name": "getMeaning",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "meaning",
        "type": "String"
       }
      ],
      "name": "setMeaning",
      "type": null
     },
     {
      "params": [],
      "name": "getLendsName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "setLendsName",
      "type": null
     },
     {
      "params": [],
      "name": "getLicense",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "license",
        "type": "String"
       }
      ],
      "name": "setLicense",
      "type": null
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "hasBaseType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "interfaceName",
        "type": "JSTypeExpression"
       }
      ],
      "name": "addImplementedInterface",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getImplementedInterfaces",
      "type": "List"
     },
     {
      "params": [],
      "name": "getImplementedInterfaceCount",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSTypeExpression"
       }
      ],
      "name": "addExtendedInterface",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getExtendedInterfaces",
      "type": "List"
     },
     {
      "params": [],
      "name": "getExtendedInterfacesCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "getDeprecationReason",
      "type": "String"
     },
     {
      "params": [],
      "name": "getSuppressions",
      "type": "Set"
     },
     {
      "params": [],
      "name": "getModifies",
      "type": "Set"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "hasDescriptionForParameter",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getDescriptionForParameter",
      "type": "String"
     },
     {
      "params": [],
      "name": "getAuthors",
      "type": "Collection"
     },
     {
      "params": [],
      "name": "getReferences",
      "type": "Collection"
     },
     {
      "params": [],
      "name": "getVersion",
      "type": "String"
     },
     {
      "params": [],
      "name": "getReturnDescription",
      "type": "String"
     },
     {
      "params": [],
      "name": "getBlockDescription",
      "type": "String"
     },
     {
      "params": [],
      "name": "hasFileOverview",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getFileOverview",
      "type": "String"
     },
     {
      "params": [],
      "name": "getAssociatedNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "setAssociatedNode",
      "type": null
     },
     {
      "params": [],
      "name": "getSourceName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getMarkers",
      "type": "Collection"
     },
     {
      "params": [],
      "name": "getTemplateTypeName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getTypeNodes",
      "type": "Collection"
     },
     {
      "params": [],
      "name": "hasModifies",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getOriginalCommentString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "sourceComment",
        "type": "String"
       }
      ],
      "name": "setOriginalCommentString",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "info",
      "type": "LazilyInitializedInfo"
     },
     {
      "name": "documentation",
      "type": "LazilyInitializedDocumentation"
     },
     {
      "name": "associatedNode",
      "type": "Node"
     },
     {
      "name": "visibility",
      "type": "Visibility"
     },
     {
      "name": "bitset",
      "type": "int"
     },
     {
      "name": "type",
      "type": "JSTypeExpression"
     },
     {
      "name": "thisType",
      "type": "JSTypeExpression"
     },
     {
      "name": "includeDocumentation",
      "type": "boolean"
     },
     {
      "name": "MASK_FLAGS",
      "type": "int"
     },
     {
      "name": "MASK_CONSTANT",
      "type": "int"
     },
     {
      "name": "MASK_CONSTRUCTOR",
      "type": "int"
     },
     {
      "name": "MASK_DEFINE",
      "type": "int"
     },
     {
      "name": "MASK_HIDDEN",
      "type": "int"
     },
     {
      "name": "MASK_PRESERVETRY",
      "type": "int"
     },
     {
      "name": "MASK_NOCHECK",
      "type": "int"
     },
     {
      "name": "MASK_OVERRIDE",
      "type": "int"
     },
     {
      "name": "MASK_NOALIAS",
      "type": "int"
     },
     {
      "name": "MASK_DEPRECATED",
      "type": "int"
     },
     {
      "name": "MASK_INTERFACE",
      "type": "int"
     },
     {
      "name": "MASK_EXPORT",
      "type": "int"
     },
     {
      "name": "MASK_NOSHADOW",
      "type": "int"
     },
     {
      "name": "MASK_FILEOVERVIEW",
      "type": "int"
     },
     {
      "name": "MASK_IMPLICITCAST",
      "type": "int"
     },
     {
      "name": "MASK_NOSIDEEFFECTS",
      "type": "int"
     },
     {
      "name": "MASK_EXTERNS",
      "type": "int"
     },
     {
      "name": "MASK_JAVADISPATCH",
      "type": "int"
     },
     {
      "name": "MASK_NOCOMPILE",
      "type": "int"
     },
     {
      "name": "MASK_CONSISTIDGEN",
      "type": "int"
     },
     {
      "name": "MASK_IDGEN",
      "type": "int"
     },
     {
      "name": "MASK_TYPEFIELD",
      "type": "int"
     },
     {
      "name": "TYPEFIELD_TYPE",
      "type": "int"
     },
     {
      "name": "TYPEFIELD_RETURN",
      "type": "int"
     },
     {
      "name": "TYPEFIELD_ENUM",
      "type": "int"
     },
     {
      "name": "TYPEFIELD_TYPEDEF",
      "type": "int"
     }
    ],
    "name": "JSDocInfo"
   }
  ]
 },
 {
  "filename": "EcmaError.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "details",
      "type": "String"
     },
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getErrorMessage",
      "type": "String"
     },
     {
      "params": [],
      "name": "getSourceName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getLineNumber",
      "type": "int"
     },
     {
      "params": [],
      "name": "getColumnNumber",
      "type": "int"
     },
     {
      "params": [],
      "name": "getLineSource",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "errorName",
      "type": "String"
     },
     {
      "name": "errorMessage",
      "type": "String"
     }
    ],
    "name": "EcmaError"
   }
  ]
 },
 {
  "filename": "JSTypeExpression.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "expr",
        "type": "JSTypeExpression"
       }
      ],
      "name": "makeOptionalArg",
      "type": "JSTypeExpression"
     },
     {
      "params": [],
      "name": "isOptionalArg",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isVarArgs",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "StaticScope"
       },
       {
        "name": "registry",
        "type": "JSTypeRegistry"
       }
      ],
      "name": "evaluate",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "other",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [],
      "name": "getRoot",
      "type": "Node"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "root",
      "type": "Node"
     },
     {
      "name": "sourceName",
      "type": "String"
     }
    ],
    "name": "JSTypeExpression"
   }
  ]
 },
 {
  "filename": "IRFactory.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "createScript",
      "type": "ScriptOrFnNode"
     },
     {
      "params": [
       {
        "name": "scriptNode",
        "type": "ScriptOrFnNode"
       },
       {
        "name": "body",
        "type": "Node"
       }
      ],
      "name": "initScript",
      "type": null
     },
     {
      "params": [
       {
        "name": "nodeType",
        "type": "int"
       }
      ],
      "name": "createLeaf",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "nodeType",
        "type": "int"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createLeaf",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createSwitch",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "switchNode",
        "type": "Node"
       },
       {
        "name": "caseExpression",
        "type": "Node"
       },
       {
        "name": "statements",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "addSwitchCase",
      "type": null
     },
     {
      "params": [
       {
        "name": "switchBlock",
        "type": "Node"
       }
      ],
      "name": "closeSwitch",
      "type": null
     },
     {
      "params": [
       {
        "name": "token",
        "type": "int"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createVariables",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "expr",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createExprStatement",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "expr",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createExprStatementNoReturn",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "expr",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createDefaultNamespace",
      "type": "Node"
     },
     {
      "params": [],
      "name": "createErrorName",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createName",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "info",
        "type": "JSDocInfo"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createTaggedName",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "string",
        "type": "String"
       }
      ],
      "name": "createString",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "string",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createString",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "number",
        "type": "double"
       }
      ],
      "name": "createNumber",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "number",
        "type": "double"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createNumber",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "varName",
        "type": "String"
       },
       {
        "name": "nameLineno",
        "type": "int"
       },
       {
        "name": "nameCharno",
        "type": "int"
       },
       {
        "name": "catchCond",
        "type": "Node"
       },
       {
        "name": "stmts",
        "type": "Node"
       },
       {
        "name": "catchLineno",
        "type": "int"
       },
       {
        "name": "catchCharno",
        "type": "int"
       }
      ],
      "name": "createCatch",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "expr",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createThrow",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "expr",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createReturn",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createLabel",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "label",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createBreak",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "label",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createContinue",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createDebugger",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createBlock",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createFunction",
      "type": "FunctionNode"
     },
     {
      "params": [
       {
        "name": "fnNode",
        "type": "FunctionNode"
       },
       {
        "name": "functionIndex",
        "type": "int"
       },
       {
        "name": "args",
        "type": "Node"
       },
       {
        "name": "info",
        "type": "JSDocInfo"
       },
       {
        "name": "statements",
        "type": "Node"
       },
       {
        "name": "functionType",
        "type": "int"
       }
      ],
      "name": "initFunction",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "parent",
        "type": "Node"
       },
       {
        "name": "child",
        "type": "Node"
       }
      ],
      "name": "addChildToBack",
      "type": null
     },
     {
      "params": [
       {
        "name": "cond",
        "type": "Node"
       },
       {
        "name": "body",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createWhile",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "body",
        "type": "Node"
       },
       {
        "name": "cond",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createDoWhile",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "init",
        "type": "Node"
       },
       {
        "name": "test",
        "type": "Node"
       },
       {
        "name": "incr",
        "type": "Node"
       },
       {
        "name": "body",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createFor",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "lhs",
        "type": "Node"
       },
       {
        "name": "obj",
        "type": "Node"
       },
       {
        "name": "body",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createForIn",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "tryBlock",
        "type": "Node"
       },
       {
        "name": "catchBlocks",
        "type": "Node"
       },
       {
        "name": "finallyBlock",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createTryCatchFinally",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "obj",
        "type": "Node"
       },
       {
        "name": "body",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createWith",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "obj",
        "type": "Node"
       },
       {
        "name": "body",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createDotQuery",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "elems",
        "type": "ObjArray"
       },
       {
        "name": "skipCount",
        "type": "int"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createArrayLiteral",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "obj",
        "type": "ObjArray"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createObjectLiteral",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "string",
        "type": "String"
       },
       {
        "name": "flags",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createRegExp",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "cond",
        "type": "Node"
       },
       {
        "name": "ifTrue",
        "type": "Node"
       },
       {
        "name": "ifFalse",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createIf",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "cond",
        "type": "Node"
       },
       {
        "name": "ifTrue",
        "type": "Node"
       },
       {
        "name": "ifFalse",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createCondExpr",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "nodeType",
        "type": "int"
       },
       {
        "name": "child",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createUnary",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "nodeType",
        "type": "int"
       },
       {
        "name": "child",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createCallOrNew",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "nodeType",
        "type": "int"
       },
       {
        "name": "post",
        "type": "boolean"
       },
       {
        "name": "child",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createIncDec",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "target",
        "type": "Node"
       },
       {
        "name": "namespace",
        "type": "String"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "memberTypeFlags",
        "type": "int"
       },
       {
        "name": "dotLineno",
        "type": "int"
       },
       {
        "name": "dotCharno",
        "type": "int"
       },
       {
        "name": "nameLineno",
        "type": "int"
       },
       {
        "name": "nameCharno",
        "type": "int"
       }
      ],
      "name": "createPropertyGet",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "target",
        "type": "Node"
       },
       {
        "name": "namespace",
        "type": "String"
       },
       {
        "name": "elem",
        "type": "Node"
       },
       {
        "name": "memberTypeFlags",
        "type": "int"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createElementGet",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "target",
        "type": "Node"
       },
       {
        "name": "namespace",
        "type": "String"
       },
       {
        "name": "elem",
        "type": "Node"
       },
       {
        "name": "memberTypeFlags",
        "type": "int"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createMemberRefGet",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "nodeType",
        "type": "int"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createBinary",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "nodeOp",
        "type": "int"
       },
       {
        "name": "left",
        "type": "Node"
       },
       {
        "name": "right",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createAssignment",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "node",
        "type": "Node"
       }
      ],
      "name": "makeReference",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "token",
        "type": "int"
       }
      ],
      "name": "checkActivationName",
      "type": null
     },
     {
      "params": [],
      "name": "setRequiresActivation",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "parser",
      "type": "Parser"
     }
    ],
    "name": "IRFactory"
   }
  ]
 },
 {
  "filename": "UintMap.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "isEmpty",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "size",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "int"
       }
      ],
      "name": "has",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "int"
       }
      ],
      "name": "getObject",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "int"
       },
       {
        "name": "defaultValue",
        "type": "int"
       }
      ],
      "name": "getInt",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "int"
       }
      ],
      "name": "getExistingInt",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "int"
       },
       {
        "name": "value",
        "type": "Object"
       }
      ],
      "name": "put",
      "type": null
     },
     {
      "params": [
       {
        "name": "key",
        "type": "int"
       },
       {
        "name": "value",
        "type": "int"
       }
      ],
      "name": "put",
      "type": null
     },
     {
      "params": [
       {
        "name": "key",
        "type": "int"
       }
      ],
      "name": "remove",
      "type": null
     },
     {
      "params": [],
      "name": "clear",
      "type": null
     },
     {
      "params": [],
      "name": "getKeys",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "fraction",
        "type": "int"
       },
       {
        "name": "mask",
        "type": "int"
       },
       {
        "name": "power",
        "type": "int"
       }
      ],
      "name": "tableLookupStep",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "int"
       }
      ],
      "name": "findIndex",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "key",
        "type": "int"
       }
      ],
      "name": "insertNewKey",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "ensureIntSpace",
        "type": "boolean"
       }
      ],
      "name": "rehashTable",
      "type": null
     },
     {
      "params": [
       {
        "name": "key",
        "type": "int"
       },
       {
        "name": "intType",
        "type": "boolean"
       }
      ],
      "name": "ensureIndex",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "out",
        "type": "ObjectOutputStream"
       }
      ],
      "name": "writeObject",
      "type": null
     },
     {
      "params": [
       {
        "name": "in",
        "type": "ObjectInputStream"
       }
      ],
      "name": "readObject",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "A",
      "type": "int"
     },
     {
      "name": "EMPTY",
      "type": "int"
     },
     {
      "name": "DELETED",
      "type": "int"
     },
     {
      "name": "keys",
      "type": "int"
     },
     {
      "name": "values",
      "type": "Object"
     },
     {
      "name": "power",
      "type": "int"
     },
     {
      "name": "keyCount",
      "type": "int"
     },
     {
      "name": "occupiedCount",
      "type": "int"
     },
     {
      "name": "ivaluesShift",
      "type": "int"
     },
     {
      "name": "check",
      "type": "boolean"
     }
    ],
    "name": "UintMap"
   }
  ]
 },
 {
  "filename": "SourcePosition.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "item",
        "type": "T"
       }
      ],
      "name": "setItem",
      "type": null
     },
     {
      "params": [
       {
        "name": "startLineno",
        "type": "int"
       },
       {
        "name": "startCharno",
        "type": "int"
       },
       {
        "name": "endLineno",
        "type": "int"
       },
       {
        "name": "endCharno",
        "type": "int"
       }
      ],
      "name": "setPositionInformation",
      "type": null
     },
     {
      "params": [],
      "name": "getItem",
      "type": "T"
     },
     {
      "params": [],
      "name": "getStartLine",
      "type": "int"
     },
     {
      "params": [],
      "name": "getPositionOnStartLine",
      "type": "int"
     },
     {
      "params": [],
      "name": "getEndLine",
      "type": "int"
     },
     {
      "params": [],
      "name": "getPositionOnEndLine",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "item",
      "type": "T"
     },
     {
      "name": "startLineno",
      "type": "int"
     },
     {
      "name": "startCharno",
      "type": "int"
     },
     {
      "name": "endLineno",
      "type": "int"
     },
     {
      "name": "endCharno",
      "type": "int"
     }
    ],
    "name": "SourcePosition"
   }
  ]
 },
 {
  "filename": "CompilerEnvirons.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "cx",
        "type": "Context"
       }
      ],
      "name": "initFromContext",
      "type": null
     },
     {
      "params": [],
      "name": "getErrorReporter",
      "type": "ErrorReporter"
     },
     {
      "params": [
       {
        "name": "errorReporter",
        "type": "ErrorReporter"
       }
      ],
      "name": "setErrorReporter",
      "type": null
     },
     {
      "params": [],
      "name": "getLanguageVersion",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "languageVersion",
        "type": "int"
       }
      ],
      "name": "setLanguageVersion",
      "type": null
     },
     {
      "params": [],
      "name": "isGenerateDebugInfo",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "flag",
        "type": "boolean"
       }
      ],
      "name": "setGenerateDebugInfo",
      "type": null
     },
     {
      "params": [],
      "name": "isUseDynamicScope",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isReservedKeywordAsIdentifier",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "flag",
        "type": "boolean"
       }
      ],
      "name": "setReservedKeywordAsIdentifier",
      "type": null
     },
     {
      "params": [],
      "name": "isAllowMemberExprAsFunctionName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "flag",
        "type": "boolean"
       }
      ],
      "name": "setAllowMemberExprAsFunctionName",
      "type": null
     },
     {
      "params": [],
      "name": "isXmlAvailable",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "flag",
        "type": "boolean"
       }
      ],
      "name": "setXmlAvailable",
      "type": null
     },
     {
      "params": [],
      "name": "getOptimizationLevel",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "level",
        "type": "int"
       }
      ],
      "name": "setOptimizationLevel",
      "type": null
     },
     {
      "params": [],
      "name": "getAnnotateTypes",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "flag",
        "type": "boolean"
       }
      ],
      "name": "setAnnotateTypes",
      "type": null
     },
     {
      "params": [],
      "name": "getParseJSDocDocumentation",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "flag",
        "type": "boolean"
       }
      ],
      "name": "setParseJSDocDocumentation",
      "type": null
     },
     {
      "params": [],
      "name": "getParseJSDoc",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "flag",
        "type": "boolean"
       }
      ],
      "name": "setParseJSDoc",
      "type": null
     },
     {
      "params": [],
      "name": "isGeneratingSource",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isStrictMode",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "reportWarningAsError",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "generatingSource",
        "type": "boolean"
       }
      ],
      "name": "setGeneratingSource",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "errorReporter",
      "type": "ErrorReporter"
     },
     {
      "name": "languageVersion",
      "type": "int"
     },
     {
      "name": "generateDebugInfo",
      "type": "boolean"
     },
     {
      "name": "useDynamicScope",
      "type": "boolean"
     },
     {
      "name": "reservedKeywordAsIdentifier",
      "type": "boolean"
     },
     {
      "name": "allowMemberExprAsFunctionName",
      "type": "boolean"
     },
     {
      "name": "xmlAvailable",
      "type": "boolean"
     },
     {
      "name": "optimizationLevel",
      "type": "int"
     },
     {
      "name": "generatingSource",
      "type": "boolean"
     },
     {
      "name": "strictMode",
      "type": "boolean"
     },
     {
      "name": "warningAsError",
      "type": "boolean"
     },
     {
      "name": "annotateTypes",
      "type": "boolean"
     },
     {
      "name": "parseJSDoc",
      "type": "boolean"
     },
     {
      "name": "parseJSDocDocumentation",
      "type": "boolean"
     },
     {
      "name": "activationNames",
      "type": "Hashtable"
     }
    ],
    "name": "CompilerEnvirons"
   }
  ]
 },
 {
  "filename": "Parser.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "sourceString",
        "type": "String"
       },
       {
        "name": "sourceURI",
        "type": "String"
       }
      ],
      "name": "parse",
      "type": "ScriptOrFnNode"
     },
     {
      "params": [
       {
        "name": "sourceString",
        "type": "String"
       },
       {
        "name": "sourceURI",
        "type": "String"
       }
      ],
      "name": "parseWithJSDoc",
      "type": "ScriptOrFnNode"
     },
     {
      "params": [
       {
        "name": "sourceString",
        "type": "String"
       },
       {
        "name": "sourceURI",
        "type": "String"
       },
       {
        "name": "parseJSDoc",
        "type": "boolean"
       }
      ],
      "name": "parse",
      "type": "ScriptOrFnNode"
     },
     {
      "params": [
       {
        "name": "compilerEnv",
        "type": "CompilerEnvirons"
       }
      ],
      "name": "createDecompiler",
      "type": "Decompiler"
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       },
       {
        "name": "messageArg",
        "type": "String"
       }
      ],
      "name": "addStrictWarning",
      "type": null
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       }
      ],
      "name": "addWarning",
      "type": null
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       },
       {
        "name": "messageArg",
        "type": "String"
       }
      ],
      "name": "addWarning",
      "type": null
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "addWarning",
      "type": null
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       },
       {
        "name": "messageArg",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "addWarning",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       },
       {
        "name": "code",
        "type": "String"
       }
      ],
      "name": "reportWarning",
      "type": null
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       }
      ],
      "name": "addError",
      "type": null
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       },
       {
        "name": "messageArg",
        "type": "String"
       }
      ],
      "name": "addError",
      "type": null
     },
     {
      "params": [
       {
        "name": "messageId",
        "type": "String"
       }
      ],
      "name": "reportError",
      "type": "RuntimeException"
     },
     {
      "params": [],
      "name": "peekToken",
      "type": "int"
     },
     {
      "params": [],
      "name": "peekFlaggedToken",
      "type": "int"
     },
     {
      "params": [],
      "name": "consumeToken",
      "type": null
     },
     {
      "params": [],
      "name": "nextToken",
      "type": "int"
     },
     {
      "params": [],
      "name": "nextFlaggedToken",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "toMatch",
        "type": "int"
       }
      ],
      "name": "matchToken",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "peekTokenOrEOL",
      "type": "int"
     },
     {
      "params": [],
      "name": "setCheckForLabel",
      "type": null
     },
     {
      "params": [
       {
        "name": "toMatch",
        "type": "int"
       },
       {
        "name": "messageId",
        "type": "String"
       }
      ],
      "name": "mustMatchToken",
      "type": null
     },
     {
      "params": [],
      "name": "mustHaveXML",
      "type": null
     },
     {
      "params": [],
      "name": "insideFunction",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "switchSelector",
        "type": "Node"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "enterSwitch",
      "type": "Node"
     },
     {
      "params": [],
      "name": "exitSwitch",
      "type": null
     },
     {
      "params": [
       {
        "name": "sourceReader",
        "type": "Reader"
       },
       {
        "name": "sourceURI",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "parseJSDoc",
        "type": "boolean"
       }
      ],
      "name": "initForUnitTest",
      "type": "TokenStream"
     },
     {
      "params": [
       {
        "name": "sourceString",
        "type": "String"
       },
       {
        "name": "sourceURI",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       }
      ],
      "name": "parse",
      "type": "ScriptOrFnNode"
     },
     {
      "params": [
       {
        "name": "sourceReader",
        "type": "Reader"
       },
       {
        "name": "sourceURI",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       }
      ],
      "name": "parse",
      "type": "ScriptOrFnNode"
     },
     {
      "params": [],
      "name": "parse",
      "type": "ScriptOrFnNode"
     },
     {
      "params": [],
      "name": "parseFunctionBody",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "functionType",
        "type": "int"
       }
      ],
      "name": "function",
      "type": "Node"
     },
     {
      "params": [],
      "name": "statements",
      "type": "Node"
     },
     {
      "params": [],
      "name": "condition",
      "type": "Node"
     },
     {
      "params": [],
      "name": "matchLabel",
      "type": "String"
     },
     {
      "params": [],
      "name": "statement",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "statementLabel",
        "type": "Node"
       }
      ],
      "name": "statementHelper",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "context",
        "type": "int"
       }
      ],
      "name": "variables",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "inForInit",
        "type": "boolean"
       }
      ],
      "name": "expr",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "inForInit",
        "type": "boolean"
       }
      ],
      "name": "assignExpr",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "inForInit",
        "type": "boolean"
       }
      ],
      "name": "condExpr",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "inForInit",
        "type": "boolean"
       }
      ],
      "name": "orExpr",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "inForInit",
        "type": "boolean"
       }
      ],
      "name": "andExpr",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "inForInit",
        "type": "boolean"
       }
      ],
      "name": "bitOrExpr",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "inForInit",
        "type": "boolean"
       }
      ],
      "name": "bitXorExpr",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "inForInit",
        "type": "boolean"
       }
      ],
      "name": "bitAndExpr",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "inForInit",
        "type": "boolean"
       }
      ],
      "name": "eqExpr",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "inForInit",
        "type": "boolean"
       }
      ],
      "name": "relExpr",
      "type": "Node"
     },
     {
      "params": [],
      "name": "shiftExpr",
      "type": "Node"
     },
     {
      "params": [],
      "name": "addExpr",
      "type": "Node"
     },
     {
      "params": [],
      "name": "mulExpr",
      "type": "Node"
     },
     {
      "params": [],
      "name": "unaryExpr",
      "type": "Node"
     },
     {
      "params": [],
      "name": "xmlInitializer",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "listNode",
        "type": "Node"
       }
      ],
      "name": "argumentList",
      "type": null
     },
     {
      "params": [
       {
        "name": "allowCallSyntax",
        "type": "boolean"
       }
      ],
      "name": "memberExpr",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "allowCallSyntax",
        "type": "boolean"
       },
       {
        "name": "pn",
        "type": "Node"
       }
      ],
      "name": "memberExprTail",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "pn",
        "type": "Node"
       },
       {
        "name": "memberTypeFlags",
        "type": "int"
       }
      ],
      "name": "attributeAccess",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "pn",
        "type": "Node"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "memberTypeFlags",
        "type": "int"
       },
       {
        "name": "dotLineno",
        "type": "int"
       },
       {
        "name": "dotCharno",
        "type": "int"
       },
       {
        "name": "nameLineno",
        "type": "int"
       },
       {
        "name": "nameCharno",
        "type": "int"
       }
      ],
      "name": "propertyName",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "pn",
        "type": "Node"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "memberTypeFlags",
        "type": "int"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "propertyName",
      "type": "Node"
     },
     {
      "params": [],
      "name": "primaryExpr",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getSourceName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "elems",
        "type": "ObjArray"
       },
       {
        "name": "property",
        "type": "Object"
       }
      ],
      "name": "plainProperty",
      "type": null
     },
     {
      "params": [
       {
        "name": "elems",
        "type": "ObjArray"
       },
       {
        "name": "property",
        "type": "String"
       },
       {
        "name": "isGetter",
        "type": "boolean"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "getterSetterProperty",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "CLEAR_TI_MASK",
      "type": "int"
     },
     {
      "name": "TI_AFTER_EOL",
      "type": "int"
     },
     {
      "name": "TI_CHECK_LABEL",
      "type": "int"
     },
     {
      "name": "compilerEnv",
      "type": "CompilerEnvirons"
     },
     {
      "name": "errorReporter",
      "type": "ErrorReporter"
     },
     {
      "name": "sourceURI",
      "type": "String"
     },
     {
      "name": "calledByCompileFunction",
      "type": "boolean"
     },
     {
      "name": "ts",
      "type": "TokenStream"
     },
     {
      "name": "currentFlaggedToken",
      "type": "int"
     },
     {
      "name": "syntaxErrorCount",
      "type": "int"
     },
     {
      "name": "nf",
      "type": "IRFactory"
     },
     {
      "name": "nestingOfFunction",
      "type": "int"
     },
     {
      "name": "decompiler",
      "type": "Decompiler"
     },
     {
      "name": "currentScriptOrFn",
      "type": "ScriptOrFnNode"
     },
     {
      "name": "nestingOfWith",
      "type": "int"
     },
     {
      "name": "labelSet",
      "type": "Hashtable"
     },
     {
      "name": "loopSet",
      "type": "ObjArray"
     },
     {
      "name": "loopAndSwitchSet",
      "type": "ObjArray"
     },
     {
      "name": "hasReturnValue",
      "type": "boolean"
     },
     {
      "name": "functionEndFlags",
      "type": "int"
     }
    ],
    "name": "Parser"
   }
  ]
 },
 {
  "filename": "ScriptOrFnNode.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getSourceName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       }
      ],
      "name": "setSourceName",
      "type": null
     },
     {
      "params": [],
      "name": "getEncodedSourceStart",
      "type": "int"
     },
     {
      "params": [],
      "name": "getEncodedSourceEnd",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "start",
        "type": "int"
       },
       {
        "name": "end",
        "type": "int"
       }
      ],
      "name": "setEncodedSourceBounds",
      "type": null
     },
     {
      "params": [],
      "name": "getBaseLineno",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "lineno",
        "type": "int"
       }
      ],
      "name": "setBaseLineno",
      "type": null
     },
     {
      "params": [],
      "name": "getEndLineno",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "lineno",
        "type": "int"
       }
      ],
      "name": "setEndLineno",
      "type": null
     },
     {
      "params": [],
      "name": "getFunctionCount",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "i",
        "type": "int"
       }
      ],
      "name": "getFunctionNode",
      "type": "FunctionNode"
     },
     {
      "params": [
       {
        "name": "fnNode",
        "type": "FunctionNode"
       }
      ],
      "name": "addFunction",
      "type": "int"
     },
     {
      "params": [],
      "name": "getRegexpCount",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "index",
        "type": "int"
       }
      ],
      "name": "getRegexpString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "index",
        "type": "int"
       }
      ],
      "name": "getRegexpFlags",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "string",
        "type": "String"
       },
       {
        "name": "flags",
        "type": "String"
       }
      ],
      "name": "addRegexp",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "hasParamOrVar",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getParamOrVarIndex",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "index",
        "type": "int"
       }
      ],
      "name": "getParamOrVarName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getParamCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "getParamAndVarCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "getParamAndVarNames",
      "type": "String"
     },
     {
      "params": [],
      "name": "getParamAndVarConst",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "addParam",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "addVar",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "addConst",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "removeParamOrVar",
      "type": null
     },
     {
      "params": [],
      "name": "getCompilerData",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "Object"
       }
      ],
      "name": "setCompilerData",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "NO_DUPLICATE",
      "type": "int"
     },
     {
      "name": "DUPLICATE_VAR",
      "type": "int"
     },
     {
      "name": "DUPLICATE_PARAMETER",
      "type": "int"
     },
     {
      "name": "DUPLICATE_CONST",
      "type": "int"
     },
     {
      "name": "encodedSourceStart",
      "type": "int"
     },
     {
      "name": "encodedSourceEnd",
      "type": "int"
     },
     {
      "name": "sourceName",
      "type": "String"
     },
     {
      "name": "baseLineno",
      "type": "int"
     },
     {
      "name": "endLineno",
      "type": "int"
     },
     {
      "name": "functions",
      "type": "ObjArray"
     },
     {
      "name": "regexps",
      "type": "ObjArray"
     },
     {
      "name": "itsVariables",
      "type": "ObjArray"
     },
     {
      "name": "itsConst",
      "type": "ObjArray"
     },
     {
      "name": "itsVariableNames",
      "type": "ObjToIntMap"
     },
     {
      "name": "varStart",
      "type": "int"
     },
     {
      "name": "compilerData",
      "type": "Object"
     }
    ],
    "name": "ScriptOrFnNode"
   }
  ]
 },
 {
  "filename": "DToA.java",
  "package_name": "com.google.javascript.rhino",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "digit",
        "type": "int"
       }
      ],
      "name": "BASEDIGIT",
      "type": "char"
     },
     {
      "params": [
       {
        "name": "y",
        "type": "int"
       }
      ],
      "name": "lo0bits",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "x",
        "type": "int"
       }
      ],
      "name": "hi0bits",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "bits",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "val",
        "type": "int"
       }
      ],
      "name": "stuffBits",
      "type": null
     },
     {
      "params": [
       {
        "name": "d",
        "type": "double"
       },
       {
        "name": "e",
        "type": "int"
       },
       {
        "name": "bits",
        "type": "int"
       }
      ],
      "name": "d2b",
      "type": "BigInteger"
     },
     {
      "params": [
       {
        "name": "base",
        "type": "int"
       },
       {
        "name": "d",
        "type": "double"
       }
      ],
      "name": "JS_dtobasestr",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "d",
        "type": "double"
       }
      ],
      "name": "word0",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "d",
        "type": "double"
       },
       {
        "name": "i",
        "type": "int"
       }
      ],
      "name": "setWord0",
      "type": "double"
     },
     {
      "params": [
       {
        "name": "d",
        "type": "double"
       }
      ],
      "name": "word1",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "BigInteger"
       },
       {
        "name": "k",
        "type": "int"
       }
      ],
      "name": "pow5mult",
      "type": "BigInteger"
     },
     {
      "params": [
       {
        "name": "buf",
        "type": "StringBuffer"
       }
      ],
      "name": "roundOff",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "d",
        "type": "double"
       },
       {
        "name": "mode",
        "type": "int"
       },
       {
        "name": "biasUp",
        "type": "boolean"
       },
       {
        "name": "ndigits",
        "type": "int"
       },
       {
        "name": "sign",
        "type": "boolean"
       },
       {
        "name": "buf",
        "type": "StringBuffer"
       }
      ],
      "name": "JS_dtoa",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "buf",
        "type": "StringBuffer"
       }
      ],
      "name": "stripTrailingZeroes",
      "type": null
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "StringBuffer"
       },
       {
        "name": "mode",
        "type": "int"
       },
       {
        "name": "precision",
        "type": "int"
       },
       {
        "name": "d",
        "type": "double"
       }
      ],
      "name": "JS_dtostr",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "DTOBASESTR_BUFFER_SIZE",
      "type": "int"
     },
     {
      "name": "DTOSTR_STANDARD",
      "type": "int"
     },
     {
      "name": "DTOSTR_STANDARD_EXPONENTIAL",
      "type": "int"
     },
     {
      "name": "DTOSTR_FIXED",
      "type": "int"
     },
     {
      "name": "DTOSTR_EXPONENTIAL",
      "type": "int"
     },
     {
      "name": "DTOSTR_PRECISION",
      "type": "int"
     },
     {
      "name": "Frac_mask",
      "type": "int"
     },
     {
      "name": "Exp_shift",
      "type": "int"
     },
     {
      "name": "Exp_msk1",
      "type": "int"
     },
     {
      "name": "Frac_maskL",
      "type": "long"
     },
     {
      "name": "Exp_shiftL",
      "type": "int"
     },
     {
      "name": "Exp_msk1L",
      "type": "long"
     },
     {
      "name": "Bias",
      "type": "int"
     },
     {
      "name": "P",
      "type": "int"
     },
     {
      "name": "Exp_shift1",
      "type": "int"
     },
     {
      "name": "Exp_mask",
      "type": "int"
     },
     {
      "name": "Exp_mask_shifted",
      "type": "int"
     },
     {
      "name": "Bndry_mask",
      "type": "int"
     },
     {
      "name": "Log2P",
      "type": "int"
     },
     {
      "name": "Sign_bit",
      "type": "int"
     },
     {
      "name": "Exp_11",
      "type": "int"
     },
     {
      "name": "Ten_pmax",
      "type": "int"
     },
     {
      "name": "Quick_max",
      "type": "int"
     },
     {
      "name": "Bletch",
      "type": "int"
     },
     {
      "name": "Frac_mask1",
      "type": "int"
     },
     {
      "name": "Int_max",
      "type": "int"
     },
     {
      "name": "n_bigtens",
      "type": "int"
     },
     {
      "name": "tens",
      "type": "double"
     },
     {
      "name": "bigtens",
      "type": "double"
     },
     {
      "name": "dtoaModes",
      "type": "int"
     }
    ],
    "name": "DToA"
   }
  ]
 },
 {
  "filename": "JSType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "typeId",
        "type": "JSTypeNative"
       }
      ],
      "name": "getNativeType",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "getJSDocInfo",
      "type": "JSDocInfo"
     },
     {
      "params": [],
      "name": "getDisplayName",
      "type": "String"
     },
     {
      "params": [],
      "name": "hasDisplayName",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNoType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNoResolvedType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNoObjectType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isEmptyType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNumberObjectType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNumberValueType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isFunctionPrototypeType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isStringObjectType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isTheObjectType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isStringValueType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isString",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNumber",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isArrayType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isBooleanObjectType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isBooleanValueType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isRegexpType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isDateType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNullType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isVoidType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isAllType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isUnknownType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isCheckedUnknownType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isUnionType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toMaybeUnionType",
      "type": "UnionType"
     },
     {
      "params": [],
      "name": "isFunctionType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toMaybeFunctionType",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "toMaybeFunctionType",
      "type": "FunctionType"
     },
     {
      "params": [],
      "name": "isEnumElementType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toMaybeEnumElementType",
      "type": "EnumElementType"
     },
     {
      "params": [],
      "name": "isEnumType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNamedType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isRecordType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isTemplateType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isObject",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isConstructor",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNominalType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isInstanceType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isInterface",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isOrdinaryFunction",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "jsType",
        "type": "JSType"
       }
      ],
      "name": "isEquivalentTo",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "typeA",
        "type": "JSType"
       },
       {
        "name": "typeB",
        "type": "JSType"
       }
      ],
      "name": "isEquivalent",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "jsType",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [],
      "name": "matchesInt32Context",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesUint32Context",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesNumberContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesStringContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesObjectContext",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "findPropertyType",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "canBeCalled",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "canAssignTo",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "autoboxesTo",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "unboxesTo",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "toObjectType",
      "type": "ObjectType"
     },
     {
      "params": [],
      "name": "dereference",
      "type": "ObjectType"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "canTestForEqualityWith",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "testForEquality",
      "type": "TernaryValue"
     },
     {
      "params": [
       {
        "name": "aType",
        "type": "JSType"
       },
       {
        "name": "bType",
        "type": "JSType"
       }
      ],
      "name": "testForEqualityHelper",
      "type": "TernaryValue"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "canTestForShallowEqualityWith",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNullable",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "getLeastSupertype",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "thisType",
        "type": "JSType"
       },
       {
        "name": "thatType",
        "type": "JSType"
       }
      ],
      "name": "getLeastSupertype",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "getGreatestSubtype",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "thisType",
        "type": "JSType"
       },
       {
        "name": "thatType",
        "type": "JSType"
       }
      ],
      "name": "getGreatestSubtype",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "filterNoResolvedType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "outcome",
        "type": "boolean"
       }
      ],
      "name": "getRestrictedTypeGivenToBooleanOutcome",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "getPossibleToBooleanOutcomes",
      "type": "BooleanLiteralSet"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "getTypesUnderEquality",
      "type": "TypePair"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "getTypesUnderInequality",
      "type": "TypePair"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "getTypesUnderShallowEquality",
      "type": "TypePair"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "getTypesUnderShallowInequality",
      "type": "TypePair"
     },
     {
      "params": [],
      "name": "restrictByNotNullOrUndefined",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isSubtype",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "differsFrom",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "thisType",
        "type": "JSType"
       },
       {
        "name": "thatType",
        "type": "JSType"
       }
      ],
      "name": "isSubtype",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "visitor",
        "type": "Visitor"
       }
      ],
      "name": "visit",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "forceResolve",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "resolve",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "resolveInternal",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "setResolvedTypeInternal",
      "type": null
     },
     {
      "params": [],
      "name": "isResolved",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "clearResolved",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "safeResolve",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "validator",
        "type": "Predicate"
       }
      ],
      "name": "setValidator",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toDebugHashCodeString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "resolved",
      "type": "boolean"
     },
     {
      "name": "resolveResult",
      "type": "JSType"
     },
     {
      "name": "UNKNOWN_NAME",
      "type": "String"
     },
     {
      "name": "NOT_A_CLASS",
      "type": "String"
     },
     {
      "name": "NOT_A_TYPE",
      "type": "String"
     },
     {
      "name": "EMPTY_TYPE_COMPONENT",
      "type": "String"
     },
     {
      "name": "ALPHA",
      "type": "Comparator"
     },
     {
      "name": "ENUMDECL",
      "type": "int"
     },
     {
      "name": "NOT_ENUMDECL",
      "type": "int"
     },
     {
      "name": "registry",
      "type": "JSTypeRegistry"
     }
    ],
    "name": "JSType"
   }
  ]
 },
 {
  "filename": "IndexedType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getIndexType",
      "type": "JSType"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "indexType",
      "type": "JSType"
     }
    ],
    "name": "IndexedType"
   }
  ]
 },
 {
  "filename": "StaticSymbolTable.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "symbol",
        "type": "S"
       }
      ],
      "name": "getReferences",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "symbol",
        "type": "S"
       }
      ],
      "name": "getScope",
      "type": "StaticScope"
     },
     {
      "params": [],
      "name": "getAllSymbols",
      "type": "Iterable"
     }
    ],
    "fields": [],
    "name": "StaticSymbolTable"
   }
  ]
 },
 {
  "filename": "FunctionPrototypeType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getReferenceName",
      "type": "String"
     },
     {
      "params": [],
      "name": "hasReferenceName",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isFunctionPrototypeType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getOwnerFunction",
      "type": "FunctionType"
     },
     {
      "params": [],
      "name": "getCtorImplementedInterfaces",
      "type": "Iterable"
     },
     {
      "params": [],
      "name": "getCtorExtendedInterfaces",
      "type": "Iterable"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "ownerFunction",
      "type": "FunctionType"
     }
    ],
    "name": "FunctionPrototypeType"
   }
  ]
 },
 {
  "filename": "NamedType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "inferred",
        "type": "boolean"
       },
       {
        "name": "propertyNode",
        "type": "Node"
       }
      ],
      "name": "defineProperty",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "finishPropertyContinuations",
      "type": null
     },
     {
      "params": [],
      "name": "getReferencedType",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "getReferenceName",
      "type": "String"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "hasReferenceName",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNamedType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNominalType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isEquivalentTo",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "enclosing",
        "type": "StaticScope"
       }
      ],
      "name": "resolveInternal",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "enclosing",
        "type": "StaticScope"
       }
      ],
      "name": "resolveViaRegistry",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "enclosing",
        "type": "StaticScope"
       }
      ],
      "name": "resolveViaProperties",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "enclosing",
        "type": "StaticScope"
       }
      ],
      "name": "lookupViaProperties",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "enclosing",
        "type": "StaticScope"
       }
      ],
      "name": "setReferencedAndResolvedType",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       }
      ],
      "name": "handleTypeCycle",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       }
      ],
      "name": "checkEnumElementCycle",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "ignoreForwardReferencedTypes",
        "type": "boolean"
       }
      ],
      "name": "handleUnresolvedType",
      "type": null
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "slot",
        "type": "StaticSlot"
       },
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getTypedefType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "validator",
        "type": "Predicate"
       }
      ],
      "name": "setValidator",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "reference",
      "type": "String"
     },
     {
      "name": "sourceName",
      "type": "String"
     },
     {
      "name": "lineno",
      "type": "int"
     },
     {
      "name": "charno",
      "type": "int"
     },
     {
      "name": "validator",
      "type": "Predicate"
     },
     {
      "name": "propertyContinuations",
      "type": "List"
     }
    ],
    "name": "NamedType"
   }
  ]
 },
 {
  "filename": "NoResolvedType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "isNoResolvedType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNoType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "getPropertyType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isSubtype",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "NoResolvedType"
   }
  ]
 },
 {
  "filename": "StaticSlot.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getType",
      "type": "T"
     },
     {
      "params": [],
      "name": "isTypeInferred",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getDeclaration",
      "type": "StaticReference"
     }
    ],
    "fields": [],
    "name": "StaticSlot"
   }
  ]
 },
 {
  "filename": "SimpleSourceFile.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "isExtern",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "line",
        "type": "int"
       }
      ],
      "name": "getLineOffset",
      "type": "int"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "name",
      "type": "String"
     },
     {
      "name": "extern",
      "type": "boolean"
     }
    ],
    "name": "SimpleSourceFile"
   }
  ]
 },
 {
  "filename": "Visitor.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "caseNoType",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "EnumElementType"
       }
      ],
      "name": "caseEnumElementType",
      "type": "T"
     },
     {
      "params": [],
      "name": "caseAllType",
      "type": "T"
     },
     {
      "params": [],
      "name": "caseBooleanType",
      "type": "T"
     },
     {
      "params": [],
      "name": "caseNoObjectType",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "FunctionType"
       }
      ],
      "name": "caseFunctionType",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "ObjectType"
       }
      ],
      "name": "caseObjectType",
      "type": "T"
     },
     {
      "params": [],
      "name": "caseUnknownType",
      "type": "T"
     },
     {
      "params": [],
      "name": "caseNullType",
      "type": "T"
     },
     {
      "params": [],
      "name": "caseNumberType",
      "type": "T"
     },
     {
      "params": [],
      "name": "caseStringType",
      "type": "T"
     },
     {
      "params": [],
      "name": "caseVoidType",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "UnionType"
       }
      ],
      "name": "caseUnionType",
      "type": "T"
     }
    ],
    "fields": [],
    "name": "Visitor"
   }
  ]
 },
 {
  "filename": "ArrowType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "other",
        "type": "JSType"
       }
      ],
      "name": "isSubtype",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "ArrowType"
       }
      ],
      "name": "hasEqualParameters",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "object",
        "type": "JSType"
       }
      ],
      "name": "isEquivalentTo",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "getLeastSupertype",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "getGreatestSubtype",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "testForEquality",
      "type": "TernaryValue"
     },
     {
      "params": [
       {
        "name": "visitor",
        "type": "Visitor"
       }
      ],
      "name": "visit",
      "type": "T"
     },
     {
      "params": [],
      "name": "getPossibleToBooleanOutcomes",
      "type": "BooleanLiteralSet"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "resolveInternal",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "hasUnknownParamsOrReturn",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "parameters",
      "type": "Node"
     },
     {
      "name": "returnType",
      "type": "JSType"
     },
     {
      "name": "returnTypeInferred",
      "type": "boolean"
     }
    ],
    "name": "ArrowType"
   }
  ]
 },
 {
  "filename": "SimpleReference.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getSymbol",
      "type": "T"
     },
     {
      "params": [],
      "name": "getNode",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getSourceFile",
      "type": "StaticSourceFile"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "symbol",
      "type": "T"
     },
     {
      "name": "node",
      "type": "Node"
     }
    ],
    "name": "SimpleReference"
   }
  ]
 },
 {
  "filename": "VoidType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "restrictByNotNullOrUndefined",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "testForEquality",
      "type": "TernaryValue"
     },
     {
      "params": [],
      "name": "matchesNumberContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesObjectContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesStringContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isVoidType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "getDisplayName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getPossibleToBooleanOutcomes",
      "type": "BooleanLiteralSet"
     },
     {
      "params": [
       {
        "name": "visitor",
        "type": "Visitor"
       }
      ],
      "name": "visit",
      "type": "T"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "VoidType"
   }
  ]
 },
 {
  "filename": "ErrorFunctionType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "ErrorFunctionType"
   }
  ]
 },
 {
  "filename": "NumberType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "isNullable",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "testForEquality",
      "type": "TernaryValue"
     },
     {
      "params": [],
      "name": "isNumberValueType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesNumberContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesStringContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesObjectContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "getDisplayName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getPossibleToBooleanOutcomes",
      "type": "BooleanLiteralSet"
     },
     {
      "params": [
       {
        "name": "visitor",
        "type": "Visitor"
       }
      ],
      "name": "visit",
      "type": "T"
     },
     {
      "params": [],
      "name": "autoboxesTo",
      "type": "JSType"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "NumberType"
   }
  ]
 },
 {
  "filename": "EnumType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "isEnumType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getImplicitPrototype",
      "type": "ObjectType"
     },
     {
      "params": [],
      "name": "getElements",
      "type": "Set"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "definingNode",
        "type": "Node"
       }
      ],
      "name": "defineElement",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getElementsType",
      "type": "EnumElementType"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "testForEquality",
      "type": "TernaryValue"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isSubtype",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "getDisplayName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "visitor",
        "type": "Visitor"
       }
      ],
      "name": "visit",
      "type": "T"
     },
     {
      "params": [],
      "name": "getConstructor",
      "type": "FunctionType"
     },
     {
      "params": [],
      "name": "matchesNumberContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesStringContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesObjectContext",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "resolveInternal",
      "type": "JSType"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "elementsType",
      "type": "EnumElementType"
     },
     {
      "name": "elements",
      "type": "Set"
     }
    ],
    "name": "EnumType"
   }
  ]
 },
 {
  "filename": "EnumElementType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getSlot",
      "type": "StaticSlot"
     },
     {
      "params": [],
      "name": "toMaybeEnumElementType",
      "type": "EnumElementType"
     },
     {
      "params": [],
      "name": "matchesNumberContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesStringContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesObjectContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "canBeCalled",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isObject",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "testForEquality",
      "type": "TernaryValue"
     },
     {
      "params": [],
      "name": "isNullable",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNominalType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isEquivalentTo",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "getReferenceName",
      "type": "String"
     },
     {
      "params": [],
      "name": "hasReferenceName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isSubtype",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "visitor",
        "type": "Visitor"
       }
      ],
      "name": "visit",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "inferred",
        "type": "boolean"
       },
       {
        "name": "propertyNode",
        "type": "Node"
       }
      ],
      "name": "defineProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "isPropertyTypeDeclared",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "isPropertyTypeInferred",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getImplicitPrototype",
      "type": "ObjectType"
     },
     {
      "params": [],
      "name": "getPropertiesCount",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "props",
        "type": "Set"
       }
      ],
      "name": "collectPropertyNames",
      "type": null
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "findPropertyType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "getPropertyType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "hasProperty",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getConstructor",
      "type": "FunctionType"
     },
     {
      "params": [],
      "name": "autoboxesTo",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "getPrimitiveType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "meet",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "resolveInternal",
      "type": "JSType"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "primitiveType",
      "type": "JSType"
     },
     {
      "name": "primitiveObjectType",
      "type": "ObjectType"
     },
     {
      "name": "name",
      "type": "String"
     }
    ],
    "name": "EnumElementType"
   }
  ]
 },
 {
  "filename": "ObjectType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getRootNode",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getParentScope",
      "type": "StaticScope"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getSlot",
      "type": "StaticSlot"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getOwnSlot",
      "type": "StaticSlot"
     },
     {
      "params": [],
      "name": "getTypeOfThis",
      "type": "ObjectType"
     },
     {
      "params": [],
      "name": "getParameterType",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "getIndexType",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "getJSDocInfo",
      "type": "JSDocInfo"
     },
     {
      "params": [
       {
        "name": "info",
        "type": "JSDocInfo"
       }
      ],
      "name": "setJSDocInfo",
      "type": null
     },
     {
      "params": [],
      "name": "detectImplicitPrototypeCycle",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getReferenceName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getNormalizedReferenceName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getDisplayName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "suffix",
        "type": "String"
       }
      ],
      "name": "createDelegateSuffix",
      "type": "String"
     },
     {
      "params": [],
      "name": "hasReferenceName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "testForEquality",
      "type": "TernaryValue"
     },
     {
      "params": [],
      "name": "getConstructor",
      "type": "FunctionType"
     },
     {
      "params": [],
      "name": "getImplicitPrototype",
      "type": "ObjectType"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "propertyNode",
        "type": "Node"
       }
      ],
      "name": "defineDeclaredProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "propertyNode",
        "type": "Node"
       }
      ],
      "name": "defineInferredProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "inferred",
        "type": "boolean"
       },
       {
        "name": "propertyNode",
        "type": "Node"
       }
      ],
      "name": "defineProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "removeProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "getPropertyNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "getOwnPropertyJSDocInfo",
      "type": "JSDocInfo"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "info",
        "type": "JSDocInfo"
       }
      ],
      "name": "setPropertyJSDocInfo",
      "type": null
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "findPropertyType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "getPropertyType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "hasProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "hasOwnProperty",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getOwnPropertyNames",
      "type": "Set"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "isPropertyTypeInferred",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "isPropertyTypeDeclared",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "hasOwnDeclaredProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "isPropertyInExterns",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getPropertiesCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "getPropertyNames",
      "type": "Set"
     },
     {
      "params": [
       {
        "name": "props",
        "type": "Set"
       }
      ],
      "name": "collectPropertyNames",
      "type": null
     },
     {
      "params": [
       {
        "name": "visitor",
        "type": "Visitor"
       }
      ],
      "name": "visit",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "prototype",
        "type": "ObjectType"
       }
      ],
      "name": "isImplicitPrototype",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getPossibleToBooleanOutcomes",
      "type": "BooleanLiteralSet"
     },
     {
      "params": [],
      "name": "isUnknownType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isObject",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hasCachedValues",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "clearCachedValues",
      "type": null
     },
     {
      "params": [],
      "name": "isNativeObjectType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "cast",
      "type": "ObjectType"
     },
     {
      "params": [],
      "name": "getCtorImplementedInterfaces",
      "type": "Iterable"
     },
     {
      "params": [],
      "name": "getCtorExtendedInterfaces",
      "type": "Iterable"
     }
    ],
    "fields": [
     {
      "name": "visited",
      "type": "boolean"
     },
     {
      "name": "docInfo",
      "type": "JSDocInfo"
     },
     {
      "name": "unknown",
      "type": "boolean"
     }
    ],
    "name": "ObjectType"
   }
  ]
 },
 {
  "filename": "StaticScope.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getRootNode",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getParentScope",
      "type": "StaticScope"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getSlot",
      "type": "StaticSlot"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getOwnSlot",
      "type": "StaticSlot"
     },
     {
      "params": [],
      "name": "getTypeOfThis",
      "type": "T"
     }
    ],
    "fields": [],
    "name": "StaticScope"
   }
  ]
 },
 {
  "filename": "StaticSourceFile.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "isExtern",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "lineNumber",
        "type": "int"
       }
      ],
      "name": "getLineOffset",
      "type": "int"
     }
    ],
    "fields": [],
    "name": "StaticSourceFile"
   }
  ]
 },
 {
  "filename": "ValueType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isSubtype",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "resolveInternal",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "hasDisplayName",
      "type": "boolean"
     }
    ],
    "fields": [],
    "name": "ValueType"
   }
  ]
 },
 {
  "filename": "UnknownType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getSlot",
      "type": "StaticSlot"
     },
     {
      "params": [],
      "name": "isUnknownType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isCheckedUnknownType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "canAssignTo",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "canBeCalled",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesNumberContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesObjectContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesStringContext",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "testForEquality",
      "type": "TernaryValue"
     },
     {
      "params": [],
      "name": "isNullable",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isSubtype",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "visitor",
        "type": "Visitor"
       }
      ],
      "name": "visit",
      "type": "T"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "inferred",
        "type": "boolean"
       },
       {
        "name": "propertyNode",
        "type": "Node"
       }
      ],
      "name": "defineProperty",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getImplicitPrototype",
      "type": "ObjectType"
     },
     {
      "params": [],
      "name": "getPropertiesCount",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "props",
        "type": "Set"
       }
      ],
      "name": "collectPropertyNames",
      "type": null
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "getPropertyType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "hasProperty",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getConstructor",
      "type": "FunctionType"
     },
     {
      "params": [],
      "name": "getReferenceName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getDisplayName",
      "type": "String"
     },
     {
      "params": [],
      "name": "hasDisplayName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "isPropertyTypeDeclared",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "isPropertyTypeInferred",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getPossibleToBooleanOutcomes",
      "type": "BooleanLiteralSet"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "resolveInternal",
      "type": "JSType"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "isChecked",
      "type": "boolean"
     }
    ],
    "name": "UnknownType"
   }
  ]
 },
 {
  "filename": "UnionType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getAlternates",
      "type": "Iterable"
     },
     {
      "params": [],
      "name": "matchesNumberContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesStringContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesObjectContext",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "findPropertyType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "canAssignTo",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "canBeCalled",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "restrictByNotNullOrUndefined",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "testForEquality",
      "type": "TernaryValue"
     },
     {
      "params": [],
      "name": "isNullable",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isUnknownType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "getLeastSupertype",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "meet",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "object",
        "type": "JSType"
       }
      ],
      "name": "isEquivalentTo",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "hasAlternate",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [],
      "name": "toMaybeUnionType",
      "type": "UnionType"
     },
     {
      "params": [],
      "name": "isObject",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "contains",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "getRestrictedUnion",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isSubtype",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "outcome",
        "type": "boolean"
       }
      ],
      "name": "getRestrictedTypeGivenToBooleanOutcome",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "getPossibleToBooleanOutcomes",
      "type": "BooleanLiteralSet"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "getTypesUnderEquality",
      "type": "TypePair"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "getTypesUnderInequality",
      "type": "TypePair"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "getTypesUnderShallowInequality",
      "type": "TypePair"
     },
     {
      "params": [
       {
        "name": "visitor",
        "type": "Visitor"
       }
      ],
      "name": "visit",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "resolveInternal",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "toDebugHashCodeString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "validator",
        "type": "Predicate"
       }
      ],
      "name": "setValidator",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "alternates",
      "type": "Collection"
     },
     {
      "name": "hashcode",
      "type": "int"
     }
    ],
    "name": "UnionType"
   }
  ]
 },
 {
  "filename": "StringType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "testForEquality",
      "type": "TernaryValue"
     },
     {
      "params": [],
      "name": "isStringValueType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesNumberContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesStringContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesObjectContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "getDisplayName",
      "type": "String"
     },
     {
      "params": [],
      "name": "autoboxesTo",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "getPossibleToBooleanOutcomes",
      "type": "BooleanLiteralSet"
     },
     {
      "params": [
       {
        "name": "visitor",
        "type": "Visitor"
       }
      ],
      "name": "visit",
      "type": "T"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "StringType"
   }
  ]
 },
 {
  "filename": "BooleanType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "isNullable",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "testForEquality",
      "type": "TernaryValue"
     },
     {
      "params": [],
      "name": "isBooleanValueType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesNumberContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesStringContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesObjectContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "autoboxesTo",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "getDisplayName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getPossibleToBooleanOutcomes",
      "type": "BooleanLiteralSet"
     },
     {
      "params": [
       {
        "name": "visitor",
        "type": "Visitor"
       }
      ],
      "name": "visit",
      "type": "T"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "BooleanType"
   }
  ]
 },
 {
  "filename": "TemplateType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getReferenceName",
      "type": "String"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "isTemplateType",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "name",
      "type": "String"
     }
    ],
    "name": "TemplateType"
   }
  ]
 },
 {
  "filename": "FunctionType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "registry",
        "type": "JSTypeRegistry"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "source",
        "type": "Node"
       }
      ],
      "name": "forInterface",
      "type": "FunctionType"
     },
     {
      "params": [],
      "name": "isInstanceType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isConstructor",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isInterface",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isOrdinaryFunction",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toMaybeFunctionType",
      "type": "FunctionType"
     },
     {
      "params": [],
      "name": "canBeCalled",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hasImplementedInterfaces",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getParameters",
      "type": "Iterable"
     },
     {
      "params": [],
      "name": "getParametersNode",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getMinArguments",
      "type": "int"
     },
     {
      "params": [],
      "name": "getMaxArguments",
      "type": "int"
     },
     {
      "params": [],
      "name": "getReturnType",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "isReturnTypeInferred",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getInternalArrowType",
      "type": "ArrowType"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getSlot",
      "type": "StaticSlot"
     },
     {
      "params": [],
      "name": "getOwnPropertyNames",
      "type": "Set"
     },
     {
      "params": [],
      "name": "getPrototype",
      "type": "FunctionPrototypeType"
     },
     {
      "params": [
       {
        "name": "baseType",
        "type": "ObjectType"
       }
      ],
      "name": "setPrototypeBasedOn",
      "type": null
     },
     {
      "params": [
       {
        "name": "prototype",
        "type": "FunctionPrototypeType"
       }
      ],
      "name": "setPrototype",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getAllImplementedInterfaces",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "instance",
        "type": "ObjectType"
       },
       {
        "name": "set",
        "type": "Set"
       }
      ],
      "name": "addRelatedInterfaces",
      "type": null
     },
     {
      "params": [],
      "name": "getImplementedInterfaces",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "implementedInterfaces",
        "type": "List"
       }
      ],
      "name": "setImplementedInterfaces",
      "type": null
     },
     {
      "params": [],
      "name": "getAllExtendedInterfaces",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "instance",
        "type": "ObjectType"
       },
       {
        "name": "set",
        "type": "Set"
       }
      ],
      "name": "addRelatedExtendedInterfaces",
      "type": null
     },
     {
      "params": [],
      "name": "getExtendedInterfaces",
      "type": "Iterable"
     },
     {
      "params": [],
      "name": "getExtendedInterfacesCount",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "extendedInterfaces",
        "type": "List"
       }
      ],
      "name": "setExtendedInterfaces",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getPropertyType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "inferred",
        "type": "boolean"
       },
       {
        "name": "propertyNode",
        "type": "Node"
       }
      ],
      "name": "defineProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "getLeastSupertype",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "getGreatestSubtype",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       },
       {
        "name": "leastSuper",
        "type": "boolean"
       }
      ],
      "name": "supAndInfHelper",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "other",
        "type": "FunctionType"
       },
       {
        "name": "leastSuper",
        "type": "boolean"
       }
      ],
      "name": "tryMergeFunctionPiecewise",
      "type": "FunctionType"
     },
     {
      "params": [],
      "name": "getSuperClassConstructor",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "ObjectType"
       },
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "getTopDefiningInterface",
      "type": "ObjectType"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "getTopMostDefiningType",
      "type": "ObjectType"
     },
     {
      "params": [
       {
        "name": "otherType",
        "type": "JSType"
       }
      ],
      "name": "isEquivalentTo",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "otherType",
        "type": "FunctionType"
       }
      ],
      "name": "hasEqualCallType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "builder",
        "type": "StringBuilder"
       },
       {
        "name": "paramType",
        "type": "JSType"
       }
      ],
      "name": "appendVarArgsString",
      "type": null
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isSubtype",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "visitor",
        "type": "Visitor"
       }
      ],
      "name": "visit",
      "type": "T"
     },
     {
      "params": [],
      "name": "getInstanceType",
      "type": "ObjectType"
     },
     {
      "params": [
       {
        "name": "instanceType",
        "type": "ObjectType"
       }
      ],
      "name": "setInstanceType",
      "type": null
     },
     {
      "params": [],
      "name": "hasInstanceType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getTypeOfThis",
      "type": "ObjectType"
     },
     {
      "params": [],
      "name": "getSource",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "source",
        "type": "Node"
       }
      ],
      "name": "setSource",
      "type": null
     },
     {
      "params": [
       {
        "name": "subType",
        "type": "FunctionType"
       }
      ],
      "name": "addSubType",
      "type": null
     },
     {
      "params": [],
      "name": "clearCachedValues",
      "type": null
     },
     {
      "params": [],
      "name": "getSubTypes",
      "type": "List"
     },
     {
      "params": [],
      "name": "hasCachedValues",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getTemplateTypeName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "resolveInternal",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "toDebugHashCodeString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "getDebugHashCodeStringOf",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "call",
      "type": "ArrowType"
     },
     {
      "name": "prototype",
      "type": "FunctionPrototypeType"
     },
     {
      "name": "prototypeSlot",
      "type": "SimpleSlot"
     },
     {
      "name": "kind",
      "type": "Kind"
     },
     {
      "name": "typeOfThis",
      "type": "ObjectType"
     },
     {
      "name": "source",
      "type": "Node"
     },
     {
      "name": "implementedInterfaces",
      "type": "List"
     },
     {
      "name": "extendedInterfaces",
      "type": "List"
     },
     {
      "name": "subTypes",
      "type": "List"
     },
     {
      "name": "templateTypeName",
      "type": "String"
     }
    ],
    "name": "FunctionType"
   }
  ]
 },
 {
  "filename": "JSTypeRegistry.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "mode",
        "type": "ResolveMode"
       }
      ],
      "name": "setResolveMode",
      "type": null
     },
     {
      "params": [],
      "name": "getResolveMode",
      "type": "ResolveMode"
     },
     {
      "params": [],
      "name": "getErrorReporter",
      "type": "ErrorReporter"
     },
     {
      "params": [],
      "name": "shouldTolerateUndefinedValues",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "resetForTypeCheck",
      "type": null
     },
     {
      "params": [],
      "name": "initializeBuiltInTypes",
      "type": null
     },
     {
      "params": [],
      "name": "initializeRegistry",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "register",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "register",
      "type": null
     },
     {
      "params": [
       {
        "name": "typeId",
        "type": "JSTypeNative"
       },
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "registerNativeType",
      "type": null
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "registerPropertyOnType",
      "type": null
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "addReferenceTypeIndexedByProperty",
      "type": null
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "unregisterPropertyOnType",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "getGreatestSubtypeWithProperty",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "canPropertyBeDefined",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "getTypesWithProperty",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "getEachReferenceTypeWithProperty",
      "type": "Iterable"
     },
     {
      "params": [],
      "name": "incrementGeneration",
      "type": null
     },
     {
      "params": [],
      "name": "isLastGeneration",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "lastGeneration",
        "type": "boolean"
       }
      ],
      "name": "setLastGeneration",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "FunctionType"
       },
       {
        "name": "interfaceInstance",
        "type": "ObjectType"
       }
      ],
      "name": "registerTypeImplementingInterface",
      "type": null
     },
     {
      "params": [
       {
        "name": "interfaceInstance",
        "type": "ObjectType"
       }
      ],
      "name": "getDirectImplementors",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "t",
        "type": "JSType"
       }
      ],
      "name": "declareType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "t",
        "type": "JSType"
       }
      ],
      "name": "overwriteDeclaredType",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "forwardDeclareType",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "isForwardDeclaredType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "hasNamespace",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "jsTypeName",
        "type": "String"
       }
      ],
      "name": "getType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "typeId",
        "type": "JSTypeNative"
       }
      ],
      "name": "getNativeType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "typeId",
        "type": "JSTypeNative"
       }
      ],
      "name": "getNativeObjectType",
      "type": "ObjectType"
     },
     {
      "params": [
       {
        "name": "typeId",
        "type": "JSTypeNative"
       }
      ],
      "name": "getNativeFunctionType",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "StaticScope"
       },
       {
        "name": "jsTypeName",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "getType",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "clearNamedTypes",
      "type": null
     },
     {
      "params": [
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "resolveTypesInScope",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "createOptionalType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "createDefaultObjectUnion",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "createNullableType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "createOptionalNullableType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "variants",
        "type": "JSType"
       }
      ],
      "name": "createUnionType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "variants",
        "type": "JSTypeNative"
       }
      ],
      "name": "createUnionType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "elementsType",
        "type": "JSType"
       }
      ],
      "name": "createEnumType",
      "type": "EnumType"
     },
     {
      "params": [
       {
        "name": "parametersNode",
        "type": "Node"
       },
       {
        "name": "returnType",
        "type": "JSType"
       }
      ],
      "name": "createArrowType",
      "type": "ArrowType"
     },
     {
      "params": [
       {
        "name": "parametersNode",
        "type": "Node"
       }
      ],
      "name": "createArrowType",
      "type": "ArrowType"
     },
     {
      "params": [
       {
        "name": "returnType",
        "type": "JSType"
       },
       {
        "name": "parameterTypes",
        "type": "JSType"
       }
      ],
      "name": "createFunctionType",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "returnType",
        "type": "JSType"
       },
       {
        "name": "parameterTypes",
        "type": "List"
       }
      ],
      "name": "createFunctionTypeWithVarArgs",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "returnType",
        "type": "JSType"
       },
       {
        "name": "parameterTypes",
        "type": "List"
       }
      ],
      "name": "createFunctionType",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "returnType",
        "type": "JSType"
       },
       {
        "name": "parameterTypes",
        "type": "JSType"
       }
      ],
      "name": "createFunctionTypeWithVarArgs",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "returnType",
        "type": "JSType"
       },
       {
        "name": "parameterTypes",
        "type": "JSType"
       }
      ],
      "name": "createConstructorType",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "returnType",
        "type": "JSType"
       },
       {
        "name": "parameterTypes",
        "type": "JSType"
       }
      ],
      "name": "createConstructorTypeWithVarArgs",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "instanceType",
        "type": "ObjectType"
       },
       {
        "name": "returnType",
        "type": "JSType"
       },
       {
        "name": "parameterTypes",
        "type": "List"
       }
      ],
      "name": "createFunctionType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "instanceType",
        "type": "ObjectType"
       },
       {
        "name": "returnType",
        "type": "JSType"
       },
       {
        "name": "parameterTypes",
        "type": "List"
       }
      ],
      "name": "createFunctionTypeWithVarArgs",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "parameterTypes",
        "type": "List"
       }
      ],
      "name": "createParameters",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "parameterTypes",
        "type": "List"
       }
      ],
      "name": "createParametersWithVarArgs",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "parameterTypes",
        "type": "JSType"
       }
      ],
      "name": "createParameters",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "parameterTypes",
        "type": "JSType"
       }
      ],
      "name": "createParametersWithVarArgs",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "parameterTypes",
        "type": "JSType"
       }
      ],
      "name": "createOptionalParameters",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "lastVarArgs",
        "type": "boolean"
       },
       {
        "name": "parameterTypes",
        "type": "JSType"
       }
      ],
      "name": "createParameters",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "returnType",
        "type": "JSType"
       },
       {
        "name": "lastVarArgs",
        "type": "boolean"
       },
       {
        "name": "parameterTypes",
        "type": "JSType"
       }
      ],
      "name": "createFunctionType",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "existingFunctionType",
        "type": "FunctionType"
       },
       {
        "name": "returnType",
        "type": "JSType"
       }
      ],
      "name": "createFunctionTypeWithNewReturnType",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "existingFunctionType",
        "type": "FunctionType"
       },
       {
        "name": "thisType",
        "type": "ObjectType"
       }
      ],
      "name": "createFunctionTypeWithNewThisType",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "returnType",
        "type": "JSType"
       },
       {
        "name": "parameters",
        "type": "Node"
       }
      ],
      "name": "createFunctionType",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "returnType",
        "type": "JSType"
       },
       {
        "name": "lastVarArgs",
        "type": "boolean"
       },
       {
        "name": "parameterTypes",
        "type": "JSType"
       }
      ],
      "name": "createConstructorType",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "implicitPrototype",
        "type": "ObjectType"
       }
      ],
      "name": "createObjectType",
      "type": "ObjectType"
     },
     {
      "params": [
       {
        "name": "properties",
        "type": "Map"
       }
      ],
      "name": "createRecordType",
      "type": "RecordType"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "implicitPrototype",
        "type": "ObjectType"
       }
      ],
      "name": "createObjectType",
      "type": "ObjectType"
     },
     {
      "params": [],
      "name": "createAnonymousObjectType",
      "type": "ObjectType"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "source",
        "type": "Node"
       },
       {
        "name": "parameters",
        "type": "Node"
       },
       {
        "name": "returnType",
        "type": "JSType"
       }
      ],
      "name": "createConstructorType",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "source",
        "type": "Node"
       }
      ],
      "name": "createInterfaceType",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "objectType",
        "type": "ObjectType"
       },
       {
        "name": "parameterType",
        "type": "JSType"
       }
      ],
      "name": "createParameterizedType",
      "type": "ParameterizedType"
     },
     {
      "params": [
       {
        "name": "reference",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "lineno",
        "type": "int"
       },
       {
        "name": "charno",
        "type": "int"
       }
      ],
      "name": "createNamedType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "identifyNonNullableName",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "createFromTypeNodes",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "hasTypeName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "createFromTypeNodesInternal",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "createRecordTypeFromNodes",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "setTemplateTypeName",
      "type": null
     },
     {
      "params": [],
      "name": "clearTemplateTypeName",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "PROPERTY_CHECKING_UNION_SIZE",
      "type": "int"
     },
     {
      "name": "reporter",
      "type": "ErrorReporter"
     },
     {
      "name": "nativeTypes",
      "type": "JSType"
     },
     {
      "name": "namesToTypes",
      "type": "Map"
     },
     {
      "name": "namespaces",
      "type": "Set"
     },
     {
      "name": "nonNullableTypeNames",
      "type": "Set"
     },
     {
      "name": "forwardDeclaredTypes",
      "type": "Set"
     },
     {
      "name": "typesIndexedByProperty",
      "type": "Map"
     },
     {
      "name": "eachRefTypeIndexedByProperty",
      "type": "Map"
     },
     {
      "name": "greatestSubtypeByProperty",
      "type": "Map"
     },
     {
      "name": "interfaceToImplementors",
      "type": "Multimap"
     },
     {
      "name": "unresolvedNamedTypes",
      "type": "Multimap"
     },
     {
      "name": "resolvedNamedTypes",
      "type": "Multimap"
     },
     {
      "name": "lastGeneration",
      "type": "boolean"
     },
     {
      "name": "templateTypeName",
      "type": "String"
     },
     {
      "name": "templateType",
      "type": "TemplateType"
     },
     {
      "name": "tolerateUndefinedValues",
      "type": "boolean"
     },
     {
      "name": "resolveMode",
      "type": "ResolveMode"
     }
    ],
    "name": "JSTypeRegistry"
   }
  ]
 },
 {
  "filename": "PrototypeObjectType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getSlot",
      "type": "StaticSlot"
     },
     {
      "params": [],
      "name": "getPropertiesCount",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "hasProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "hasOwnProperty",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getOwnPropertyNames",
      "type": "Set"
     },
     {
      "params": [
       {
        "name": "property",
        "type": "String"
       }
      ],
      "name": "isPropertyTypeDeclared",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "props",
        "type": "Set"
       }
      ],
      "name": "collectPropertyNames",
      "type": null
     },
     {
      "params": [
       {
        "name": "property",
        "type": "String"
       }
      ],
      "name": "isPropertyTypeInferred",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "property",
        "type": "String"
       }
      ],
      "name": "getPropertyType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "isPropertyInExterns",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "inferred",
        "type": "boolean"
       },
       {
        "name": "propertyNode",
        "type": "Node"
       }
      ],
      "name": "defineProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "removeProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "getPropertyNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "getOwnPropertyJSDocInfo",
      "type": "JSDocInfo"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "info",
        "type": "JSDocInfo"
       }
      ],
      "name": "setPropertyJSDocInfo",
      "type": null
     },
     {
      "params": [],
      "name": "matchesNumberContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesStringContext",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "hasOverridenNativeProperty",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "unboxesTo",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "matchesObjectContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "canBeCalled",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNative",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "prettyPrint",
        "type": "boolean"
       }
      ],
      "name": "setPrettyPrint",
      "type": null
     },
     {
      "params": [],
      "name": "getConstructor",
      "type": "FunctionType"
     },
     {
      "params": [],
      "name": "getImplicitPrototype",
      "type": "ObjectType"
     },
     {
      "params": [
       {
        "name": "implicitPrototype",
        "type": "ObjectType"
       }
      ],
      "name": "setImplicitPrototype",
      "type": null
     },
     {
      "params": [],
      "name": "getReferenceName",
      "type": "String"
     },
     {
      "params": [],
      "name": "hasReferenceName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isSubtype",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "implicitPrototypeChainIsUnknown",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hasCachedValues",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNativeObjectType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "resolveInternal",
      "type": "JSType"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "className",
      "type": "String"
     },
     {
      "name": "properties",
      "type": "Map"
     },
     {
      "name": "nativeType",
      "type": "boolean"
     },
     {
      "name": "implicitPrototypeFallback",
      "type": "ObjectType"
     },
     {
      "name": "prettyPrint",
      "type": "boolean"
     },
     {
      "name": "MAX_PRETTY_PRINTED_PROPERTIES",
      "type": "int"
     }
    ],
    "name": "PrototypeObjectType"
   }
  ]
 },
 {
  "filename": "ProxyObjectType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getSlot",
      "type": "StaticSlot"
     },
     {
      "params": [],
      "name": "getReferencedTypeInternal",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "getReferencedObjTypeInternal",
      "type": "ObjectType"
     },
     {
      "params": [
       {
        "name": "referencedType",
        "type": "JSType"
       }
      ],
      "name": "setReferencedType",
      "type": null
     },
     {
      "params": [],
      "name": "getReferenceName",
      "type": "String"
     },
     {
      "params": [],
      "name": "hasReferenceName",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesNumberContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesStringContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesObjectContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "canBeCalled",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNoType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNoObjectType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNoResolvedType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isUnknownType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isCheckedUnknownType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNullable",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isFunctionPrototypeType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isEnumType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isConstructor",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNominalType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isInstanceType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isInterface",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isOrdinaryFunction",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toMaybeUnionType",
      "type": "UnionType"
     },
     {
      "params": [],
      "name": "toMaybeFunctionType",
      "type": "FunctionType"
     },
     {
      "params": [],
      "name": "toMaybeEnumElementType",
      "type": "EnumElementType"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "testForEquality",
      "type": "TernaryValue"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isSubtype",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getCtorImplementedInterfaces",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "canAssignTo",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isEquivalentTo",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "getImplicitPrototype",
      "type": "ObjectType"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "inferred",
        "type": "boolean"
       },
       {
        "name": "propertyNode",
        "type": "Node"
       }
      ],
      "name": "defineProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "removeProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "isPropertyTypeDeclared",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "getPropertyNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "isPropertyTypeInferred",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "isPropertyInExterns",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getPropertiesCount",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "props",
        "type": "Set"
       }
      ],
      "name": "collectPropertyNames",
      "type": null
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "findPropertyType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "getPropertyType",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "getJSDocInfo",
      "type": "JSDocInfo"
     },
     {
      "params": [
       {
        "name": "info",
        "type": "JSDocInfo"
       }
      ],
      "name": "setJSDocInfo",
      "type": null
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "getOwnPropertyJSDocInfo",
      "type": "JSDocInfo"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "info",
        "type": "JSDocInfo"
       }
      ],
      "name": "setPropertyJSDocInfo",
      "type": null
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "hasProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "hasOwnProperty",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getOwnPropertyNames",
      "type": "Set"
     },
     {
      "params": [],
      "name": "getConstructor",
      "type": "FunctionType"
     },
     {
      "params": [],
      "name": "getParameterType",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "getIndexType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "visitor",
        "type": "Visitor"
       }
      ],
      "name": "visit",
      "type": "T"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "resolveInternal",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "toDebugHashCodeString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "referencedType",
      "type": "JSType"
     },
     {
      "name": "referencedObjType",
      "type": "ObjectType"
     }
    ],
    "name": "ProxyObjectType"
   }
  ]
 },
 {
  "filename": "TernaryValue.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "that",
        "type": "TernaryValue"
       }
      ],
      "name": "and",
      "type": "TernaryValue"
     },
     {
      "params": [],
      "name": "not",
      "type": "TernaryValue"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "TernaryValue"
       }
      ],
      "name": "or",
      "type": "TernaryValue"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "TernaryValue"
       }
      ],
      "name": "xor",
      "type": "TernaryValue"
     },
     {
      "params": [
       {
        "name": "unknown",
        "type": "boolean"
       }
      ],
      "name": "toBoolean",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "val",
        "type": "boolean"
       }
      ],
      "name": "forBoolean",
      "type": "TernaryValue"
     }
    ],
    "fields": [],
    "name": "TernaryValue"
   }
  ]
 },
 {
  "filename": "SimpleSlot.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getType",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "isTypeInferred",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getDeclaration",
      "type": "StaticReference"
     }
    ],
    "fields": [
     {
      "name": "name",
      "type": "String"
     },
     {
      "name": "type",
      "type": "JSType"
     },
     {
      "name": "inferred",
      "type": "boolean"
     }
    ],
    "name": "SimpleSlot"
   }
  ]
 },
 {
  "filename": "FunctionParamBuilder.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "types",
        "type": "JSType"
       }
      ],
      "name": "addRequiredParams",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "types",
        "type": "JSType"
       }
      ],
      "name": "addOptionalParams",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "addVarArgs",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "Node"
       }
      ],
      "name": "newParameterFromNode",
      "type": "Node"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "newParameter",
      "type": "Node"
     },
     {
      "params": [],
      "name": "build",
      "type": "Node"
     },
     {
      "params": [],
      "name": "hasOptionalOrVarArgs",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hasVarArgs",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "registry",
      "type": "JSTypeRegistry"
     },
     {
      "name": "root",
      "type": "Node"
     }
    ],
    "name": "FunctionParamBuilder"
   }
  ]
 },
 {
  "filename": "AllType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isSubtype",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isAllType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesStringContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesObjectContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "canBeCalled",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "testForEquality",
      "type": "TernaryValue"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "getDisplayName",
      "type": "String"
     },
     {
      "params": [],
      "name": "hasDisplayName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "visitor",
        "type": "Visitor"
       }
      ],
      "name": "visit",
      "type": "T"
     },
     {
      "params": [],
      "name": "getPossibleToBooleanOutcomes",
      "type": "BooleanLiteralSet"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "resolveInternal",
      "type": "JSType"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "AllType"
   }
  ]
 },
 {
  "filename": "InstanceObjectType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getReferenceName",
      "type": "String"
     },
     {
      "params": [],
      "name": "hasReferenceName",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getImplicitPrototype",
      "type": "ObjectType"
     },
     {
      "params": [],
      "name": "getConstructor",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "inferred",
        "type": "boolean"
       },
       {
        "name": "propertyNode",
        "type": "Node"
       }
      ],
      "name": "defineProperty",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "isTheObjectType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isInstanceType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isArrayType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isStringObjectType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isBooleanObjectType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNumberObjectType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isDateType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isRegexpType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNominalType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isEquivalentTo",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [],
      "name": "getCtorImplementedInterfaces",
      "type": "Iterable"
     },
     {
      "params": [],
      "name": "getCtorExtendedInterfaces",
      "type": "Iterable"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "constructor",
      "type": "FunctionType"
     }
    ],
    "name": "InstanceObjectType"
   }
  ]
 },
 {
  "filename": "NullType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "isNullType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNullable",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesNumberContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesObjectContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesStringContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "restrictByNotNullOrUndefined",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "testForEquality",
      "type": "TernaryValue"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "getDisplayName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getPossibleToBooleanOutcomes",
      "type": "BooleanLiteralSet"
     },
     {
      "params": [
       {
        "name": "visitor",
        "type": "Visitor"
       }
      ],
      "name": "visit",
      "type": "T"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "NullType"
   }
  ]
 },
 {
  "filename": "StaticReference.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getSymbol",
      "type": "StaticSlot"
     },
     {
      "params": [],
      "name": "getNode",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getSourceFile",
      "type": "StaticSourceFile"
     }
    ],
    "fields": [],
    "name": "StaticReference"
   }
  ]
 },
 {
  "filename": "UnresolvedTypeExpression.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "enclosing",
        "type": "StaticScope"
       }
      ],
      "name": "resolveInternal",
      "type": "JSType"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "typeExpr",
      "type": "Node"
     },
     {
      "name": "sourceName",
      "type": "String"
     }
    ],
    "name": "UnresolvedTypeExpression"
   }
  ]
 },
 {
  "filename": "RecordType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "other",
        "type": "JSType"
       }
      ],
      "name": "isEquivalentTo",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getImplicitPrototype",
      "type": "ObjectType"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "inferred",
        "type": "boolean"
       },
       {
        "name": "propertyNode",
        "type": "Node"
       }
      ],
      "name": "defineProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "getLeastSupertype",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "getGreatestSubtype",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "isRecordType",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isSubtype",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "typeA",
        "type": "ObjectType"
       },
       {
        "name": "typeB",
        "type": "RecordType"
       }
      ],
      "name": "isSubtype",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "resolveInternal",
      "type": "JSType"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "properties",
      "type": "SortedMap"
     },
     {
      "name": "isFrozen",
      "type": "boolean"
     }
    ],
    "name": "RecordType"
   }
  ]
 },
 {
  "filename": "RecordTypeBuilder.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "propertyNode",
        "type": "Node"
       }
      ],
      "name": "addProperty",
      "type": "RecordTypeBuilder"
     },
     {
      "params": [],
      "name": "build",
      "type": "JSType"
     }
    ],
    "fields": [
     {
      "name": "isEmpty",
      "type": "boolean"
     },
     {
      "name": "registry",
      "type": "JSTypeRegistry"
     },
     {
      "name": "properties",
      "type": "HashMap"
     }
    ],
    "name": "RecordTypeBuilder"
   }
  ]
 },
 {
  "filename": "UnionTypeBuilder.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getAlternates",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "alternate",
        "type": "JSType"
       }
      ],
      "name": "addAlternate",
      "type": "UnionTypeBuilder"
     },
     {
      "params": [],
      "name": "reduceAlternatesWithoutUnion",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "build",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "getAlternateListCopy",
      "type": "Collection"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "DEFAULT_MAX_UNION_SIZE",
      "type": "int"
     },
     {
      "name": "registry",
      "type": "JSTypeRegistry"
     },
     {
      "name": "alternates",
      "type": "List"
     },
     {
      "name": "isAllType",
      "type": "boolean"
     },
     {
      "name": "isNativeUnknownType",
      "type": "boolean"
     },
     {
      "name": "areAllUnknownsChecked",
      "type": "boolean"
     },
     {
      "name": "maxUnionSize",
      "type": "int"
     },
     {
      "name": "result",
      "type": "JSType"
     }
    ],
    "name": "UnionTypeBuilder"
   }
  ]
 },
 {
  "filename": "BooleanLiteralSet.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "ordinal",
        "type": "int"
       }
      ],
      "name": "fromOrdinal",
      "type": "BooleanLiteralSet"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "BooleanLiteralSet"
       }
      ],
      "name": "intersection",
      "type": "BooleanLiteralSet"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "BooleanLiteralSet"
       }
      ],
      "name": "union",
      "type": "BooleanLiteralSet"
     },
     {
      "params": [
       {
        "name": "literalValue",
        "type": "boolean"
       }
      ],
      "name": "contains",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "literalValue",
        "type": "boolean"
       }
      ],
      "name": "get",
      "type": "BooleanLiteralSet"
     }
    ],
    "fields": [],
    "name": "BooleanLiteralSet"
   }
  ]
 },
 {
  "filename": "FunctionBuilder.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "withName",
      "type": "FunctionBuilder"
     },
     {
      "params": [
       {
        "name": "sourceNode",
        "type": "Node"
       }
      ],
      "name": "withSourceNode",
      "type": "FunctionBuilder"
     },
     {
      "params": [
       {
        "name": "params",
        "type": "FunctionParamBuilder"
       }
      ],
      "name": "withParams",
      "type": "FunctionBuilder"
     },
     {
      "params": [
       {
        "name": "parametersNode",
        "type": "Node"
       }
      ],
      "name": "withParamsNode",
      "type": "FunctionBuilder"
     },
     {
      "params": [
       {
        "name": "returnType",
        "type": "JSType"
       }
      ],
      "name": "withReturnType",
      "type": "FunctionBuilder"
     },
     {
      "params": [
       {
        "name": "returnType",
        "type": "JSType"
       },
       {
        "name": "inferred",
        "type": "boolean"
       }
      ],
      "name": "withReturnType",
      "type": "FunctionBuilder"
     },
     {
      "params": [
       {
        "name": "returnType",
        "type": "JSType"
       }
      ],
      "name": "withInferredReturnType",
      "type": "FunctionBuilder"
     },
     {
      "params": [
       {
        "name": "typeOfThis",
        "type": "ObjectType"
       }
      ],
      "name": "withTypeOfThis",
      "type": "FunctionBuilder"
     },
     {
      "params": [
       {
        "name": "templateTypeName",
        "type": "String"
       }
      ],
      "name": "withTemplateName",
      "type": "FunctionBuilder"
     },
     {
      "params": [],
      "name": "forConstructor",
      "type": "FunctionBuilder"
     },
     {
      "params": [
       {
        "name": "isConstructor",
        "type": "boolean"
       }
      ],
      "name": "setIsConstructor",
      "type": "FunctionBuilder"
     },
     {
      "params": [],
      "name": "forNativeType",
      "type": "FunctionBuilder"
     },
     {
      "params": [
       {
        "name": "otherType",
        "type": "FunctionType"
       }
      ],
      "name": "copyFromOtherFunction",
      "type": "FunctionBuilder"
     },
     {
      "params": [],
      "name": "build",
      "type": "FunctionType"
     }
    ],
    "fields": [
     {
      "name": "registry",
      "type": "JSTypeRegistry"
     },
     {
      "name": "name",
      "type": "String"
     },
     {
      "name": "sourceNode",
      "type": "Node"
     },
     {
      "name": "parametersNode",
      "type": "Node"
     },
     {
      "name": "returnType",
      "type": "JSType"
     },
     {
      "name": "typeOfThis",
      "type": "ObjectType"
     },
     {
      "name": "templateTypeName",
      "type": "String"
     },
     {
      "name": "inferredReturnType",
      "type": "boolean"
     },
     {
      "name": "isConstructor",
      "type": "boolean"
     },
     {
      "name": "isNativeType",
      "type": "boolean"
     }
    ],
    "name": "FunctionBuilder"
   }
  ]
 },
 {
  "filename": "NoObjectType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isSubtype",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toMaybeFunctionType",
      "type": "FunctionType"
     },
     {
      "params": [],
      "name": "isNoObjectType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getImplicitPrototype",
      "type": "ObjectType"
     },
     {
      "params": [],
      "name": "getReferenceName",
      "type": "String"
     },
     {
      "params": [],
      "name": "matchesNumberContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesObjectContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesStringContext",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isEquivalentTo",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [],
      "name": "getPropertiesCount",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "getPropertyType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "hasProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "inferred",
        "type": "boolean"
       },
       {
        "name": "propertyNode",
        "type": "Node"
       }
      ],
      "name": "defineProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "removeProperty",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "getOwnPropertyJSDocInfo",
      "type": "JSDocInfo"
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       },
       {
        "name": "info",
        "type": "JSDocInfo"
       }
      ],
      "name": "setPropertyJSDocInfo",
      "type": null
     },
     {
      "params": [
       {
        "name": "propertyName",
        "type": "String"
       }
      ],
      "name": "isPropertyTypeInferred",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "visitor",
        "type": "Visitor"
       }
      ],
      "name": "visit",
      "type": "T"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "getConstructor",
      "type": "FunctionType"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "ErrorReporter"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "resolveInternal",
      "type": "JSType"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "NoObjectType"
   }
  ]
 },
 {
  "filename": "ParameterizedType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getParameterType",
      "type": "JSType"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "parameterType",
      "type": "JSType"
     }
    ],
    "name": "ParameterizedType"
   }
  ]
 },
 {
  "filename": "JSTypeNative.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [],
    "fields": [],
    "name": "JSTypeNative"
   }
  ]
 },
 {
  "filename": "NoType.java",
  "package_name": "com.google.javascript.rhino.jstype",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "isNoObjectType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNoType",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNullable",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "that",
        "type": "JSType"
       }
      ],
      "name": "isSubtype",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getPossibleToBooleanOutcomes",
      "type": "BooleanLiteralSet"
     },
     {
      "params": [],
      "name": "matchesNumberContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesObjectContext",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "matchesStringContext",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "visitor",
        "type": "Visitor"
       }
      ],
      "name": "visit",
      "type": "T"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "NoType"
   }
  ]
 },
 {
  "filename": "MapBasedScope.java",
  "package_name": "com.google.javascript.rhino.testing",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "emptyScope",
      "type": "MapBasedScope"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getSlot",
      "type": "StaticSlot"
     }
    ],
    "fields": [
     {
      "name": "slots",
      "type": "Map"
     }
    ],
    "name": "MapBasedScope"
   }
  ]
 },
 {
  "filename": "TestErrorReporter.java",
  "package_name": "com.google.javascript.rhino.testing",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "forNoExpectedReports",
      "type": "TestErrorReporter"
     },
     {
      "params": [
       {
        "name": "errors",
        "type": "String"
       }
      ],
      "name": "setErrors",
      "type": null
     },
     {
      "params": [
       {
        "name": "warnings",
        "type": "String"
       }
      ],
      "name": "setWarnings",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "error",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "warning",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "lineSource",
        "type": "String"
       },
       {
        "name": "lineOffset",
        "type": "int"
       }
      ],
      "name": "runtimeError",
      "type": "EvaluatorException"
     },
     {
      "params": [],
      "name": "hasEncounteredAllWarnings",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hasEncounteredAllErrors",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "errors",
      "type": "String"
     },
     {
      "name": "warnings",
      "type": "String"
     },
     {
      "name": "errorsIndex",
      "type": "int"
     },
     {
      "name": "warningsIndex",
      "type": "int"
     }
    ],
    "name": "TestErrorReporter"
   }
  ]
 },
 {
  "filename": "AbstractStaticScope.java",
  "package_name": "com.google.javascript.rhino.testing",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getRootNode",
      "type": "Node"
     },
     {
      "params": [],
      "name": "getParentScope",
      "type": "StaticScope"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getSlot",
      "type": "StaticSlot"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getOwnSlot",
      "type": "StaticSlot"
     },
     {
      "params": [],
      "name": "getTypeOfThis",
      "type": "T"
     }
    ],
    "fields": [],
    "name": "AbstractStaticScope"
   }
  ]
 },
 {
  "filename": "Asserts.java",
  "package_name": "com.google.javascript.rhino.testing",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "assertResolvesToSame",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "assertValidResolve",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       },
       {
        "name": "scope",
        "type": "StaticScope"
       }
      ],
      "name": "assertValidResolve",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "a",
        "type": "JSType"
       },
       {
        "name": "b",
        "type": "JSType"
       }
      ],
      "name": "assertTypeNotEquals",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "a",
        "type": "JSType"
       },
       {
        "name": "b",
        "type": "JSType"
       }
      ],
      "name": "assertTypeNotEquals",
      "type": null
     },
     {
      "params": [
       {
        "name": "a",
        "type": "JSType"
       },
       {
        "name": "b",
        "type": "JSType"
       }
      ],
      "name": "assertTypeEquals",
      "type": null
     },
     {
      "params": [
       {
        "name": "message",
        "type": "String"
       },
       {
        "name": "a",
        "type": "JSType"
       },
       {
        "name": "b",
        "type": "JSType"
       }
      ],
      "name": "assertTypeEquals",
      "type": null
     }
    ],
    "fields": [],
    "name": "Asserts"
   }
  ]
 },
 {
  "filename": "BaseJSTypeTestCase.java",
  "package_name": "com.google.javascript.rhino.testing",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "setUp",
      "type": null
     },
     {
      "params": [],
      "name": "initTypes",
      "type": null
     },
     {
      "params": [
       {
        "name": "registry",
        "type": "JSTypeRegistry"
       }
      ],
      "name": "addNativeProperties",
      "type": null
     },
     {
      "params": [
       {
        "name": "registry",
        "type": "JSTypeRegistry"
       },
       {
        "name": "receivingType",
        "type": "ObjectType"
       },
       {
        "name": "methodName",
        "type": "String"
       },
       {
        "name": "returnType",
        "type": "JSType"
       }
      ],
      "name": "addMethod",
      "type": null
     },
     {
      "params": [
       {
        "name": "variants",
        "type": "JSType"
       }
      ],
      "name": "createUnionType",
      "type": "JSType"
     },
     {
      "params": [],
      "name": "createRecordTypeBuilder",
      "type": "RecordTypeBuilder"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "createNullableType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "JSType"
       }
      ],
      "name": "createOptionalType",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "expected",
        "type": "JSType"
       },
       {
        "name": "actual",
        "type": "Node"
       }
      ],
      "name": "assertTypeEquals",
      "type": null
     },
     {
      "params": [
       {
        "name": "expected",
        "type": "JSType"
       },
       {
        "name": "actual",
        "type": "JSTypeExpression"
       }
      ],
      "name": "assertTypeEquals",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "JSTypeExpression"
       },
       {
        "name": "warnings",
        "type": "String"
       }
      ],
      "name": "resolve",
      "type": "JSType"
     },
     {
      "params": [
       {
        "name": "a",
        "type": "JSType"
       },
       {
        "name": "b",
        "type": "JSType"
       }
      ],
      "name": "assertTypeEquals",
      "type": null
     },
     {
      "params": [
       {
        "name": "msg",
        "type": "String"
       },
       {
        "name": "a",
        "type": "JSType"
       },
       {
        "name": "b",
        "type": "JSType"
       }
      ],
      "name": "assertTypeEquals",
      "type": null
     },
     {
      "params": [
       {
        "name": "a",
        "type": "JSType"
       },
       {
        "name": "b",
        "type": "JSType"
       }
      ],
      "name": "assertTypeNotEquals",
      "type": null
     },
     {
      "params": [
       {
        "name": "msg",
        "type": "String"
       },
       {
        "name": "a",
        "type": "JSType"
       },
       {
        "name": "b",
        "type": "JSType"
       }
      ],
      "name": "assertTypeNotEquals",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "registry",
      "type": "JSTypeRegistry"
     },
     {
      "name": "errorReporter",
      "type": "TestErrorReporter"
     },
     {
      "name": "ALL_TYPE",
      "type": "JSType"
     },
     {
      "name": "NO_OBJECT_TYPE",
      "type": "ObjectType"
     },
     {
      "name": "NO_TYPE",
      "type": "ObjectType"
     },
     {
      "name": "NO_RESOLVED_TYPE",
      "type": "ObjectType"
     },
     {
      "name": "ARRAY_FUNCTION_TYPE",
      "type": "JSType"
     },
     {
      "name": "ARRAY_TYPE",
      "type": "ObjectType"
     },
     {
      "name": "BOOLEAN_OBJECT_FUNCTION_TYPE",
      "type": "JSType"
     },
     {
      "name": "BOOLEAN_OBJECT_TYPE",
      "type": "ObjectType"
     },
     {
      "name": "BOOLEAN_TYPE",
      "type": "JSType"
     },
     {
      "name": "CHECKED_UNKNOWN_TYPE",
      "type": "JSType"
     },
     {
      "name": "DATE_FUNCTION_TYPE",
      "type": "JSType"
     },
     {
      "name": "DATE_TYPE",
      "type": "ObjectType"
     },
     {
      "name": "ERROR_FUNCTION_TYPE",
      "type": "JSType"
     },
     {
      "name": "ERROR_TYPE",
      "type": "ObjectType"
     },
     {
      "name": "EVAL_ERROR_FUNCTION_TYPE",
      "type": "JSType"
     },
     {
      "name": "EVAL_ERROR_TYPE",
      "type": "ObjectType"
     },
     {
      "name": "FUNCTION_FUNCTION_TYPE",
      "type": "FunctionType"
     },
     {
      "name": "FUNCTION_INSTANCE_TYPE",
      "type": "FunctionType"
     },
     {
      "name": "FUNCTION_PROTOTYPE",
      "type": "ObjectType"
     },
     {
      "name": "GREATEST_FUNCTION_TYPE",
      "type": "JSType"
     },
     {
      "name": "LEAST_FUNCTION_TYPE",
      "type": "JSType"
     },
     {
      "name": "MATH_TYPE",
      "type": "JSType"
     },
     {
      "name": "NULL_TYPE",
      "type": "JSType"
     },
     {
      "name": "NUMBER_OBJECT_FUNCTION_TYPE",
      "type": "JSType"
     },
     {
      "name": "NUMBER_OBJECT_TYPE",
      "type": "ObjectType"
     },
     {
      "name": "NUMBER_STRING_BOOLEAN",
      "type": "JSType"
     },
     {
      "name": "NUMBER_TYPE",
      "type": "JSType"
     },
     {
      "name": "OBJECT_FUNCTION_TYPE",
      "type": "FunctionType"
     },
     {
      "name": "OBJECT_NUMBER_STRING",
      "type": "JSType"
     },
     {
      "name": "OBJECT_NUMBER_STRING_BOOLEAN",
      "type": "JSType"
     },
     {
      "name": "OBJECT_PROTOTYPE",
      "type": "JSType"
     },
     {
      "name": "OBJECT_TYPE",
      "type": "ObjectType"
     },
     {
      "name": "RANGE_ERROR_FUNCTION_TYPE",
      "type": "JSType"
     },
     {
      "name": "RANGE_ERROR_TYPE",
      "type": "ObjectType"
     },
     {
      "name": "REFERENCE_ERROR_FUNCTION_TYPE",
      "type": "JSType"
     },
     {
      "name": "REFERENCE_ERROR_TYPE",
      "type": "ObjectType"
     },
     {
      "name": "REGEXP_FUNCTION_TYPE",
      "type": "JSType"
     },
     {
      "name": "REGEXP_TYPE",
      "type": "ObjectType"
     },
     {
      "name": "STRING_OBJECT_FUNCTION_TYPE",
      "type": "JSType"
     },
     {
      "name": "STRING_OBJECT_TYPE",
      "type": "ObjectType"
     },
     {
      "name": "STRING_TYPE",
      "type": "JSType"
     },
     {
      "name": "SYNTAX_ERROR_FUNCTION_TYPE",
      "type": "JSType"
     },
     {
      "name": "SYNTAX_ERROR_TYPE",
      "type": "ObjectType"
     },
     {
      "name": "TYPE_ERROR_FUNCTION_TYPE",
      "type": "JSType"
     },
     {
      "name": "TYPE_ERROR_TYPE",
      "type": "ObjectType"
     },
     {
      "name": "U2U_CONSTRUCTOR_TYPE",
      "type": "FunctionType"
     },
     {
      "name": "U2U_FUNCTION_TYPE",
      "type": "FunctionType"
     },
     {
      "name": "UNKNOWN_TYPE",
      "type": "ObjectType"
     },
     {
      "name": "URI_ERROR_FUNCTION_TYPE",
      "type": "JSType"
     },
     {
      "name": "URI_ERROR_TYPE",
      "type": "ObjectType"
     },
     {
      "name": "VOID_TYPE",
      "type": "JSType"
     },
     {
      "name": "NATIVE_PROPERTIES_COUNT",
      "type": "int"
     },
     {
      "name": "ALL_NATIVE_EXTERN_TYPES",
      "type": "String"
     }
    ],
    "name": "BaseJSTypeTestCase"
   }
  ]
 },
 {
  "filename": "Base64VLQ.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "value",
        "type": "int"
       }
      ],
      "name": "toVLQSigned",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "int"
       }
      ],
      "name": "fromVLQSigned",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "value",
        "type": "int"
       }
      ],
      "name": "encode",
      "type": null
     },
     {
      "params": [
       {
        "name": "in",
        "type": "CharIterator"
       }
      ],
      "name": "decode",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "VLQ_BASE_SHIFT",
      "type": "int"
     },
     {
      "name": "VLQ_BASE",
      "type": "int"
     },
     {
      "name": "VLQ_BASE_MASK",
      "type": "int"
     },
     {
      "name": "VLQ_CONTINUATION_BIT",
      "type": "int"
     }
    ],
    "name": "Base64VLQ"
   }
  ]
 },
 {
  "filename": "SourceMapConsumerV1.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "contents",
        "type": "String"
       }
      ],
      "name": "parse",
      "type": null
     },
     {
      "params": [
       {
        "name": "parser",
        "type": "ParseState"
       },
       {
        "name": "lineCount",
        "type": "int"
       },
       {
        "name": "characterMapBuilder",
        "type": "ImmutableList"
       }
      ],
      "name": "parseCharacterMap",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "interner",
        "type": "Interner"
       },
       {
        "name": "input",
        "type": "String"
       }
      ],
      "name": "splitFileName",
      "type": "FileName"
     },
     {
      "params": [
       {
        "name": "parser",
        "type": "ParseState"
       },
       {
        "name": "maxID",
        "type": "int"
       }
      ],
      "name": "parseFileMappings",
      "type": null
     },
     {
      "params": [
       {
        "name": "parser",
        "type": "ParseState"
       }
      ],
      "name": "parseInternal",
      "type": null
     },
     {
      "params": [
       {
        "name": "lineNumber",
        "type": "int"
       },
       {
        "name": "columnIndex",
        "type": "int"
       }
      ],
      "name": "getMappingForLine",
      "type": "OriginalMapping"
     },
     {
      "params": [
       {
        "name": "mapId",
        "type": "int"
       }
      ],
      "name": "binarySearch",
      "type": "SourceFile"
     },
     {
      "params": [
       {
        "name": "mapID",
        "type": "int"
       }
      ],
      "name": "getMappingFromId",
      "type": "OriginalMapping"
     }
    ],
    "fields": [
     {
      "name": "LINEMAP_HEADER",
      "type": "String"
     },
     {
      "name": "FILEINFO_HEADER",
      "type": "String"
     },
     {
      "name": "DEFINITION_HEADER",
      "type": "String"
     },
     {
      "name": "characterMap",
      "type": "ImmutableList"
     },
     {
      "name": "mappings",
      "type": "ImmutableList"
     }
    ],
    "name": "SourceMapConsumerV1"
   }
  ]
 },
 {
  "filename": "Base64.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "value",
        "type": "int"
       }
      ],
      "name": "toBase64",
      "type": "char"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "char"
       }
      ],
      "name": "fromBase64",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "BASE64_MAP",
      "type": "String"
     },
     {
      "name": "BASE64_DECODE_MAP",
      "type": "int"
     }
    ],
    "name": "Base64"
   }
  ]
 },
 {
  "filename": "FilePosition.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getLine",
      "type": "int"
     },
     {
      "params": [],
      "name": "getColumn",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "line",
      "type": "int"
     },
     {
      "name": "column",
      "type": "int"
     }
    ],
    "name": "FilePosition"
   }
  ]
 },
 {
  "filename": "SourceMapFormat.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [],
    "fields": [],
    "name": "SourceMapFormat"
   }
  ]
 },
 {
  "filename": "SourceMapConsumerFactory.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "contents",
        "type": "String"
       }
      ],
      "name": "parse",
      "type": "SourceMapping"
     },
     {
      "params": [
       {
        "name": "contents",
        "type": "String"
       },
       {
        "name": "supplier",
        "type": "SourceMapSupplier"
       }
      ],
      "name": "parse",
      "type": "SourceMapping"
     }
    ],
    "fields": [],
    "name": "SourceMapConsumerFactory"
   }
  ]
 },
 {
  "filename": "SourceMapConsumerV2.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "contents",
        "type": "String"
       }
      ],
      "name": "parse",
      "type": null
     },
     {
      "params": [
       {
        "name": "sourceMapRoot",
        "type": "JSONObject"
       }
      ],
      "name": "parse",
      "type": null
     },
     {
      "params": [
       {
        "name": "sourceMapRoot",
        "type": "JSONObject"
       }
      ],
      "name": "parseInternal",
      "type": null
     },
     {
      "params": [
       {
        "name": "lineNumber",
        "type": "int"
       },
       {
        "name": "columnIndex",
        "type": "int"
       }
      ],
      "name": "getMappingForLine",
      "type": "OriginalMapping"
     }
    ],
    "fields": [
     {
      "name": "characterMap",
      "type": "Map"
     },
     {
      "name": "lineMaps",
      "type": "JSONArray"
     },
     {
      "name": "mappings",
      "type": "List"
     }
    ],
    "name": "SourceMapConsumerV2"
   }
  ]
 },
 {
  "filename": "SourceMapParseException.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [],
    "fields": [],
    "name": "SourceMapParseException"
   }
  ]
 },
 {
  "filename": "SourceMapGeneratorV3.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "reset",
      "type": null
     },
     {
      "params": [
       {
        "name": "validate",
        "type": "boolean"
       }
      ],
      "name": "validate",
      "type": null
     },
     {
      "params": [
       {
        "name": "prefix",
        "type": "String"
       }
      ],
      "name": "setWrapperPrefix",
      "type": null
     },
     {
      "params": [
       {
        "name": "offsetLine",
        "type": "int"
       },
       {
        "name": "offsetIndex",
        "type": "int"
       }
      ],
      "name": "setStartingPosition",
      "type": null
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "symbolName",
        "type": "String"
       },
       {
        "name": "sourceStartPosition",
        "type": "FilePosition"
       },
       {
        "name": "startPosition",
        "type": "FilePosition"
       },
       {
        "name": "endPosition",
        "type": "FilePosition"
       }
      ],
      "name": "addMapping",
      "type": null
     },
     {
      "params": [
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "column",
        "type": "int"
       },
       {
        "name": "mapSectionContents",
        "type": "String"
       }
      ],
      "name": "mergeMapSection",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "appendTo",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       }
      ],
      "name": "addSourceNameMap",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       }
      ],
      "name": "addSymbolNameMap",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "map",
        "type": "Map"
       }
      ],
      "name": "addNameMap",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "String"
       }
      ],
      "name": "escapeString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "value",
        "type": "CharSequence"
       }
      ],
      "name": "appendFirstField",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "value",
        "type": "CharSequence"
       }
      ],
      "name": "appendField",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "appendFieldStart",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       }
      ],
      "name": "appendFieldEnd",
      "type": null
     },
     {
      "params": [],
      "name": "prepMappings",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "sections",
        "type": "List"
       }
      ],
      "name": "appendIndexMapTo",
      "type": null
     },
     {
      "params": [
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "column",
        "type": "int"
       }
      ],
      "name": "offsetValue",
      "type": "CharSequence"
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       }
      ],
      "name": "getSourceId",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "symbolName",
        "type": "String"
       }
      ],
      "name": "getNameId",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "UNMAPPED",
      "type": "int"
     },
     {
      "name": "mappings",
      "type": "List"
     },
     {
      "name": "sourceFileMap",
      "type": "LinkedHashMap"
     },
     {
      "name": "originalNameMap",
      "type": "LinkedHashMap"
     },
     {
      "name": "lastSourceFile",
      "type": "String"
     },
     {
      "name": "lastSourceFileIndex",
      "type": "int"
     },
     {
      "name": "lastMapping",
      "type": "Mapping"
     },
     {
      "name": "offsetPosition",
      "type": "FilePosition"
     },
     {
      "name": "prefixPosition",
      "type": "FilePosition"
     }
    ],
    "name": "SourceMapGeneratorV3"
   }
  ]
 },
 {
  "filename": "SourceMapSection.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "value",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "column",
        "type": "int"
       }
      ],
      "name": "forMap",
      "type": "SourceMapSection"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "column",
        "type": "int"
       }
      ],
      "name": "forURL",
      "type": "SourceMapSection"
     },
     {
      "params": [],
      "name": "getSectionType",
      "type": "SectionType"
     },
     {
      "params": [],
      "name": "getSectionUrl",
      "type": "String"
     },
     {
      "params": [],
      "name": "getSectionValue",
      "type": "String"
     },
     {
      "params": [],
      "name": "getLine",
      "type": "int"
     },
     {
      "params": [],
      "name": "getColumn",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "value",
      "type": "String"
     },
     {
      "name": "line",
      "type": "int"
     },
     {
      "name": "column",
      "type": "int"
     },
     {
      "name": "type",
      "type": "SectionType"
     }
    ],
    "name": "SourceMapSection"
   }
  ]
 },
 {
  "filename": "Util.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       }
      ],
      "name": "escapeString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "s",
        "type": "String"
       },
       {
        "name": "quote",
        "type": "char"
       },
       {
        "name": "doublequoteEscape",
        "type": "String"
       },
       {
        "name": "singlequoteEscape",
        "type": "String"
       },
       {
        "name": "backslashEscape",
        "type": "String"
       },
       {
        "name": "outputCharsetEncoder",
        "type": "CharsetEncoder"
       }
      ],
      "name": "escapeString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "sb",
        "type": "StringBuilder"
       },
       {
        "name": "c",
        "type": "char"
       }
      ],
      "name": "appendCharAsHex",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "codePoint",
        "type": "int"
       }
      ],
      "name": "appendHexJavaScriptRepresentation",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "HEX_CHARS",
      "type": "char"
     }
    ],
    "name": "Util"
   }
  ]
 },
 {
  "filename": "SourceMapGenerator.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "appendTo",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "sections",
        "type": "List"
       }
      ],
      "name": "appendIndexMapTo",
      "type": null
     },
     {
      "params": [],
      "name": "reset",
      "type": null
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "symbolName",
        "type": "String"
       },
       {
        "name": "sourceStartPosition",
        "type": "FilePosition"
       },
       {
        "name": "outputStartPosition",
        "type": "FilePosition"
       },
       {
        "name": "outputEndPosition",
        "type": "FilePosition"
       }
      ],
      "name": "addMapping",
      "type": null
     },
     {
      "params": [
       {
        "name": "prefix",
        "type": "String"
       }
      ],
      "name": "setWrapperPrefix",
      "type": null
     },
     {
      "params": [
       {
        "name": "offsetLine",
        "type": "int"
       },
       {
        "name": "offsetIndex",
        "type": "int"
       }
      ],
      "name": "setStartingPosition",
      "type": null
     },
     {
      "params": [
       {
        "name": "validate",
        "type": "boolean"
       }
      ],
      "name": "validate",
      "type": null
     }
    ],
    "fields": [],
    "name": "SourceMapGenerator"
   }
  ]
 },
 {
  "filename": "SourceMapLineDecoder.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "lineSource",
        "type": "String"
       }
      ],
      "name": "decodeLine",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "in",
        "type": "String"
       },
       {
        "name": "lastId",
        "type": "int"
       }
      ],
      "name": "decodeLineEntry",
      "type": "LineEntry"
     },
     {
      "params": [
       {
        "name": "reader",
        "type": "StringParser"
       },
       {
        "name": "lastId",
        "type": "int"
       }
      ],
      "name": "decodeLineEntry",
      "type": "LineEntry"
     },
     {
      "params": [
       {
        "name": "reader",
        "type": "StringParser"
       }
      ],
      "name": "decodeLine",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "digit",
        "type": "char"
       },
       {
        "name": "previousValue",
        "type": "int"
       }
      ],
      "name": "addBase64Digit",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "rawId",
        "type": "int"
       },
       {
        "name": "digits",
        "type": "int"
       },
       {
        "name": "lastId",
        "type": "int"
       }
      ],
      "name": "getIdFromRelativeId",
      "type": "int"
     }
    ],
    "fields": [],
    "name": "SourceMapLineDecoder"
   }
  ]
 },
 {
  "filename": "SourceMapGeneratorV1.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "value",
        "type": "String"
       }
      ],
      "name": "escapeString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "symbolName",
        "type": "String"
       },
       {
        "name": "sourceStartPosition",
        "type": "FilePosition"
       },
       {
        "name": "startPosition",
        "type": "FilePosition"
       },
       {
        "name": "endPosition",
        "type": "FilePosition"
       }
      ],
      "name": "addMapping",
      "type": null
     },
     {
      "params": [
       {
        "name": "prefix",
        "type": "String"
       }
      ],
      "name": "setWrapperPrefix",
      "type": null
     },
     {
      "params": [
       {
        "name": "offsetLine",
        "type": "int"
       },
       {
        "name": "offsetIndex",
        "type": "int"
       }
      ],
      "name": "setStartingPosition",
      "type": null
     },
     {
      "params": [],
      "name": "reset",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "appendTo",
      "type": null
     },
     {
      "params": [],
      "name": "prepMappings",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "validate",
        "type": "boolean"
       }
      ],
      "name": "validate",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "appSections",
        "type": "List"
       }
      ],
      "name": "appendIndexMapTo",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "UNMAPPED",
      "type": "int"
     },
     {
      "name": "mappings",
      "type": "List"
     },
     {
      "name": "lastMapping",
      "type": "Mapping"
     },
     {
      "name": "offsetPosition",
      "type": "FilePosition"
     },
     {
      "name": "prefixPosition",
      "type": "FilePosition"
     }
    ],
    "name": "SourceMapGeneratorV1"
   }
  ]
 },
 {
  "filename": "SourceMapConsumerV3.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "contents",
        "type": "String"
       }
      ],
      "name": "parse",
      "type": null
     },
     {
      "params": [
       {
        "name": "contents",
        "type": "String"
       },
       {
        "name": "sectionSupplier",
        "type": "SourceMapSupplier"
       }
      ],
      "name": "parse",
      "type": null
     },
     {
      "params": [
       {
        "name": "sourceMapRoot",
        "type": "JSONObject"
       }
      ],
      "name": "parse",
      "type": null
     },
     {
      "params": [
       {
        "name": "sourceMapRoot",
        "type": "JSONObject"
       },
       {
        "name": "sectionSupplier",
        "type": "SourceMapSupplier"
       }
      ],
      "name": "parse",
      "type": null
     },
     {
      "params": [
       {
        "name": "sourceMapRoot",
        "type": "JSONObject"
       },
       {
        "name": "sectionSupplier",
        "type": "SourceMapSupplier"
       }
      ],
      "name": "parseMetaMap",
      "type": null
     },
     {
      "params": [
       {
        "name": "lineNumber",
        "type": "int"
       },
       {
        "name": "column",
        "type": "int"
       }
      ],
      "name": "getMappingForLine",
      "type": "OriginalMapping"
     },
     {
      "params": [],
      "name": "getOriginalSources",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "originalFile",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "column",
        "type": "int"
       }
      ],
      "name": "getReverseMapping",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "array",
        "type": "JSONArray"
       }
      ],
      "name": "getJavaStringArray",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "entries",
        "type": "ArrayList"
       },
       {
        "name": "target",
        "type": "int"
       },
       {
        "name": "start",
        "type": "int"
       },
       {
        "name": "end",
        "type": "int"
       }
      ],
      "name": "search",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "entries",
        "type": "ArrayList"
       },
       {
        "name": "entry",
        "type": "int"
       },
       {
        "name": "target",
        "type": "int"
       }
      ],
      "name": "compareEntry",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "lineNumber",
        "type": "int"
       }
      ],
      "name": "getPreviousMapping",
      "type": "OriginalMapping"
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "Entry"
       }
      ],
      "name": "getOriginalMappingForEntry",
      "type": "OriginalMapping"
     },
     {
      "params": [],
      "name": "createReverseMapping",
      "type": null
     },
     {
      "params": [
       {
        "name": "visitor",
        "type": "EntryVisitor"
       }
      ],
      "name": "visitMappings",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "UNMAPPED",
      "type": "int"
     },
     {
      "name": "sources",
      "type": "String"
     },
     {
      "name": "names",
      "type": "String"
     },
     {
      "name": "lineCount",
      "type": "int"
     },
     {
      "name": "lines",
      "type": "ArrayList"
     },
     {
      "name": "reverseSourceMapping",
      "type": "Map"
     }
    ],
    "name": "SourceMapConsumerV3"
   }
  ]
 },
 {
  "filename": "SourceMappingReversable.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getOriginalSources",
      "type": "Collection"
     },
     {
      "params": [
       {
        "name": "originalFile",
        "type": "String"
       },
       {
        "name": "line",
        "type": "int"
       },
       {
        "name": "column",
        "type": "int"
       }
      ],
      "name": "getReverseMapping",
      "type": "Collection"
     }
    ],
    "fields": [],
    "name": "SourceMappingReversable"
   }
  ]
 },
 {
  "filename": "SourceMapGeneratorV2.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "reset",
      "type": null
     },
     {
      "params": [
       {
        "name": "validate",
        "type": "boolean"
       }
      ],
      "name": "validate",
      "type": null
     },
     {
      "params": [
       {
        "name": "prefix",
        "type": "String"
       }
      ],
      "name": "setWrapperPrefix",
      "type": null
     },
     {
      "params": [
       {
        "name": "offsetLine",
        "type": "int"
       },
       {
        "name": "offsetIndex",
        "type": "int"
       }
      ],
      "name": "setStartingPosition",
      "type": null
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       },
       {
        "name": "symbolName",
        "type": "String"
       },
       {
        "name": "sourceStartPosition",
        "type": "FilePosition"
       },
       {
        "name": "startPosition",
        "type": "FilePosition"
       },
       {
        "name": "endPosition",
        "type": "FilePosition"
       }
      ],
      "name": "addMapping",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "appendTo",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       }
      ],
      "name": "addSourceNameMap",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       }
      ],
      "name": "addOriginalNameMap",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "map",
        "type": "Map"
       }
      ],
      "name": "addMap",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "String"
       }
      ],
      "name": "escapeString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "value",
        "type": "CharSequence"
       }
      ],
      "name": "appendFirstField",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "value",
        "type": "CharSequence"
       }
      ],
      "name": "appendField",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "appendFieldStart",
      "type": null
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       }
      ],
      "name": "appendFieldEnd",
      "type": null
     },
     {
      "params": [],
      "name": "prepMappings",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "sourceName",
        "type": "String"
       }
      ],
      "name": "getSourceId",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "symbolName",
        "type": "String"
       }
      ],
      "name": "getNameId",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "out",
        "type": "Appendable"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "appSections",
        "type": "List"
       }
      ],
      "name": "appendIndexMapTo",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "validate",
      "type": "boolean"
     },
     {
      "name": "UNMAPPED",
      "type": "int"
     },
     {
      "name": "mappings",
      "type": "List"
     },
     {
      "name": "sourceFileMap",
      "type": "LinkedHashMap"
     },
     {
      "name": "originalNameMap",
      "type": "LinkedHashMap"
     },
     {
      "name": "lastSourceFile",
      "type": "String"
     },
     {
      "name": "lastSourceFileIndex",
      "type": "int"
     },
     {
      "name": "lastMapping",
      "type": "Mapping"
     },
     {
      "name": "offsetPosition",
      "type": "FilePosition"
     },
     {
      "name": "prefixPosition",
      "type": "FilePosition"
     }
    ],
    "name": "SourceMapGeneratorV2"
   }
  ]
 },
 {
  "filename": "SourceMapping.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "lineNumber",
        "type": "int"
       },
       {
        "name": "columnIndex",
        "type": "int"
       }
      ],
      "name": "getMappingForLine",
      "type": "OriginalMapping"
     }
    ],
    "fields": [],
    "name": "SourceMapping"
   }
  ]
 },
 {
  "filename": "SourceMapGeneratorFactory.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getInstance",
      "type": "SourceMapGenerator"
     },
     {
      "params": [
       {
        "name": "format",
        "type": "SourceMapFormat"
       }
      ],
      "name": "getInstance",
      "type": "SourceMapGenerator"
     }
    ],
    "fields": [],
    "name": "SourceMapGeneratorFactory"
   }
  ]
 },
 {
  "filename": "SourceMapConsumer.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "contents",
        "type": "String"
       }
      ],
      "name": "parse",
      "type": null
     }
    ],
    "fields": [],
    "name": "SourceMapConsumer"
   }
  ]
 },
 {
  "filename": "SourceMapSupplier.java",
  "package_name": "com.google.debugging.sourcemap",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "url",
        "type": "String"
       }
      ],
      "name": "getSourceMap",
      "type": "String"
     }
    ],
    "fields": [],
    "name": "SourceMapSupplier"
   }
  ]
 }
]