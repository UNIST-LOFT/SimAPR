[
 {
  "filename": "PasswordRequiredException.java",
  "package_name": "org.apache.commons.compress",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "PasswordRequiredException"
   }
  ]
 },
 {
  "filename": "ArchiveException.java",
  "package_name": "org.apache.commons.compress.archivers",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "ArchiveException"
   }
  ]
 },
 {
  "filename": "ArchiveInputStream.java",
  "package_name": "org.apache.commons.compress.archivers",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getNextEntry",
      "type": "ArchiveEntry"
     },
     {
      "params": [],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "read",
        "type": "int"
       }
      ],
      "name": "count",
      "type": null
     },
     {
      "params": [
       {
        "name": "read",
        "type": "long"
       }
      ],
      "name": "count",
      "type": null
     },
     {
      "params": [
       {
        "name": "pushedBack",
        "type": "long"
       }
      ],
      "name": "pushedBackBytes",
      "type": null
     },
     {
      "params": [],
      "name": "getCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "getBytesRead",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "archiveEntry",
        "type": "ArchiveEntry"
       }
      ],
      "name": "canReadEntryData",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "SINGLE",
      "type": "byte"
     },
     {
      "name": "BYTE_MASK",
      "type": "int"
     },
     {
      "name": "bytesRead",
      "type": "long"
     }
    ],
    "name": "ArchiveInputStream"
   }
  ]
 },
 {
  "filename": "ArchiveStreamFactory.java",
  "package_name": "org.apache.commons.compress.archivers",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getEntryEncoding",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "entryEncoding",
        "type": "String"
       }
      ],
      "name": "setEntryEncoding",
      "type": null
     },
     {
      "params": [
       {
        "name": "archiverName",
        "type": "String"
       },
       {
        "name": "in",
        "type": "InputStream"
       }
      ],
      "name": "createArchiveInputStream",
      "type": "ArchiveInputStream"
     },
     {
      "params": [
       {
        "name": "archiverName",
        "type": "String"
       },
       {
        "name": "out",
        "type": "OutputStream"
       }
      ],
      "name": "createArchiveOutputStream",
      "type": "ArchiveOutputStream"
     },
     {
      "params": [
       {
        "name": "in",
        "type": "InputStream"
       }
      ],
      "name": "createArchiveInputStream",
      "type": "ArchiveInputStream"
     }
    ],
    "fields": [
     {
      "name": "AR",
      "type": "String"
     },
     {
      "name": "ARJ",
      "type": "String"
     },
     {
      "name": "CPIO",
      "type": "String"
     },
     {
      "name": "DUMP",
      "type": "String"
     },
     {
      "name": "JAR",
      "type": "String"
     },
     {
      "name": "TAR",
      "type": "String"
     },
     {
      "name": "ZIP",
      "type": "String"
     },
     {
      "name": "SEVEN_Z",
      "type": "String"
     },
     {
      "name": "encoding",
      "type": "String"
     },
     {
      "name": "entryEncoding",
      "type": "String"
     }
    ],
    "name": "ArchiveStreamFactory"
   }
  ]
 },
 {
  "filename": "Lister.java",
  "package_name": "org.apache.commons.compress.archivers",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "args",
        "type": "String"
       }
      ],
      "name": "main",
      "type": null
     },
     {
      "params": [],
      "name": "usage",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "factory",
      "type": "ArchiveStreamFactory"
     }
    ],
    "name": "Lister"
   }
  ]
 },
 {
  "filename": "StreamingNotSupportedException.java",
  "package_name": "org.apache.commons.compress.archivers",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getFormat",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "format",
      "type": "String"
     }
    ],
    "name": "StreamingNotSupportedException"
   }
  ]
 },
 {
  "filename": "ArchiveOutputStream.java",
  "package_name": "org.apache.commons.compress.archivers",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "entry",
        "type": "ArchiveEntry"
       }
      ],
      "name": "putArchiveEntry",
      "type": null
     },
     {
      "params": [],
      "name": "closeArchiveEntry",
      "type": null
     },
     {
      "params": [],
      "name": "finish",
      "type": null
     },
     {
      "params": [
       {
        "name": "inputFile",
        "type": "File"
       },
       {
        "name": "entryName",
        "type": "String"
       }
      ],
      "name": "createArchiveEntry",
      "type": "ArchiveEntry"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [
       {
        "name": "written",
        "type": "int"
       }
      ],
      "name": "count",
      "type": null
     },
     {
      "params": [
       {
        "name": "written",
        "type": "long"
       }
      ],
      "name": "count",
      "type": null
     },
     {
      "params": [],
      "name": "getCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "getBytesWritten",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "archiveEntry",
        "type": "ArchiveEntry"
       }
      ],
      "name": "canWriteEntryData",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "oneByte",
      "type": "byte"
     },
     {
      "name": "BYTE_MASK",
      "type": "int"
     },
     {
      "name": "bytesWritten",
      "type": "long"
     }
    ],
    "name": "ArchiveOutputStream"
   }
  ]
 },
 {
  "filename": "ArchiveEntry.java",
  "package_name": "org.apache.commons.compress.archivers",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getSize",
      "type": "long"
     },
     {
      "params": [],
      "name": "isDirectory",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getLastModifiedDate",
      "type": "Date"
     }
    ],
    "fields": [
     {
      "name": "SIZE_UNKNOWN",
      "type": "long"
     }
    ],
    "name": "ArchiveEntry"
   }
  ]
 },
 {
  "filename": "ZipArchiveEntryPredicate.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "zipArchiveEntry",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "test",
      "type": "boolean"
     }
    ],
    "fields": [],
    "name": "ZipArchiveEntryPredicate"
   }
  ]
 },
 {
  "filename": "ZipMethod.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getCode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "code",
        "type": "int"
       }
      ],
      "name": "getMethodByCode",
      "type": "ZipMethod"
     }
    ],
    "fields": [
     {
      "name": "UNKNOWN_CODE",
      "type": "int"
     },
     {
      "name": "code",
      "type": "int"
     },
     {
      "name": "codeToEnum",
      "type": "Map"
     }
    ],
    "name": "ZipMethod"
   }
  ]
 },
 {
  "filename": "ZipArchiveEntryRequest.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "zipArchiveEntry",
        "type": "ZipArchiveEntry"
       },
       {
        "name": "payloadSupplier",
        "type": "InputStreamSupplier"
       }
      ],
      "name": "createZipArchiveEntryRequest",
      "type": "ZipArchiveEntryRequest"
     },
     {
      "params": [],
      "name": "getPayloadStream",
      "type": "InputStream"
     },
     {
      "params": [],
      "name": "getMethod",
      "type": "int"
     },
     {
      "params": [],
      "name": "getZipArchiveEntry",
      "type": "ZipArchiveEntry"
     }
    ],
    "fields": [
     {
      "name": "zipArchiveEntry",
      "type": "ZipArchiveEntry"
     },
     {
      "name": "payloadSupplier",
      "type": "InputStreamSupplier"
     },
     {
      "name": "method",
      "type": "int"
     }
    ],
    "name": "ZipArchiveEntryRequest"
   }
  ]
 },
 {
  "filename": "NioZipEncoding.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "canEncode",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "encode",
      "type": "ByteBuffer"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       }
      ],
      "name": "decode",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "charset",
      "type": "Charset"
     }
    ],
    "name": "NioZipEncoding"
   }
  ]
 },
 {
  "filename": "ParallelScatterZipCreator.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "scatterGatherBackingStoreSupplier",
        "type": "ScatterGatherBackingStoreSupplier"
       }
      ],
      "name": "createDeferred",
      "type": "ScatterZipOutputStream"
     },
     {
      "params": [
       {
        "name": "zipArchiveEntry",
        "type": "ZipArchiveEntry"
       },
       {
        "name": "source",
        "type": "InputStreamSupplier"
       }
      ],
      "name": "addArchiveEntry",
      "type": null
     },
     {
      "params": [
       {
        "name": "callable",
        "type": "Callable"
       }
      ],
      "name": "submit",
      "type": null
     },
     {
      "params": [
       {
        "name": "zipArchiveEntry",
        "type": "ZipArchiveEntry"
       },
       {
        "name": "source",
        "type": "InputStreamSupplier"
       }
      ],
      "name": "createCallable",
      "type": "Callable"
     },
     {
      "params": [
       {
        "name": "targetStream",
        "type": "ZipArchiveOutputStream"
       }
      ],
      "name": "writeTo",
      "type": null
     },
     {
      "params": [],
      "name": "getStatisticsMessage",
      "type": "ScatterStatistics"
     }
    ],
    "fields": [
     {
      "name": "streams",
      "type": "List"
     },
     {
      "name": "es",
      "type": "ExecutorService"
     },
     {
      "name": "backingStoreSupplier",
      "type": "ScatterGatherBackingStoreSupplier"
     },
     {
      "name": "futures",
      "type": "List"
     },
     {
      "name": "startedAt",
      "type": "long"
     },
     {
      "name": "compressionDoneAt",
      "type": "long"
     },
     {
      "name": "scatterDoneAt",
      "type": "long"
     },
     {
      "name": "tlScatterStreams",
      "type": "ThreadLocal"
     }
    ],
    "name": "ParallelScatterZipCreator"
   }
  ]
 },
 {
  "filename": "FallbackZipEncoding.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "canEncode",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "encode",
      "type": "ByteBuffer"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       }
      ],
      "name": "decode",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "charsetName",
      "type": "String"
     }
    ],
    "name": "FallbackZipEncoding"
   }
  ]
 },
 {
  "filename": "BinaryTree.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "node",
        "type": "int"
       },
       {
        "name": "path",
        "type": "int"
       },
       {
        "name": "depth",
        "type": "int"
       },
       {
        "name": "value",
        "type": "int"
       }
      ],
      "name": "addLeaf",
      "type": null
     },
     {
      "params": [
       {
        "name": "stream",
        "type": "BitStream"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "in",
        "type": "InputStream"
       },
       {
        "name": "totalNumberOfValues",
        "type": "int"
       }
      ],
      "name": "decode",
      "type": "BinaryTree"
     }
    ],
    "fields": [
     {
      "name": "UNDEFINED",
      "type": "int"
     },
     {
      "name": "NODE",
      "type": "int"
     },
     {
      "name": "tree",
      "type": "int"
     }
    ],
    "name": "BinaryTree"
   }
  ]
 },
 {
  "filename": "Simple8BitZipEncoding.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       }
      ],
      "name": "decodeByte",
      "type": "char"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "char"
       }
      ],
      "name": "canEncodeChar",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "bb",
        "type": "ByteBuffer"
       },
       {
        "name": "c",
        "type": "char"
       }
      ],
      "name": "pushEncodedChar",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "char"
       }
      ],
      "name": "encodeHighChar",
      "type": "Simple8BitChar"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "canEncode",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "encode",
      "type": "ByteBuffer"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       }
      ],
      "name": "decode",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "highChars",
      "type": "char"
     },
     {
      "name": "reverseMapping",
      "type": "List"
     }
    ],
    "name": "Simple8BitZipEncoding"
   }
  ]
 },
 {
  "filename": "Zip64ExtendedInformationExtraField.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getHeaderId",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getLocalFileDataLength",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getCentralDirectoryLength",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getLocalFileDataData",
      "type": "byte"
     },
     {
      "params": [],
      "name": "getCentralDirectoryData",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseFromLocalFileData",
      "type": null
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseFromCentralDirectoryData",
      "type": null
     },
     {
      "params": [
       {
        "name": "hasUncompressedSize",
        "type": "boolean"
       },
       {
        "name": "hasCompressedSize",
        "type": "boolean"
       },
       {
        "name": "hasRelativeHeaderOffset",
        "type": "boolean"
       },
       {
        "name": "hasDiskStart",
        "type": "boolean"
       }
      ],
      "name": "reparseCentralDirectoryData",
      "type": null
     },
     {
      "params": [],
      "name": "getSize",
      "type": "ZipEightByteInteger"
     },
     {
      "params": [
       {
        "name": "size",
        "type": "ZipEightByteInteger"
       }
      ],
      "name": "setSize",
      "type": null
     },
     {
      "params": [],
      "name": "getCompressedSize",
      "type": "ZipEightByteInteger"
     },
     {
      "params": [
       {
        "name": "compressedSize",
        "type": "ZipEightByteInteger"
       }
      ],
      "name": "setCompressedSize",
      "type": null
     },
     {
      "params": [],
      "name": "getRelativeHeaderOffset",
      "type": "ZipEightByteInteger"
     },
     {
      "params": [
       {
        "name": "rho",
        "type": "ZipEightByteInteger"
       }
      ],
      "name": "setRelativeHeaderOffset",
      "type": null
     },
     {
      "params": [],
      "name": "getDiskStartNumber",
      "type": "ZipLong"
     },
     {
      "params": [
       {
        "name": "ds",
        "type": "ZipLong"
       }
      ],
      "name": "setDiskStartNumber",
      "type": null
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       }
      ],
      "name": "addSizes",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "HEADER_ID",
      "type": "ZipShort"
     },
     {
      "name": "LFH_MUST_HAVE_BOTH_SIZES_MSG",
      "type": "String"
     },
     {
      "name": "EMPTY",
      "type": "byte"
     },
     {
      "name": "size",
      "type": "ZipEightByteInteger"
     },
     {
      "name": "compressedSize",
      "type": "ZipEightByteInteger"
     },
     {
      "name": "relativeHeaderOffset",
      "type": "ZipEightByteInteger"
     },
     {
      "name": "diskStart",
      "type": "ZipLong"
     },
     {
      "name": "rawCentralDirectoryData",
      "type": "byte"
     }
    ],
    "name": "Zip64ExtendedInformationExtraField"
   }
  ]
 },
 {
  "filename": "JarMarker.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getInstance",
      "type": "JarMarker"
     },
     {
      "params": [],
      "name": "getHeaderId",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getLocalFileDataLength",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getCentralDirectoryLength",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getLocalFileDataData",
      "type": "byte"
     },
     {
      "params": [],
      "name": "getCentralDirectoryData",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseFromLocalFileData",
      "type": null
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseFromCentralDirectoryData",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "ID",
      "type": "ZipShort"
     },
     {
      "name": "NULL",
      "type": "ZipShort"
     },
     {
      "name": "NO_BYTES",
      "type": "byte"
     },
     {
      "name": "DEFAULT",
      "type": "JarMarker"
     }
    ],
    "name": "JarMarker"
   }
  ]
 },
 {
  "filename": "ZipArchiveOutputStream.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "isSeekable",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "encoding",
        "type": "String"
       }
      ],
      "name": "setEncoding",
      "type": null
     },
     {
      "params": [],
      "name": "getEncoding",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "boolean"
       }
      ],
      "name": "setUseLanguageEncodingFlag",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "UnicodeExtraFieldPolicy"
       }
      ],
      "name": "setCreateUnicodeExtraFields",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "boolean"
       }
      ],
      "name": "setFallbackToUTF8",
      "type": null
     },
     {
      "params": [
       {
        "name": "mode",
        "type": "Zip64Mode"
       }
      ],
      "name": "setUseZip64",
      "type": null
     },
     {
      "params": [],
      "name": "finish",
      "type": null
     },
     {
      "params": [],
      "name": "writeCentralDirectoryInChunks",
      "type": null
     },
     {
      "params": [],
      "name": "closeArchiveEntry",
      "type": null
     },
     {
      "params": [
       {
        "name": "phased",
        "type": "boolean"
       }
      ],
      "name": "closeCopiedEntry",
      "type": null
     },
     {
      "params": [
       {
        "name": "actuallyNeedsZip64",
        "type": "boolean"
       },
       {
        "name": "phased",
        "type": "boolean"
       }
      ],
      "name": "closeEntry",
      "type": null
     },
     {
      "params": [],
      "name": "preClose",
      "type": null
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "ZipArchiveEntry"
       },
       {
        "name": "rawStream",
        "type": "InputStream"
       }
      ],
      "name": "addRawArchiveEntry",
      "type": null
     },
     {
      "params": [],
      "name": "flushDeflater",
      "type": null
     },
     {
      "params": [
       {
        "name": "bytesWritten",
        "type": "long"
       },
       {
        "name": "crc",
        "type": "long"
       },
       {
        "name": "effectiveMode",
        "type": "Zip64Mode"
       }
      ],
      "name": "handleSizesAndCrc",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "effectiveMode",
        "type": "Zip64Mode"
       }
      ],
      "name": "checkIfNeedsZip64",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "entry1",
        "type": "ZipArchiveEntry"
       },
       {
        "name": "requestedMode",
        "type": "Zip64Mode"
       }
      ],
      "name": "isZip64Required",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "zipArchiveEntry",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "isTooLageForZip32",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "actuallyNeedsZip64",
        "type": "boolean"
       }
      ],
      "name": "rewriteSizesAndCrc",
      "type": null
     },
     {
      "params": [
       {
        "name": "archiveEntry",
        "type": "ArchiveEntry"
       }
      ],
      "name": "putArchiveEntry",
      "type": null
     },
     {
      "params": [
       {
        "name": "archiveEntry",
        "type": "ArchiveEntry"
       },
       {
        "name": "phased",
        "type": "boolean"
       }
      ],
      "name": "putArchiveEntry",
      "type": null
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "setDefaults",
      "type": null
     },
     {
      "params": [
       {
        "name": "effectiveMode",
        "type": "Zip64Mode"
       }
      ],
      "name": "validateSizeInformation",
      "type": null
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "ZipArchiveEntry"
       },
       {
        "name": "mode",
        "type": "Zip64Mode"
       }
      ],
      "name": "shouldAddZip64Extra",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "comment",
        "type": "String"
       }
      ],
      "name": "setComment",
      "type": null
     },
     {
      "params": [
       {
        "name": "level",
        "type": "int"
       }
      ],
      "name": "setLevel",
      "type": null
     },
     {
      "params": [
       {
        "name": "method",
        "type": "int"
       }
      ],
      "name": "setMethod",
      "type": null
     },
     {
      "params": [
       {
        "name": "ae",
        "type": "ArchiveEntry"
       }
      ],
      "name": "canWriteEntryData",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       }
      ],
      "name": "writeCounted",
      "type": null
     },
     {
      "params": [
       {
        "name": "src",
        "type": "InputStream"
       }
      ],
      "name": "copyFromZipInputStream",
      "type": null
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [],
      "name": "flush",
      "type": null
     },
     {
      "params": [],
      "name": "deflate",
      "type": null
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "writeLocalFileHeader",
      "type": null
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       },
       {
        "name": "phased",
        "type": "boolean"
       }
      ],
      "name": "writeLocalFileHeader",
      "type": null
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       },
       {
        "name": "name",
        "type": "ByteBuffer"
       },
       {
        "name": "encodable",
        "type": "boolean"
       },
       {
        "name": "phased",
        "type": "boolean"
       }
      ],
      "name": "createLocalFileHeader",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       },
       {
        "name": "encodable",
        "type": "boolean"
       },
       {
        "name": "name",
        "type": "ByteBuffer"
       }
      ],
      "name": "addUnicodeExtraFields",
      "type": null
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "writeDataDescriptor",
      "type": null
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "writeCentralFileHeader",
      "type": null
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "createCentralFileHeader",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       },
       {
        "name": "name",
        "type": "ByteBuffer"
       },
       {
        "name": "lfhOffset",
        "type": "long"
       },
       {
        "name": "needsZip64Extra",
        "type": "boolean"
       }
      ],
      "name": "createCentralFileHeader",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       },
       {
        "name": "lfhOffset",
        "type": "long"
       },
       {
        "name": "needsZip64Extra",
        "type": "boolean"
       }
      ],
      "name": "handleZip64Extra",
      "type": null
     },
     {
      "params": [],
      "name": "writeCentralDirectoryEnd",
      "type": null
     },
     {
      "params": [],
      "name": "writeZip64CentralDirectory",
      "type": null
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       }
      ],
      "name": "writeOut",
      "type": null
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "writeOut",
      "type": null
     },
     {
      "params": [
       {
        "name": "zipMethod",
        "type": "int"
       },
       {
        "name": "utfFallback",
        "type": "boolean"
       }
      ],
      "name": "getGeneralPurposeBits",
      "type": "GeneralPurposeBit"
     },
     {
      "params": [
       {
        "name": "zipMethod",
        "type": "int"
       },
       {
        "name": "zip64",
        "type": "boolean"
       }
      ],
      "name": "versionNeededToExtract",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "zipMethod",
        "type": "int"
       }
      ],
      "name": "isDeflatedToOutputStream",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "inputFile",
        "type": "File"
       },
       {
        "name": "entryName",
        "type": "String"
       }
      ],
      "name": "createArchiveEntry",
      "type": "ArchiveEntry"
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "getZip64Extra",
      "type": "Zip64ExtendedInformationExtraField"
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "hasZip64Extra",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "getEffectiveZip64Mode",
      "type": "Zip64Mode"
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "getEntryEncoding",
      "type": "ZipEncoding"
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "getName",
      "type": "ByteBuffer"
     },
     {
      "params": [],
      "name": "destroy",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "BUFFER_SIZE",
      "type": "int"
     },
     {
      "name": "LFH_SIG_OFFSET",
      "type": "int"
     },
     {
      "name": "LFH_VERSION_NEEDED_OFFSET",
      "type": "int"
     },
     {
      "name": "LFH_GPB_OFFSET",
      "type": "int"
     },
     {
      "name": "LFH_METHOD_OFFSET",
      "type": "int"
     },
     {
      "name": "LFH_TIME_OFFSET",
      "type": "int"
     },
     {
      "name": "LFH_CRC_OFFSET",
      "type": "int"
     },
     {
      "name": "LFH_COMPRESSED_SIZE_OFFSET",
      "type": "int"
     },
     {
      "name": "LFH_ORIGINAL_SIZE_OFFSET",
      "type": "int"
     },
     {
      "name": "LFH_FILENAME_LENGTH_OFFSET",
      "type": "int"
     },
     {
      "name": "LFH_EXTRA_LENGTH_OFFSET",
      "type": "int"
     },
     {
      "name": "LFH_FILENAME_OFFSET",
      "type": "int"
     },
     {
      "name": "CFH_SIG_OFFSET",
      "type": "int"
     },
     {
      "name": "CFH_VERSION_MADE_BY_OFFSET",
      "type": "int"
     },
     {
      "name": "CFH_VERSION_NEEDED_OFFSET",
      "type": "int"
     },
     {
      "name": "CFH_GPB_OFFSET",
      "type": "int"
     },
     {
      "name": "CFH_METHOD_OFFSET",
      "type": "int"
     },
     {
      "name": "CFH_TIME_OFFSET",
      "type": "int"
     },
     {
      "name": "CFH_CRC_OFFSET",
      "type": "int"
     },
     {
      "name": "CFH_COMPRESSED_SIZE_OFFSET",
      "type": "int"
     },
     {
      "name": "CFH_ORIGINAL_SIZE_OFFSET",
      "type": "int"
     },
     {
      "name": "CFH_FILENAME_LENGTH_OFFSET",
      "type": "int"
     },
     {
      "name": "CFH_EXTRA_LENGTH_OFFSET",
      "type": "int"
     },
     {
      "name": "CFH_COMMENT_LENGTH_OFFSET",
      "type": "int"
     },
     {
      "name": "CFH_DISK_NUMBER_OFFSET",
      "type": "int"
     },
     {
      "name": "CFH_INTERNAL_ATTRIBUTES_OFFSET",
      "type": "int"
     },
     {
      "name": "CFH_EXTERNAL_ATTRIBUTES_OFFSET",
      "type": "int"
     },
     {
      "name": "CFH_LFH_OFFSET",
      "type": "int"
     },
     {
      "name": "CFH_FILENAME_OFFSET",
      "type": "int"
     },
     {
      "name": "finished",
      "type": "boolean"
     },
     {
      "name": "DEFLATER_BLOCK_SIZE",
      "type": "int"
     },
     {
      "name": "DEFLATED",
      "type": "int"
     },
     {
      "name": "DEFAULT_COMPRESSION",
      "type": "int"
     },
     {
      "name": "STORED",
      "type": "int"
     },
     {
      "name": "DEFAULT_ENCODING",
      "type": "String"
     },
     {
      "name": "EFS_FLAG",
      "type": "int"
     },
     {
      "name": "EMPTY",
      "type": "byte"
     },
     {
      "name": "entry",
      "type": "CurrentEntry"
     },
     {
      "name": "comment",
      "type": "String"
     },
     {
      "name": "level",
      "type": "int"
     },
     {
      "name": "hasCompressionLevelChanged",
      "type": "boolean"
     },
     {
      "name": "method",
      "type": "int"
     },
     {
      "name": "entries",
      "type": "List"
     },
     {
      "name": "streamCompressor",
      "type": "StreamCompressor"
     },
     {
      "name": "cdOffset",
      "type": "long"
     },
     {
      "name": "cdLength",
      "type": "long"
     },
     {
      "name": "ZERO",
      "type": "byte"
     },
     {
      "name": "LZERO",
      "type": "byte"
     },
     {
      "name": "ONE",
      "type": "byte"
     },
     {
      "name": "offsets",
      "type": "Map"
     },
     {
      "name": "encoding",
      "type": "String"
     },
     {
      "name": "zipEncoding",
      "type": "ZipEncoding"
     },
     {
      "name": "def",
      "type": "Deflater"
     },
     {
      "name": "raf",
      "type": "RandomAccessFile"
     },
     {
      "name": "out",
      "type": "OutputStream"
     },
     {
      "name": "useUTF8Flag",
      "type": "boolean"
     },
     {
      "name": "fallbackToUTF8",
      "type": "boolean"
     },
     {
      "name": "createUnicodeExtraFields",
      "type": "UnicodeExtraFieldPolicy"
     },
     {
      "name": "hasUsedZip64",
      "type": "boolean"
     },
     {
      "name": "zip64Mode",
      "type": "Zip64Mode"
     },
     {
      "name": "copyBuffer",
      "type": "byte"
     },
     {
      "name": "calendarInstance",
      "type": "Calendar"
     },
     {
      "name": "LFH_SIG",
      "type": "byte"
     },
     {
      "name": "DD_SIG",
      "type": "byte"
     },
     {
      "name": "CFH_SIG",
      "type": "byte"
     },
     {
      "name": "EOCD_SIG",
      "type": "byte"
     },
     {
      "name": "ZIP64_EOCD_SIG",
      "type": "byte"
     },
     {
      "name": "ZIP64_EOCD_LOC_SIG",
      "type": "byte"
     }
    ],
    "name": "ZipArchiveOutputStream"
   }
  ]
 },
 {
  "filename": "UnicodeCommentExtraField.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getHeaderId",
      "type": "ZipShort"
     }
    ],
    "fields": [
     {
      "name": "UCOM_ID",
      "type": "ZipShort"
     }
    ],
    "name": "UnicodeCommentExtraField"
   }
  ]
 },
 {
  "filename": "ZipLong.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getBytes",
      "type": "byte"
     },
     {
      "params": [],
      "name": "getValue",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "long"
       }
      ],
      "name": "getBytes",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "long"
       },
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "putLong",
      "type": null
     },
     {
      "params": [
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "putLong",
      "type": null
     },
     {
      "params": [
       {
        "name": "bytes",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "getValue",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "bytes",
        "type": "byte"
       }
      ],
      "name": "getValue",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "o",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [],
      "name": "clone",
      "type": "Object"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "BYTE_1",
      "type": "int"
     },
     {
      "name": "BYTE_1_MASK",
      "type": "int"
     },
     {
      "name": "BYTE_1_SHIFT",
      "type": "int"
     },
     {
      "name": "BYTE_2",
      "type": "int"
     },
     {
      "name": "BYTE_2_MASK",
      "type": "int"
     },
     {
      "name": "BYTE_2_SHIFT",
      "type": "int"
     },
     {
      "name": "BYTE_3",
      "type": "int"
     },
     {
      "name": "BYTE_3_MASK",
      "type": "long"
     },
     {
      "name": "BYTE_3_SHIFT",
      "type": "int"
     },
     {
      "name": "value",
      "type": "long"
     },
     {
      "name": "CFH_SIG",
      "type": "ZipLong"
     },
     {
      "name": "LFH_SIG",
      "type": "ZipLong"
     },
     {
      "name": "DD_SIG",
      "type": "ZipLong"
     },
     {
      "name": "ZIP64_MAGIC",
      "type": "ZipLong"
     },
     {
      "name": "SINGLE_SEGMENT_SPLIT_MARKER",
      "type": "ZipLong"
     },
     {
      "name": "AED_SIG",
      "type": "ZipLong"
     }
    ],
    "name": "ZipLong"
   }
  ]
 },
 {
  "filename": "ZipExtraField.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getHeaderId",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getLocalFileDataLength",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getCentralDirectoryLength",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getLocalFileDataData",
      "type": "byte"
     },
     {
      "params": [],
      "name": "getCentralDirectoryData",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseFromLocalFileData",
      "type": null
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseFromCentralDirectoryData",
      "type": null
     }
    ],
    "fields": [],
    "name": "ZipExtraField"
   }
  ]
 },
 {
  "filename": "ZipShort.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getBytes",
      "type": "byte"
     },
     {
      "params": [],
      "name": "getValue",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "int"
       }
      ],
      "name": "getBytes",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "int"
       },
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "putShort",
      "type": null
     },
     {
      "params": [
       {
        "name": "bytes",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "getValue",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "bytes",
        "type": "byte"
       }
      ],
      "name": "getValue",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "o",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [],
      "name": "clone",
      "type": "Object"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "BYTE_1_MASK",
      "type": "int"
     },
     {
      "name": "BYTE_1_SHIFT",
      "type": "int"
     },
     {
      "name": "value",
      "type": "int"
     }
    ],
    "name": "ZipShort"
   }
  ]
 },
 {
  "filename": "ZipFile.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getEncoding",
      "type": "String"
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [
       {
        "name": "zipfile",
        "type": "ZipFile"
       }
      ],
      "name": "closeQuietly",
      "type": null
     },
     {
      "params": [],
      "name": "getEntries",
      "type": "Enumeration"
     },
     {
      "params": [],
      "name": "getEntriesInPhysicalOrder",
      "type": "Enumeration"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getEntry",
      "type": "ZipArchiveEntry"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getEntries",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getEntriesInPhysicalOrder",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "canReadEntryData",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "getRawInputStream",
      "type": "InputStream"
     },
     {
      "params": [
       {
        "name": "target",
        "type": "ZipArchiveOutputStream"
       },
       {
        "name": "predicate",
        "type": "ZipArchiveEntryPredicate"
       }
      ],
      "name": "copyRawEntries",
      "type": null
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "getInputStream",
      "type": "InputStream"
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "getUnixSymlink",
      "type": "String"
     },
     {
      "params": [],
      "name": "finalize",
      "type": null
     },
     {
      "params": [],
      "name": "populateFromCentralDirectory",
      "type": "Map"
     },
     {
      "params": [
       {
        "name": "noUTF8Flag",
        "type": "Map"
       }
      ],
      "name": "readCentralDirectoryEntry",
      "type": null
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       },
       {
        "name": "offset",
        "type": "OffsetEntry"
       },
       {
        "name": "diskStart",
        "type": "int"
       }
      ],
      "name": "setSizesAndOffsetFromZip64Extra",
      "type": null
     },
     {
      "params": [],
      "name": "positionAtCentralDirectory",
      "type": null
     },
     {
      "params": [],
      "name": "positionAtCentralDirectory64",
      "type": null
     },
     {
      "params": [],
      "name": "positionAtCentralDirectory32",
      "type": null
     },
     {
      "params": [],
      "name": "positionAtEndOfCentralDirectoryRecord",
      "type": null
     },
     {
      "params": [
       {
        "name": "minDistanceFromEnd",
        "type": "long"
       },
       {
        "name": "maxDistanceFromEnd",
        "type": "long"
       },
       {
        "name": "sig",
        "type": "byte"
       }
      ],
      "name": "tryToLocateSignature",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "count",
        "type": "int"
       }
      ],
      "name": "skipBytes",
      "type": null
     },
     {
      "params": [
       {
        "name": "entriesWithoutUTF8Flag",
        "type": "Map"
       }
      ],
      "name": "resolveLocalFileHeaderData",
      "type": null
     },
     {
      "params": [],
      "name": "startsWithLocalFileHeader",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "HASH_SIZE",
      "type": "int"
     },
     {
      "name": "NIBLET_MASK",
      "type": "int"
     },
     {
      "name": "BYTE_SHIFT",
      "type": "int"
     },
     {
      "name": "POS_0",
      "type": "int"
     },
     {
      "name": "POS_1",
      "type": "int"
     },
     {
      "name": "POS_2",
      "type": "int"
     },
     {
      "name": "POS_3",
      "type": "int"
     },
     {
      "name": "entries",
      "type": "List"
     },
     {
      "name": "nameMap",
      "type": "Map"
     },
     {
      "name": "encoding",
      "type": "String"
     },
     {
      "name": "zipEncoding",
      "type": "ZipEncoding"
     },
     {
      "name": "archiveName",
      "type": "String"
     },
     {
      "name": "archive",
      "type": "RandomAccessFile"
     },
     {
      "name": "useUnicodeExtraFields",
      "type": "boolean"
     },
     {
      "name": "closed",
      "type": "boolean"
     },
     {
      "name": "DWORD_BUF",
      "type": "byte"
     },
     {
      "name": "WORD_BUF",
      "type": "byte"
     },
     {
      "name": "CFH_BUF",
      "type": "byte"
     },
     {
      "name": "SHORT_BUF",
      "type": "byte"
     },
     {
      "name": "CFH_LEN",
      "type": "int"
     },
     {
      "name": "CFH_SIG",
      "type": "long"
     },
     {
      "name": "MIN_EOCD_SIZE",
      "type": "int"
     },
     {
      "name": "MAX_EOCD_SIZE",
      "type": "int"
     },
     {
      "name": "CFD_LOCATOR_OFFSET",
      "type": "int"
     },
     {
      "name": "ZIP64_EOCDL_LENGTH",
      "type": "int"
     },
     {
      "name": "ZIP64_EOCDL_LOCATOR_OFFSET",
      "type": "int"
     },
     {
      "name": "ZIP64_EOCD_CFD_LOCATOR_OFFSET",
      "type": "int"
     },
     {
      "name": "LFH_OFFSET_FOR_FILENAME_LENGTH",
      "type": "long"
     },
     {
      "name": "OFFSET_COMPARATOR",
      "type": "Comparator"
     }
    ],
    "name": "ZipFile"
   }
  ]
 },
 {
  "filename": "ScatterZipOutputStream.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "zipArchiveEntryRequest",
        "type": "ZipArchiveEntryRequest"
       }
      ],
      "name": "addArchiveEntry",
      "type": null
     },
     {
      "params": [
       {
        "name": "target",
        "type": "ZipArchiveOutputStream"
       }
      ],
      "name": "writeTo",
      "type": null
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [
       {
        "name": "file",
        "type": "File"
       }
      ],
      "name": "fileBased",
      "type": "ScatterZipOutputStream"
     },
     {
      "params": [
       {
        "name": "file",
        "type": "File"
       },
       {
        "name": "compressionLevel",
        "type": "int"
       }
      ],
      "name": "fileBased",
      "type": "ScatterZipOutputStream"
     }
    ],
    "fields": [
     {
      "name": "items",
      "type": "Queue"
     },
     {
      "name": "backingStore",
      "type": "ScatterGatherBackingStore"
     },
     {
      "name": "streamCompressor",
      "type": "StreamCompressor"
     }
    ],
    "name": "ScatterZipOutputStream"
   }
  ]
 },
 {
  "filename": "AsiExtraField.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getHeaderId",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getLocalFileDataLength",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getCentralDirectoryLength",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getLocalFileDataData",
      "type": "byte"
     },
     {
      "params": [],
      "name": "getCentralDirectoryData",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "uid",
        "type": "int"
       }
      ],
      "name": "setUserId",
      "type": null
     },
     {
      "params": [],
      "name": "getUserId",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "gid",
        "type": "int"
       }
      ],
      "name": "setGroupId",
      "type": null
     },
     {
      "params": [],
      "name": "getGroupId",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "setLinkedFile",
      "type": null
     },
     {
      "params": [],
      "name": "getLinkedFile",
      "type": "String"
     },
     {
      "params": [],
      "name": "isLink",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "mode",
        "type": "int"
       }
      ],
      "name": "setMode",
      "type": null
     },
     {
      "params": [],
      "name": "getMode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "dirFlag",
        "type": "boolean"
       }
      ],
      "name": "setDirectory",
      "type": null
     },
     {
      "params": [],
      "name": "isDirectory",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseFromLocalFileData",
      "type": null
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseFromCentralDirectoryData",
      "type": null
     },
     {
      "params": [
       {
        "name": "mode",
        "type": "int"
       }
      ],
      "name": "getMode",
      "type": "int"
     },
     {
      "params": [],
      "name": "clone",
      "type": "Object"
     }
    ],
    "fields": [
     {
      "name": "HEADER_ID",
      "type": "ZipShort"
     },
     {
      "name": "WORD",
      "type": "int"
     },
     {
      "name": "mode",
      "type": "int"
     },
     {
      "name": "uid",
      "type": "int"
     },
     {
      "name": "gid",
      "type": "int"
     },
     {
      "name": "link",
      "type": "String"
     },
     {
      "name": "dirFlag",
      "type": "boolean"
     },
     {
      "name": "crc",
      "type": "CRC32"
     }
    ],
    "name": "AsiExtraField"
   }
  ]
 },
 {
  "filename": "Zip64Mode.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [],
    "fields": [],
    "name": "Zip64Mode"
   }
  ]
 },
 {
  "filename": "UnsupportedZipFeatureException.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getFeature",
      "type": "Feature"
     },
     {
      "params": [],
      "name": "getEntry",
      "type": "ZipArchiveEntry"
     }
    ],
    "fields": [
     {
      "name": "reason",
      "type": "Feature"
     },
     {
      "name": "entry",
      "type": "ZipArchiveEntry"
     },
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "UnsupportedZipFeatureException"
   }
  ]
 },
 {
  "filename": "GeneralPurposeBit.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "usesUTF8ForNames",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "boolean"
       }
      ],
      "name": "useUTF8ForNames",
      "type": null
     },
     {
      "params": [],
      "name": "usesDataDescriptor",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "boolean"
       }
      ],
      "name": "useDataDescriptor",
      "type": null
     },
     {
      "params": [],
      "name": "usesEncryption",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "boolean"
       }
      ],
      "name": "useEncryption",
      "type": null
     },
     {
      "params": [],
      "name": "usesStrongEncryption",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "boolean"
       }
      ],
      "name": "useStrongEncryption",
      "type": null
     },
     {
      "params": [],
      "name": "getSlidingDictionarySize",
      "type": "int"
     },
     {
      "params": [],
      "name": "getNumberOfShannonFanoTrees",
      "type": "int"
     },
     {
      "params": [],
      "name": "encode",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "encode",
      "type": null
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "parse",
      "type": "GeneralPurposeBit"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "o",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "clone",
      "type": "Object"
     }
    ],
    "fields": [
     {
      "name": "ENCRYPTION_FLAG",
      "type": "int"
     },
     {
      "name": "SLIDING_DICTIONARY_SIZE_FLAG",
      "type": "int"
     },
     {
      "name": "NUMBER_OF_SHANNON_FANO_TREES_FLAG",
      "type": "int"
     },
     {
      "name": "DATA_DESCRIPTOR_FLAG",
      "type": "int"
     },
     {
      "name": "STRONG_ENCRYPTION_FLAG",
      "type": "int"
     },
     {
      "name": "UFT8_NAMES_FLAG",
      "type": "int"
     },
     {
      "name": "languageEncodingFlag",
      "type": "boolean"
     },
     {
      "name": "dataDescriptorFlag",
      "type": "boolean"
     },
     {
      "name": "encryptionFlag",
      "type": "boolean"
     },
     {
      "name": "strongEncryptionFlag",
      "type": "boolean"
     },
     {
      "name": "slidingDictionarySize",
      "type": "int"
     },
     {
      "name": "numberOfShannonFanoTrees",
      "type": "int"
     }
    ],
    "name": "GeneralPurposeBit"
   }
  ]
 },
 {
  "filename": "X7875_NewUnix.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getHeaderId",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getUID",
      "type": "long"
     },
     {
      "params": [],
      "name": "getGID",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "l",
        "type": "long"
       }
      ],
      "name": "setUID",
      "type": null
     },
     {
      "params": [
       {
        "name": "l",
        "type": "long"
       }
      ],
      "name": "setGID",
      "type": null
     },
     {
      "params": [],
      "name": "getLocalFileDataLength",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getCentralDirectoryLength",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getLocalFileDataData",
      "type": "byte"
     },
     {
      "params": [],
      "name": "getCentralDirectoryData",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseFromLocalFileData",
      "type": null
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseFromCentralDirectoryData",
      "type": null
     },
     {
      "params": [],
      "name": "reset",
      "type": null
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "clone",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "o",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "array",
        "type": "byte"
       }
      ],
      "name": "trimLeadingZeroesForceMinLength",
      "type": "byte"
     }
    ],
    "fields": [
     {
      "name": "HEADER_ID",
      "type": "ZipShort"
     },
     {
      "name": "ONE_THOUSAND",
      "type": "BigInteger"
     },
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "version",
      "type": "int"
     },
     {
      "name": "uid",
      "type": "BigInteger"
     },
     {
      "name": "gid",
      "type": "BigInteger"
     }
    ],
    "name": "X7875_NewUnix"
   }
  ]
 },
 {
  "filename": "UnrecognizedExtraField.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "headerId",
        "type": "ZipShort"
       }
      ],
      "name": "setHeaderId",
      "type": null
     },
     {
      "params": [],
      "name": "getHeaderId",
      "type": "ZipShort"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       }
      ],
      "name": "setLocalFileDataData",
      "type": null
     },
     {
      "params": [],
      "name": "getLocalFileDataLength",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getLocalFileDataData",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       }
      ],
      "name": "setCentralDirectoryData",
      "type": null
     },
     {
      "params": [],
      "name": "getCentralDirectoryLength",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getCentralDirectoryData",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseFromLocalFileData",
      "type": null
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseFromCentralDirectoryData",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "headerId",
      "type": "ZipShort"
     },
     {
      "name": "localData",
      "type": "byte"
     },
     {
      "name": "centralData",
      "type": "byte"
     }
    ],
    "name": "UnrecognizedExtraField"
   }
  ]
 },
 {
  "filename": "AbstractUnicodeExtraField.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "assembleData",
      "type": null
     },
     {
      "params": [],
      "name": "getNameCRC32",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "nameCRC32",
        "type": "long"
       }
      ],
      "name": "setNameCRC32",
      "type": null
     },
     {
      "params": [],
      "name": "getUnicodeName",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "unicodeName",
        "type": "byte"
       }
      ],
      "name": "setUnicodeName",
      "type": null
     },
     {
      "params": [],
      "name": "getCentralDirectoryData",
      "type": "byte"
     },
     {
      "params": [],
      "name": "getCentralDirectoryLength",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getLocalFileDataData",
      "type": "byte"
     },
     {
      "params": [],
      "name": "getLocalFileDataLength",
      "type": "ZipShort"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseFromLocalFileData",
      "type": null
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseFromCentralDirectoryData",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "nameCRC32",
      "type": "long"
     },
     {
      "name": "unicodeName",
      "type": "byte"
     },
     {
      "name": "data",
      "type": "byte"
     }
    ],
    "name": "AbstractUnicodeExtraField"
   }
  ]
 },
 {
  "filename": "ZipEncodingHelper.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "b",
        "type": "ByteBuffer"
       },
       {
        "name": "newCapacity",
        "type": "int"
       }
      ],
      "name": "growBuffer",
      "type": "ByteBuffer"
     },
     {
      "params": [
       {
        "name": "bb",
        "type": "ByteBuffer"
       },
       {
        "name": "c",
        "type": "char"
       }
      ],
      "name": "appendSurrogate",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "getZipEncoding",
      "type": "ZipEncoding"
     },
     {
      "params": [
       {
        "name": "charsetName",
        "type": "String"
       }
      ],
      "name": "isUTF8",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "simpleEncodings",
      "type": "Map"
     },
     {
      "name": "HEX_DIGITS",
      "type": "byte"
     },
     {
      "name": "UTF8",
      "type": "String"
     },
     {
      "name": "UTF8_ZIP_ENCODING",
      "type": "ZipEncoding"
     }
    ],
    "name": "ZipEncodingHelper"
   }
  ]
 },
 {
  "filename": "UnshrinkingInputStream.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "previousCode",
        "type": "int"
       },
       {
        "name": "character",
        "type": "byte"
       }
      ],
      "name": "addEntry",
      "type": "int"
     },
     {
      "params": [],
      "name": "partialClear",
      "type": null
     },
     {
      "params": [],
      "name": "decompressNextSymbol",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "MAX_CODE_SIZE",
      "type": "int"
     },
     {
      "name": "MAX_TABLE_SIZE",
      "type": "int"
     },
     {
      "name": "isUsed",
      "type": "boolean"
     }
    ],
    "name": "UnshrinkingInputStream"
   }
  ]
 },
 {
  "filename": "Zip64RequiredException.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "getEntryTooBigMessage",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "ARCHIVE_TOO_BIG_MESSAGE",
      "type": "String"
     },
     {
      "name": "TOO_MANY_ENTRIES_MESSAGE",
      "type": "String"
     }
    ],
    "name": "Zip64RequiredException"
   }
  ]
 },
 {
  "filename": "CircularBuffer.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "available",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "int"
       }
      ],
      "name": "put",
      "type": null
     },
     {
      "params": [],
      "name": "get",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "distance",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "copy",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "size",
      "type": "int"
     },
     {
      "name": "buffer",
      "type": "byte"
     },
     {
      "name": "readIndex",
      "type": "int"
     },
     {
      "name": "writeIndex",
      "type": "int"
     }
    ],
    "name": "CircularBuffer"
   }
  ]
 },
 {
  "filename": "ZipUtil.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "time",
        "type": "Date"
       }
      ],
      "name": "toDosTime",
      "type": "ZipLong"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "long"
       }
      ],
      "name": "toDosTime",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "t",
        "type": "long"
       },
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "toDosTime",
      "type": null
     },
     {
      "params": [
       {
        "name": "c",
        "type": "Calendar"
       },
       {
        "name": "t",
        "type": "long"
       },
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "toDosTime",
      "type": null
     },
     {
      "params": [
       {
        "name": "i",
        "type": "int"
       }
      ],
      "name": "adjustToLong",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "array",
        "type": "byte"
       }
      ],
      "name": "reverse",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "big",
        "type": "BigInteger"
       }
      ],
      "name": "bigToLong",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "l",
        "type": "long"
       }
      ],
      "name": "longToBig",
      "type": "BigInteger"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       }
      ],
      "name": "signedByteToUnsignedInt",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "i",
        "type": "int"
       }
      ],
      "name": "unsignedIntToSignedByte",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "zipDosTime",
        "type": "ZipLong"
       }
      ],
      "name": "fromDosTime",
      "type": "Date"
     },
     {
      "params": [
       {
        "name": "dosTime",
        "type": "long"
       }
      ],
      "name": "dosToJavaTime",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       },
       {
        "name": "originalNameBytes",
        "type": "byte"
       },
       {
        "name": "commentBytes",
        "type": "byte"
       }
      ],
      "name": "setNameAndCommentFromExtraFields",
      "type": null
     },
     {
      "params": [
       {
        "name": "f",
        "type": "AbstractUnicodeExtraField"
       },
       {
        "name": "orig",
        "type": "byte"
       }
      ],
      "name": "getUnicodeStringIfOriginalMatches",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "from",
        "type": "byte"
       }
      ],
      "name": "copy",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "from",
        "type": "byte"
       },
       {
        "name": "to",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "copy",
      "type": null
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "canHandleEntryData",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "supportsEncryptionOf",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "supportsMethodOf",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "checkRequestedFeatures",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "DOS_TIME_MIN",
      "type": "byte"
     }
    ],
    "name": "ZipUtil"
   }
  ]
 },
 {
  "filename": "UnparseableExtraFieldData.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getHeaderId",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getLocalFileDataLength",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getCentralDirectoryLength",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getLocalFileDataData",
      "type": "byte"
     },
     {
      "params": [],
      "name": "getCentralDirectoryData",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseFromLocalFileData",
      "type": null
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseFromCentralDirectoryData",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "HEADER_ID",
      "type": "ZipShort"
     },
     {
      "name": "localFileData",
      "type": "byte"
     },
     {
      "name": "centralDirectoryData",
      "type": "byte"
     }
    ],
    "name": "UnparseableExtraFieldData"
   }
  ]
 },
 {
  "filename": "ZipArchiveInputStream.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getNextZipEntry",
      "type": "ZipArchiveEntry"
     },
     {
      "params": [
       {
        "name": "lfh",
        "type": "byte"
       }
      ],
      "name": "readFirstLocalFileHeader",
      "type": null
     },
     {
      "params": [
       {
        "name": "size",
        "type": "ZipLong"
       },
       {
        "name": "cSize",
        "type": "ZipLong"
       }
      ],
      "name": "processZip64Extra",
      "type": null
     },
     {
      "params": [],
      "name": "getNextEntry",
      "type": "ArchiveEntry"
     },
     {
      "params": [
       {
        "name": "ae",
        "type": "ArchiveEntry"
       }
      ],
      "name": "canReadEntryData",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "readStored",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "readDeflated",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "readFromInflater",
      "type": "int"
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "long"
       }
      ],
      "name": "skip",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "signature",
        "type": "byte"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matches",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "signature",
        "type": "byte"
       },
       {
        "name": "expected",
        "type": "byte"
       }
      ],
      "name": "checksig",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "closeEntry",
      "type": null
     },
     {
      "params": [],
      "name": "drainCurrentEntryData",
      "type": null
     },
     {
      "params": [],
      "name": "getBytesInflated",
      "type": "long"
     },
     {
      "params": [],
      "name": "fill",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       }
      ],
      "name": "readFully",
      "type": null
     },
     {
      "params": [],
      "name": "readDataDescriptor",
      "type": null
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "ZipArchiveEntry"
       }
      ],
      "name": "supportsDataDescriptorFor",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "readStoredEntry",
      "type": null
     },
     {
      "params": [
       {
        "name": "bos",
        "type": "ByteArrayOutputStream"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "lastRead",
        "type": "int"
       },
       {
        "name": "expectedDDLen",
        "type": "int"
       }
      ],
      "name": "bufferContainsSignature",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "bos",
        "type": "ByteArrayOutputStream"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "lastRead",
        "type": "int"
       },
       {
        "name": "expecteDDLen",
        "type": "int"
       }
      ],
      "name": "cacheBytesRead",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "pushback",
      "type": null
     },
     {
      "params": [],
      "name": "skipRemainderOfArchive",
      "type": null
     },
     {
      "params": [],
      "name": "findEocdRecord",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "long"
       }
      ],
      "name": "realSkip",
      "type": null
     },
     {
      "params": [],
      "name": "readOneByte",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "int"
       }
      ],
      "name": "isFirstByteOfEocdSig",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "zipEncoding",
      "type": "ZipEncoding"
     },
     {
      "name": "encoding",
      "type": "String"
     },
     {
      "name": "useUnicodeExtraFields",
      "type": "boolean"
     },
     {
      "name": "in",
      "type": "InputStream"
     },
     {
      "name": "inf",
      "type": "Inflater"
     },
     {
      "name": "buf",
      "type": "ByteBuffer"
     },
     {
      "name": "current",
      "type": "CurrentEntry"
     },
     {
      "name": "closed",
      "type": "boolean"
     },
     {
      "name": "hitCentralDirectory",
      "type": "boolean"
     },
     {
      "name": "lastStoredEntry",
      "type": "ByteArrayInputStream"
     },
     {
      "name": "allowStoredEntriesWithDataDescriptor",
      "type": "boolean"
     },
     {
      "name": "LFH_LEN",
      "type": "int"
     },
     {
      "name": "CFH_LEN",
      "type": "int"
     },
     {
      "name": "TWO_EXP_32",
      "type": "long"
     },
     {
      "name": "LFH_BUF",
      "type": "byte"
     },
     {
      "name": "SKIP_BUF",
      "type": "byte"
     },
     {
      "name": "SHORT_BUF",
      "type": "byte"
     },
     {
      "name": "WORD_BUF",
      "type": "byte"
     },
     {
      "name": "TWO_DWORD_BUF",
      "type": "byte"
     },
     {
      "name": "entriesRead",
      "type": "int"
     },
     {
      "name": "LFH",
      "type": "byte"
     },
     {
      "name": "CFH",
      "type": "byte"
     },
     {
      "name": "DD",
      "type": "byte"
     }
    ],
    "name": "ZipArchiveInputStream"
   }
  ]
 },
 {
  "filename": "X5455_ExtendedTimestamp.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getHeaderId",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getLocalFileDataLength",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getCentralDirectoryLength",
      "type": "ZipShort"
     },
     {
      "params": [],
      "name": "getLocalFileDataData",
      "type": "byte"
     },
     {
      "params": [],
      "name": "getCentralDirectoryData",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseFromLocalFileData",
      "type": null
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseFromCentralDirectoryData",
      "type": null
     },
     {
      "params": [],
      "name": "reset",
      "type": null
     },
     {
      "params": [
       {
        "name": "flags",
        "type": "byte"
       }
      ],
      "name": "setFlags",
      "type": null
     },
     {
      "params": [],
      "name": "getFlags",
      "type": "byte"
     },
     {
      "params": [],
      "name": "isBit0_modifyTimePresent",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isBit1_accessTimePresent",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isBit2_createTimePresent",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getModifyTime",
      "type": "ZipLong"
     },
     {
      "params": [],
      "name": "getAccessTime",
      "type": "ZipLong"
     },
     {
      "params": [],
      "name": "getCreateTime",
      "type": "ZipLong"
     },
     {
      "params": [],
      "name": "getModifyJavaTime",
      "type": "Date"
     },
     {
      "params": [],
      "name": "getAccessJavaTime",
      "type": "Date"
     },
     {
      "params": [],
      "name": "getCreateJavaTime",
      "type": "Date"
     },
     {
      "params": [
       {
        "name": "l",
        "type": "ZipLong"
       }
      ],
      "name": "setModifyTime",
      "type": null
     },
     {
      "params": [
       {
        "name": "l",
        "type": "ZipLong"
       }
      ],
      "name": "setAccessTime",
      "type": null
     },
     {
      "params": [
       {
        "name": "l",
        "type": "ZipLong"
       }
      ],
      "name": "setCreateTime",
      "type": null
     },
     {
      "params": [
       {
        "name": "d",
        "type": "Date"
       }
      ],
      "name": "setModifyJavaTime",
      "type": null
     },
     {
      "params": [
       {
        "name": "d",
        "type": "Date"
       }
      ],
      "name": "setAccessJavaTime",
      "type": null
     },
     {
      "params": [
       {
        "name": "d",
        "type": "Date"
       }
      ],
      "name": "setCreateJavaTime",
      "type": null
     },
     {
      "params": [
       {
        "name": "d",
        "type": "Date"
       }
      ],
      "name": "dateToZipLong",
      "type": "ZipLong"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [],
      "name": "clone",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "o",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "HEADER_ID",
      "type": "ZipShort"
     },
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "MODIFY_TIME_BIT",
      "type": "byte"
     },
     {
      "name": "ACCESS_TIME_BIT",
      "type": "byte"
     },
     {
      "name": "CREATE_TIME_BIT",
      "type": "byte"
     },
     {
      "name": "flags",
      "type": "byte"
     },
     {
      "name": "bit0_modifyTimePresent",
      "type": "boolean"
     },
     {
      "name": "bit1_accessTimePresent",
      "type": "boolean"
     },
     {
      "name": "bit2_createTimePresent",
      "type": "boolean"
     },
     {
      "name": "modifyTime",
      "type": "ZipLong"
     },
     {
      "name": "accessTime",
      "type": "ZipLong"
     },
     {
      "name": "createTime",
      "type": "ZipLong"
     }
    ],
    "name": "X5455_ExtendedTimestamp"
   }
  ]
 },
 {
  "filename": "UnicodePathExtraField.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getHeaderId",
      "type": "ZipShort"
     }
    ],
    "fields": [
     {
      "name": "UPATH_ID",
      "type": "ZipShort"
     }
    ],
    "name": "UnicodePathExtraField"
   }
  ]
 },
 {
  "filename": "StreamCompressor.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "os",
        "type": "OutputStream"
       },
       {
        "name": "deflater",
        "type": "Deflater"
       }
      ],
      "name": "create",
      "type": "StreamCompressor"
     },
     {
      "params": [
       {
        "name": "os",
        "type": "OutputStream"
       }
      ],
      "name": "create",
      "type": "StreamCompressor"
     },
     {
      "params": [
       {
        "name": "os",
        "type": "DataOutput"
       },
       {
        "name": "deflater",
        "type": "Deflater"
       }
      ],
      "name": "create",
      "type": "StreamCompressor"
     },
     {
      "params": [
       {
        "name": "compressionLevel",
        "type": "int"
       },
       {
        "name": "bs",
        "type": "ScatterGatherBackingStore"
       }
      ],
      "name": "create",
      "type": "StreamCompressor"
     },
     {
      "params": [
       {
        "name": "bs",
        "type": "ScatterGatherBackingStore"
       }
      ],
      "name": "create",
      "type": "StreamCompressor"
     },
     {
      "params": [],
      "name": "getCrc32",
      "type": "long"
     },
     {
      "params": [],
      "name": "getBytesRead",
      "type": "long"
     },
     {
      "params": [],
      "name": "getBytesWrittenForLastEntry",
      "type": "long"
     },
     {
      "params": [],
      "name": "getTotalBytesWritten",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "source",
        "type": "InputStream"
       },
       {
        "name": "method",
        "type": "int"
       }
      ],
      "name": "deflate",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       },
       {
        "name": "method",
        "type": "int"
       }
      ],
      "name": "write",
      "type": "long"
     },
     {
      "params": [],
      "name": "reset",
      "type": null
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [],
      "name": "flushDeflater",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "writeDeflated",
      "type": null
     },
     {
      "params": [],
      "name": "deflateUntilInputIsNeeded",
      "type": null
     },
     {
      "params": [],
      "name": "deflate",
      "type": null
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       }
      ],
      "name": "writeCounted",
      "type": null
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "writeCounted",
      "type": null
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "writeOut",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "DEFLATER_BLOCK_SIZE",
      "type": "int"
     },
     {
      "name": "def",
      "type": "Deflater"
     },
     {
      "name": "crc",
      "type": "CRC32"
     },
     {
      "name": "writtenToOutputStreamForLastEntry",
      "type": "long"
     },
     {
      "name": "sourcePayloadLength",
      "type": "long"
     },
     {
      "name": "totalWrittenToOutputStream",
      "type": "long"
     },
     {
      "name": "bufferSize",
      "type": "int"
     },
     {
      "name": "outputBuffer",
      "type": "byte"
     },
     {
      "name": "readerBuf",
      "type": "byte"
     }
    ],
    "name": "StreamCompressor"
   }
  ]
 },
 {
  "filename": "ZipEightByteInteger.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getBytes",
      "type": "byte"
     },
     {
      "params": [],
      "name": "getLongValue",
      "type": "long"
     },
     {
      "params": [],
      "name": "getValue",
      "type": "BigInteger"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "long"
       }
      ],
      "name": "getBytes",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "BigInteger"
       }
      ],
      "name": "getBytes",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "bytes",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "getLongValue",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "bytes",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "getValue",
      "type": "BigInteger"
     },
     {
      "params": [
       {
        "name": "bytes",
        "type": "byte"
       }
      ],
      "name": "getLongValue",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "bytes",
        "type": "byte"
       }
      ],
      "name": "getValue",
      "type": "BigInteger"
     },
     {
      "params": [
       {
        "name": "o",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "BYTE_1",
      "type": "int"
     },
     {
      "name": "BYTE_1_MASK",
      "type": "int"
     },
     {
      "name": "BYTE_1_SHIFT",
      "type": "int"
     },
     {
      "name": "BYTE_2",
      "type": "int"
     },
     {
      "name": "BYTE_2_MASK",
      "type": "int"
     },
     {
      "name": "BYTE_2_SHIFT",
      "type": "int"
     },
     {
      "name": "BYTE_3",
      "type": "int"
     },
     {
      "name": "BYTE_3_MASK",
      "type": "long"
     },
     {
      "name": "BYTE_3_SHIFT",
      "type": "int"
     },
     {
      "name": "BYTE_4",
      "type": "int"
     },
     {
      "name": "BYTE_4_MASK",
      "type": "long"
     },
     {
      "name": "BYTE_4_SHIFT",
      "type": "int"
     },
     {
      "name": "BYTE_5",
      "type": "int"
     },
     {
      "name": "BYTE_5_MASK",
      "type": "long"
     },
     {
      "name": "BYTE_5_SHIFT",
      "type": "int"
     },
     {
      "name": "BYTE_6",
      "type": "int"
     },
     {
      "name": "BYTE_6_MASK",
      "type": "long"
     },
     {
      "name": "BYTE_6_SHIFT",
      "type": "int"
     },
     {
      "name": "BYTE_7",
      "type": "int"
     },
     {
      "name": "BYTE_7_MASK",
      "type": "long"
     },
     {
      "name": "BYTE_7_SHIFT",
      "type": "int"
     },
     {
      "name": "LEFTMOST_BIT_SHIFT",
      "type": "int"
     },
     {
      "name": "LEFTMOST_BIT",
      "type": "byte"
     },
     {
      "name": "value",
      "type": "BigInteger"
     },
     {
      "name": "ZERO",
      "type": "ZipEightByteInteger"
     }
    ],
    "name": "ZipEightByteInteger"
   }
  ]
 },
 {
  "filename": "BitStream.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "nextBit",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "int"
       }
      ],
      "name": "nextBits",
      "type": "long"
     },
     {
      "params": [],
      "name": "nextByte",
      "type": "int"
     }
    ],
    "fields": [],
    "name": "BitStream"
   }
  ]
 },
 {
  "filename": "ScatterStatistics.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getCompressionElapsed",
      "type": "long"
     },
     {
      "params": [],
      "name": "getMergingElapsed",
      "type": "long"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "compressionElapsed",
      "type": "long"
     },
     {
      "name": "mergingElapsed",
      "type": "long"
     }
    ],
    "name": "ScatterStatistics"
   }
  ]
 },
 {
  "filename": "UnixStat.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "PERM_MASK",
      "type": "int"
     },
     {
      "name": "LINK_FLAG",
      "type": "int"
     },
     {
      "name": "FILE_FLAG",
      "type": "int"
     },
     {
      "name": "DIR_FLAG",
      "type": "int"
     },
     {
      "name": "DEFAULT_LINK_PERM",
      "type": "int"
     },
     {
      "name": "DEFAULT_DIR_PERM",
      "type": "int"
     },
     {
      "name": "DEFAULT_FILE_PERM",
      "type": "int"
     }
    ],
    "name": "UnixStat"
   }
  ]
 },
 {
  "filename": "ExtraFieldUtils.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "c",
        "type": "Class"
       }
      ],
      "name": "register",
      "type": null
     },
     {
      "params": [
       {
        "name": "headerId",
        "type": "ZipShort"
       }
      ],
      "name": "createExtraField",
      "type": "ZipExtraField"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       }
      ],
      "name": "parse",
      "type": "ZipExtraField"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       },
       {
        "name": "local",
        "type": "boolean"
       }
      ],
      "name": "parse",
      "type": "ZipExtraField"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       },
       {
        "name": "local",
        "type": "boolean"
       },
       {
        "name": "onUnparseableData",
        "type": "UnparseableExtraField"
       }
      ],
      "name": "parse",
      "type": "ZipExtraField"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "ZipExtraField"
       }
      ],
      "name": "mergeLocalFileDataData",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "ZipExtraField"
       }
      ],
      "name": "mergeCentralDirectoryData",
      "type": "byte"
     }
    ],
    "fields": [
     {
      "name": "WORD",
      "type": "int"
     },
     {
      "name": "implementations",
      "type": "Map"
     }
    ],
    "name": "ExtraFieldUtils"
   }
  ]
 },
 {
  "filename": "ZipEncoding.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "canEncode",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "encode",
      "type": "ByteBuffer"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       }
      ],
      "name": "decode",
      "type": "String"
     }
    ],
    "fields": [],
    "name": "ZipEncoding"
   }
  ]
 },
 {
  "filename": "ZipArchiveEntry.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "clone",
      "type": "Object"
     },
     {
      "params": [],
      "name": "getMethod",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "method",
        "type": "int"
       }
      ],
      "name": "setMethod",
      "type": null
     },
     {
      "params": [],
      "name": "getInternalAttributes",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "int"
       }
      ],
      "name": "setInternalAttributes",
      "type": null
     },
     {
      "params": [],
      "name": "getExternalAttributes",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "long"
       }
      ],
      "name": "setExternalAttributes",
      "type": null
     },
     {
      "params": [
       {
        "name": "mode",
        "type": "int"
       }
      ],
      "name": "setUnixMode",
      "type": null
     },
     {
      "params": [],
      "name": "getUnixMode",
      "type": "int"
     },
     {
      "params": [],
      "name": "isUnixSymlink",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getPlatform",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "platform",
        "type": "int"
       }
      ],
      "name": "setPlatform",
      "type": null
     },
     {
      "params": [
       {
        "name": "fields",
        "type": "ZipExtraField"
       }
      ],
      "name": "setExtraFields",
      "type": null
     },
     {
      "params": [],
      "name": "getExtraFields",
      "type": "ZipExtraField"
     },
     {
      "params": [
       {
        "name": "includeUnparseable",
        "type": "boolean"
       }
      ],
      "name": "getExtraFields",
      "type": "ZipExtraField"
     },
     {
      "params": [],
      "name": "getParseableExtraFieldsNoCopy",
      "type": "ZipExtraField"
     },
     {
      "params": [],
      "name": "getParseableExtraFields",
      "type": "ZipExtraField"
     },
     {
      "params": [],
      "name": "getAllExtraFieldsNoCopy",
      "type": "ZipExtraField"
     },
     {
      "params": [
       {
        "name": "src",
        "type": "ZipExtraField"
       }
      ],
      "name": "copyOf",
      "type": "ZipExtraField"
     },
     {
      "params": [
       {
        "name": "src",
        "type": "ZipExtraField"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "copyOf",
      "type": "ZipExtraField"
     },
     {
      "params": [],
      "name": "getMergedFields",
      "type": "ZipExtraField"
     },
     {
      "params": [],
      "name": "getUnparseableOnly",
      "type": "ZipExtraField"
     },
     {
      "params": [],
      "name": "getAllExtraFields",
      "type": "ZipExtraField"
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipExtraField"
       }
      ],
      "name": "addExtraField",
      "type": null
     },
     {
      "params": [
       {
        "name": "ze",
        "type": "ZipExtraField"
       }
      ],
      "name": "addAsFirstExtraField",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "ZipShort"
       }
      ],
      "name": "removeExtraField",
      "type": null
     },
     {
      "params": [],
      "name": "removeUnparseableExtraFieldData",
      "type": null
     },
     {
      "params": [
       {
        "name": "type",
        "type": "ZipShort"
       }
      ],
      "name": "getExtraField",
      "type": "ZipExtraField"
     },
     {
      "params": [],
      "name": "getUnparseableExtraFieldData",
      "type": "UnparseableExtraFieldData"
     },
     {
      "params": [
       {
        "name": "extra",
        "type": "byte"
       }
      ],
      "name": "setExtra",
      "type": null
     },
     {
      "params": [],
      "name": "setExtra",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       }
      ],
      "name": "setCentralDirectoryExtra",
      "type": null
     },
     {
      "params": [],
      "name": "getLocalFileDataExtra",
      "type": "byte"
     },
     {
      "params": [],
      "name": "getCentralDirectoryExtra",
      "type": "byte"
     },
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "isDirectory",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "setName",
      "type": null
     },
     {
      "params": [],
      "name": "getSize",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "size",
        "type": "long"
       }
      ],
      "name": "setSize",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "rawName",
        "type": "byte"
       }
      ],
      "name": "setName",
      "type": null
     },
     {
      "params": [],
      "name": "getRawName",
      "type": "byte"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [],
      "name": "getGeneralPurposeBit",
      "type": "GeneralPurposeBit"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "GeneralPurposeBit"
       }
      ],
      "name": "setGeneralPurposeBit",
      "type": null
     },
     {
      "params": [
       {
        "name": "f",
        "type": "ZipExtraField"
       },
       {
        "name": "local",
        "type": "boolean"
       }
      ],
      "name": "mergeExtraFields",
      "type": null
     },
     {
      "params": [],
      "name": "getLastModifiedDate",
      "type": "Date"
     },
     {
      "params": [
       {
        "name": "obj",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "PLATFORM_UNIX",
      "type": "int"
     },
     {
      "name": "PLATFORM_FAT",
      "type": "int"
     },
     {
      "name": "CRC_UNKNOWN",
      "type": "int"
     },
     {
      "name": "SHORT_MASK",
      "type": "int"
     },
     {
      "name": "SHORT_SHIFT",
      "type": "int"
     },
     {
      "name": "EMPTY",
      "type": "byte"
     },
     {
      "name": "method",
      "type": "int"
     },
     {
      "name": "size",
      "type": "long"
     },
     {
      "name": "internalAttributes",
      "type": "int"
     },
     {
      "name": "platform",
      "type": "int"
     },
     {
      "name": "externalAttributes",
      "type": "long"
     },
     {
      "name": "extraFields",
      "type": "ZipExtraField"
     },
     {
      "name": "unparseableExtra",
      "type": "UnparseableExtraFieldData"
     },
     {
      "name": "name",
      "type": "String"
     },
     {
      "name": "rawName",
      "type": "byte"
     },
     {
      "name": "gpb",
      "type": "GeneralPurposeBit"
     },
     {
      "name": "noExtraFields",
      "type": "ZipExtraField"
     }
    ],
    "name": "ZipArchiveEntry"
   }
  ]
 },
 {
  "filename": "ExplodingInputStream.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "init",
      "type": null
     },
     {
      "params": [],
      "name": "read",
      "type": "int"
     },
     {
      "params": [],
      "name": "fillBuffer",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "in",
      "type": "InputStream"
     },
     {
      "name": "bits",
      "type": "BitStream"
     },
     {
      "name": "dictionarySize",
      "type": "int"
     },
     {
      "name": "numberOfTrees",
      "type": "int"
     },
     {
      "name": "minimumMatchLength",
      "type": "int"
     },
     {
      "name": "literalTree",
      "type": "BinaryTree"
     },
     {
      "name": "lengthTree",
      "type": "BinaryTree"
     },
     {
      "name": "distanceTree",
      "type": "BinaryTree"
     },
     {
      "name": "buffer",
      "type": "CircularBuffer"
     }
    ],
    "name": "ExplodingInputStream"
   }
  ]
 },
 {
  "filename": "ZipConstants.java",
  "package_name": "org.apache.commons.compress.archivers.zip",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "BYTE_MASK",
      "type": "int"
     },
     {
      "name": "SHORT",
      "type": "int"
     },
     {
      "name": "WORD",
      "type": "int"
     },
     {
      "name": "DWORD",
      "type": "int"
     },
     {
      "name": "INITIAL_VERSION",
      "type": "int"
     },
     {
      "name": "DATA_DESCRIPTOR_MIN_VERSION",
      "type": "int"
     },
     {
      "name": "ZIP64_MIN_VERSION",
      "type": "int"
     },
     {
      "name": "ZIP64_MAGIC_SHORT",
      "type": "int"
     },
     {
      "name": "ZIP64_MAGIC",
      "type": "long"
     }
    ],
    "name": "ZipConstants"
   }
  ]
 },
 {
  "filename": "CpioArchiveEntry.java",
  "package_name": "org.apache.commons.compress.archivers.cpio",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "checkNewFormat",
      "type": null
     },
     {
      "params": [],
      "name": "checkOldFormat",
      "type": null
     },
     {
      "params": [],
      "name": "getChksum",
      "type": "long"
     },
     {
      "params": [],
      "name": "getDevice",
      "type": "long"
     },
     {
      "params": [],
      "name": "getDeviceMaj",
      "type": "long"
     },
     {
      "params": [],
      "name": "getDeviceMin",
      "type": "long"
     },
     {
      "params": [],
      "name": "getSize",
      "type": "long"
     },
     {
      "params": [],
      "name": "getFormat",
      "type": "short"
     },
     {
      "params": [],
      "name": "getGID",
      "type": "long"
     },
     {
      "params": [],
      "name": "getHeaderSize",
      "type": "int"
     },
     {
      "params": [],
      "name": "getAlignmentBoundary",
      "type": "int"
     },
     {
      "params": [],
      "name": "getHeaderPadCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "getDataPadCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "getInode",
      "type": "long"
     },
     {
      "params": [],
      "name": "getMode",
      "type": "long"
     },
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getNumberOfLinks",
      "type": "long"
     },
     {
      "params": [],
      "name": "getRemoteDevice",
      "type": "long"
     },
     {
      "params": [],
      "name": "getRemoteDeviceMaj",
      "type": "long"
     },
     {
      "params": [],
      "name": "getRemoteDeviceMin",
      "type": "long"
     },
     {
      "params": [],
      "name": "getTime",
      "type": "long"
     },
     {
      "params": [],
      "name": "getLastModifiedDate",
      "type": "Date"
     },
     {
      "params": [],
      "name": "getUID",
      "type": "long"
     },
     {
      "params": [],
      "name": "isBlockDevice",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isCharacterDevice",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isDirectory",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNetwork",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isPipe",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isRegularFile",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isSocket",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isSymbolicLink",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "chksum",
        "type": "long"
       }
      ],
      "name": "setChksum",
      "type": null
     },
     {
      "params": [
       {
        "name": "device",
        "type": "long"
       }
      ],
      "name": "setDevice",
      "type": null
     },
     {
      "params": [
       {
        "name": "maj",
        "type": "long"
       }
      ],
      "name": "setDeviceMaj",
      "type": null
     },
     {
      "params": [
       {
        "name": "min",
        "type": "long"
       }
      ],
      "name": "setDeviceMin",
      "type": null
     },
     {
      "params": [
       {
        "name": "size",
        "type": "long"
       }
      ],
      "name": "setSize",
      "type": null
     },
     {
      "params": [
       {
        "name": "gid",
        "type": "long"
       }
      ],
      "name": "setGID",
      "type": null
     },
     {
      "params": [
       {
        "name": "inode",
        "type": "long"
       }
      ],
      "name": "setInode",
      "type": null
     },
     {
      "params": [
       {
        "name": "mode",
        "type": "long"
       }
      ],
      "name": "setMode",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "setName",
      "type": null
     },
     {
      "params": [
       {
        "name": "nlink",
        "type": "long"
       }
      ],
      "name": "setNumberOfLinks",
      "type": null
     },
     {
      "params": [
       {
        "name": "device",
        "type": "long"
       }
      ],
      "name": "setRemoteDevice",
      "type": null
     },
     {
      "params": [
       {
        "name": "rmaj",
        "type": "long"
       }
      ],
      "name": "setRemoteDeviceMaj",
      "type": null
     },
     {
      "params": [
       {
        "name": "rmin",
        "type": "long"
       }
      ],
      "name": "setRemoteDeviceMin",
      "type": null
     },
     {
      "params": [
       {
        "name": "time",
        "type": "long"
       }
      ],
      "name": "setTime",
      "type": null
     },
     {
      "params": [
       {
        "name": "uid",
        "type": "long"
       }
      ],
      "name": "setUID",
      "type": null
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "obj",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "fileFormat",
      "type": "short"
     },
     {
      "name": "headerSize",
      "type": "int"
     },
     {
      "name": "alignmentBoundary",
      "type": "int"
     },
     {
      "name": "chksum",
      "type": "long"
     },
     {
      "name": "filesize",
      "type": "long"
     },
     {
      "name": "gid",
      "type": "long"
     },
     {
      "name": "inode",
      "type": "long"
     },
     {
      "name": "maj",
      "type": "long"
     },
     {
      "name": "min",
      "type": "long"
     },
     {
      "name": "mode",
      "type": "long"
     },
     {
      "name": "mtime",
      "type": "long"
     },
     {
      "name": "name",
      "type": "String"
     },
     {
      "name": "nlink",
      "type": "long"
     },
     {
      "name": "rmaj",
      "type": "long"
     },
     {
      "name": "rmin",
      "type": "long"
     },
     {
      "name": "uid",
      "type": "long"
     }
    ],
    "name": "CpioArchiveEntry"
   }
  ]
 },
 {
  "filename": "CpioConstants.java",
  "package_name": "org.apache.commons.compress.archivers.cpio",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "MAGIC_NEW",
      "type": "String"
     },
     {
      "name": "MAGIC_NEW_CRC",
      "type": "String"
     },
     {
      "name": "MAGIC_OLD_ASCII",
      "type": "String"
     },
     {
      "name": "MAGIC_OLD_BINARY",
      "type": "int"
     },
     {
      "name": "FORMAT_NEW",
      "type": "short"
     },
     {
      "name": "FORMAT_NEW_CRC",
      "type": "short"
     },
     {
      "name": "FORMAT_OLD_ASCII",
      "type": "short"
     },
     {
      "name": "FORMAT_OLD_BINARY",
      "type": "short"
     },
     {
      "name": "FORMAT_NEW_MASK",
      "type": "short"
     },
     {
      "name": "FORMAT_OLD_MASK",
      "type": "short"
     },
     {
      "name": "S_IFMT",
      "type": "int"
     },
     {
      "name": "C_ISSOCK",
      "type": "int"
     },
     {
      "name": "C_ISLNK",
      "type": "int"
     },
     {
      "name": "C_ISNWK",
      "type": "int"
     },
     {
      "name": "C_ISREG",
      "type": "int"
     },
     {
      "name": "C_ISBLK",
      "type": "int"
     },
     {
      "name": "C_ISDIR",
      "type": "int"
     },
     {
      "name": "C_ISCHR",
      "type": "int"
     },
     {
      "name": "C_ISFIFO",
      "type": "int"
     },
     {
      "name": "C_ISUID",
      "type": "int"
     },
     {
      "name": "C_ISGID",
      "type": "int"
     },
     {
      "name": "C_ISVTX",
      "type": "int"
     },
     {
      "name": "C_IRUSR",
      "type": "int"
     },
     {
      "name": "C_IWUSR",
      "type": "int"
     },
     {
      "name": "C_IXUSR",
      "type": "int"
     },
     {
      "name": "C_IRGRP",
      "type": "int"
     },
     {
      "name": "C_IWGRP",
      "type": "int"
     },
     {
      "name": "C_IXGRP",
      "type": "int"
     },
     {
      "name": "C_IROTH",
      "type": "int"
     },
     {
      "name": "C_IWOTH",
      "type": "int"
     },
     {
      "name": "C_IXOTH",
      "type": "int"
     },
     {
      "name": "CPIO_TRAILER",
      "type": "String"
     },
     {
      "name": "BLOCK_SIZE",
      "type": "int"
     }
    ],
    "name": "CpioConstants"
   }
  ]
 },
 {
  "filename": "CpioArchiveOutputStream.java",
  "package_name": "org.apache.commons.compress.archivers.cpio",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "ensureOpen",
      "type": null
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "ArchiveEntry"
       }
      ],
      "name": "putArchiveEntry",
      "type": null
     },
     {
      "params": [
       {
        "name": "e",
        "type": "CpioArchiveEntry"
       }
      ],
      "name": "writeHeader",
      "type": null
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "CpioArchiveEntry"
       }
      ],
      "name": "writeNewEntry",
      "type": null
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "CpioArchiveEntry"
       }
      ],
      "name": "writeOldAsciiEntry",
      "type": null
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "CpioArchiveEntry"
       },
       {
        "name": "swapHalfWord",
        "type": "boolean"
       }
      ],
      "name": "writeOldBinaryEntry",
      "type": null
     },
     {
      "params": [],
      "name": "closeArchiveEntry",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [],
      "name": "finish",
      "type": null
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [
       {
        "name": "count",
        "type": "int"
       }
      ],
      "name": "pad",
      "type": null
     },
     {
      "params": [
       {
        "name": "number",
        "type": "long"
       },
       {
        "name": "length",
        "type": "int"
       },
       {
        "name": "swapHalfWord",
        "type": "boolean"
       }
      ],
      "name": "writeBinaryLong",
      "type": null
     },
     {
      "params": [
       {
        "name": "number",
        "type": "long"
       },
       {
        "name": "length",
        "type": "int"
       },
       {
        "name": "radix",
        "type": "int"
       }
      ],
      "name": "writeAsciiLong",
      "type": null
     },
     {
      "params": [
       {
        "name": "str",
        "type": "String"
       }
      ],
      "name": "writeCString",
      "type": null
     },
     {
      "params": [
       {
        "name": "inputFile",
        "type": "File"
       },
       {
        "name": "entryName",
        "type": "String"
       }
      ],
      "name": "createArchiveEntry",
      "type": "ArchiveEntry"
     }
    ],
    "fields": [
     {
      "name": "entry",
      "type": "CpioArchiveEntry"
     },
     {
      "name": "closed",
      "type": "boolean"
     },
     {
      "name": "finished",
      "type": "boolean"
     },
     {
      "name": "entryFormat",
      "type": "short"
     },
     {
      "name": "names",
      "type": "HashMap"
     },
     {
      "name": "crc",
      "type": "long"
     },
     {
      "name": "written",
      "type": "long"
     },
     {
      "name": "out",
      "type": "OutputStream"
     },
     {
      "name": "blockSize",
      "type": "int"
     },
     {
      "name": "nextArtificalDeviceAndInode",
      "type": "long"
     },
     {
      "name": "zipEncoding",
      "type": "ZipEncoding"
     },
     {
      "name": "encoding",
      "type": "String"
     }
    ],
    "name": "CpioArchiveOutputStream"
   }
  ]
 },
 {
  "filename": "CpioUtil.java",
  "package_name": "org.apache.commons.compress.archivers.cpio",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "mode",
        "type": "long"
       }
      ],
      "name": "fileType",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "number",
        "type": "byte"
       },
       {
        "name": "swapHalfWord",
        "type": "boolean"
       }
      ],
      "name": "byteArray2long",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "number",
        "type": "long"
       },
       {
        "name": "length",
        "type": "int"
       },
       {
        "name": "swapHalfWord",
        "type": "boolean"
       }
      ],
      "name": "long2byteArray",
      "type": "byte"
     }
    ],
    "fields": [],
    "name": "CpioUtil"
   }
  ]
 },
 {
  "filename": "CpioArchiveInputStream.java",
  "package_name": "org.apache.commons.compress.archivers.cpio",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "available",
      "type": "int"
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [],
      "name": "closeEntry",
      "type": null
     },
     {
      "params": [],
      "name": "ensureOpen",
      "type": null
     },
     {
      "params": [],
      "name": "getNextCPIOEntry",
      "type": "CpioArchiveEntry"
     },
     {
      "params": [
       {
        "name": "bytes",
        "type": "int"
       }
      ],
      "name": "skip",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "readFully",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "length",
        "type": "int"
       },
       {
        "name": "swapHalfWord",
        "type": "boolean"
       }
      ],
      "name": "readBinaryLong",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "length",
        "type": "int"
       },
       {
        "name": "radix",
        "type": "int"
       }
      ],
      "name": "readAsciiLong",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "hasCrc",
        "type": "boolean"
       }
      ],
      "name": "readNewEntry",
      "type": "CpioArchiveEntry"
     },
     {
      "params": [],
      "name": "readOldAsciiEntry",
      "type": "CpioArchiveEntry"
     },
     {
      "params": [
       {
        "name": "swapHalfWord",
        "type": "boolean"
       }
      ],
      "name": "readOldBinaryEntry",
      "type": "CpioArchiveEntry"
     },
     {
      "params": [
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "readCString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "long"
       }
      ],
      "name": "skip",
      "type": "long"
     },
     {
      "params": [],
      "name": "getNextEntry",
      "type": "ArchiveEntry"
     },
     {
      "params": [],
      "name": "skipRemainderOfLastBlock",
      "type": null
     },
     {
      "params": [
       {
        "name": "signature",
        "type": "byte"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matches",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "closed",
      "type": "boolean"
     },
     {
      "name": "entry",
      "type": "CpioArchiveEntry"
     },
     {
      "name": "entryBytesRead",
      "type": "long"
     },
     {
      "name": "entryEOF",
      "type": "boolean"
     },
     {
      "name": "tmpbuf",
      "type": "byte"
     },
     {
      "name": "crc",
      "type": "long"
     },
     {
      "name": "in",
      "type": "InputStream"
     },
     {
      "name": "TWO_BYTES_BUF",
      "type": "byte"
     },
     {
      "name": "FOUR_BYTES_BUF",
      "type": "byte"
     },
     {
      "name": "SIX_BYTES_BUF",
      "type": "byte"
     },
     {
      "name": "blockSize",
      "type": "int"
     },
     {
      "name": "zipEncoding",
      "type": "ZipEncoding"
     },
     {
      "name": "encoding",
      "type": "String"
     }
    ],
    "name": "CpioArchiveInputStream"
   }
  ]
 },
 {
  "filename": "TarArchiveSparseEntry.java",
  "package_name": "org.apache.commons.compress.archivers.tar",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "isExtended",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "isExtended",
      "type": "boolean"
     }
    ],
    "name": "TarArchiveSparseEntry"
   }
  ]
 },
 {
  "filename": "TarArchiveInputStream.java",
  "package_name": "org.apache.commons.compress.archivers.tar",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [],
      "name": "getRecordSize",
      "type": "int"
     },
     {
      "params": [],
      "name": "available",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "long"
       }
      ],
      "name": "skip",
      "type": "long"
     },
     {
      "params": [],
      "name": "markSupported",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "markLimit",
        "type": "int"
       }
      ],
      "name": "mark",
      "type": null
     },
     {
      "params": [],
      "name": "reset",
      "type": null
     },
     {
      "params": [],
      "name": "getNextTarEntry",
      "type": "TarArchiveEntry"
     },
     {
      "params": [],
      "name": "skipRecordPadding",
      "type": null
     },
     {
      "params": [],
      "name": "getLongNameData",
      "type": "byte"
     },
     {
      "params": [],
      "name": "getRecord",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "record",
        "type": "byte"
       }
      ],
      "name": "isEOFRecord",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "readRecord",
      "type": "byte"
     },
     {
      "params": [],
      "name": "paxHeaders",
      "type": null
     },
     {
      "params": [
       {
        "name": "i",
        "type": "InputStream"
       }
      ],
      "name": "parsePaxHeaders",
      "type": "Map"
     },
     {
      "params": [
       {
        "name": "headers",
        "type": "Map"
       }
      ],
      "name": "applyPaxHeadersToCurrentEntry",
      "type": null
     },
     {
      "params": [],
      "name": "readGNUSparse",
      "type": null
     },
     {
      "params": [],
      "name": "getNextEntry",
      "type": "ArchiveEntry"
     },
     {
      "params": [],
      "name": "tryToConsumeSecondEOFRecord",
      "type": null
     },
     {
      "params": [
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "numToRead",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "ae",
        "type": "ArchiveEntry"
       }
      ],
      "name": "canReadEntryData",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getCurrentEntry",
      "type": "TarArchiveEntry"
     },
     {
      "params": [
       {
        "name": "e",
        "type": "TarArchiveEntry"
       }
      ],
      "name": "setCurrentEntry",
      "type": null
     },
     {
      "params": [],
      "name": "isAtEOF",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "boolean"
       }
      ],
      "name": "setAtEOF",
      "type": null
     },
     {
      "params": [],
      "name": "consumeRemainderOfLastBlock",
      "type": null
     },
     {
      "params": [
       {
        "name": "signature",
        "type": "byte"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matches",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "SMALL_BUFFER_SIZE",
      "type": "int"
     },
     {
      "name": "SMALL_BUF",
      "type": "byte"
     },
     {
      "name": "recordSize",
      "type": "int"
     },
     {
      "name": "blockSize",
      "type": "int"
     },
     {
      "name": "hasHitEOF",
      "type": "boolean"
     },
     {
      "name": "entrySize",
      "type": "long"
     },
     {
      "name": "entryOffset",
      "type": "long"
     },
     {
      "name": "is",
      "type": "InputStream"
     },
     {
      "name": "currEntry",
      "type": "TarArchiveEntry"
     },
     {
      "name": "zipEncoding",
      "type": "ZipEncoding"
     },
     {
      "name": "encoding",
      "type": "String"
     }
    ],
    "name": "TarArchiveInputStream"
   }
  ]
 },
 {
  "filename": "TarUtils.java",
  "package_name": "org.apache.commons.compress.archivers.tar",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseOctal",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseOctalOrBinary",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       },
       {
        "name": "negative",
        "type": "boolean"
       }
      ],
      "name": "parseBinaryLong",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       },
       {
        "name": "negative",
        "type": "boolean"
       }
      ],
      "name": "parseBinaryBigInteger",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "parseBoolean",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       },
       {
        "name": "current",
        "type": "int"
       },
       {
        "name": "currentByte",
        "type": "byte"
       }
      ],
      "name": "exceptionMessage",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "parseName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       },
       {
        "name": "encoding",
        "type": "ZipEncoding"
       }
      ],
      "name": "parseName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "formatNameBytes",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       },
       {
        "name": "encoding",
        "type": "ZipEncoding"
       }
      ],
      "name": "formatNameBytes",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "long"
       },
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "formatUnsignedOctalString",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "long"
       },
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "formatOctalBytes",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "long"
       },
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "formatLongOctalBytes",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "long"
       },
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "formatLongOctalOrBinaryBytes",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "value",
        "type": "long"
       },
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       },
       {
        "name": "negative",
        "type": "boolean"
       }
      ],
      "name": "formatLongBinary",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "long"
       },
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       },
       {
        "name": "negative",
        "type": "boolean"
       }
      ],
      "name": "formatBigIntegerBinary",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "long"
       },
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "formatCheckSumOctalBytes",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "buf",
        "type": "byte"
       }
      ],
      "name": "computeCheckSum",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "header",
        "type": "byte"
       }
      ],
      "name": "verifyCheckSum",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "BYTE_MASK",
      "type": "int"
     },
     {
      "name": "DEFAULT_ENCODING",
      "type": "ZipEncoding"
     },
     {
      "name": "FALLBACK_ENCODING",
      "type": "ZipEncoding"
     }
    ],
    "name": "TarUtils"
   }
  ]
 },
 {
  "filename": "TarArchiveOutputStream.java",
  "package_name": "org.apache.commons.compress.archivers.tar",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "longFileMode",
        "type": "int"
       }
      ],
      "name": "setLongFileMode",
      "type": null
     },
     {
      "params": [
       {
        "name": "bigNumberMode",
        "type": "int"
       }
      ],
      "name": "setBigNumberMode",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "boolean"
       }
      ],
      "name": "setAddPaxHeadersForNonAsciiNames",
      "type": null
     },
     {
      "params": [],
      "name": "getCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "getBytesWritten",
      "type": "long"
     },
     {
      "params": [],
      "name": "finish",
      "type": null
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [],
      "name": "getRecordSize",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "archiveEntry",
        "type": "ArchiveEntry"
       }
      ],
      "name": "putArchiveEntry",
      "type": null
     },
     {
      "params": [],
      "name": "closeArchiveEntry",
      "type": null
     },
     {
      "params": [
       {
        "name": "wBuf",
        "type": "byte"
       },
       {
        "name": "wOffset",
        "type": "int"
       },
       {
        "name": "numToWrite",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "TarArchiveEntry"
       },
       {
        "name": "entryName",
        "type": "String"
       },
       {
        "name": "headers",
        "type": "Map"
       }
      ],
      "name": "writePaxHeaders",
      "type": null
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "stripTo7Bits",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "char"
       }
      ],
      "name": "shouldBeReplaced",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "writeEOFRecord",
      "type": null
     },
     {
      "params": [],
      "name": "flush",
      "type": null
     },
     {
      "params": [
       {
        "name": "inputFile",
        "type": "File"
       },
       {
        "name": "entryName",
        "type": "String"
       }
      ],
      "name": "createArchiveEntry",
      "type": "ArchiveEntry"
     },
     {
      "params": [
       {
        "name": "record",
        "type": "byte"
       }
      ],
      "name": "writeRecord",
      "type": null
     },
     {
      "params": [
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "writeRecord",
      "type": null
     },
     {
      "params": [],
      "name": "padAsNeeded",
      "type": null
     },
     {
      "params": [
       {
        "name": "paxHeaders",
        "type": "Map"
       },
       {
        "name": "entry",
        "type": "TarArchiveEntry"
       }
      ],
      "name": "addPaxHeadersForBigNumbers",
      "type": null
     },
     {
      "params": [
       {
        "name": "paxHeaders",
        "type": "Map"
       },
       {
        "name": "header",
        "type": "String"
       },
       {
        "name": "value",
        "type": "long"
       },
       {
        "name": "maxValue",
        "type": "long"
       }
      ],
      "name": "addPaxHeaderForBigNumber",
      "type": null
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "TarArchiveEntry"
       }
      ],
      "name": "failForBigNumbers",
      "type": null
     },
     {
      "params": [
       {
        "name": "field",
        "type": "String"
       },
       {
        "name": "value",
        "type": "long"
       },
       {
        "name": "maxValue",
        "type": "long"
       }
      ],
      "name": "failForBigNumber",
      "type": null
     },
     {
      "params": [
       {
        "name": "field",
        "type": "String"
       },
       {
        "name": "value",
        "type": "long"
       },
       {
        "name": "maxValue",
        "type": "long"
       }
      ],
      "name": "failForBigNumberWithPosixMessage",
      "type": null
     },
     {
      "params": [
       {
        "name": "field",
        "type": "String"
       },
       {
        "name": "value",
        "type": "long"
       },
       {
        "name": "maxValue",
        "type": "long"
       },
       {
        "name": "additionalMsg",
        "type": "String"
       }
      ],
      "name": "failForBigNumber",
      "type": null
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "TarArchiveEntry"
       },
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "paxHeaders",
        "type": "Map"
       },
       {
        "name": "paxHeaderName",
        "type": "String"
       },
       {
        "name": "linkType",
        "type": "byte"
       },
       {
        "name": "fieldName",
        "type": "String"
       }
      ],
      "name": "handleLongName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "from",
        "type": "TarArchiveEntry"
       },
       {
        "name": "to",
        "type": "TarArchiveEntry"
       }
      ],
      "name": "transferModTime",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "LONGFILE_ERROR",
      "type": "int"
     },
     {
      "name": "LONGFILE_TRUNCATE",
      "type": "int"
     },
     {
      "name": "LONGFILE_GNU",
      "type": "int"
     },
     {
      "name": "LONGFILE_POSIX",
      "type": "int"
     },
     {
      "name": "BIGNUMBER_ERROR",
      "type": "int"
     },
     {
      "name": "BIGNUMBER_STAR",
      "type": "int"
     },
     {
      "name": "BIGNUMBER_POSIX",
      "type": "int"
     },
     {
      "name": "currSize",
      "type": "long"
     },
     {
      "name": "currName",
      "type": "String"
     },
     {
      "name": "currBytes",
      "type": "long"
     },
     {
      "name": "recordBuf",
      "type": "byte"
     },
     {
      "name": "assemLen",
      "type": "int"
     },
     {
      "name": "assemBuf",
      "type": "byte"
     },
     {
      "name": "longFileMode",
      "type": "int"
     },
     {
      "name": "bigNumberMode",
      "type": "int"
     },
     {
      "name": "recordsWritten",
      "type": "int"
     },
     {
      "name": "recordsPerBlock",
      "type": "int"
     },
     {
      "name": "recordSize",
      "type": "int"
     },
     {
      "name": "closed",
      "type": "boolean"
     },
     {
      "name": "haveUnclosedEntry",
      "type": "boolean"
     },
     {
      "name": "finished",
      "type": "boolean"
     },
     {
      "name": "out",
      "type": "OutputStream"
     },
     {
      "name": "zipEncoding",
      "type": "ZipEncoding"
     },
     {
      "name": "encoding",
      "type": "String"
     },
     {
      "name": "addPaxHeadersForNonAsciiNames",
      "type": "boolean"
     },
     {
      "name": "ASCII",
      "type": "ZipEncoding"
     }
    ],
    "name": "TarArchiveOutputStream"
   }
  ]
 },
 {
  "filename": "TarArchiveEntry.java",
  "package_name": "org.apache.commons.compress.archivers.tar",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "it",
        "type": "TarArchiveEntry"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "it",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "desc",
        "type": "TarArchiveEntry"
       }
      ],
      "name": "isDescendent",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "setName",
      "type": null
     },
     {
      "params": [
       {
        "name": "mode",
        "type": "int"
       }
      ],
      "name": "setMode",
      "type": null
     },
     {
      "params": [],
      "name": "getLinkName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "link",
        "type": "String"
       }
      ],
      "name": "setLinkName",
      "type": null
     },
     {
      "params": [],
      "name": "getUserId",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "userId",
        "type": "int"
       }
      ],
      "name": "setUserId",
      "type": null
     },
     {
      "params": [],
      "name": "getLongUserId",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "userId",
        "type": "long"
       }
      ],
      "name": "setUserId",
      "type": null
     },
     {
      "params": [],
      "name": "getGroupId",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "groupId",
        "type": "int"
       }
      ],
      "name": "setGroupId",
      "type": null
     },
     {
      "params": [],
      "name": "getLongGroupId",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "groupId",
        "type": "long"
       }
      ],
      "name": "setGroupId",
      "type": null
     },
     {
      "params": [],
      "name": "getUserName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "userName",
        "type": "String"
       }
      ],
      "name": "setUserName",
      "type": null
     },
     {
      "params": [],
      "name": "getGroupName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "groupName",
        "type": "String"
       }
      ],
      "name": "setGroupName",
      "type": null
     },
     {
      "params": [
       {
        "name": "userId",
        "type": "int"
       },
       {
        "name": "groupId",
        "type": "int"
       }
      ],
      "name": "setIds",
      "type": null
     },
     {
      "params": [
       {
        "name": "userName",
        "type": "String"
       },
       {
        "name": "groupName",
        "type": "String"
       }
      ],
      "name": "setNames",
      "type": null
     },
     {
      "params": [
       {
        "name": "time",
        "type": "long"
       }
      ],
      "name": "setModTime",
      "type": null
     },
     {
      "params": [
       {
        "name": "time",
        "type": "Date"
       }
      ],
      "name": "setModTime",
      "type": null
     },
     {
      "params": [],
      "name": "getModTime",
      "type": "Date"
     },
     {
      "params": [],
      "name": "getLastModifiedDate",
      "type": "Date"
     },
     {
      "params": [],
      "name": "isCheckSumOK",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getFile",
      "type": "File"
     },
     {
      "params": [],
      "name": "getMode",
      "type": "int"
     },
     {
      "params": [],
      "name": "getSize",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "size",
        "type": "long"
       }
      ],
      "name": "setSize",
      "type": null
     },
     {
      "params": [],
      "name": "getDevMajor",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "devNo",
        "type": "int"
       }
      ],
      "name": "setDevMajor",
      "type": null
     },
     {
      "params": [],
      "name": "getDevMinor",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "devNo",
        "type": "int"
       }
      ],
      "name": "setDevMinor",
      "type": null
     },
     {
      "params": [],
      "name": "isExtended",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getRealSize",
      "type": "long"
     },
     {
      "params": [],
      "name": "isGNUSparse",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isGNULongLinkEntry",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isGNULongNameEntry",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isPaxHeader",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isGlobalPaxHeader",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isDirectory",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isFile",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isSymbolicLink",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isLink",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isCharacterDevice",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isBlockDevice",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isFIFO",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getDirectoryEntries",
      "type": "TarArchiveEntry"
     },
     {
      "params": [
       {
        "name": "outbuf",
        "type": "byte"
       }
      ],
      "name": "writeEntryHeader",
      "type": null
     },
     {
      "params": [
       {
        "name": "outbuf",
        "type": "byte"
       },
       {
        "name": "encoding",
        "type": "ZipEncoding"
       },
       {
        "name": "starMode",
        "type": "boolean"
       }
      ],
      "name": "writeEntryHeader",
      "type": null
     },
     {
      "params": [
       {
        "name": "value",
        "type": "long"
       },
       {
        "name": "outbuf",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       },
       {
        "name": "starMode",
        "type": "boolean"
       }
      ],
      "name": "writeEntryHeaderField",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "header",
        "type": "byte"
       }
      ],
      "name": "parseTarHeader",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "byte"
       },
       {
        "name": "encoding",
        "type": "ZipEncoding"
       }
      ],
      "name": "parseTarHeader",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "byte"
       },
       {
        "name": "encoding",
        "type": "ZipEncoding"
       },
       {
        "name": "oldStyle",
        "type": "boolean"
       }
      ],
      "name": "parseTarHeader",
      "type": null
     },
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       },
       {
        "name": "preserveLeadingSlashes",
        "type": "boolean"
       }
      ],
      "name": "normalizeFileName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "header",
        "type": "byte"
       }
      ],
      "name": "evaluateType",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "name",
      "type": "String"
     },
     {
      "name": "mode",
      "type": "int"
     },
     {
      "name": "userId",
      "type": "long"
     },
     {
      "name": "groupId",
      "type": "long"
     },
     {
      "name": "size",
      "type": "long"
     },
     {
      "name": "modTime",
      "type": "long"
     },
     {
      "name": "checkSumOK",
      "type": "boolean"
     },
     {
      "name": "linkFlag",
      "type": "byte"
     },
     {
      "name": "linkName",
      "type": "String"
     },
     {
      "name": "magic",
      "type": "String"
     },
     {
      "name": "version",
      "type": "String"
     },
     {
      "name": "userName",
      "type": "String"
     },
     {
      "name": "groupName",
      "type": "String"
     },
     {
      "name": "devMajor",
      "type": "int"
     },
     {
      "name": "devMinor",
      "type": "int"
     },
     {
      "name": "isExtended",
      "type": "boolean"
     },
     {
      "name": "realSize",
      "type": "long"
     },
     {
      "name": "file",
      "type": "File"
     },
     {
      "name": "MAX_NAMELEN",
      "type": "int"
     },
     {
      "name": "DEFAULT_DIR_MODE",
      "type": "int"
     },
     {
      "name": "DEFAULT_FILE_MODE",
      "type": "int"
     },
     {
      "name": "MILLIS_PER_SECOND",
      "type": "int"
     }
    ],
    "name": "TarArchiveEntry"
   }
  ]
 },
 {
  "filename": "TarConstants.java",
  "package_name": "org.apache.commons.compress.archivers.tar",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "DEFAULT_RCDSIZE",
      "type": "int"
     },
     {
      "name": "DEFAULT_BLKSIZE",
      "type": "int"
     },
     {
      "name": "FORMAT_OLDGNU",
      "type": "int"
     },
     {
      "name": "FORMAT_POSIX",
      "type": "int"
     },
     {
      "name": "NAMELEN",
      "type": "int"
     },
     {
      "name": "MODELEN",
      "type": "int"
     },
     {
      "name": "UIDLEN",
      "type": "int"
     },
     {
      "name": "GIDLEN",
      "type": "int"
     },
     {
      "name": "MAXID",
      "type": "long"
     },
     {
      "name": "CHKSUMLEN",
      "type": "int"
     },
     {
      "name": "CHKSUM_OFFSET",
      "type": "int"
     },
     {
      "name": "SIZELEN",
      "type": "int"
     },
     {
      "name": "MAXSIZE",
      "type": "long"
     },
     {
      "name": "MAGIC_OFFSET",
      "type": "int"
     },
     {
      "name": "MAGICLEN",
      "type": "int"
     },
     {
      "name": "VERSION_OFFSET",
      "type": "int"
     },
     {
      "name": "VERSIONLEN",
      "type": "int"
     },
     {
      "name": "MODTIMELEN",
      "type": "int"
     },
     {
      "name": "UNAMELEN",
      "type": "int"
     },
     {
      "name": "GNAMELEN",
      "type": "int"
     },
     {
      "name": "DEVLEN",
      "type": "int"
     },
     {
      "name": "PREFIXLEN",
      "type": "int"
     },
     {
      "name": "ATIMELEN_GNU",
      "type": "int"
     },
     {
      "name": "CTIMELEN_GNU",
      "type": "int"
     },
     {
      "name": "OFFSETLEN_GNU",
      "type": "int"
     },
     {
      "name": "LONGNAMESLEN_GNU",
      "type": "int"
     },
     {
      "name": "PAD2LEN_GNU",
      "type": "int"
     },
     {
      "name": "SPARSELEN_GNU",
      "type": "int"
     },
     {
      "name": "ISEXTENDEDLEN_GNU",
      "type": "int"
     },
     {
      "name": "REALSIZELEN_GNU",
      "type": "int"
     },
     {
      "name": "SPARSELEN_GNU_SPARSE",
      "type": "int"
     },
     {
      "name": "ISEXTENDEDLEN_GNU_SPARSE",
      "type": "int"
     },
     {
      "name": "LF_OLDNORM",
      "type": "byte"
     },
     {
      "name": "LF_NORMAL",
      "type": "byte"
     },
     {
      "name": "LF_LINK",
      "type": "byte"
     },
     {
      "name": "LF_SYMLINK",
      "type": "byte"
     },
     {
      "name": "LF_CHR",
      "type": "byte"
     },
     {
      "name": "LF_BLK",
      "type": "byte"
     },
     {
      "name": "LF_DIR",
      "type": "byte"
     },
     {
      "name": "LF_FIFO",
      "type": "byte"
     },
     {
      "name": "LF_CONTIG",
      "type": "byte"
     },
     {
      "name": "LF_GNUTYPE_LONGLINK",
      "type": "byte"
     },
     {
      "name": "LF_GNUTYPE_LONGNAME",
      "type": "byte"
     },
     {
      "name": "LF_GNUTYPE_SPARSE",
      "type": "byte"
     },
     {
      "name": "LF_PAX_EXTENDED_HEADER_LC",
      "type": "byte"
     },
     {
      "name": "LF_PAX_EXTENDED_HEADER_UC",
      "type": "byte"
     },
     {
      "name": "LF_PAX_GLOBAL_EXTENDED_HEADER",
      "type": "byte"
     },
     {
      "name": "MAGIC_POSIX",
      "type": "String"
     },
     {
      "name": "VERSION_POSIX",
      "type": "String"
     },
     {
      "name": "MAGIC_GNU",
      "type": "String"
     },
     {
      "name": "VERSION_GNU_SPACE",
      "type": "String"
     },
     {
      "name": "VERSION_GNU_ZERO",
      "type": "String"
     },
     {
      "name": "MAGIC_ANT",
      "type": "String"
     },
     {
      "name": "VERSION_ANT",
      "type": "String"
     },
     {
      "name": "GNU_LONGLINK",
      "type": "String"
     }
    ],
    "name": "TarConstants"
   }
  ]
 },
 {
  "filename": "StreamMap.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "folderFirstPackStreamIndex",
      "type": "int"
     },
     {
      "name": "packStreamOffsets",
      "type": "long"
     },
     {
      "name": "folderFirstFileIndex",
      "type": "int"
     },
     {
      "name": "fileFolderIndex",
      "type": "int"
     }
    ],
    "name": "StreamMap"
   }
  ]
 },
 {
  "filename": "AES256SHA256Decoder.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "archiveName",
        "type": "String"
       },
       {
        "name": "in",
        "type": "InputStream"
       },
       {
        "name": "uncompressedLength",
        "type": "long"
       },
       {
        "name": "coder",
        "type": "Coder"
       },
       {
        "name": "passwordBytes",
        "type": "byte"
       }
      ],
      "name": "decode",
      "type": "InputStream"
     }
    ],
    "fields": [],
    "name": "AES256SHA256Decoder"
   }
  ]
 },
 {
  "filename": "SevenZMethod.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getId",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "id",
        "type": "byte"
       }
      ],
      "name": "byId",
      "type": "SevenZMethod"
     }
    ],
    "fields": [
     {
      "name": "id",
      "type": "byte"
     }
    ],
    "name": "SevenZMethod"
   }
  ]
 },
 {
  "filename": "Archive.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "a",
        "type": "long"
       }
      ],
      "name": "lengthOf",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "a",
        "type": "Object"
       }
      ],
      "name": "lengthOf",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "packPos",
      "type": "long"
     },
     {
      "name": "packSizes",
      "type": "long"
     },
     {
      "name": "packCrcsDefined",
      "type": "BitSet"
     },
     {
      "name": "packCrcs",
      "type": "long"
     },
     {
      "name": "folders",
      "type": "Folder"
     },
     {
      "name": "subStreamsInfo",
      "type": "SubStreamsInfo"
     },
     {
      "name": "files",
      "type": "SevenZArchiveEntry"
     },
     {
      "name": "streamMap",
      "type": "StreamMap"
     }
    ],
    "name": "Archive"
   }
  ]
 },
 {
  "filename": "StartHeader.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "nextHeaderOffset",
      "type": "long"
     },
     {
      "name": "nextHeaderSize",
      "type": "long"
     },
     {
      "name": "nextHeaderCrc",
      "type": "long"
     }
    ],
    "name": "StartHeader"
   }
  ]
 },
 {
  "filename": "LZMA2Decoder.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "archiveName",
        "type": "String"
       },
       {
        "name": "in",
        "type": "InputStream"
       },
       {
        "name": "uncompressedLength",
        "type": "long"
       },
       {
        "name": "coder",
        "type": "Coder"
       },
       {
        "name": "password",
        "type": "byte"
       }
      ],
      "name": "decode",
      "type": "InputStream"
     },
     {
      "params": [
       {
        "name": "out",
        "type": "OutputStream"
       },
       {
        "name": "opts",
        "type": "Object"
       }
      ],
      "name": "encode",
      "type": "OutputStream"
     },
     {
      "params": [
       {
        "name": "opts",
        "type": "Object"
       }
      ],
      "name": "getOptionsAsProperties",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "coder",
        "type": "Coder"
       },
       {
        "name": "in",
        "type": "InputStream"
       }
      ],
      "name": "getOptionsFromCoder",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "opts",
        "type": "Object"
       }
      ],
      "name": "getDictSize",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "coder",
        "type": "Coder"
       }
      ],
      "name": "getDictionarySize",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "opts",
        "type": "Object"
       }
      ],
      "name": "getOptions",
      "type": "LZMA2Options"
     },
     {
      "params": [
       {
        "name": "opts",
        "type": "Object"
       }
      ],
      "name": "numberOptionOrDefault",
      "type": "int"
     }
    ],
    "fields": [],
    "name": "LZMA2Decoder"
   }
  ]
 },
 {
  "filename": "SubStreamsInfo.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "unpackSizes",
      "type": "long"
     },
     {
      "name": "hasCrc",
      "type": "BitSet"
     },
     {
      "name": "crcs",
      "type": "long"
     }
    ],
    "name": "SubStreamsInfo"
   }
  ]
 },
 {
  "filename": "CLI.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "args",
        "type": "String"
       }
      ],
      "name": "main",
      "type": null
     },
     {
      "params": [],
      "name": "usage",
      "type": null
     },
     {
      "params": [
       {
        "name": "args",
        "type": "String"
       }
      ],
      "name": "grabMode",
      "type": "Mode"
     }
    ],
    "fields": [
     {
      "name": "BUF",
      "type": "byte"
     }
    ],
    "name": "CLI"
   }
  ]
 },
 {
  "filename": "SevenZArchiveEntry.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "setName",
      "type": null
     },
     {
      "params": [],
      "name": "hasStream",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "hasStream",
        "type": "boolean"
       }
      ],
      "name": "setHasStream",
      "type": null
     },
     {
      "params": [],
      "name": "isDirectory",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "isDirectory",
        "type": "boolean"
       }
      ],
      "name": "setDirectory",
      "type": null
     },
     {
      "params": [],
      "name": "isAntiItem",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "isAntiItem",
        "type": "boolean"
       }
      ],
      "name": "setAntiItem",
      "type": null
     },
     {
      "params": [],
      "name": "getHasCreationDate",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "hasCreationDate",
        "type": "boolean"
       }
      ],
      "name": "setHasCreationDate",
      "type": null
     },
     {
      "params": [],
      "name": "getCreationDate",
      "type": "Date"
     },
     {
      "params": [
       {
        "name": "ntfsCreationDate",
        "type": "long"
       }
      ],
      "name": "setCreationDate",
      "type": null
     },
     {
      "params": [
       {
        "name": "creationDate",
        "type": "Date"
       }
      ],
      "name": "setCreationDate",
      "type": null
     },
     {
      "params": [],
      "name": "getHasLastModifiedDate",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "hasLastModifiedDate",
        "type": "boolean"
       }
      ],
      "name": "setHasLastModifiedDate",
      "type": null
     },
     {
      "params": [],
      "name": "getLastModifiedDate",
      "type": "Date"
     },
     {
      "params": [
       {
        "name": "ntfsLastModifiedDate",
        "type": "long"
       }
      ],
      "name": "setLastModifiedDate",
      "type": null
     },
     {
      "params": [
       {
        "name": "lastModifiedDate",
        "type": "Date"
       }
      ],
      "name": "setLastModifiedDate",
      "type": null
     },
     {
      "params": [],
      "name": "getHasAccessDate",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "hasAcessDate",
        "type": "boolean"
       }
      ],
      "name": "setHasAccessDate",
      "type": null
     },
     {
      "params": [],
      "name": "getAccessDate",
      "type": "Date"
     },
     {
      "params": [
       {
        "name": "ntfsAccessDate",
        "type": "long"
       }
      ],
      "name": "setAccessDate",
      "type": null
     },
     {
      "params": [
       {
        "name": "accessDate",
        "type": "Date"
       }
      ],
      "name": "setAccessDate",
      "type": null
     },
     {
      "params": [],
      "name": "getHasWindowsAttributes",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "hasWindowsAttributes",
        "type": "boolean"
       }
      ],
      "name": "setHasWindowsAttributes",
      "type": null
     },
     {
      "params": [],
      "name": "getWindowsAttributes",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "windowsAttributes",
        "type": "int"
       }
      ],
      "name": "setWindowsAttributes",
      "type": null
     },
     {
      "params": [],
      "name": "getHasCrc",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "hasCrc",
        "type": "boolean"
       }
      ],
      "name": "setHasCrc",
      "type": null
     },
     {
      "params": [],
      "name": "getCrc",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "crc",
        "type": "int"
       }
      ],
      "name": "setCrc",
      "type": null
     },
     {
      "params": [],
      "name": "getCrcValue",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "crc",
        "type": "long"
       }
      ],
      "name": "setCrcValue",
      "type": null
     },
     {
      "params": [],
      "name": "getCompressedCrc",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "crc",
        "type": "int"
       }
      ],
      "name": "setCompressedCrc",
      "type": null
     },
     {
      "params": [],
      "name": "getCompressedCrcValue",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "crc",
        "type": "long"
       }
      ],
      "name": "setCompressedCrcValue",
      "type": null
     },
     {
      "params": [],
      "name": "getSize",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "size",
        "type": "long"
       }
      ],
      "name": "setSize",
      "type": null
     },
     {
      "params": [],
      "name": "getCompressedSize",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "size",
        "type": "long"
       }
      ],
      "name": "setCompressedSize",
      "type": null
     },
     {
      "params": [
       {
        "name": "methods",
        "type": "Iterable"
       }
      ],
      "name": "setContentMethods",
      "type": null
     },
     {
      "params": [],
      "name": "getContentMethods",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "ntfsTime",
        "type": "long"
       }
      ],
      "name": "ntfsTimeToJavaTime",
      "type": "Date"
     },
     {
      "params": [
       {
        "name": "date",
        "type": "Date"
       }
      ],
      "name": "javaTimeToNtfsTime",
      "type": "long"
     }
    ],
    "fields": [
     {
      "name": "name",
      "type": "String"
     },
     {
      "name": "hasStream",
      "type": "boolean"
     },
     {
      "name": "isDirectory",
      "type": "boolean"
     },
     {
      "name": "isAntiItem",
      "type": "boolean"
     },
     {
      "name": "hasCreationDate",
      "type": "boolean"
     },
     {
      "name": "hasLastModifiedDate",
      "type": "boolean"
     },
     {
      "name": "hasAccessDate",
      "type": "boolean"
     },
     {
      "name": "creationDate",
      "type": "long"
     },
     {
      "name": "lastModifiedDate",
      "type": "long"
     },
     {
      "name": "accessDate",
      "type": "long"
     },
     {
      "name": "hasWindowsAttributes",
      "type": "boolean"
     },
     {
      "name": "windowsAttributes",
      "type": "int"
     },
     {
      "name": "hasCrc",
      "type": "boolean"
     },
     {
      "name": "crc",
      "type": "long"
     },
     {
      "name": "compressedCrc",
      "type": "long"
     },
     {
      "name": "size",
      "type": "long"
     },
     {
      "name": "compressedSize",
      "type": "long"
     },
     {
      "name": "contentMethods",
      "type": "Iterable"
     }
    ],
    "name": "SevenZArchiveEntry"
   }
  ]
 },
 {
  "filename": "Coders.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "method",
        "type": "SevenZMethod"
       }
      ],
      "name": "findByMethod",
      "type": "CoderBase"
     },
     {
      "params": [
       {
        "name": "archiveName",
        "type": "String"
       },
       {
        "name": "is",
        "type": "InputStream"
       },
       {
        "name": "uncompressedLength",
        "type": "long"
       },
       {
        "name": "coder",
        "type": "Coder"
       },
       {
        "name": "password",
        "type": "byte"
       }
      ],
      "name": "addDecoder",
      "type": "InputStream"
     },
     {
      "params": [
       {
        "name": "out",
        "type": "OutputStream"
       },
       {
        "name": "method",
        "type": "SevenZMethod"
       },
       {
        "name": "options",
        "type": "Object"
       }
      ],
      "name": "addEncoder",
      "type": "OutputStream"
     }
    ],
    "fields": [
     {
      "name": "CODER_MAP",
      "type": "Map"
     }
    ],
    "name": "Coders"
   }
  ]
 },
 {
  "filename": "Coder.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "decompressionMethodId",
      "type": "byte"
     },
     {
      "name": "numInStreams",
      "type": "long"
     },
     {
      "name": "numOutStreams",
      "type": "long"
     },
     {
      "name": "properties",
      "type": "byte"
     }
    ],
    "name": "Coder"
   }
  ]
 },
 {
  "filename": "DeltaDecoder.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "archiveName",
        "type": "String"
       },
       {
        "name": "in",
        "type": "InputStream"
       },
       {
        "name": "uncompressedLength",
        "type": "long"
       },
       {
        "name": "coder",
        "type": "Coder"
       },
       {
        "name": "password",
        "type": "byte"
       }
      ],
      "name": "decode",
      "type": "InputStream"
     },
     {
      "params": [
       {
        "name": "out",
        "type": "OutputStream"
       },
       {
        "name": "options",
        "type": "Object"
       }
      ],
      "name": "encode",
      "type": "OutputStream"
     },
     {
      "params": [
       {
        "name": "options",
        "type": "Object"
       }
      ],
      "name": "getOptionsAsProperties",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "coder",
        "type": "Coder"
       },
       {
        "name": "in",
        "type": "InputStream"
       }
      ],
      "name": "getOptionsFromCoder",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "coder",
        "type": "Coder"
       }
      ],
      "name": "getOptionsFromCoder",
      "type": "int"
     }
    ],
    "fields": [],
    "name": "DeltaDecoder"
   }
  ]
 },
 {
  "filename": "SevenZFile.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [],
      "name": "getNextEntry",
      "type": "SevenZArchiveEntry"
     },
     {
      "params": [
       {
        "name": "password",
        "type": "byte"
       }
      ],
      "name": "readHeaders",
      "type": "Archive"
     },
     {
      "params": [
       {
        "name": "startHeaderCrc",
        "type": "long"
       }
      ],
      "name": "readStartHeader",
      "type": "StartHeader"
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataInput"
       },
       {
        "name": "archive",
        "type": "Archive"
       }
      ],
      "name": "readHeader",
      "type": null
     },
     {
      "params": [
       {
        "name": "input",
        "type": "DataInput"
       }
      ],
      "name": "readArchiveProperties",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataInputStream"
       },
       {
        "name": "archive",
        "type": "Archive"
       },
       {
        "name": "password",
        "type": "byte"
       }
      ],
      "name": "readEncodedHeader",
      "type": "DataInputStream"
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataInput"
       },
       {
        "name": "archive",
        "type": "Archive"
       }
      ],
      "name": "readStreamsInfo",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataInput"
       },
       {
        "name": "archive",
        "type": "Archive"
       }
      ],
      "name": "readPackInfo",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataInput"
       },
       {
        "name": "archive",
        "type": "Archive"
       }
      ],
      "name": "readUnpackInfo",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataInput"
       },
       {
        "name": "archive",
        "type": "Archive"
       }
      ],
      "name": "readSubStreamsInfo",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataInput"
       }
      ],
      "name": "readFolder",
      "type": "Folder"
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataInput"
       },
       {
        "name": "size",
        "type": "int"
       }
      ],
      "name": "readAllOrBits",
      "type": "BitSet"
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataInput"
       },
       {
        "name": "size",
        "type": "int"
       }
      ],
      "name": "readBits",
      "type": "BitSet"
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataInput"
       },
       {
        "name": "archive",
        "type": "Archive"
       }
      ],
      "name": "readFilesInfo",
      "type": null
     },
     {
      "params": [
       {
        "name": "archive",
        "type": "Archive"
       }
      ],
      "name": "calculateStreamMap",
      "type": null
     },
     {
      "params": [],
      "name": "buildDecodingStream",
      "type": null
     },
     {
      "params": [],
      "name": "drainPreviousEntry",
      "type": null
     },
     {
      "params": [
       {
        "name": "folder",
        "type": "Folder"
       },
       {
        "name": "folderOffset",
        "type": "long"
       },
       {
        "name": "firstPackStreamIndex",
        "type": "int"
       },
       {
        "name": "entry",
        "type": "SevenZArchiveEntry"
       }
      ],
      "name": "buildDecoderStack",
      "type": "InputStream"
     },
     {
      "params": [],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "in",
        "type": "DataInput"
       }
      ],
      "name": "readUint64",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "signature",
        "type": "byte"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matches",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "input",
        "type": "DataInput"
       },
       {
        "name": "bytesToSkip",
        "type": "long"
       }
      ],
      "name": "skipBytesFully",
      "type": "long"
     }
    ],
    "fields": [
     {
      "name": "SIGNATURE_HEADER_SIZE",
      "type": "int"
     },
     {
      "name": "fileName",
      "type": "String"
     },
     {
      "name": "file",
      "type": "RandomAccessFile"
     },
     {
      "name": "archive",
      "type": "Archive"
     },
     {
      "name": "currentEntryIndex",
      "type": "int"
     },
     {
      "name": "currentFolderIndex",
      "type": "int"
     },
     {
      "name": "currentFolderInputStream",
      "type": "InputStream"
     },
     {
      "name": "currentEntryInputStream",
      "type": "InputStream"
     },
     {
      "name": "password",
      "type": "byte"
     },
     {
      "name": "sevenZSignature",
      "type": "byte"
     }
    ],
    "name": "SevenZFile"
   }
  ]
 },
 {
  "filename": "SevenZOutputFile.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "method",
        "type": "SevenZMethod"
       }
      ],
      "name": "setContentCompression",
      "type": null
     },
     {
      "params": [
       {
        "name": "methods",
        "type": "Iterable"
       }
      ],
      "name": "setContentMethods",
      "type": null
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [
       {
        "name": "inputFile",
        "type": "File"
       },
       {
        "name": "entryName",
        "type": "String"
       }
      ],
      "name": "createArchiveEntry",
      "type": "SevenZArchiveEntry"
     },
     {
      "params": [
       {
        "name": "archiveEntry",
        "type": "ArchiveEntry"
       }
      ],
      "name": "putArchiveEntry",
      "type": null
     },
     {
      "params": [],
      "name": "closeArchiveEntry",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [],
      "name": "finish",
      "type": null
     },
     {
      "params": [],
      "name": "getCurrentOutputStream",
      "type": "OutputStream"
     },
     {
      "params": [],
      "name": "setupFileOutputStream",
      "type": "CountingOutputStream"
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "SevenZArchiveEntry"
       }
      ],
      "name": "getContentMethods",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataOutput"
       }
      ],
      "name": "writeHeader",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataOutput"
       }
      ],
      "name": "writeStreamsInfo",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataOutput"
       }
      ],
      "name": "writePackInfo",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataOutput"
       }
      ],
      "name": "writeUnpackInfo",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataOutput"
       },
       {
        "name": "entry",
        "type": "SevenZArchiveEntry"
       }
      ],
      "name": "writeFolder",
      "type": null
     },
     {
      "params": [
       {
        "name": "m",
        "type": "SevenZMethodConfiguration"
       },
       {
        "name": "bos",
        "type": "OutputStream"
       }
      ],
      "name": "writeSingleCodec",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataOutput"
       }
      ],
      "name": "writeSubStreamsInfo",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataOutput"
       }
      ],
      "name": "writeFilesInfo",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataOutput"
       }
      ],
      "name": "writeFileEmptyStreams",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataOutput"
       }
      ],
      "name": "writeFileEmptyFiles",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataOutput"
       }
      ],
      "name": "writeFileAntiItems",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataOutput"
       }
      ],
      "name": "writeFileNames",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataOutput"
       }
      ],
      "name": "writeFileCTimes",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataOutput"
       }
      ],
      "name": "writeFileATimes",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataOutput"
       }
      ],
      "name": "writeFileMTimes",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataOutput"
       }
      ],
      "name": "writeFileWindowsAttributes",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataOutput"
       },
       {
        "name": "value",
        "type": "long"
       }
      ],
      "name": "writeUint64",
      "type": null
     },
     {
      "params": [
       {
        "name": "header",
        "type": "DataOutput"
       },
       {
        "name": "bits",
        "type": "BitSet"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "writeBits",
      "type": null
     },
     {
      "params": [
       {
        "name": "i",
        "type": "Iterable"
       }
      ],
      "name": "reverse",
      "type": "Iterable"
     }
    ],
    "fields": [
     {
      "name": "file",
      "type": "RandomAccessFile"
     },
     {
      "name": "files",
      "type": "List"
     },
     {
      "name": "numNonEmptyStreams",
      "type": "int"
     },
     {
      "name": "crc32",
      "type": "CRC32"
     },
     {
      "name": "compressedCrc32",
      "type": "CRC32"
     },
     {
      "name": "fileBytesWritten",
      "type": "long"
     },
     {
      "name": "finished",
      "type": "boolean"
     },
     {
      "name": "currentOutputStream",
      "type": "CountingOutputStream"
     },
     {
      "name": "additionalCountingStreams",
      "type": "CountingOutputStream"
     },
     {
      "name": "contentMethods",
      "type": "Iterable"
     },
     {
      "name": "additionalSizes",
      "type": "Map"
     }
    ],
    "name": "SevenZOutputFile"
   }
  ]
 },
 {
  "filename": "SevenZMethodConfiguration.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getMethod",
      "type": "SevenZMethod"
     },
     {
      "params": [],
      "name": "getOptions",
      "type": "Object"
     }
    ],
    "fields": [
     {
      "name": "method",
      "type": "SevenZMethod"
     },
     {
      "name": "options",
      "type": "Object"
     }
    ],
    "name": "SevenZMethodConfiguration"
   }
  ]
 },
 {
  "filename": "NID.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "kEnd",
      "type": "int"
     },
     {
      "name": "kHeader",
      "type": "int"
     },
     {
      "name": "kArchiveProperties",
      "type": "int"
     },
     {
      "name": "kAdditionalStreamsInfo",
      "type": "int"
     },
     {
      "name": "kMainStreamsInfo",
      "type": "int"
     },
     {
      "name": "kFilesInfo",
      "type": "int"
     },
     {
      "name": "kPackInfo",
      "type": "int"
     },
     {
      "name": "kUnpackInfo",
      "type": "int"
     },
     {
      "name": "kSubStreamsInfo",
      "type": "int"
     },
     {
      "name": "kSize",
      "type": "int"
     },
     {
      "name": "kCRC",
      "type": "int"
     },
     {
      "name": "kFolder",
      "type": "int"
     },
     {
      "name": "kCodersUnpackSize",
      "type": "int"
     },
     {
      "name": "kNumUnpackStream",
      "type": "int"
     },
     {
      "name": "kEmptyStream",
      "type": "int"
     },
     {
      "name": "kEmptyFile",
      "type": "int"
     },
     {
      "name": "kAnti",
      "type": "int"
     },
     {
      "name": "kName",
      "type": "int"
     },
     {
      "name": "kCTime",
      "type": "int"
     },
     {
      "name": "kATime",
      "type": "int"
     },
     {
      "name": "kMTime",
      "type": "int"
     },
     {
      "name": "kWinAttributes",
      "type": "int"
     },
     {
      "name": "kComment",
      "type": "int"
     },
     {
      "name": "kEncodedHeader",
      "type": "int"
     },
     {
      "name": "kStartPos",
      "type": "int"
     },
     {
      "name": "kDummy",
      "type": "int"
     }
    ],
    "name": "NID"
   }
  ]
 },
 {
  "filename": "BindPair.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "inIndex",
      "type": "long"
     },
     {
      "name": "outIndex",
      "type": "long"
     }
    ],
    "name": "BindPair"
   }
  ]
 },
 {
  "filename": "Folder.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getOrderedCoders",
      "type": "Iterable"
     },
     {
      "params": [
       {
        "name": "index",
        "type": "int"
       }
      ],
      "name": "findBindPairForInStream",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "index",
        "type": "int"
       }
      ],
      "name": "findBindPairForOutStream",
      "type": "int"
     },
     {
      "params": [],
      "name": "getUnpackSize",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "coder",
        "type": "Coder"
       }
      ],
      "name": "getUnpackSizeForCoder",
      "type": "long"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "coders",
      "type": "Coder"
     },
     {
      "name": "totalInputStreams",
      "type": "long"
     },
     {
      "name": "totalOutputStreams",
      "type": "long"
     },
     {
      "name": "bindPairs",
      "type": "BindPair"
     },
     {
      "name": "packedStreams",
      "type": "long"
     },
     {
      "name": "unpackSizes",
      "type": "long"
     },
     {
      "name": "hasCrc",
      "type": "boolean"
     },
     {
      "name": "crc",
      "type": "long"
     },
     {
      "name": "numUnpackSubStreams",
      "type": "int"
     }
    ],
    "name": "Folder"
   }
  ]
 },
 {
  "filename": "BoundedRandomAccessFileInputStream.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [],
      "name": "close",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "file",
      "type": "RandomAccessFile"
     },
     {
      "name": "bytesRemaining",
      "type": "long"
     }
    ],
    "name": "BoundedRandomAccessFileInputStream"
   }
  ]
 },
 {
  "filename": "CoderBase.java",
  "package_name": "org.apache.commons.compress.archivers.sevenz",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "opts",
        "type": "Object"
       }
      ],
      "name": "canAcceptOptions",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "options",
        "type": "Object"
       }
      ],
      "name": "getOptionsAsProperties",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "coder",
        "type": "Coder"
       },
       {
        "name": "in",
        "type": "InputStream"
       }
      ],
      "name": "getOptionsFromCoder",
      "type": "Object"
     },
     {
      "params": [
       {
        "name": "archiveName",
        "type": "String"
       },
       {
        "name": "in",
        "type": "InputStream"
       },
       {
        "name": "uncomressedLength",
        "type": "long"
       },
       {
        "name": "coder",
        "type": "Coder"
       },
       {
        "name": "password",
        "type": "byte"
       }
      ],
      "name": "decode",
      "type": "InputStream"
     },
     {
      "params": [
       {
        "name": "out",
        "type": "OutputStream"
       },
       {
        "name": "options",
        "type": "Object"
       }
      ],
      "name": "encode",
      "type": "OutputStream"
     },
     {
      "params": [
       {
        "name": "options",
        "type": "Object"
       },
       {
        "name": "defaultValue",
        "type": "int"
       }
      ],
      "name": "numberOptionOrDefault",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "acceptableOptions",
      "type": "Class"
     },
     {
      "name": "NONE",
      "type": "byte"
     }
    ],
    "name": "CoderBase"
   }
  ]
 },
 {
  "filename": "ArjArchiveInputStream.java",
  "package_name": "org.apache.commons.compress.archivers.arj",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [
       {
        "name": "dataIn",
        "type": "DataInputStream"
       }
      ],
      "name": "read8",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "dataIn",
        "type": "DataInputStream"
       }
      ],
      "name": "read16",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "dataIn",
        "type": "DataInputStream"
       }
      ],
      "name": "read32",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "dataIn",
        "type": "DataInputStream"
       }
      ],
      "name": "readString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "dataIn",
        "type": "DataInputStream"
       },
       {
        "name": "b",
        "type": "byte"
       }
      ],
      "name": "readFully",
      "type": null
     },
     {
      "params": [],
      "name": "readHeader",
      "type": "byte"
     },
     {
      "params": [],
      "name": "readMainHeader",
      "type": "MainHeader"
     },
     {
      "params": [],
      "name": "readLocalFileHeader",
      "type": "LocalFileHeader"
     },
     {
      "params": [
       {
        "name": "firstHeaderSize",
        "type": "int"
       },
       {
        "name": "firstHeader",
        "type": "DataInputStream"
       },
       {
        "name": "localFileHeader",
        "type": "LocalFileHeader"
       }
      ],
      "name": "readExtraData",
      "type": null
     },
     {
      "params": [
       {
        "name": "signature",
        "type": "byte"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matches",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getArchiveName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getArchiveComment",
      "type": "String"
     },
     {
      "params": [],
      "name": "getNextEntry",
      "type": "ArjArchiveEntry"
     },
     {
      "params": [
       {
        "name": "ae",
        "type": "ArchiveEntry"
       }
      ],
      "name": "canReadEntryData",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "ARJ_MAGIC_1",
      "type": "int"
     },
     {
      "name": "ARJ_MAGIC_2",
      "type": "int"
     },
     {
      "name": "in",
      "type": "DataInputStream"
     },
     {
      "name": "charsetName",
      "type": "String"
     },
     {
      "name": "mainHeader",
      "type": "MainHeader"
     },
     {
      "name": "currentLocalFileHeader",
      "type": "LocalFileHeader"
     },
     {
      "name": "currentInputStream",
      "type": "InputStream"
     }
    ],
    "name": "ArjArchiveInputStream"
   }
  ]
 },
 {
  "filename": "ArjArchiveEntry.java",
  "package_name": "org.apache.commons.compress.archivers.arj",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getSize",
      "type": "long"
     },
     {
      "params": [],
      "name": "isDirectory",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getLastModifiedDate",
      "type": "Date"
     },
     {
      "params": [],
      "name": "getMode",
      "type": "int"
     },
     {
      "params": [],
      "name": "getUnixMode",
      "type": "int"
     },
     {
      "params": [],
      "name": "getHostOs",
      "type": "int"
     },
     {
      "params": [],
      "name": "isHostOsUnix",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getMethod",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "localFileHeader",
      "type": "LocalFileHeader"
     }
    ],
    "name": "ArjArchiveEntry"
   }
  ]
 },
 {
  "filename": "LocalFileHeader.java",
  "package_name": "org.apache.commons.compress.archivers.arj",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "archiverVersionNumber",
      "type": "int"
     },
     {
      "name": "minVersionToExtract",
      "type": "int"
     },
     {
      "name": "hostOS",
      "type": "int"
     },
     {
      "name": "arjFlags",
      "type": "int"
     },
     {
      "name": "method",
      "type": "int"
     },
     {
      "name": "fileType",
      "type": "int"
     },
     {
      "name": "reserved",
      "type": "int"
     },
     {
      "name": "dateTimeModified",
      "type": "int"
     },
     {
      "name": "compressedSize",
      "type": "long"
     },
     {
      "name": "originalSize",
      "type": "long"
     },
     {
      "name": "originalCrc32",
      "type": "long"
     },
     {
      "name": "fileSpecPosition",
      "type": "int"
     },
     {
      "name": "fileAccessMode",
      "type": "int"
     },
     {
      "name": "firstChapter",
      "type": "int"
     },
     {
      "name": "lastChapter",
      "type": "int"
     },
     {
      "name": "extendedFilePosition",
      "type": "int"
     },
     {
      "name": "dateTimeAccessed",
      "type": "int"
     },
     {
      "name": "dateTimeCreated",
      "type": "int"
     },
     {
      "name": "originalSizeEvenForVolumes",
      "type": "int"
     },
     {
      "name": "name",
      "type": "String"
     },
     {
      "name": "comment",
      "type": "String"
     },
     {
      "name": "extendedHeaders",
      "type": "byte"
     }
    ],
    "name": "LocalFileHeader"
   }
  ]
 },
 {
  "filename": "MainHeader.java",
  "package_name": "org.apache.commons.compress.archivers.arj",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "archiverVersionNumber",
      "type": "int"
     },
     {
      "name": "minVersionToExtract",
      "type": "int"
     },
     {
      "name": "hostOS",
      "type": "int"
     },
     {
      "name": "arjFlags",
      "type": "int"
     },
     {
      "name": "securityVersion",
      "type": "int"
     },
     {
      "name": "fileType",
      "type": "int"
     },
     {
      "name": "reserved",
      "type": "int"
     },
     {
      "name": "dateTimeCreated",
      "type": "int"
     },
     {
      "name": "dateTimeModified",
      "type": "int"
     },
     {
      "name": "archiveSize",
      "type": "long"
     },
     {
      "name": "securityEnvelopeFilePosition",
      "type": "int"
     },
     {
      "name": "fileSpecPosition",
      "type": "int"
     },
     {
      "name": "securityEnvelopeLength",
      "type": "int"
     },
     {
      "name": "encryptionVersion",
      "type": "int"
     },
     {
      "name": "lastChapter",
      "type": "int"
     },
     {
      "name": "arjProtectionFactor",
      "type": "int"
     },
     {
      "name": "arjFlags2",
      "type": "int"
     },
     {
      "name": "name",
      "type": "String"
     },
     {
      "name": "comment",
      "type": "String"
     },
     {
      "name": "extendedHeaderBytes",
      "type": "byte"
     }
    ],
    "name": "MainHeader"
   }
  ]
 },
 {
  "filename": "ArArchiveInputStream.java",
  "package_name": "org.apache.commons.compress.archivers.ar",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getNextArEntry",
      "type": "ArArchiveEntry"
     },
     {
      "params": [
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "getExtendedName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "input",
        "type": "byte"
       }
      ],
      "name": "asLong",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "input",
        "type": "byte"
       }
      ],
      "name": "asInt",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "input",
        "type": "byte"
       },
       {
        "name": "treatBlankAsZero",
        "type": "boolean"
       }
      ],
      "name": "asInt",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "input",
        "type": "byte"
       },
       {
        "name": "base",
        "type": "int"
       }
      ],
      "name": "asInt",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "input",
        "type": "byte"
       },
       {
        "name": "base",
        "type": "int"
       },
       {
        "name": "treatBlankAsZero",
        "type": "boolean"
       }
      ],
      "name": "asInt",
      "type": "int"
     },
     {
      "params": [],
      "name": "getNextEntry",
      "type": "ArchiveEntry"
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "signature",
        "type": "byte"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matches",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "isBSDLongName",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "bsdLongName",
        "type": "String"
       }
      ],
      "name": "getBSDLongName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "isGNUStringTable",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "length",
        "type": "byte"
       }
      ],
      "name": "readGNUStringTable",
      "type": "ArArchiveEntry"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "isGNULongName",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "input",
      "type": "InputStream"
     },
     {
      "name": "offset",
      "type": "long"
     },
     {
      "name": "closed",
      "type": "boolean"
     },
     {
      "name": "currentEntry",
      "type": "ArArchiveEntry"
     },
     {
      "name": "namebuffer",
      "type": "byte"
     },
     {
      "name": "entryOffset",
      "type": "long"
     },
     {
      "name": "NAME_BUF",
      "type": "byte"
     },
     {
      "name": "LAST_MODIFIED_BUF",
      "type": "byte"
     },
     {
      "name": "ID_BUF",
      "type": "byte"
     },
     {
      "name": "FILE_MODE_BUF",
      "type": "byte"
     },
     {
      "name": "LENGTH_BUF",
      "type": "byte"
     },
     {
      "name": "BSD_LONGNAME_PREFIX",
      "type": "String"
     },
     {
      "name": "BSD_LONGNAME_PREFIX_LEN",
      "type": "int"
     },
     {
      "name": "BSD_LONGNAME_PATTERN",
      "type": "String"
     },
     {
      "name": "GNU_STRING_TABLE_NAME",
      "type": "String"
     },
     {
      "name": "GNU_LONGNAME_PATTERN",
      "type": "String"
     }
    ],
    "name": "ArArchiveInputStream"
   }
  ]
 },
 {
  "filename": "ArArchiveEntry.java",
  "package_name": "org.apache.commons.compress.archivers.ar",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getSize",
      "type": "long"
     },
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getUserId",
      "type": "int"
     },
     {
      "params": [],
      "name": "getGroupId",
      "type": "int"
     },
     {
      "params": [],
      "name": "getMode",
      "type": "int"
     },
     {
      "params": [],
      "name": "getLastModified",
      "type": "long"
     },
     {
      "params": [],
      "name": "getLastModifiedDate",
      "type": "Date"
     },
     {
      "params": [],
      "name": "getLength",
      "type": "long"
     },
     {
      "params": [],
      "name": "isDirectory",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "obj",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "HEADER",
      "type": "String"
     },
     {
      "name": "TRAILER",
      "type": "String"
     },
     {
      "name": "name",
      "type": "String"
     },
     {
      "name": "userId",
      "type": "int"
     },
     {
      "name": "groupId",
      "type": "int"
     },
     {
      "name": "mode",
      "type": "int"
     },
     {
      "name": "DEFAULT_MODE",
      "type": "int"
     },
     {
      "name": "lastModified",
      "type": "long"
     },
     {
      "name": "length",
      "type": "long"
     }
    ],
    "name": "ArArchiveEntry"
   }
  ]
 },
 {
  "filename": "ArArchiveOutputStream.java",
  "package_name": "org.apache.commons.compress.archivers.ar",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "longFileMode",
        "type": "int"
       }
      ],
      "name": "setLongFileMode",
      "type": null
     },
     {
      "params": [],
      "name": "writeArchiveHeader",
      "type": "long"
     },
     {
      "params": [],
      "name": "closeArchiveEntry",
      "type": null
     },
     {
      "params": [
       {
        "name": "pEntry",
        "type": "ArchiveEntry"
       }
      ],
      "name": "putArchiveEntry",
      "type": null
     },
     {
      "params": [
       {
        "name": "pOffset",
        "type": "long"
       },
       {
        "name": "pNewOffset",
        "type": "long"
       },
       {
        "name": "pFill",
        "type": "char"
       }
      ],
      "name": "fill",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "String"
       }
      ],
      "name": "write",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "pEntry",
        "type": "ArArchiveEntry"
       }
      ],
      "name": "writeEntryHeader",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [
       {
        "name": "inputFile",
        "type": "File"
       },
       {
        "name": "entryName",
        "type": "String"
       }
      ],
      "name": "createArchiveEntry",
      "type": "ArchiveEntry"
     },
     {
      "params": [],
      "name": "finish",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "LONGFILE_ERROR",
      "type": "int"
     },
     {
      "name": "LONGFILE_BSD",
      "type": "int"
     },
     {
      "name": "out",
      "type": "OutputStream"
     },
     {
      "name": "entryOffset",
      "type": "long"
     },
     {
      "name": "prevEntry",
      "type": "ArArchiveEntry"
     },
     {
      "name": "haveUnclosedEntry",
      "type": "boolean"
     },
     {
      "name": "longFileMode",
      "type": "int"
     },
     {
      "name": "finished",
      "type": "boolean"
     }
    ],
    "name": "ArArchiveOutputStream"
   }
  ]
 },
 {
  "filename": "JarArchiveEntry.java",
  "package_name": "org.apache.commons.compress.archivers.jar",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getManifestAttributes",
      "type": "Attributes"
     },
     {
      "params": [],
      "name": "getCertificates",
      "type": "Certificate"
     }
    ],
    "fields": [
     {
      "name": "manifestAttributes",
      "type": "Attributes"
     },
     {
      "name": "certificates",
      "type": "Certificate"
     }
    ],
    "name": "JarArchiveEntry"
   }
  ]
 },
 {
  "filename": "JarArchiveInputStream.java",
  "package_name": "org.apache.commons.compress.archivers.jar",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getNextJarEntry",
      "type": "JarArchiveEntry"
     },
     {
      "params": [],
      "name": "getNextEntry",
      "type": "ArchiveEntry"
     },
     {
      "params": [
       {
        "name": "signature",
        "type": "byte"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matches",
      "type": "boolean"
     }
    ],
    "fields": [],
    "name": "JarArchiveInputStream"
   }
  ]
 },
 {
  "filename": "JarArchiveOutputStream.java",
  "package_name": "org.apache.commons.compress.archivers.jar",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "ze",
        "type": "ArchiveEntry"
       }
      ],
      "name": "putArchiveEntry",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "jarMarkerAdded",
      "type": "boolean"
     }
    ],
    "name": "JarArchiveOutputStream"
   }
  ]
 },
 {
  "filename": "DumpArchiveConstants.java",
  "package_name": "org.apache.commons.compress.archivers.dump",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "TP_SIZE",
      "type": "int"
     },
     {
      "name": "NTREC",
      "type": "int"
     },
     {
      "name": "HIGH_DENSITY_NTREC",
      "type": "int"
     },
     {
      "name": "OFS_MAGIC",
      "type": "int"
     },
     {
      "name": "NFS_MAGIC",
      "type": "int"
     },
     {
      "name": "FS_UFS2_MAGIC",
      "type": "int"
     },
     {
      "name": "CHECKSUM",
      "type": "int"
     },
     {
      "name": "LBLSIZE",
      "type": "int"
     },
     {
      "name": "NAMELEN",
      "type": "int"
     }
    ],
    "name": "DumpArchiveConstants"
   }
  ]
 },
 {
  "filename": "UnrecognizedFormatException.java",
  "package_name": "org.apache.commons.compress.archivers.dump",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "UnrecognizedFormatException"
   }
  ]
 },
 {
  "filename": "Dirent.java",
  "package_name": "org.apache.commons.compress.archivers.dump",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getIno",
      "type": "int"
     },
     {
      "params": [],
      "name": "getParentIno",
      "type": "int"
     },
     {
      "params": [],
      "name": "getType",
      "type": "int"
     },
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "ino",
      "type": "int"
     },
     {
      "name": "parentIno",
      "type": "int"
     },
     {
      "name": "type",
      "type": "int"
     },
     {
      "name": "name",
      "type": "String"
     }
    ],
    "name": "Dirent"
   }
  ]
 },
 {
  "filename": "TapeInputStream.java",
  "package_name": "org.apache.commons.compress.archivers.dump",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "recsPerBlock",
        "type": "int"
       },
       {
        "name": "isCompressed",
        "type": "boolean"
       }
      ],
      "name": "resetBlockSize",
      "type": null
     },
     {
      "params": [],
      "name": "available",
      "type": "int"
     },
     {
      "params": [],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "len",
        "type": "long"
       }
      ],
      "name": "skip",
      "type": "long"
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [],
      "name": "peek",
      "type": "byte"
     },
     {
      "params": [],
      "name": "readRecord",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "decompress",
        "type": "boolean"
       }
      ],
      "name": "readBlock",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "readFully",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getBytesRead",
      "type": "long"
     }
    ],
    "fields": [
     {
      "name": "blockBuffer",
      "type": "byte"
     },
     {
      "name": "currBlkIdx",
      "type": "int"
     },
     {
      "name": "blockSize",
      "type": "int"
     },
     {
      "name": "recordSize",
      "type": "int"
     },
     {
      "name": "readOffset",
      "type": "int"
     },
     {
      "name": "isCompressed",
      "type": "boolean"
     },
     {
      "name": "bytesRead",
      "type": "long"
     }
    ],
    "name": "TapeInputStream"
   }
  ]
 },
 {
  "filename": "UnsupportedCompressionAlgorithmException.java",
  "package_name": "org.apache.commons.compress.archivers.dump",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "UnsupportedCompressionAlgorithmException"
   }
  ]
 },
 {
  "filename": "InvalidFormatException.java",
  "package_name": "org.apache.commons.compress.archivers.dump",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getOffset",
      "type": "long"
     }
    ],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     },
     {
      "name": "offset",
      "type": "long"
     }
    ],
    "name": "InvalidFormatException"
   }
  ]
 },
 {
  "filename": "DumpArchiveEntry.java",
  "package_name": "org.apache.commons.compress.archivers.dump",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getSimpleName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "simpleName",
        "type": "String"
       }
      ],
      "name": "setSimpleName",
      "type": null
     },
     {
      "params": [],
      "name": "getIno",
      "type": "int"
     },
     {
      "params": [],
      "name": "getNlink",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "nlink",
        "type": "int"
       }
      ],
      "name": "setNlink",
      "type": null
     },
     {
      "params": [],
      "name": "getCreationTime",
      "type": "Date"
     },
     {
      "params": [
       {
        "name": "ctime",
        "type": "Date"
       }
      ],
      "name": "setCreationTime",
      "type": null
     },
     {
      "params": [],
      "name": "getGeneration",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "generation",
        "type": "int"
       }
      ],
      "name": "setGeneration",
      "type": null
     },
     {
      "params": [],
      "name": "isDeleted",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "isDeleted",
        "type": "boolean"
       }
      ],
      "name": "setDeleted",
      "type": null
     },
     {
      "params": [],
      "name": "getOffset",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "offset",
        "type": "long"
       }
      ],
      "name": "setOffset",
      "type": null
     },
     {
      "params": [],
      "name": "getVolume",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "volume",
        "type": "int"
       }
      ],
      "name": "setVolume",
      "type": null
     },
     {
      "params": [],
      "name": "getHeaderType",
      "type": "DumpArchiveConstants"
     },
     {
      "params": [],
      "name": "getHeaderCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "getHeaderHoles",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "idx",
        "type": "int"
       }
      ],
      "name": "isSparseRecord",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "o",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       }
      ],
      "name": "parse",
      "type": "DumpArchiveEntry"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       }
      ],
      "name": "update",
      "type": null
     },
     {
      "params": [],
      "name": "getName",
      "type": "String"
     },
     {
      "params": [],
      "name": "getOriginalName",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       }
      ],
      "name": "setName",
      "type": null
     },
     {
      "params": [],
      "name": "getLastModifiedDate",
      "type": "Date"
     },
     {
      "params": [],
      "name": "isDirectory",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isFile",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isSocket",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isChrDev",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isBlkDev",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isFifo",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "getType",
      "type": "TYPE"
     },
     {
      "params": [
       {
        "name": "type",
        "type": "TYPE"
       }
      ],
      "name": "setType",
      "type": null
     },
     {
      "params": [],
      "name": "getMode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "mode",
        "type": "int"
       }
      ],
      "name": "setMode",
      "type": null
     },
     {
      "params": [],
      "name": "getPermissions",
      "type": "Set"
     },
     {
      "params": [],
      "name": "getSize",
      "type": "long"
     },
     {
      "params": [],
      "name": "getEntrySize",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "size",
        "type": "long"
       }
      ],
      "name": "setSize",
      "type": null
     },
     {
      "params": [
       {
        "name": "mtime",
        "type": "Date"
       }
      ],
      "name": "setLastModifiedDate",
      "type": null
     },
     {
      "params": [],
      "name": "getAccessTime",
      "type": "Date"
     },
     {
      "params": [
       {
        "name": "atime",
        "type": "Date"
       }
      ],
      "name": "setAccessTime",
      "type": null
     },
     {
      "params": [],
      "name": "getUserId",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "uid",
        "type": "int"
       }
      ],
      "name": "setUserId",
      "type": null
     },
     {
      "params": [],
      "name": "getGroupId",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "gid",
        "type": "int"
       }
      ],
      "name": "setGroupId",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "name",
      "type": "String"
     },
     {
      "name": "type",
      "type": "TYPE"
     },
     {
      "name": "mode",
      "type": "int"
     },
     {
      "name": "permissions",
      "type": "Set"
     },
     {
      "name": "size",
      "type": "long"
     },
     {
      "name": "atime",
      "type": "long"
     },
     {
      "name": "mtime",
      "type": "long"
     },
     {
      "name": "uid",
      "type": "int"
     },
     {
      "name": "gid",
      "type": "int"
     },
     {
      "name": "summary",
      "type": "DumpArchiveSummary"
     },
     {
      "name": "header",
      "type": "TapeSegmentHeader"
     },
     {
      "name": "simpleName",
      "type": "String"
     },
     {
      "name": "originalName",
      "type": "String"
     },
     {
      "name": "volume",
      "type": "int"
     },
     {
      "name": "offset",
      "type": "long"
     },
     {
      "name": "ino",
      "type": "int"
     },
     {
      "name": "nlink",
      "type": "int"
     },
     {
      "name": "ctime",
      "type": "long"
     },
     {
      "name": "generation",
      "type": "int"
     },
     {
      "name": "isDeleted",
      "type": "boolean"
     }
    ],
    "name": "DumpArchiveEntry"
   }
  ]
 },
 {
  "filename": "DumpArchiveUtil.java",
  "package_name": "org.apache.commons.compress.archivers.dump",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       }
      ],
      "name": "calculateChecksum",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       }
      ],
      "name": "verify",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       }
      ],
      "name": "getIno",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "convert64",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "convert32",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "convert16",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "encoding",
        "type": "ZipEncoding"
       },
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "decode",
      "type": "String"
     }
    ],
    "fields": [],
    "name": "DumpArchiveUtil"
   }
  ]
 },
 {
  "filename": "DumpArchiveException.java",
  "package_name": "org.apache.commons.compress.archivers.dump",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "DumpArchiveException"
   }
  ]
 },
 {
  "filename": "DumpArchiveSummary.java",
  "package_name": "org.apache.commons.compress.archivers.dump",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getDumpDate",
      "type": "Date"
     },
     {
      "params": [
       {
        "name": "dumpDate",
        "type": "Date"
       }
      ],
      "name": "setDumpDate",
      "type": null
     },
     {
      "params": [],
      "name": "getPreviousDumpDate",
      "type": "Date"
     },
     {
      "params": [
       {
        "name": "previousDumpDate",
        "type": "Date"
       }
      ],
      "name": "setPreviousDumpDate",
      "type": null
     },
     {
      "params": [],
      "name": "getVolume",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "volume",
        "type": "int"
       }
      ],
      "name": "setVolume",
      "type": null
     },
     {
      "params": [],
      "name": "getLevel",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "level",
        "type": "int"
       }
      ],
      "name": "setLevel",
      "type": null
     },
     {
      "params": [],
      "name": "getLabel",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "label",
        "type": "String"
       }
      ],
      "name": "setLabel",
      "type": null
     },
     {
      "params": [],
      "name": "getFilesystem",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "filesystem",
        "type": "String"
       }
      ],
      "name": "setFilesystem",
      "type": null
     },
     {
      "params": [],
      "name": "getDevname",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "devname",
        "type": "String"
       }
      ],
      "name": "setDevname",
      "type": null
     },
     {
      "params": [],
      "name": "getHostname",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "hostname",
        "type": "String"
       }
      ],
      "name": "setHostname",
      "type": null
     },
     {
      "params": [],
      "name": "getFlags",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "flags",
        "type": "int"
       }
      ],
      "name": "setFlags",
      "type": null
     },
     {
      "params": [],
      "name": "getFirstRecord",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "firstrec",
        "type": "int"
       }
      ],
      "name": "setFirstRecord",
      "type": null
     },
     {
      "params": [],
      "name": "getNTRec",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "ntrec",
        "type": "int"
       }
      ],
      "name": "setNTRec",
      "type": null
     },
     {
      "params": [],
      "name": "isNewHeader",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isNewInode",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isCompressed",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isMetaDataOnly",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isExtendedAttributes",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "hashCode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "o",
        "type": "Object"
       }
      ],
      "name": "equals",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "dumpDate",
      "type": "long"
     },
     {
      "name": "previousDumpDate",
      "type": "long"
     },
     {
      "name": "volume",
      "type": "int"
     },
     {
      "name": "label",
      "type": "String"
     },
     {
      "name": "level",
      "type": "int"
     },
     {
      "name": "filesys",
      "type": "String"
     },
     {
      "name": "devname",
      "type": "String"
     },
     {
      "name": "hostname",
      "type": "String"
     },
     {
      "name": "flags",
      "type": "int"
     },
     {
      "name": "firstrec",
      "type": "int"
     },
     {
      "name": "ntrec",
      "type": "int"
     }
    ],
    "name": "DumpArchiveSummary"
   }
  ]
 },
 {
  "filename": "ShortFileException.java",
  "package_name": "org.apache.commons.compress.archivers.dump",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "ShortFileException"
   }
  ]
 },
 {
  "filename": "DumpArchiveInputStream.java",
  "package_name": "org.apache.commons.compress.archivers.dump",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "getBytesRead",
      "type": "long"
     },
     {
      "params": [],
      "name": "getSummary",
      "type": "DumpArchiveSummary"
     },
     {
      "params": [],
      "name": "readCLRI",
      "type": null
     },
     {
      "params": [],
      "name": "readBITS",
      "type": null
     },
     {
      "params": [],
      "name": "getNextDumpEntry",
      "type": "DumpArchiveEntry"
     },
     {
      "params": [],
      "name": "getNextEntry",
      "type": "DumpArchiveEntry"
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "DumpArchiveEntry"
       }
      ],
      "name": "readDirectoryEntry",
      "type": null
     },
     {
      "params": [
       {
        "name": "entry",
        "type": "DumpArchiveEntry"
       }
      ],
      "name": "getPath",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matches",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "summary",
      "type": "DumpArchiveSummary"
     },
     {
      "name": "active",
      "type": "DumpArchiveEntry"
     },
     {
      "name": "isClosed",
      "type": "boolean"
     },
     {
      "name": "hasHitEOF",
      "type": "boolean"
     },
     {
      "name": "entrySize",
      "type": "long"
     },
     {
      "name": "entryOffset",
      "type": "long"
     },
     {
      "name": "readIdx",
      "type": "int"
     },
     {
      "name": "readBuf",
      "type": "byte"
     },
     {
      "name": "blockBuffer",
      "type": "byte"
     },
     {
      "name": "recordOffset",
      "type": "int"
     },
     {
      "name": "filepos",
      "type": "long"
     },
     {
      "name": "raw",
      "type": "TapeInputStream"
     },
     {
      "name": "names",
      "type": "Map"
     },
     {
      "name": "pending",
      "type": "Map"
     },
     {
      "name": "queue",
      "type": "Queue"
     },
     {
      "name": "zipEncoding",
      "type": "ZipEncoding"
     },
     {
      "name": "encoding",
      "type": "String"
     }
    ],
    "name": "DumpArchiveInputStream"
   }
  ]
 },
 {
  "filename": "Change.java",
  "package_name": "org.apache.commons.compress.changes",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getEntry",
      "type": "ArchiveEntry"
     },
     {
      "params": [],
      "name": "getInput",
      "type": "InputStream"
     },
     {
      "params": [],
      "name": "targetFile",
      "type": "String"
     },
     {
      "params": [],
      "name": "type",
      "type": "int"
     },
     {
      "params": [],
      "name": "isReplaceMode",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "targetFile",
      "type": "String"
     },
     {
      "name": "entry",
      "type": "ArchiveEntry"
     },
     {
      "name": "input",
      "type": "InputStream"
     },
     {
      "name": "replaceMode",
      "type": "boolean"
     },
     {
      "name": "type",
      "type": "int"
     },
     {
      "name": "TYPE_DELETE",
      "type": "int"
     },
     {
      "name": "TYPE_ADD",
      "type": "int"
     },
     {
      "name": "TYPE_MOVE",
      "type": "int"
     },
     {
      "name": "TYPE_DELETE_DIR",
      "type": "int"
     }
    ],
    "name": "Change"
   }
  ]
 },
 {
  "filename": "ChangeSetResults.java",
  "package_name": "org.apache.commons.compress.changes",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       }
      ],
      "name": "deleted",
      "type": null
     },
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       }
      ],
      "name": "addedFromStream",
      "type": null
     },
     {
      "params": [
       {
        "name": "fileName",
        "type": "String"
       }
      ],
      "name": "addedFromChangeSet",
      "type": null
     },
     {
      "params": [],
      "name": "getAddedFromChangeSet",
      "type": "List"
     },
     {
      "params": [],
      "name": "getAddedFromStream",
      "type": "List"
     },
     {
      "params": [],
      "name": "getDeleted",
      "type": "List"
     },
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "hasBeenAdded",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "addedFromChangeSet",
      "type": "List"
     },
     {
      "name": "addedFromStream",
      "type": "List"
     },
     {
      "name": "deleted",
      "type": "List"
     }
    ],
    "name": "ChangeSetResults"
   }
  ]
 },
 {
  "filename": "ChangeSet.java",
  "package_name": "org.apache.commons.compress.changes",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "delete",
      "type": null
     },
     {
      "params": [
       {
        "name": "dirName",
        "type": "String"
       }
      ],
      "name": "deleteDir",
      "type": null
     },
     {
      "params": [
       {
        "name": "pEntry",
        "type": "ArchiveEntry"
       },
       {
        "name": "pInput",
        "type": "InputStream"
       }
      ],
      "name": "add",
      "type": null
     },
     {
      "params": [
       {
        "name": "pEntry",
        "type": "ArchiveEntry"
       },
       {
        "name": "pInput",
        "type": "InputStream"
       },
       {
        "name": "replace",
        "type": "boolean"
       }
      ],
      "name": "add",
      "type": null
     },
     {
      "params": [
       {
        "name": "pChange",
        "type": "Change"
       }
      ],
      "name": "addAddition",
      "type": null
     },
     {
      "params": [
       {
        "name": "pChange",
        "type": "Change"
       }
      ],
      "name": "addDeletion",
      "type": null
     },
     {
      "params": [],
      "name": "getChanges",
      "type": "Set"
     }
    ],
    "fields": [
     {
      "name": "changes",
      "type": "Set"
     }
    ],
    "name": "ChangeSet"
   }
  ]
 },
 {
  "filename": "ChangeSetPerformer.java",
  "package_name": "org.apache.commons.compress.changes",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "in",
        "type": "ArchiveInputStream"
       },
       {
        "name": "out",
        "type": "ArchiveOutputStream"
       }
      ],
      "name": "perform",
      "type": "ChangeSetResults"
     },
     {
      "params": [
       {
        "name": "in",
        "type": "ZipFile"
       },
       {
        "name": "out",
        "type": "ArchiveOutputStream"
       }
      ],
      "name": "perform",
      "type": "ChangeSetResults"
     },
     {
      "params": [
       {
        "name": "entryIterator",
        "type": "ArchiveEntryIterator"
       },
       {
        "name": "out",
        "type": "ArchiveOutputStream"
       }
      ],
      "name": "perform",
      "type": "ChangeSetResults"
     },
     {
      "params": [
       {
        "name": "workingSet",
        "type": "Set"
       },
       {
        "name": "entry",
        "type": "ArchiveEntry"
       }
      ],
      "name": "isDeletedLater",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "in",
        "type": "InputStream"
       },
       {
        "name": "out",
        "type": "ArchiveOutputStream"
       },
       {
        "name": "entry",
        "type": "ArchiveEntry"
       }
      ],
      "name": "copyStream",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "changes",
      "type": "Set"
     }
    ],
    "name": "ChangeSetPerformer"
   }
  ]
 },
 {
  "filename": "CompressorInputStream.java",
  "package_name": "org.apache.commons.compress.compressors",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "read",
        "type": "int"
       }
      ],
      "name": "count",
      "type": null
     },
     {
      "params": [
       {
        "name": "read",
        "type": "long"
       }
      ],
      "name": "count",
      "type": null
     },
     {
      "params": [
       {
        "name": "pushedBack",
        "type": "long"
       }
      ],
      "name": "pushedBackBytes",
      "type": null
     },
     {
      "params": [],
      "name": "getCount",
      "type": "int"
     },
     {
      "params": [],
      "name": "getBytesRead",
      "type": "long"
     }
    ],
    "fields": [
     {
      "name": "bytesRead",
      "type": "long"
     }
    ],
    "name": "CompressorInputStream"
   }
  ]
 },
 {
  "filename": "CompressorOutputStream.java",
  "package_name": "org.apache.commons.compress.compressors",
  "classes": [
   {
    "methods": [],
    "fields": [],
    "name": "CompressorOutputStream"
   }
  ]
 },
 {
  "filename": "CompressorException.java",
  "package_name": "org.apache.commons.compress.compressors",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "serialVersionUID",
      "type": "long"
     }
    ],
    "name": "CompressorException"
   }
  ]
 },
 {
  "filename": "CompressorStreamFactory.java",
  "package_name": "org.apache.commons.compress.compressors",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "decompressConcatenated",
        "type": "boolean"
       }
      ],
      "name": "setDecompressConcatenated",
      "type": null
     },
     {
      "params": [
       {
        "name": "in",
        "type": "InputStream"
       }
      ],
      "name": "createCompressorInputStream",
      "type": "CompressorInputStream"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "in",
        "type": "InputStream"
       }
      ],
      "name": "createCompressorInputStream",
      "type": "CompressorInputStream"
     },
     {
      "params": [
       {
        "name": "name",
        "type": "String"
       },
       {
        "name": "out",
        "type": "OutputStream"
       }
      ],
      "name": "createCompressorOutputStream",
      "type": "CompressorOutputStream"
     },
     {
      "params": [],
      "name": "getDecompressConcatenated",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "BZIP2",
      "type": "String"
     },
     {
      "name": "GZIP",
      "type": "String"
     },
     {
      "name": "PACK200",
      "type": "String"
     },
     {
      "name": "XZ",
      "type": "String"
     },
     {
      "name": "LZMA",
      "type": "String"
     },
     {
      "name": "SNAPPY_FRAMED",
      "type": "String"
     },
     {
      "name": "SNAPPY_RAW",
      "type": "String"
     },
     {
      "name": "Z",
      "type": "String"
     },
     {
      "name": "DEFLATE",
      "type": "String"
     },
     {
      "name": "decompressUntilEOF",
      "type": "Boolean"
     },
     {
      "name": "decompressConcatenated",
      "type": "boolean"
     }
    ],
    "name": "CompressorStreamFactory"
   }
  ]
 },
 {
  "filename": "FileNameUtil.java",
  "package_name": "org.apache.commons.compress.compressors",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "isCompressedFilename",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "getUncompressedFilename",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "getCompressedFilename",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "compressSuffix",
      "type": "Map"
     },
     {
      "name": "uncompressSuffix",
      "type": "Map"
     },
     {
      "name": "longestCompressedSuffix",
      "type": "int"
     },
     {
      "name": "shortestCompressedSuffix",
      "type": "int"
     },
     {
      "name": "longestUncompressedSuffix",
      "type": "int"
     },
     {
      "name": "shortestUncompressedSuffix",
      "type": "int"
     },
     {
      "name": "defaultExtension",
      "type": "String"
     }
    ],
    "name": "FileNameUtil"
   }
  ]
 },
 {
  "filename": "BZip2CompressorOutputStream.java",
  "package_name": "org.apache.commons.compress.compressors.bzip2",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "len",
        "type": "byte"
       },
       {
        "name": "freq",
        "type": "int"
       },
       {
        "name": "dat",
        "type": "Data"
       },
       {
        "name": "alphaSize",
        "type": "int"
       },
       {
        "name": "maxLen",
        "type": "int"
       }
      ],
      "name": "hbMakeCodeLengths",
      "type": null
     },
     {
      "params": [
       {
        "name": "inputLength",
        "type": "long"
       }
      ],
      "name": "chooseBlockSize",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [],
      "name": "writeRun",
      "type": null
     },
     {
      "params": [],
      "name": "finalize",
      "type": null
     },
     {
      "params": [],
      "name": "finish",
      "type": null
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [],
      "name": "flush",
      "type": null
     },
     {
      "params": [],
      "name": "init",
      "type": null
     },
     {
      "params": [],
      "name": "initBlock",
      "type": null
     },
     {
      "params": [],
      "name": "endBlock",
      "type": null
     },
     {
      "params": [],
      "name": "endCompression",
      "type": null
     },
     {
      "params": [],
      "name": "getBlockSize",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "offs",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "int"
       }
      ],
      "name": "write0",
      "type": null
     },
     {
      "params": [
       {
        "name": "code",
        "type": "int"
       },
       {
        "name": "length",
        "type": "byte"
       },
       {
        "name": "minLen",
        "type": "int"
       },
       {
        "name": "maxLen",
        "type": "int"
       },
       {
        "name": "alphaSize",
        "type": "int"
       }
      ],
      "name": "hbAssignCodes",
      "type": null
     },
     {
      "params": [],
      "name": "bsFinishedWithStream",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "int"
       },
       {
        "name": "v",
        "type": "int"
       }
      ],
      "name": "bsW",
      "type": null
     },
     {
      "params": [
       {
        "name": "c",
        "type": "int"
       }
      ],
      "name": "bsPutUByte",
      "type": null
     },
     {
      "params": [
       {
        "name": "u",
        "type": "int"
       }
      ],
      "name": "bsPutInt",
      "type": null
     },
     {
      "params": [],
      "name": "sendMTFValues",
      "type": null
     },
     {
      "params": [
       {
        "name": "nGroups",
        "type": "int"
       },
       {
        "name": "alphaSize",
        "type": "int"
       }
      ],
      "name": "sendMTFValues0",
      "type": null
     },
     {
      "params": [
       {
        "name": "nGroups",
        "type": "int"
       },
       {
        "name": "alphaSize",
        "type": "int"
       }
      ],
      "name": "sendMTFValues1",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "nGroups",
        "type": "int"
       },
       {
        "name": "nSelectors",
        "type": "int"
       }
      ],
      "name": "sendMTFValues2",
      "type": null
     },
     {
      "params": [
       {
        "name": "nGroups",
        "type": "int"
       },
       {
        "name": "alphaSize",
        "type": "int"
       }
      ],
      "name": "sendMTFValues3",
      "type": null
     },
     {
      "params": [],
      "name": "sendMTFValues4",
      "type": null
     },
     {
      "params": [
       {
        "name": "nGroups",
        "type": "int"
       },
       {
        "name": "nSelectors",
        "type": "int"
       }
      ],
      "name": "sendMTFValues5",
      "type": null
     },
     {
      "params": [
       {
        "name": "nGroups",
        "type": "int"
       },
       {
        "name": "alphaSize",
        "type": "int"
       }
      ],
      "name": "sendMTFValues6",
      "type": null
     },
     {
      "params": [],
      "name": "sendMTFValues7",
      "type": null
     },
     {
      "params": [],
      "name": "moveToFrontCodeAndSend",
      "type": null
     },
     {
      "params": [],
      "name": "blockSort",
      "type": null
     },
     {
      "params": [],
      "name": "generateMTFValues",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "MIN_BLOCKSIZE",
      "type": "int"
     },
     {
      "name": "MAX_BLOCKSIZE",
      "type": "int"
     },
     {
      "name": "GREATER_ICOST",
      "type": "int"
     },
     {
      "name": "LESSER_ICOST",
      "type": "int"
     },
     {
      "name": "last",
      "type": "int"
     },
     {
      "name": "blockSize100k",
      "type": "int"
     },
     {
      "name": "bsBuff",
      "type": "int"
     },
     {
      "name": "bsLive",
      "type": "int"
     },
     {
      "name": "crc",
      "type": "CRC"
     },
     {
      "name": "nInUse",
      "type": "int"
     },
     {
      "name": "nMTF",
      "type": "int"
     },
     {
      "name": "currentChar",
      "type": "int"
     },
     {
      "name": "runLength",
      "type": "int"
     },
     {
      "name": "blockCRC",
      "type": "int"
     },
     {
      "name": "combinedCRC",
      "type": "int"
     },
     {
      "name": "allowableBlockSize",
      "type": "int"
     },
     {
      "name": "data",
      "type": "Data"
     },
     {
      "name": "blockSorter",
      "type": "BlockSort"
     },
     {
      "name": "out",
      "type": "OutputStream"
     }
    ],
    "name": "BZip2CompressorOutputStream"
   }
  ]
 },
 {
  "filename": "BlockSort.java",
  "package_name": "org.apache.commons.compress.compressors.bzip2",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "data",
        "type": "BZip2CompressorOutputStream"
       },
       {
        "name": "last",
        "type": "int"
       }
      ],
      "name": "blockSort",
      "type": null
     },
     {
      "params": [
       {
        "name": "data",
        "type": "BZip2CompressorOutputStream"
       },
       {
        "name": "last",
        "type": "int"
       }
      ],
      "name": "fallbackSort",
      "type": null
     },
     {
      "params": [
       {
        "name": "fmap",
        "type": "int"
       },
       {
        "name": "eclass",
        "type": "int"
       },
       {
        "name": "lo",
        "type": "int"
       },
       {
        "name": "hi",
        "type": "int"
       }
      ],
      "name": "fallbackSimpleSort",
      "type": null
     },
     {
      "params": [
       {
        "name": "fmap",
        "type": "int"
       },
       {
        "name": "zz1",
        "type": "int"
       },
       {
        "name": "zz2",
        "type": "int"
       }
      ],
      "name": "fswap",
      "type": null
     },
     {
      "params": [
       {
        "name": "fmap",
        "type": "int"
       },
       {
        "name": "yyp1",
        "type": "int"
       },
       {
        "name": "yyp2",
        "type": "int"
       },
       {
        "name": "yyn",
        "type": "int"
       }
      ],
      "name": "fvswap",
      "type": null
     },
     {
      "params": [
       {
        "name": "a",
        "type": "int"
       },
       {
        "name": "b",
        "type": "int"
       }
      ],
      "name": "fmin",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "sp",
        "type": "int"
       },
       {
        "name": "lz",
        "type": "int"
       },
       {
        "name": "hz",
        "type": "int"
       }
      ],
      "name": "fpush",
      "type": null
     },
     {
      "params": [
       {
        "name": "sp",
        "type": "int"
       }
      ],
      "name": "fpop",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "fmap",
        "type": "int"
       },
       {
        "name": "eclass",
        "type": "int"
       },
       {
        "name": "loSt",
        "type": "int"
       },
       {
        "name": "hiSt",
        "type": "int"
       }
      ],
      "name": "fallbackQSort3",
      "type": null
     },
     {
      "params": [],
      "name": "getEclass",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "fmap",
        "type": "int"
       },
       {
        "name": "block",
        "type": "byte"
       },
       {
        "name": "nblock",
        "type": "int"
       }
      ],
      "name": "fallbackSort",
      "type": null
     },
     {
      "params": [
       {
        "name": "dataShadow",
        "type": "BZip2CompressorOutputStream"
       },
       {
        "name": "lo",
        "type": "int"
       },
       {
        "name": "hi",
        "type": "int"
       },
       {
        "name": "d",
        "type": "int"
       },
       {
        "name": "lastShadow",
        "type": "int"
       }
      ],
      "name": "mainSimpleSort",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "fmap",
        "type": "int"
       },
       {
        "name": "p1",
        "type": "int"
       },
       {
        "name": "p2",
        "type": "int"
       },
       {
        "name": "n",
        "type": "int"
       }
      ],
      "name": "vswap",
      "type": null
     },
     {
      "params": [
       {
        "name": "a",
        "type": "byte"
       },
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "c",
        "type": "byte"
       }
      ],
      "name": "med3",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "dataShadow",
        "type": "BZip2CompressorOutputStream"
       },
       {
        "name": "loSt",
        "type": "int"
       },
       {
        "name": "hiSt",
        "type": "int"
       },
       {
        "name": "dSt",
        "type": "int"
       },
       {
        "name": "last",
        "type": "int"
       }
      ],
      "name": "mainQSort3",
      "type": null
     },
     {
      "params": [
       {
        "name": "dataShadow",
        "type": "BZip2CompressorOutputStream"
       },
       {
        "name": "lastShadow",
        "type": "int"
       }
      ],
      "name": "mainSort",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "QSORT_STACK_SIZE",
      "type": "int"
     },
     {
      "name": "FALLBACK_QSORT_STACK_SIZE",
      "type": "int"
     },
     {
      "name": "STACK_SIZE",
      "type": "int"
     },
     {
      "name": "workDone",
      "type": "int"
     },
     {
      "name": "workLimit",
      "type": "int"
     },
     {
      "name": "firstAttempt",
      "type": "boolean"
     },
     {
      "name": "stack_ll",
      "type": "int"
     },
     {
      "name": "stack_hh",
      "type": "int"
     },
     {
      "name": "stack_dd",
      "type": "int"
     },
     {
      "name": "mainSort_runningOrder",
      "type": "int"
     },
     {
      "name": "mainSort_copy",
      "type": "int"
     },
     {
      "name": "mainSort_bigDone",
      "type": "boolean"
     },
     {
      "name": "ftab",
      "type": "int"
     },
     {
      "name": "quadrant",
      "type": "char"
     },
     {
      "name": "FALLBACK_QSORT_SMALL_THRESH",
      "type": "int"
     },
     {
      "name": "eclass",
      "type": "int"
     },
     {
      "name": "INCS",
      "type": "int"
     },
     {
      "name": "SMALL_THRESH",
      "type": "int"
     },
     {
      "name": "DEPTH_THRESH",
      "type": "int"
     },
     {
      "name": "WORK_FACTOR",
      "type": "int"
     },
     {
      "name": "SETMASK",
      "type": "int"
     },
     {
      "name": "CLEARMASK",
      "type": "int"
     }
    ],
    "name": "BlockSort"
   }
  ]
 },
 {
  "filename": "BZip2Utils.java",
  "package_name": "org.apache.commons.compress.compressors.bzip2",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "isCompressedFilename",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "getUncompressedFilename",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "getCompressedFilename",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "fileNameUtil",
      "type": "FileNameUtil"
     }
    ],
    "name": "BZip2Utils"
   }
  ]
 },
 {
  "filename": "CRC.java",
  "package_name": "org.apache.commons.compress.compressors.bzip2",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "initialiseCRC",
      "type": null
     },
     {
      "params": [],
      "name": "getFinalCRC",
      "type": "int"
     },
     {
      "params": [],
      "name": "getGlobalCRC",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "newCrc",
        "type": "int"
       }
      ],
      "name": "setGlobalCRC",
      "type": null
     },
     {
      "params": [
       {
        "name": "inCh",
        "type": "int"
       }
      ],
      "name": "updateCRC",
      "type": null
     },
     {
      "params": [
       {
        "name": "inCh",
        "type": "int"
       },
       {
        "name": "repeat",
        "type": "int"
       }
      ],
      "name": "updateCRC",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "crc32Table",
      "type": "int"
     },
     {
      "name": "globalCrc",
      "type": "int"
     }
    ],
    "name": "CRC"
   }
  ]
 },
 {
  "filename": "BZip2CompressorInputStream.java",
  "package_name": "org.apache.commons.compress.compressors.bzip2",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "dest",
        "type": "byte"
       },
       {
        "name": "offs",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [],
      "name": "makeMaps",
      "type": null
     },
     {
      "params": [],
      "name": "read0",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "isFirstStream",
        "type": "boolean"
       }
      ],
      "name": "init",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "initBlock",
      "type": null
     },
     {
      "params": [],
      "name": "endBlock",
      "type": null
     },
     {
      "params": [],
      "name": "complete",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [
       {
        "name": "n",
        "type": "int"
       }
      ],
      "name": "bsR",
      "type": "int"
     },
     {
      "params": [],
      "name": "bsGetBit",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "bsGetUByte",
      "type": "char"
     },
     {
      "params": [],
      "name": "bsGetInt",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "limit",
        "type": "int"
       },
       {
        "name": "base",
        "type": "int"
       },
       {
        "name": "perm",
        "type": "int"
       },
       {
        "name": "length",
        "type": "char"
       },
       {
        "name": "minLen",
        "type": "int"
       },
       {
        "name": "maxLen",
        "type": "int"
       },
       {
        "name": "alphaSize",
        "type": "int"
       }
      ],
      "name": "hbCreateDecodeTables",
      "type": null
     },
     {
      "params": [],
      "name": "recvDecodingTables",
      "type": null
     },
     {
      "params": [
       {
        "name": "alphaSize",
        "type": "int"
       },
       {
        "name": "nGroups",
        "type": "int"
       }
      ],
      "name": "createHuffmanDecodingTables",
      "type": null
     },
     {
      "params": [],
      "name": "getAndMoveToFrontDecode",
      "type": null
     },
     {
      "params": [
       {
        "name": "groupNo",
        "type": "int"
       }
      ],
      "name": "getAndMoveToFrontDecode0",
      "type": "int"
     },
     {
      "params": [],
      "name": "setupBlock",
      "type": "int"
     },
     {
      "params": [],
      "name": "setupRandPartA",
      "type": "int"
     },
     {
      "params": [],
      "name": "setupNoRandPartA",
      "type": "int"
     },
     {
      "params": [],
      "name": "setupRandPartB",
      "type": "int"
     },
     {
      "params": [],
      "name": "setupRandPartC",
      "type": "int"
     },
     {
      "params": [],
      "name": "setupNoRandPartB",
      "type": "int"
     },
     {
      "params": [],
      "name": "setupNoRandPartC",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "signature",
        "type": "byte"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matches",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "last",
      "type": "int"
     },
     {
      "name": "origPtr",
      "type": "int"
     },
     {
      "name": "blockSize100k",
      "type": "int"
     },
     {
      "name": "blockRandomised",
      "type": "boolean"
     },
     {
      "name": "bsBuff",
      "type": "int"
     },
     {
      "name": "bsLive",
      "type": "int"
     },
     {
      "name": "crc",
      "type": "CRC"
     },
     {
      "name": "nInUse",
      "type": "int"
     },
     {
      "name": "in",
      "type": "InputStream"
     },
     {
      "name": "decompressConcatenated",
      "type": "boolean"
     },
     {
      "name": "EOF",
      "type": "int"
     },
     {
      "name": "START_BLOCK_STATE",
      "type": "int"
     },
     {
      "name": "RAND_PART_A_STATE",
      "type": "int"
     },
     {
      "name": "RAND_PART_B_STATE",
      "type": "int"
     },
     {
      "name": "RAND_PART_C_STATE",
      "type": "int"
     },
     {
      "name": "NO_RAND_PART_A_STATE",
      "type": "int"
     },
     {
      "name": "NO_RAND_PART_B_STATE",
      "type": "int"
     },
     {
      "name": "NO_RAND_PART_C_STATE",
      "type": "int"
     },
     {
      "name": "currentState",
      "type": "int"
     },
     {
      "name": "storedBlockCRC",
      "type": "int"
     },
     {
      "name": "storedCombinedCRC",
      "type": "int"
     },
     {
      "name": "computedBlockCRC",
      "type": "int"
     },
     {
      "name": "computedCombinedCRC",
      "type": "int"
     },
     {
      "name": "su_count",
      "type": "int"
     },
     {
      "name": "su_ch2",
      "type": "int"
     },
     {
      "name": "su_chPrev",
      "type": "int"
     },
     {
      "name": "su_i2",
      "type": "int"
     },
     {
      "name": "su_j2",
      "type": "int"
     },
     {
      "name": "su_rNToGo",
      "type": "int"
     },
     {
      "name": "su_rTPos",
      "type": "int"
     },
     {
      "name": "su_tPos",
      "type": "int"
     },
     {
      "name": "su_z",
      "type": "char"
     },
     {
      "name": "data",
      "type": "BZip2CompressorInputStream"
     }
    ],
    "name": "BZip2CompressorInputStream"
   }
  ]
 },
 {
  "filename": "BZip2Constants.java",
  "package_name": "org.apache.commons.compress.compressors.bzip2",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "BASEBLOCKSIZE",
      "type": "int"
     },
     {
      "name": "MAX_ALPHA_SIZE",
      "type": "int"
     },
     {
      "name": "MAX_CODE_LEN",
      "type": "int"
     },
     {
      "name": "RUNA",
      "type": "int"
     },
     {
      "name": "RUNB",
      "type": "int"
     },
     {
      "name": "N_GROUPS",
      "type": "int"
     },
     {
      "name": "G_SIZE",
      "type": "int"
     },
     {
      "name": "N_ITERS",
      "type": "int"
     },
     {
      "name": "MAX_SELECTORS",
      "type": "int"
     },
     {
      "name": "NUM_OVERSHOOT_BYTES",
      "type": "int"
     }
    ],
    "name": "BZip2Constants"
   }
  ]
 },
 {
  "filename": "Rand.java",
  "package_name": "org.apache.commons.compress.compressors.bzip2",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "i",
        "type": "int"
       }
      ],
      "name": "rNums",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "RNUMS",
      "type": "int"
     }
    ],
    "name": "Rand"
   }
  ]
 },
 {
  "filename": "GzipCompressorOutputStream.java",
  "package_name": "org.apache.commons.compress.compressors.gzip",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "parameters",
        "type": "GzipParameters"
       }
      ],
      "name": "writeHeader",
      "type": null
     },
     {
      "params": [],
      "name": "writeTrailer",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [],
      "name": "deflate",
      "type": null
     },
     {
      "params": [],
      "name": "finish",
      "type": null
     },
     {
      "params": [],
      "name": "flush",
      "type": null
     },
     {
      "params": [],
      "name": "close",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "FNAME",
      "type": "int"
     },
     {
      "name": "FCOMMENT",
      "type": "int"
     },
     {
      "name": "out",
      "type": "OutputStream"
     },
     {
      "name": "deflater",
      "type": "Deflater"
     },
     {
      "name": "deflateBuffer",
      "type": "byte"
     },
     {
      "name": "closed",
      "type": "boolean"
     },
     {
      "name": "crc",
      "type": "CRC32"
     }
    ],
    "name": "GzipCompressorOutputStream"
   }
  ]
 },
 {
  "filename": "GzipUtils.java",
  "package_name": "org.apache.commons.compress.compressors.gzip",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "isCompressedFilename",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "getUncompressedFilename",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "getCompressedFilename",
      "type": "String"
     }
    ],
    "fields": [
     {
      "name": "fileNameUtil",
      "type": "FileNameUtil"
     }
    ],
    "name": "GzipUtils"
   }
  ]
 },
 {
  "filename": "GzipParameters.java",
  "package_name": "org.apache.commons.compress.compressors.gzip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getCompressionLevel",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "compressionLevel",
        "type": "int"
       }
      ],
      "name": "setCompressionLevel",
      "type": null
     },
     {
      "params": [],
      "name": "getModificationTime",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "modificationTime",
        "type": "long"
       }
      ],
      "name": "setModificationTime",
      "type": null
     },
     {
      "params": [],
      "name": "getFilename",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "setFilename",
      "type": null
     },
     {
      "params": [],
      "name": "getComment",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "comment",
        "type": "String"
       }
      ],
      "name": "setComment",
      "type": null
     },
     {
      "params": [],
      "name": "getOperatingSystem",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "operatingSystem",
        "type": "int"
       }
      ],
      "name": "setOperatingSystem",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "compressionLevel",
      "type": "int"
     },
     {
      "name": "modificationTime",
      "type": "long"
     },
     {
      "name": "filename",
      "type": "String"
     },
     {
      "name": "comment",
      "type": "String"
     },
     {
      "name": "operatingSystem",
      "type": "int"
     }
    ],
    "name": "GzipParameters"
   }
  ]
 },
 {
  "filename": "GzipCompressorInputStream.java",
  "package_name": "org.apache.commons.compress.compressors.gzip",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getMetaData",
      "type": "GzipParameters"
     },
     {
      "params": [
       {
        "name": "isFirstMember",
        "type": "boolean"
       }
      ],
      "name": "init",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "inData",
        "type": "DataInputStream"
       }
      ],
      "name": "readToNull",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "inData",
        "type": "DataInputStream"
       }
      ],
      "name": "readLittleEndianInt",
      "type": "long"
     },
     {
      "params": [],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "signature",
        "type": "byte"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matches",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "close",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "FHCRC",
      "type": "int"
     },
     {
      "name": "FEXTRA",
      "type": "int"
     },
     {
      "name": "FNAME",
      "type": "int"
     },
     {
      "name": "FCOMMENT",
      "type": "int"
     },
     {
      "name": "FRESERVED",
      "type": "int"
     },
     {
      "name": "in",
      "type": "InputStream"
     },
     {
      "name": "decompressConcatenated",
      "type": "boolean"
     },
     {
      "name": "buf",
      "type": "byte"
     },
     {
      "name": "bufUsed",
      "type": "int"
     },
     {
      "name": "inf",
      "type": "Inflater"
     },
     {
      "name": "crc",
      "type": "CRC32"
     },
     {
      "name": "endReached",
      "type": "boolean"
     },
     {
      "name": "oneByte",
      "type": "byte"
     },
     {
      "name": "parameters",
      "type": "GzipParameters"
     }
    ],
    "name": "GzipCompressorInputStream"
   }
  ]
 },
 {
  "filename": "XZCompressorOutputStream.java",
  "package_name": "org.apache.commons.compress.compressors.xz",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "b",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [],
      "name": "flush",
      "type": null
     },
     {
      "params": [],
      "name": "finish",
      "type": null
     },
     {
      "params": [],
      "name": "close",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "out",
      "type": "XZOutputStream"
     }
    ],
    "name": "XZCompressorOutputStream"
   }
  ]
 },
 {
  "filename": "XZUtils.java",
  "package_name": "org.apache.commons.compress.compressors.xz",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "signature",
        "type": "byte"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matches",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isXZCompressionAvailable",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "internalIsXZCompressionAvailable",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "isCompressedFilename",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "getUncompressedFilename",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "getCompressedFilename",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "doCache",
        "type": "boolean"
       }
      ],
      "name": "setCacheXZAvailablity",
      "type": null
     },
     {
      "params": [],
      "name": "getCachedXZAvailability",
      "type": "CachedAvailability"
     }
    ],
    "fields": [
     {
      "name": "fileNameUtil",
      "type": "FileNameUtil"
     },
     {
      "name": "HEADER_MAGIC",
      "type": "byte"
     },
     {
      "name": "cachedXZAvailability",
      "type": "CachedAvailability"
     }
    ],
    "name": "XZUtils"
   }
  ]
 },
 {
  "filename": "XZCompressorInputStream.java",
  "package_name": "org.apache.commons.compress.compressors.xz",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "signature",
        "type": "byte"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matches",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "long"
       }
      ],
      "name": "skip",
      "type": "long"
     },
     {
      "params": [],
      "name": "available",
      "type": "int"
     },
     {
      "params": [],
      "name": "close",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "in",
      "type": "InputStream"
     }
    ],
    "name": "XZCompressorInputStream"
   }
  ]
 },
 {
  "filename": "FramedSnappyCompressorInputStream.java",
  "package_name": "org.apache.commons.compress.compressors.snappy",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "read",
      "type": "int"
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [],
      "name": "available",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "readOnce",
      "type": "int"
     },
     {
      "params": [],
      "name": "readNextBlock",
      "type": null
     },
     {
      "params": [],
      "name": "readCrc",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "x",
        "type": "long"
       }
      ],
      "name": "unmask",
      "type": "long"
     },
     {
      "params": [],
      "name": "readSize",
      "type": "int"
     },
     {
      "params": [],
      "name": "skipBlock",
      "type": null
     },
     {
      "params": [],
      "name": "readStreamIdentifier",
      "type": null
     },
     {
      "params": [],
      "name": "readOneByte",
      "type": "int"
     },
     {
      "params": [],
      "name": "verifyLastChecksumAndReset",
      "type": null
     },
     {
      "params": [
       {
        "name": "signature",
        "type": "byte"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matches",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "MASK_OFFSET",
      "type": "long"
     },
     {
      "name": "STREAM_IDENTIFIER_TYPE",
      "type": "int"
     },
     {
      "name": "COMPRESSED_CHUNK_TYPE",
      "type": "int"
     },
     {
      "name": "UNCOMPRESSED_CHUNK_TYPE",
      "type": "int"
     },
     {
      "name": "PADDING_CHUNK_TYPE",
      "type": "int"
     },
     {
      "name": "MIN_UNSKIPPABLE_TYPE",
      "type": "int"
     },
     {
      "name": "MAX_UNSKIPPABLE_TYPE",
      "type": "int"
     },
     {
      "name": "MAX_SKIPPABLE_TYPE",
      "type": "int"
     },
     {
      "name": "SZ_SIGNATURE",
      "type": "byte"
     },
     {
      "name": "in",
      "type": "PushbackInputStream"
     },
     {
      "name": "currentCompressedChunk",
      "type": "SnappyCompressorInputStream"
     },
     {
      "name": "oneByte",
      "type": "byte"
     },
     {
      "name": "endReached",
      "type": "boolean"
     },
     {
      "name": "inUncompressedChunk",
      "type": "boolean"
     },
     {
      "name": "uncompressedBytesRemaining",
      "type": "int"
     },
     {
      "name": "expectedChecksum",
      "type": "long"
     },
     {
      "name": "checksum",
      "type": "PureJavaCrc32C"
     }
    ],
    "name": "FramedSnappyCompressorInputStream"
   }
  ]
 },
 {
  "filename": "SnappyCompressorInputStream.java",
  "package_name": "org.apache.commons.compress.compressors.snappy",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "read",
      "type": "int"
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [],
      "name": "available",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "fill",
      "type": null
     },
     {
      "params": [],
      "name": "slideBuffer",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "int"
       }
      ],
      "name": "readLiteralLength",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "expandLiteral",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "off",
        "type": "long"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "expandCopy",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "readOneByte",
      "type": "int"
     },
     {
      "params": [],
      "name": "readSize",
      "type": "long"
     },
     {
      "params": [],
      "name": "getSize",
      "type": "int"
     }
    ],
    "fields": [
     {
      "name": "TAG_MASK",
      "type": "int"
     },
     {
      "name": "DEFAULT_BLOCK_SIZE",
      "type": "int"
     },
     {
      "name": "decompressBuf",
      "type": "byte"
     },
     {
      "name": "writeIndex",
      "type": "int"
     },
     {
      "name": "readIndex",
      "type": "int"
     },
     {
      "name": "blockSize",
      "type": "int"
     },
     {
      "name": "in",
      "type": "InputStream"
     },
     {
      "name": "size",
      "type": "int"
     },
     {
      "name": "uncompressedBytesRemaining",
      "type": "int"
     },
     {
      "name": "oneByte",
      "type": "byte"
     },
     {
      "name": "endReached",
      "type": "boolean"
     }
    ],
    "name": "SnappyCompressorInputStream"
   }
  ]
 },
 {
  "filename": "PureJavaCrc32C.java",
  "package_name": "org.apache.commons.compress.compressors.snappy",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getValue",
      "type": "long"
     },
     {
      "params": [],
      "name": "reset",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "update",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "int"
       }
      ],
      "name": "update",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "crc",
      "type": "int"
     },
     {
      "name": "T8_0_start",
      "type": "int"
     },
     {
      "name": "T8_1_start",
      "type": "int"
     },
     {
      "name": "T8_2_start",
      "type": "int"
     },
     {
      "name": "T8_3_start",
      "type": "int"
     },
     {
      "name": "T8_4_start",
      "type": "int"
     },
     {
      "name": "T8_5_start",
      "type": "int"
     },
     {
      "name": "T8_6_start",
      "type": "int"
     },
     {
      "name": "T8_7_start",
      "type": "int"
     },
     {
      "name": "T",
      "type": "int"
     }
    ],
    "name": "PureJavaCrc32C"
   }
  ]
 },
 {
  "filename": "ZCompressorInputStream.java",
  "package_name": "org.apache.commons.compress.compressors.z",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "clearEntries",
      "type": null
     },
     {
      "params": [],
      "name": "readNextCode",
      "type": "int"
     },
     {
      "params": [],
      "name": "reAlignReading",
      "type": null
     },
     {
      "params": [
       {
        "name": "previousCode",
        "type": "int"
       },
       {
        "name": "character",
        "type": "byte"
       }
      ],
      "name": "addEntry",
      "type": "int"
     },
     {
      "params": [],
      "name": "decompressNextSymbol",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "signature",
        "type": "byte"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matches",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "MAGIC_1",
      "type": "int"
     },
     {
      "name": "MAGIC_2",
      "type": "int"
     },
     {
      "name": "BLOCK_MODE_MASK",
      "type": "int"
     },
     {
      "name": "MAX_CODE_SIZE_MASK",
      "type": "int"
     },
     {
      "name": "blockMode",
      "type": "boolean"
     },
     {
      "name": "maxCodeSize",
      "type": "int"
     },
     {
      "name": "totalCodesRead",
      "type": "long"
     }
    ],
    "name": "ZCompressorInputStream"
   }
  ]
 },
 {
  "filename": "LZWInputStream.java",
  "package_name": "org.apache.commons.compress.compressors.lzw",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [],
      "name": "decompressNextSymbol",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "previousCode",
        "type": "int"
       },
       {
        "name": "character",
        "type": "byte"
       }
      ],
      "name": "addEntry",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "codeSize",
        "type": "int"
       }
      ],
      "name": "setClearCode",
      "type": null
     },
     {
      "params": [
       {
        "name": "maxCodeSize",
        "type": "int"
       }
      ],
      "name": "initializeTables",
      "type": null
     },
     {
      "params": [],
      "name": "readNextCode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "previousCode",
        "type": "int"
       },
       {
        "name": "character",
        "type": "byte"
       },
       {
        "name": "maxTableSize",
        "type": "int"
       }
      ],
      "name": "addEntry",
      "type": "int"
     },
     {
      "params": [],
      "name": "addRepeatOfPreviousCode",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "code",
        "type": "int"
       },
       {
        "name": "addedUnfinishedEntry",
        "type": "boolean"
       }
      ],
      "name": "expandCodeToOutputStack",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "readFromStack",
      "type": "int"
     },
     {
      "params": [],
      "name": "getCodeSize",
      "type": "int"
     },
     {
      "params": [],
      "name": "resetCodeSize",
      "type": null
     },
     {
      "params": [
       {
        "name": "cs",
        "type": "int"
       }
      ],
      "name": "setCodeSize",
      "type": null
     },
     {
      "params": [],
      "name": "incrementCodeSize",
      "type": null
     },
     {
      "params": [],
      "name": "resetPreviousCode",
      "type": null
     },
     {
      "params": [
       {
        "name": "offset",
        "type": "int"
       }
      ],
      "name": "getPrefix",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "value",
        "type": "int"
       }
      ],
      "name": "setPrefix",
      "type": null
     },
     {
      "params": [],
      "name": "getPrefixesLength",
      "type": "int"
     },
     {
      "params": [],
      "name": "getClearCode",
      "type": "int"
     },
     {
      "params": [],
      "name": "getTableSize",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "newSize",
        "type": "int"
       }
      ],
      "name": "setTableSize",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "DEFAULT_CODE_SIZE",
      "type": "int"
     },
     {
      "name": "UNUSED_PREFIX",
      "type": "int"
     },
     {
      "name": "oneByte",
      "type": "byte"
     },
     {
      "name": "in",
      "type": "BitInputStream"
     },
     {
      "name": "clearCode",
      "type": "int"
     },
     {
      "name": "codeSize",
      "type": "int"
     },
     {
      "name": "previousCodeFirstChar",
      "type": "byte"
     },
     {
      "name": "previousCode",
      "type": "int"
     },
     {
      "name": "tableSize",
      "type": "int"
     },
     {
      "name": "prefixes",
      "type": "int"
     },
     {
      "name": "characters",
      "type": "byte"
     },
     {
      "name": "outputStack",
      "type": "byte"
     },
     {
      "name": "outputStackLocation",
      "type": "int"
     }
    ],
    "name": "LZWInputStream"
   }
  ]
 },
 {
  "filename": "LZMAUtils.java",
  "package_name": "org.apache.commons.compress.compressors.lzma",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "signature",
        "type": "byte"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matches",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "isLZMACompressionAvailable",
      "type": "boolean"
     },
     {
      "params": [],
      "name": "internalIsLZMACompressionAvailable",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "isCompressedFilename",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "getUncompressedFilename",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "filename",
        "type": "String"
       }
      ],
      "name": "getCompressedFilename",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "doCache",
        "type": "boolean"
       }
      ],
      "name": "setCacheLZMAAvailablity",
      "type": null
     },
     {
      "params": [],
      "name": "getCachedLZMAAvailability",
      "type": "CachedAvailability"
     }
    ],
    "fields": [
     {
      "name": "fileNameUtil",
      "type": "FileNameUtil"
     },
     {
      "name": "HEADER_MAGIC",
      "type": "byte"
     },
     {
      "name": "cachedLZMAAvailability",
      "type": "CachedAvailability"
     }
    ],
    "name": "LZMAUtils"
   }
  ]
 },
 {
  "filename": "LZMACompressorInputStream.java",
  "package_name": "org.apache.commons.compress.compressors.lzma",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "long"
       }
      ],
      "name": "skip",
      "type": "long"
     },
     {
      "params": [],
      "name": "available",
      "type": "int"
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [
       {
        "name": "signature",
        "type": "byte"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matches",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "in",
      "type": "InputStream"
     }
    ],
    "name": "LZMACompressorInputStream"
   }
  ]
 },
 {
  "filename": "Pack200CompressorInputStream.java",
  "package_name": "org.apache.commons.compress.compressors.pack200",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "count",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [],
      "name": "available",
      "type": "int"
     },
     {
      "params": [],
      "name": "markSupported",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "limit",
        "type": "int"
       }
      ],
      "name": "mark",
      "type": null
     },
     {
      "params": [],
      "name": "reset",
      "type": null
     },
     {
      "params": [
       {
        "name": "count",
        "type": "long"
       }
      ],
      "name": "skip",
      "type": "long"
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [
       {
        "name": "signature",
        "type": "byte"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matches",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "originalInput",
      "type": "InputStream"
     },
     {
      "name": "streamBridge",
      "type": "StreamBridge"
     },
     {
      "name": "CAFE_DOOD",
      "type": "byte"
     },
     {
      "name": "SIG_LENGTH",
      "type": "int"
     }
    ],
    "name": "Pack200CompressorInputStream"
   }
  ]
 },
 {
  "filename": "StreamBridge.java",
  "package_name": "org.apache.commons.compress.compressors.pack200",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getInput",
      "type": "InputStream"
     },
     {
      "params": [],
      "name": "getInputView",
      "type": "InputStream"
     },
     {
      "params": [],
      "name": "stop",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "input",
      "type": "InputStream"
     },
     {
      "name": "INPUT_LOCK",
      "type": "Object"
     }
    ],
    "name": "StreamBridge"
   }
  ]
 },
 {
  "filename": "InMemoryCachingStreamBridge.java",
  "package_name": "org.apache.commons.compress.compressors.pack200",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getInputView",
      "type": "InputStream"
     }
    ],
    "fields": [],
    "name": "InMemoryCachingStreamBridge"
   }
  ]
 },
 {
  "filename": "Pack200Utils.java",
  "package_name": "org.apache.commons.compress.compressors.pack200",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "jar",
        "type": "File"
       }
      ],
      "name": "normalize",
      "type": null
     },
     {
      "params": [
       {
        "name": "jar",
        "type": "File"
       },
       {
        "name": "props",
        "type": "Map"
       }
      ],
      "name": "normalize",
      "type": null
     },
     {
      "params": [
       {
        "name": "from",
        "type": "File"
       },
       {
        "name": "to",
        "type": "File"
       }
      ],
      "name": "normalize",
      "type": null
     },
     {
      "params": [
       {
        "name": "from",
        "type": "File"
       },
       {
        "name": "to",
        "type": "File"
       },
       {
        "name": "props",
        "type": "Map"
       }
      ],
      "name": "normalize",
      "type": null
     }
    ],
    "fields": [],
    "name": "Pack200Utils"
   }
  ]
 },
 {
  "filename": "Pack200CompressorOutputStream.java",
  "package_name": "org.apache.commons.compress.compressors.pack200",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "b",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "from",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [],
      "name": "finish",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "finished",
      "type": "boolean"
     },
     {
      "name": "originalOutput",
      "type": "OutputStream"
     },
     {
      "name": "streamBridge",
      "type": "StreamBridge"
     },
     {
      "name": "properties",
      "type": "Map"
     }
    ],
    "name": "Pack200CompressorOutputStream"
   }
  ]
 },
 {
  "filename": "Pack200Strategy.java",
  "package_name": "org.apache.commons.compress.compressors.pack200",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "newStreamBridge",
      "type": "StreamBridge"
     }
    ],
    "fields": [],
    "name": "Pack200Strategy"
   }
  ]
 },
 {
  "filename": "TempFileCachingStreamBridge.java",
  "package_name": "org.apache.commons.compress.compressors.pack200",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getInputView",
      "type": "InputStream"
     }
    ],
    "fields": [
     {
      "name": "f",
      "type": "File"
     }
    ],
    "name": "TempFileCachingStreamBridge"
   }
  ]
 },
 {
  "filename": "DeflateCompressorOutputStream.java",
  "package_name": "org.apache.commons.compress.compressors.deflate",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "b",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [],
      "name": "flush",
      "type": null
     },
     {
      "params": [],
      "name": "finish",
      "type": null
     },
     {
      "params": [],
      "name": "close",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "out",
      "type": "DeflaterOutputStream"
     }
    ],
    "name": "DeflateCompressorOutputStream"
   }
  ]
 },
 {
  "filename": "DeflateParameters.java",
  "package_name": "org.apache.commons.compress.compressors.deflate",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "withZlibHeader",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "zlibHeader",
        "type": "boolean"
       }
      ],
      "name": "setWithZlibHeader",
      "type": null
     },
     {
      "params": [],
      "name": "getCompressionLevel",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "compressionLevel",
        "type": "int"
       }
      ],
      "name": "setCompressionLevel",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "zlibHeader",
      "type": "boolean"
     },
     {
      "name": "compressionLevel",
      "type": "int"
     }
    ],
    "name": "DeflateParameters"
   }
  ]
 },
 {
  "filename": "DeflateCompressorInputStream.java",
  "package_name": "org.apache.commons.compress.compressors.deflate",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "buf",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "long"
       }
      ],
      "name": "skip",
      "type": "long"
     },
     {
      "params": [],
      "name": "available",
      "type": "int"
     },
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [
       {
        "name": "signature",
        "type": "byte"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matches",
      "type": "boolean"
     }
    ],
    "fields": [
     {
      "name": "MAGIC_1",
      "type": "int"
     },
     {
      "name": "MAGIC_2a",
      "type": "int"
     },
     {
      "name": "MAGIC_2b",
      "type": "int"
     },
     {
      "name": "MAGIC_2c",
      "type": "int"
     },
     {
      "name": "MAGIC_2d",
      "type": "int"
     },
     {
      "name": "in",
      "type": "InputStream"
     }
    ],
    "name": "DeflateCompressorInputStream"
   }
  ]
 },
 {
  "filename": "IOUtils.java",
  "package_name": "org.apache.commons.compress.utils",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "input",
        "type": "InputStream"
       },
       {
        "name": "output",
        "type": "OutputStream"
       }
      ],
      "name": "copy",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "input",
        "type": "InputStream"
       },
       {
        "name": "output",
        "type": "OutputStream"
       },
       {
        "name": "buffersize",
        "type": "int"
       }
      ],
      "name": "copy",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "input",
        "type": "InputStream"
       },
       {
        "name": "numToSkip",
        "type": "long"
       }
      ],
      "name": "skip",
      "type": "long"
     },
     {
      "params": [
       {
        "name": "input",
        "type": "InputStream"
       },
       {
        "name": "b",
        "type": "byte"
       }
      ],
      "name": "readFully",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "input",
        "type": "InputStream"
       },
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "readFully",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "input",
        "type": "InputStream"
       }
      ],
      "name": "toByteArray",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "c",
        "type": "Closeable"
       }
      ],
      "name": "closeQuietly",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "COPY_BUF_SIZE",
      "type": "int"
     },
     {
      "name": "SKIP_BUF_SIZE",
      "type": "int"
     },
     {
      "name": "SKIP_BUF",
      "type": "byte"
     }
    ],
    "name": "IOUtils"
   }
  ]
 },
 {
  "filename": "BitInputStream.java",
  "package_name": "org.apache.commons.compress.utils",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "close",
      "type": null
     },
     {
      "params": [],
      "name": "clearBitCache",
      "type": null
     },
     {
      "params": [
       {
        "name": "count",
        "type": "int"
       }
      ],
      "name": "readBits",
      "type": "long"
     }
    ],
    "fields": [
     {
      "name": "MAXIMUM_CACHE_SIZE",
      "type": "int"
     },
     {
      "name": "MASKS",
      "type": "long"
     },
     {
      "name": "in",
      "type": "InputStream"
     },
     {
      "name": "byteOrder",
      "type": "ByteOrder"
     },
     {
      "name": "bitsCached",
      "type": "long"
     },
     {
      "name": "bitsCachedSize",
      "type": "int"
     }
    ],
    "name": "BitInputStream"
   }
  ]
 },
 {
  "filename": "CharsetNames.java",
  "package_name": "org.apache.commons.compress.utils",
  "classes": [
   {
    "methods": [],
    "fields": [
     {
      "name": "ISO_8859_1",
      "type": "String"
     },
     {
      "name": "US_ASCII",
      "type": "String"
     },
     {
      "name": "UTF_16",
      "type": "String"
     },
     {
      "name": "UTF_16BE",
      "type": "String"
     },
     {
      "name": "UTF_16LE",
      "type": "String"
     },
     {
      "name": "UTF_8",
      "type": "String"
     }
    ],
    "name": "CharsetNames"
   }
  ]
 },
 {
  "filename": "ArchiveUtils.java",
  "package_name": "org.apache.commons.compress.utils",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "entry",
        "type": "ArchiveEntry"
       }
      ],
      "name": "toString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "expected",
        "type": "String"
       },
       {
        "name": "buffer",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "matchAsciiBuffer",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "expected",
        "type": "String"
       },
       {
        "name": "buffer",
        "type": "byte"
       }
      ],
      "name": "matchAsciiBuffer",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "inputString",
        "type": "String"
       }
      ],
      "name": "toAsciiBytes",
      "type": "byte"
     },
     {
      "params": [
       {
        "name": "inputBytes",
        "type": "byte"
       }
      ],
      "name": "toAsciiString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "inputBytes",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "toAsciiString",
      "type": "String"
     },
     {
      "params": [
       {
        "name": "buffer1",
        "type": "byte"
       },
       {
        "name": "offset1",
        "type": "int"
       },
       {
        "name": "length1",
        "type": "int"
       },
       {
        "name": "buffer2",
        "type": "byte"
       },
       {
        "name": "offset2",
        "type": "int"
       },
       {
        "name": "length2",
        "type": "int"
       },
       {
        "name": "ignoreTrailingNulls",
        "type": "boolean"
       }
      ],
      "name": "isEqual",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "buffer1",
        "type": "byte"
       },
       {
        "name": "offset1",
        "type": "int"
       },
       {
        "name": "length1",
        "type": "int"
       },
       {
        "name": "buffer2",
        "type": "byte"
       },
       {
        "name": "offset2",
        "type": "int"
       },
       {
        "name": "length2",
        "type": "int"
       }
      ],
      "name": "isEqual",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "buffer1",
        "type": "byte"
       },
       {
        "name": "buffer2",
        "type": "byte"
       }
      ],
      "name": "isEqual",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "buffer1",
        "type": "byte"
       },
       {
        "name": "buffer2",
        "type": "byte"
       },
       {
        "name": "ignoreTrailingNulls",
        "type": "boolean"
       }
      ],
      "name": "isEqual",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "buffer1",
        "type": "byte"
       },
       {
        "name": "offset1",
        "type": "int"
       },
       {
        "name": "length1",
        "type": "int"
       },
       {
        "name": "buffer2",
        "type": "byte"
       },
       {
        "name": "offset2",
        "type": "int"
       },
       {
        "name": "length2",
        "type": "int"
       }
      ],
      "name": "isEqualWithNull",
      "type": "boolean"
     },
     {
      "params": [
       {
        "name": "a",
        "type": "byte"
       },
       {
        "name": "size",
        "type": "int"
       }
      ],
      "name": "isArrayZero",
      "type": "boolean"
     }
    ],
    "fields": [],
    "name": "ArchiveUtils"
   }
  ]
 },
 {
  "filename": "CRC32VerifyingInputStream.java",
  "package_name": "org.apache.commons.compress.utils",
  "classes": [
   {
    "methods": [],
    "fields": [],
    "name": "CRC32VerifyingInputStream"
   }
  ]
 },
 {
  "filename": "CountingInputStream.java",
  "package_name": "org.apache.commons.compress.utils",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "read",
        "type": "long"
       }
      ],
      "name": "count",
      "type": null
     },
     {
      "params": [],
      "name": "getBytesRead",
      "type": "long"
     }
    ],
    "fields": [
     {
      "name": "bytesRead",
      "type": "long"
     }
    ],
    "name": "CountingInputStream"
   }
  ]
 },
 {
  "filename": "Charsets.java",
  "package_name": "org.apache.commons.compress.utils",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "charset",
        "type": "Charset"
       }
      ],
      "name": "toCharset",
      "type": "Charset"
     },
     {
      "params": [
       {
        "name": "charset",
        "type": "String"
       }
      ],
      "name": "toCharset",
      "type": "Charset"
     }
    ],
    "fields": [
     {
      "name": "ISO_8859_1",
      "type": "Charset"
     },
     {
      "name": "US_ASCII",
      "type": "Charset"
     },
     {
      "name": "UTF_16",
      "type": "Charset"
     },
     {
      "name": "UTF_16BE",
      "type": "Charset"
     },
     {
      "name": "UTF_16LE",
      "type": "Charset"
     },
     {
      "name": "UTF_8",
      "type": "Charset"
     }
    ],
    "name": "Charsets"
   }
  ]
 },
 {
  "filename": "BoundedInputStream.java",
  "package_name": "org.apache.commons.compress.utils",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [],
      "name": "close",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "in",
      "type": "InputStream"
     },
     {
      "name": "bytesRemaining",
      "type": "long"
     }
    ],
    "name": "BoundedInputStream"
   }
  ]
 },
 {
  "filename": "ChecksumVerifyingInputStream.java",
  "package_name": "org.apache.commons.compress.utils",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "read",
      "type": "int"
     },
     {
      "params": [
       {
        "name": "n",
        "type": "long"
       }
      ],
      "name": "skip",
      "type": "long"
     },
     {
      "params": [],
      "name": "close",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "in",
      "type": "InputStream"
     },
     {
      "name": "bytesRemaining",
      "type": "long"
     },
     {
      "name": "expectedChecksum",
      "type": "long"
     },
     {
      "name": "checksum",
      "type": "Checksum"
     }
    ],
    "name": "ChecksumVerifyingInputStream"
   }
  ]
 },
 {
  "filename": "CountingOutputStream.java",
  "package_name": "org.apache.commons.compress.utils",
  "classes": [
   {
    "methods": [
     {
      "params": [
       {
        "name": "b",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [
       {
        "name": "b",
        "type": "byte"
       },
       {
        "name": "off",
        "type": "int"
       },
       {
        "name": "len",
        "type": "int"
       }
      ],
      "name": "write",
      "type": null
     },
     {
      "params": [
       {
        "name": "written",
        "type": "long"
       }
      ],
      "name": "count",
      "type": null
     },
     {
      "params": [],
      "name": "getBytesWritten",
      "type": "long"
     }
    ],
    "fields": [
     {
      "name": "bytesWritten",
      "type": "long"
     }
    ],
    "name": "CountingOutputStream"
   }
  ]
 },
 {
  "filename": "ScatterGatherBackingStoreSupplier.java",
  "package_name": "org.apache.commons.compress.parallel",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "get",
      "type": "ScatterGatherBackingStore"
     }
    ],
    "fields": [],
    "name": "ScatterGatherBackingStoreSupplier"
   }
  ]
 },
 {
  "filename": "FileBasedScatterGatherBackingStore.java",
  "package_name": "org.apache.commons.compress.parallel",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getInputStream",
      "type": "InputStream"
     },
     {
      "params": [],
      "name": "closeForWriting",
      "type": null
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "writeOut",
      "type": null
     },
     {
      "params": [],
      "name": "close",
      "type": null
     }
    ],
    "fields": [
     {
      "name": "target",
      "type": "File"
     },
     {
      "name": "os",
      "type": "FileOutputStream"
     },
     {
      "name": "closed",
      "type": "boolean"
     }
    ],
    "name": "FileBasedScatterGatherBackingStore"
   }
  ]
 },
 {
  "filename": "ScatterGatherBackingStore.java",
  "package_name": "org.apache.commons.compress.parallel",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "getInputStream",
      "type": "InputStream"
     },
     {
      "params": [
       {
        "name": "data",
        "type": "byte"
       },
       {
        "name": "offset",
        "type": "int"
       },
       {
        "name": "length",
        "type": "int"
       }
      ],
      "name": "writeOut",
      "type": null
     },
     {
      "params": [],
      "name": "closeForWriting",
      "type": null
     }
    ],
    "fields": [],
    "name": "ScatterGatherBackingStore"
   }
  ]
 },
 {
  "filename": "InputStreamSupplier.java",
  "package_name": "org.apache.commons.compress.parallel",
  "classes": [
   {
    "methods": [
     {
      "params": [],
      "name": "get",
      "type": "InputStream"
     }
    ],
    "fields": [],
    "name": "InputStreamSupplier"
   }
  ]
 }
]